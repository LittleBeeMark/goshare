// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcenter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dcenter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dcenter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "market_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dcenter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dcenter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dcenter_2eproto;
namespace pb {
class CacheSummary;
class CacheSummaryDefaultTypeInternal;
extern CacheSummaryDefaultTypeInternal _CacheSummary_default_instance_;
class ReqCombineSubscribe;
class ReqCombineSubscribeDefaultTypeInternal;
extern ReqCombineSubscribeDefaultTypeInternal _ReqCombineSubscribe_default_instance_;
class ReqGetDCenterInfo;
class ReqGetDCenterInfoDefaultTypeInternal;
extern ReqGetDCenterInfoDefaultTypeInternal _ReqGetDCenterInfo_default_instance_;
class ReqGetKlineSeries;
class ReqGetKlineSeriesDefaultTypeInternal;
extern ReqGetKlineSeriesDefaultTypeInternal _ReqGetKlineSeries_default_instance_;
class ReqGetTickSeries;
class ReqGetTickSeriesDefaultTypeInternal;
extern ReqGetTickSeriesDefaultTypeInternal _ReqGetTickSeries_default_instance_;
class ReqGetTradingInstrument;
class ReqGetTradingInstrumentDefaultTypeInternal;
extern ReqGetTradingInstrumentDefaultTypeInternal _ReqGetTradingInstrument_default_instance_;
class ReqGetTradingInstrumentList;
class ReqGetTradingInstrumentListDefaultTypeInternal;
extern ReqGetTradingInstrumentListDefaultTypeInternal _ReqGetTradingInstrumentList_default_instance_;
class ReqSaveKline;
class ReqSaveKlineDefaultTypeInternal;
extern ReqSaveKlineDefaultTypeInternal _ReqSaveKline_default_instance_;
class ReqSetTradingInstrument;
class ReqSetTradingInstrumentDefaultTypeInternal;
extern ReqSetTradingInstrumentDefaultTypeInternal _ReqSetTradingInstrument_default_instance_;
class ReqSubscribe;
class ReqSubscribeDefaultTypeInternal;
extern ReqSubscribeDefaultTypeInternal _ReqSubscribe_default_instance_;
class ReqUnSubscribe;
class ReqUnSubscribeDefaultTypeInternal;
extern ReqUnSubscribeDefaultTypeInternal _ReqUnSubscribe_default_instance_;
class RspCombineSubscribe;
class RspCombineSubscribeDefaultTypeInternal;
extern RspCombineSubscribeDefaultTypeInternal _RspCombineSubscribe_default_instance_;
class RspGetDCenterInfo;
class RspGetDCenterInfoDefaultTypeInternal;
extern RspGetDCenterInfoDefaultTypeInternal _RspGetDCenterInfo_default_instance_;
class RspGetKlineSeries;
class RspGetKlineSeriesDefaultTypeInternal;
extern RspGetKlineSeriesDefaultTypeInternal _RspGetKlineSeries_default_instance_;
class RspGetTickSeries;
class RspGetTickSeriesDefaultTypeInternal;
extern RspGetTickSeriesDefaultTypeInternal _RspGetTickSeries_default_instance_;
class RspGetTradingInstrument;
class RspGetTradingInstrumentDefaultTypeInternal;
extern RspGetTradingInstrumentDefaultTypeInternal _RspGetTradingInstrument_default_instance_;
class RspGetTradingInstrumentList;
class RspGetTradingInstrumentListDefaultTypeInternal;
extern RspGetTradingInstrumentListDefaultTypeInternal _RspGetTradingInstrumentList_default_instance_;
class RspSaveKline;
class RspSaveKlineDefaultTypeInternal;
extern RspSaveKlineDefaultTypeInternal _RspSaveKline_default_instance_;
class RspSetTradingInstrument;
class RspSetTradingInstrumentDefaultTypeInternal;
extern RspSetTradingInstrumentDefaultTypeInternal _RspSetTradingInstrument_default_instance_;
class RspSubscribe;
class RspSubscribeDefaultTypeInternal;
extern RspSubscribeDefaultTypeInternal _RspSubscribe_default_instance_;
class RspUnSubscribe;
class RspUnSubscribeDefaultTypeInternal;
extern RspUnSubscribeDefaultTypeInternal _RspUnSubscribe_default_instance_;
class SymbolCacheSummary;
class SymbolCacheSummaryDefaultTypeInternal;
extern SymbolCacheSummaryDefaultTypeInternal _SymbolCacheSummary_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::CacheSummary* Arena::CreateMaybeMessage<::pb::CacheSummary>(Arena*);
template<> ::pb::ReqCombineSubscribe* Arena::CreateMaybeMessage<::pb::ReqCombineSubscribe>(Arena*);
template<> ::pb::ReqGetDCenterInfo* Arena::CreateMaybeMessage<::pb::ReqGetDCenterInfo>(Arena*);
template<> ::pb::ReqGetKlineSeries* Arena::CreateMaybeMessage<::pb::ReqGetKlineSeries>(Arena*);
template<> ::pb::ReqGetTickSeries* Arena::CreateMaybeMessage<::pb::ReqGetTickSeries>(Arena*);
template<> ::pb::ReqGetTradingInstrument* Arena::CreateMaybeMessage<::pb::ReqGetTradingInstrument>(Arena*);
template<> ::pb::ReqGetTradingInstrumentList* Arena::CreateMaybeMessage<::pb::ReqGetTradingInstrumentList>(Arena*);
template<> ::pb::ReqSaveKline* Arena::CreateMaybeMessage<::pb::ReqSaveKline>(Arena*);
template<> ::pb::ReqSetTradingInstrument* Arena::CreateMaybeMessage<::pb::ReqSetTradingInstrument>(Arena*);
template<> ::pb::ReqSubscribe* Arena::CreateMaybeMessage<::pb::ReqSubscribe>(Arena*);
template<> ::pb::ReqUnSubscribe* Arena::CreateMaybeMessage<::pb::ReqUnSubscribe>(Arena*);
template<> ::pb::RspCombineSubscribe* Arena::CreateMaybeMessage<::pb::RspCombineSubscribe>(Arena*);
template<> ::pb::RspGetDCenterInfo* Arena::CreateMaybeMessage<::pb::RspGetDCenterInfo>(Arena*);
template<> ::pb::RspGetKlineSeries* Arena::CreateMaybeMessage<::pb::RspGetKlineSeries>(Arena*);
template<> ::pb::RspGetTickSeries* Arena::CreateMaybeMessage<::pb::RspGetTickSeries>(Arena*);
template<> ::pb::RspGetTradingInstrument* Arena::CreateMaybeMessage<::pb::RspGetTradingInstrument>(Arena*);
template<> ::pb::RspGetTradingInstrumentList* Arena::CreateMaybeMessage<::pb::RspGetTradingInstrumentList>(Arena*);
template<> ::pb::RspSaveKline* Arena::CreateMaybeMessage<::pb::RspSaveKline>(Arena*);
template<> ::pb::RspSetTradingInstrument* Arena::CreateMaybeMessage<::pb::RspSetTradingInstrument>(Arena*);
template<> ::pb::RspSubscribe* Arena::CreateMaybeMessage<::pb::RspSubscribe>(Arena*);
template<> ::pb::RspUnSubscribe* Arena::CreateMaybeMessage<::pb::RspUnSubscribe>(Arena*);
template<> ::pb::SymbolCacheSummary* Arena::CreateMaybeMessage<::pb::SymbolCacheSummary>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class ReqGetTradingInstrumentList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqGetTradingInstrumentList) */ {
 public:
  ReqGetTradingInstrumentList();
  virtual ~ReqGetTradingInstrumentList();

  ReqGetTradingInstrumentList(const ReqGetTradingInstrumentList& from);
  ReqGetTradingInstrumentList(ReqGetTradingInstrumentList&& from) noexcept
    : ReqGetTradingInstrumentList() {
    *this = ::std::move(from);
  }

  inline ReqGetTradingInstrumentList& operator=(const ReqGetTradingInstrumentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetTradingInstrumentList& operator=(ReqGetTradingInstrumentList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqGetTradingInstrumentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGetTradingInstrumentList* internal_default_instance() {
    return reinterpret_cast<const ReqGetTradingInstrumentList*>(
               &_ReqGetTradingInstrumentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReqGetTradingInstrumentList* other);
  friend void swap(ReqGetTradingInstrumentList& a, ReqGetTradingInstrumentList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGetTradingInstrumentList* New() const final {
    return CreateMaybeMessage<ReqGetTradingInstrumentList>(nullptr);
  }

  ReqGetTradingInstrumentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetTradingInstrumentList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetTradingInstrumentList& from);
  void MergeFrom(const ReqGetTradingInstrumentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetTradingInstrumentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqGetTradingInstrumentList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.ExchangeType exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  ::pb::ExchangeType exchange() const;
  void set_exchange(::pb::ExchangeType value);

  // @@protoc_insertion_point(class_scope:pb.ReqGetTradingInstrumentList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int exchange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class RspGetTradingInstrumentList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspGetTradingInstrumentList) */ {
 public:
  RspGetTradingInstrumentList();
  virtual ~RspGetTradingInstrumentList();

  RspGetTradingInstrumentList(const RspGetTradingInstrumentList& from);
  RspGetTradingInstrumentList(RspGetTradingInstrumentList&& from) noexcept
    : RspGetTradingInstrumentList() {
    *this = ::std::move(from);
  }

  inline RspGetTradingInstrumentList& operator=(const RspGetTradingInstrumentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspGetTradingInstrumentList& operator=(RspGetTradingInstrumentList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspGetTradingInstrumentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspGetTradingInstrumentList* internal_default_instance() {
    return reinterpret_cast<const RspGetTradingInstrumentList*>(
               &_RspGetTradingInstrumentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RspGetTradingInstrumentList* other);
  friend void swap(RspGetTradingInstrumentList& a, RspGetTradingInstrumentList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspGetTradingInstrumentList* New() const final {
    return CreateMaybeMessage<RspGetTradingInstrumentList>(nullptr);
  }

  RspGetTradingInstrumentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspGetTradingInstrumentList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspGetTradingInstrumentList& from);
  void MergeFrom(const RspGetTradingInstrumentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspGetTradingInstrumentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspGetTradingInstrumentList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TradingInstrument list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::TradingInstrument* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingInstrument >*
      mutable_list();
  const ::pb::TradingInstrument& list(int index) const;
  ::pb::TradingInstrument* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingInstrument >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.RspGetTradingInstrumentList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingInstrument > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class ReqGetTradingInstrument :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqGetTradingInstrument) */ {
 public:
  ReqGetTradingInstrument();
  virtual ~ReqGetTradingInstrument();

  ReqGetTradingInstrument(const ReqGetTradingInstrument& from);
  ReqGetTradingInstrument(ReqGetTradingInstrument&& from) noexcept
    : ReqGetTradingInstrument() {
    *this = ::std::move(from);
  }

  inline ReqGetTradingInstrument& operator=(const ReqGetTradingInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetTradingInstrument& operator=(ReqGetTradingInstrument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqGetTradingInstrument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGetTradingInstrument* internal_default_instance() {
    return reinterpret_cast<const ReqGetTradingInstrument*>(
               &_ReqGetTradingInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReqGetTradingInstrument* other);
  friend void swap(ReqGetTradingInstrument& a, ReqGetTradingInstrument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGetTradingInstrument* New() const final {
    return CreateMaybeMessage<ReqGetTradingInstrument>(nullptr);
  }

  ReqGetTradingInstrument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetTradingInstrument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetTradingInstrument& from);
  void MergeFrom(const ReqGetTradingInstrument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetTradingInstrument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqGetTradingInstrument";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // @@protoc_insertion_point(class_scope:pb.ReqGetTradingInstrument)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Symbol* symbol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class RspGetTradingInstrument :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspGetTradingInstrument) */ {
 public:
  RspGetTradingInstrument();
  virtual ~RspGetTradingInstrument();

  RspGetTradingInstrument(const RspGetTradingInstrument& from);
  RspGetTradingInstrument(RspGetTradingInstrument&& from) noexcept
    : RspGetTradingInstrument() {
    *this = ::std::move(from);
  }

  inline RspGetTradingInstrument& operator=(const RspGetTradingInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspGetTradingInstrument& operator=(RspGetTradingInstrument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspGetTradingInstrument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspGetTradingInstrument* internal_default_instance() {
    return reinterpret_cast<const RspGetTradingInstrument*>(
               &_RspGetTradingInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RspGetTradingInstrument* other);
  friend void swap(RspGetTradingInstrument& a, RspGetTradingInstrument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspGetTradingInstrument* New() const final {
    return CreateMaybeMessage<RspGetTradingInstrument>(nullptr);
  }

  RspGetTradingInstrument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspGetTradingInstrument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspGetTradingInstrument& from);
  void MergeFrom(const RspGetTradingInstrument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspGetTradingInstrument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspGetTradingInstrument";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspGetTradingInstrument)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class ReqSetTradingInstrument :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqSetTradingInstrument) */ {
 public:
  ReqSetTradingInstrument();
  virtual ~ReqSetTradingInstrument();

  ReqSetTradingInstrument(const ReqSetTradingInstrument& from);
  ReqSetTradingInstrument(ReqSetTradingInstrument&& from) noexcept
    : ReqSetTradingInstrument() {
    *this = ::std::move(from);
  }

  inline ReqSetTradingInstrument& operator=(const ReqSetTradingInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSetTradingInstrument& operator=(ReqSetTradingInstrument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqSetTradingInstrument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSetTradingInstrument* internal_default_instance() {
    return reinterpret_cast<const ReqSetTradingInstrument*>(
               &_ReqSetTradingInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReqSetTradingInstrument* other);
  friend void swap(ReqSetTradingInstrument& a, ReqSetTradingInstrument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSetTradingInstrument* New() const final {
    return CreateMaybeMessage<ReqSetTradingInstrument>(nullptr);
  }

  ReqSetTradingInstrument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSetTradingInstrument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSetTradingInstrument& from);
  void MergeFrom(const ReqSetTradingInstrument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSetTradingInstrument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqSetTradingInstrument";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TradingInstrument list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::TradingInstrument* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingInstrument >*
      mutable_list();
  const ::pb::TradingInstrument& list(int index) const;
  ::pb::TradingInstrument* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingInstrument >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.ReqSetTradingInstrument)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingInstrument > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class RspSetTradingInstrument :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspSetTradingInstrument) */ {
 public:
  RspSetTradingInstrument();
  virtual ~RspSetTradingInstrument();

  RspSetTradingInstrument(const RspSetTradingInstrument& from);
  RspSetTradingInstrument(RspSetTradingInstrument&& from) noexcept
    : RspSetTradingInstrument() {
    *this = ::std::move(from);
  }

  inline RspSetTradingInstrument& operator=(const RspSetTradingInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspSetTradingInstrument& operator=(RspSetTradingInstrument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspSetTradingInstrument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspSetTradingInstrument* internal_default_instance() {
    return reinterpret_cast<const RspSetTradingInstrument*>(
               &_RspSetTradingInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RspSetTradingInstrument* other);
  friend void swap(RspSetTradingInstrument& a, RspSetTradingInstrument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspSetTradingInstrument* New() const final {
    return CreateMaybeMessage<RspSetTradingInstrument>(nullptr);
  }

  RspSetTradingInstrument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspSetTradingInstrument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspSetTradingInstrument& from);
  void MergeFrom(const RspSetTradingInstrument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspSetTradingInstrument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspSetTradingInstrument";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspSetTradingInstrument)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class ReqSubscribe :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqSubscribe) */ {
 public:
  ReqSubscribe();
  virtual ~ReqSubscribe();

  ReqSubscribe(const ReqSubscribe& from);
  ReqSubscribe(ReqSubscribe&& from) noexcept
    : ReqSubscribe() {
    *this = ::std::move(from);
  }

  inline ReqSubscribe& operator=(const ReqSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSubscribe& operator=(ReqSubscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqSubscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSubscribe* internal_default_instance() {
    return reinterpret_cast<const ReqSubscribe*>(
               &_ReqSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReqSubscribe* other);
  friend void swap(ReqSubscribe& a, ReqSubscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSubscribe* New() const final {
    return CreateMaybeMessage<ReqSubscribe>(nullptr);
  }

  ReqSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSubscribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSubscribe& from);
  void MergeFrom(const ReqSubscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSubscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqSubscribe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Symbol list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::Symbol* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Symbol >*
      mutable_list();
  const ::pb::Symbol& list(int index) const;
  ::pb::Symbol* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Symbol >&
      list() const;

  // bool binary_data = 2;
  void clear_binary_data();
  static const int kBinaryDataFieldNumber = 2;
  bool binary_data() const;
  void set_binary_data(bool value);

  // @@protoc_insertion_point(class_scope:pb.ReqSubscribe)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Symbol > list_;
  bool binary_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class RspSubscribe :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspSubscribe) */ {
 public:
  RspSubscribe();
  virtual ~RspSubscribe();

  RspSubscribe(const RspSubscribe& from);
  RspSubscribe(RspSubscribe&& from) noexcept
    : RspSubscribe() {
    *this = ::std::move(from);
  }

  inline RspSubscribe& operator=(const RspSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspSubscribe& operator=(RspSubscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspSubscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspSubscribe* internal_default_instance() {
    return reinterpret_cast<const RspSubscribe*>(
               &_RspSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RspSubscribe* other);
  friend void swap(RspSubscribe& a, RspSubscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspSubscribe* New() const final {
    return CreateMaybeMessage<RspSubscribe>(nullptr);
  }

  RspSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspSubscribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspSubscribe& from);
  void MergeFrom(const RspSubscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspSubscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspSubscribe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspSubscribe)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class ReqUnSubscribe :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqUnSubscribe) */ {
 public:
  ReqUnSubscribe();
  virtual ~ReqUnSubscribe();

  ReqUnSubscribe(const ReqUnSubscribe& from);
  ReqUnSubscribe(ReqUnSubscribe&& from) noexcept
    : ReqUnSubscribe() {
    *this = ::std::move(from);
  }

  inline ReqUnSubscribe& operator=(const ReqUnSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUnSubscribe& operator=(ReqUnSubscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqUnSubscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqUnSubscribe* internal_default_instance() {
    return reinterpret_cast<const ReqUnSubscribe*>(
               &_ReqUnSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReqUnSubscribe* other);
  friend void swap(ReqUnSubscribe& a, ReqUnSubscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqUnSubscribe* New() const final {
    return CreateMaybeMessage<ReqUnSubscribe>(nullptr);
  }

  ReqUnSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUnSubscribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUnSubscribe& from);
  void MergeFrom(const ReqUnSubscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUnSubscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqUnSubscribe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Symbol list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::Symbol* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Symbol >*
      mutable_list();
  const ::pb::Symbol& list(int index) const;
  ::pb::Symbol* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Symbol >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.ReqUnSubscribe)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Symbol > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class RspUnSubscribe :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspUnSubscribe) */ {
 public:
  RspUnSubscribe();
  virtual ~RspUnSubscribe();

  RspUnSubscribe(const RspUnSubscribe& from);
  RspUnSubscribe(RspUnSubscribe&& from) noexcept
    : RspUnSubscribe() {
    *this = ::std::move(from);
  }

  inline RspUnSubscribe& operator=(const RspUnSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspUnSubscribe& operator=(RspUnSubscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspUnSubscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspUnSubscribe* internal_default_instance() {
    return reinterpret_cast<const RspUnSubscribe*>(
               &_RspUnSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RspUnSubscribe* other);
  friend void swap(RspUnSubscribe& a, RspUnSubscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspUnSubscribe* New() const final {
    return CreateMaybeMessage<RspUnSubscribe>(nullptr);
  }

  RspUnSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspUnSubscribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspUnSubscribe& from);
  void MergeFrom(const RspUnSubscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspUnSubscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspUnSubscribe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspUnSubscribe)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class ReqSaveKline :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqSaveKline) */ {
 public:
  ReqSaveKline();
  virtual ~ReqSaveKline();

  ReqSaveKline(const ReqSaveKline& from);
  ReqSaveKline(ReqSaveKline&& from) noexcept
    : ReqSaveKline() {
    *this = ::std::move(from);
  }

  inline ReqSaveKline& operator=(const ReqSaveKline& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSaveKline& operator=(ReqSaveKline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqSaveKline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSaveKline* internal_default_instance() {
    return reinterpret_cast<const ReqSaveKline*>(
               &_ReqSaveKline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ReqSaveKline* other);
  friend void swap(ReqSaveKline& a, ReqSaveKline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSaveKline* New() const final {
    return CreateMaybeMessage<ReqSaveKline>(nullptr);
  }

  ReqSaveKline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSaveKline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSaveKline& from);
  void MergeFrom(const ReqSaveKline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSaveKline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqSaveKline";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.KlineSeries series = 1;
  bool has_series() const;
  void clear_series();
  static const int kSeriesFieldNumber = 1;
  const ::pb::KlineSeries& series() const;
  ::pb::KlineSeries* release_series();
  ::pb::KlineSeries* mutable_series();
  void set_allocated_series(::pb::KlineSeries* series);

  // @@protoc_insertion_point(class_scope:pb.ReqSaveKline)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::KlineSeries* series_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class RspSaveKline :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspSaveKline) */ {
 public:
  RspSaveKline();
  virtual ~RspSaveKline();

  RspSaveKline(const RspSaveKline& from);
  RspSaveKline(RspSaveKline&& from) noexcept
    : RspSaveKline() {
    *this = ::std::move(from);
  }

  inline RspSaveKline& operator=(const RspSaveKline& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspSaveKline& operator=(RspSaveKline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspSaveKline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspSaveKline* internal_default_instance() {
    return reinterpret_cast<const RspSaveKline*>(
               &_RspSaveKline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RspSaveKline* other);
  friend void swap(RspSaveKline& a, RspSaveKline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspSaveKline* New() const final {
    return CreateMaybeMessage<RspSaveKline>(nullptr);
  }

  RspSaveKline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspSaveKline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspSaveKline& from);
  void MergeFrom(const RspSaveKline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspSaveKline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspSaveKline";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspSaveKline)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class ReqCombineSubscribe :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqCombineSubscribe) */ {
 public:
  ReqCombineSubscribe();
  virtual ~ReqCombineSubscribe();

  ReqCombineSubscribe(const ReqCombineSubscribe& from);
  ReqCombineSubscribe(ReqCombineSubscribe&& from) noexcept
    : ReqCombineSubscribe() {
    *this = ::std::move(from);
  }

  inline ReqCombineSubscribe& operator=(const ReqCombineSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCombineSubscribe& operator=(ReqCombineSubscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqCombineSubscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCombineSubscribe* internal_default_instance() {
    return reinterpret_cast<const ReqCombineSubscribe*>(
               &_ReqCombineSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ReqCombineSubscribe* other);
  friend void swap(ReqCombineSubscribe& a, ReqCombineSubscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCombineSubscribe* New() const final {
    return CreateMaybeMessage<ReqCombineSubscribe>(nullptr);
  }

  ReqCombineSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCombineSubscribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCombineSubscribe& from);
  void MergeFrom(const ReqCombineSubscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCombineSubscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqCombineSubscribe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.PeriodType period_list = 2;
  int period_list_size() const;
  void clear_period_list();
  static const int kPeriodListFieldNumber = 2;
  ::pb::PeriodType period_list(int index) const;
  void set_period_list(int index, ::pb::PeriodType value);
  void add_period_list(::pb::PeriodType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& period_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_period_list();

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // @@protoc_insertion_point(class_scope:pb.ReqCombineSubscribe)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> period_list_;
  mutable std::atomic<int> _period_list_cached_byte_size_;
  ::pb::Symbol* symbol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class RspCombineSubscribe :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspCombineSubscribe) */ {
 public:
  RspCombineSubscribe();
  virtual ~RspCombineSubscribe();

  RspCombineSubscribe(const RspCombineSubscribe& from);
  RspCombineSubscribe(RspCombineSubscribe&& from) noexcept
    : RspCombineSubscribe() {
    *this = ::std::move(from);
  }

  inline RspCombineSubscribe& operator=(const RspCombineSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspCombineSubscribe& operator=(RspCombineSubscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspCombineSubscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspCombineSubscribe* internal_default_instance() {
    return reinterpret_cast<const RspCombineSubscribe*>(
               &_RspCombineSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(RspCombineSubscribe* other);
  friend void swap(RspCombineSubscribe& a, RspCombineSubscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspCombineSubscribe* New() const final {
    return CreateMaybeMessage<RspCombineSubscribe>(nullptr);
  }

  RspCombineSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspCombineSubscribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspCombineSubscribe& from);
  void MergeFrom(const RspCombineSubscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspCombineSubscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspCombineSubscribe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.KlineSeries history = 2;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 2;
  ::pb::KlineSeries* mutable_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KlineSeries >*
      mutable_history();
  const ::pb::KlineSeries& history(int index) const;
  ::pb::KlineSeries* add_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KlineSeries >&
      history() const;

  // repeated .pb.Kline klines = 4;
  int klines_size() const;
  void clear_klines();
  static const int kKlinesFieldNumber = 4;
  ::pb::Kline* mutable_klines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Kline >*
      mutable_klines();
  const ::pb::Kline& klines(int index) const;
  ::pb::Kline* add_klines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Kline >&
      klines() const;

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // .pb.MarketDataSnapshot tick = 3;
  bool has_tick() const;
  void clear_tick();
  static const int kTickFieldNumber = 3;
  const ::pb::MarketDataSnapshot& tick() const;
  ::pb::MarketDataSnapshot* release_tick();
  ::pb::MarketDataSnapshot* mutable_tick();
  void set_allocated_tick(::pb::MarketDataSnapshot* tick);

  // @@protoc_insertion_point(class_scope:pb.RspCombineSubscribe)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KlineSeries > history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Kline > klines_;
  ::pb::Symbol* symbol_;
  ::pb::MarketDataSnapshot* tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class SymbolCacheSummary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SymbolCacheSummary) */ {
 public:
  SymbolCacheSummary();
  virtual ~SymbolCacheSummary();

  SymbolCacheSummary(const SymbolCacheSummary& from);
  SymbolCacheSummary(SymbolCacheSummary&& from) noexcept
    : SymbolCacheSummary() {
    *this = ::std::move(from);
  }

  inline SymbolCacheSummary& operator=(const SymbolCacheSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolCacheSummary& operator=(SymbolCacheSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SymbolCacheSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymbolCacheSummary* internal_default_instance() {
    return reinterpret_cast<const SymbolCacheSummary*>(
               &_SymbolCacheSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SymbolCacheSummary* other);
  friend void swap(SymbolCacheSummary& a, SymbolCacheSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymbolCacheSummary* New() const final {
    return CreateMaybeMessage<SymbolCacheSummary>(nullptr);
  }

  SymbolCacheSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SymbolCacheSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SymbolCacheSummary& from);
  void MergeFrom(const SymbolCacheSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymbolCacheSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SymbolCacheSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int32 kline_len = 2;
  void clear_kline_len();
  static const int kKlineLenFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 kline_len() const;
  void set_kline_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 tick_len = 3;
  void clear_tick_len();
  static const int kTickLenFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_len() const;
  void set_tick_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 subscriber_count = 4;
  void clear_subscriber_count();
  static const int kSubscriberCountFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 subscriber_count() const;
  void set_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SymbolCacheSummary)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Symbol* symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 kline_len_;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_len_;
  ::PROTOBUF_NAMESPACE_ID::int32 subscriber_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class CacheSummary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CacheSummary) */ {
 public:
  CacheSummary();
  virtual ~CacheSummary();

  CacheSummary(const CacheSummary& from);
  CacheSummary(CacheSummary&& from) noexcept
    : CacheSummary() {
    *this = ::std::move(from);
  }

  inline CacheSummary& operator=(const CacheSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheSummary& operator=(CacheSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheSummary* internal_default_instance() {
    return reinterpret_cast<const CacheSummary*>(
               &_CacheSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CacheSummary* other);
  friend void swap(CacheSummary& a, CacheSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CacheSummary* New() const final {
    return CreateMaybeMessage<CacheSummary>(nullptr);
  }

  CacheSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheSummary& from);
  void MergeFrom(const CacheSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CacheSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.SymbolCacheSummary symbol_list = 5;
  int symbol_list_size() const;
  void clear_symbol_list();
  static const int kSymbolListFieldNumber = 5;
  ::pb::SymbolCacheSummary* mutable_symbol_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SymbolCacheSummary >*
      mutable_symbol_list();
  const ::pb::SymbolCacheSummary& symbol_list(int index) const;
  ::pb::SymbolCacheSummary* add_symbol_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SymbolCacheSummary >&
      symbol_list() const;

  // int32 ks_map_size = 1;
  void clear_ks_map_size();
  static const int kKsMapSizeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ks_map_size() const;
  void set_ks_map_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 total_kline_len = 2;
  void clear_total_kline_len();
  static const int kTotalKlineLenFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 total_kline_len() const;
  void set_total_kline_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 total_tick_len = 3;
  void clear_total_tick_len();
  static const int kTotalTickLenFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 total_tick_len() const;
  void set_total_tick_len(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 total_subscriber_count = 4;
  void clear_total_subscriber_count();
  static const int kTotalSubscriberCountFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 total_subscriber_count() const;
  void set_total_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CacheSummary)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SymbolCacheSummary > symbol_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 ks_map_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_kline_len_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_tick_len_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_subscriber_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class ReqGetDCenterInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqGetDCenterInfo) */ {
 public:
  ReqGetDCenterInfo();
  virtual ~ReqGetDCenterInfo();

  ReqGetDCenterInfo(const ReqGetDCenterInfo& from);
  ReqGetDCenterInfo(ReqGetDCenterInfo&& from) noexcept
    : ReqGetDCenterInfo() {
    *this = ::std::move(from);
  }

  inline ReqGetDCenterInfo& operator=(const ReqGetDCenterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetDCenterInfo& operator=(ReqGetDCenterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqGetDCenterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGetDCenterInfo* internal_default_instance() {
    return reinterpret_cast<const ReqGetDCenterInfo*>(
               &_ReqGetDCenterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ReqGetDCenterInfo* other);
  friend void swap(ReqGetDCenterInfo& a, ReqGetDCenterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGetDCenterInfo* New() const final {
    return CreateMaybeMessage<ReqGetDCenterInfo>(nullptr);
  }

  ReqGetDCenterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetDCenterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetDCenterInfo& from);
  void MergeFrom(const ReqGetDCenterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetDCenterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqGetDCenterInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.ReqGetDCenterInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class RspGetDCenterInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspGetDCenterInfo) */ {
 public:
  RspGetDCenterInfo();
  virtual ~RspGetDCenterInfo();

  RspGetDCenterInfo(const RspGetDCenterInfo& from);
  RspGetDCenterInfo(RspGetDCenterInfo&& from) noexcept
    : RspGetDCenterInfo() {
    *this = ::std::move(from);
  }

  inline RspGetDCenterInfo& operator=(const RspGetDCenterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspGetDCenterInfo& operator=(RspGetDCenterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspGetDCenterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspGetDCenterInfo* internal_default_instance() {
    return reinterpret_cast<const RspGetDCenterInfo*>(
               &_RspGetDCenterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(RspGetDCenterInfo* other);
  friend void swap(RspGetDCenterInfo& a, RspGetDCenterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspGetDCenterInfo* New() const final {
    return CreateMaybeMessage<RspGetDCenterInfo>(nullptr);
  }

  RspGetDCenterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspGetDCenterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspGetDCenterInfo& from);
  void MergeFrom(const RspGetDCenterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspGetDCenterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspGetDCenterInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.CacheSummary cache_summary = 1;
  bool has_cache_summary() const;
  void clear_cache_summary();
  static const int kCacheSummaryFieldNumber = 1;
  const ::pb::CacheSummary& cache_summary() const;
  ::pb::CacheSummary* release_cache_summary();
  ::pb::CacheSummary* mutable_cache_summary();
  void set_allocated_cache_summary(::pb::CacheSummary* cache_summary);

  // @@protoc_insertion_point(class_scope:pb.RspGetDCenterInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::CacheSummary* cache_summary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class ReqGetTickSeries :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqGetTickSeries) */ {
 public:
  ReqGetTickSeries();
  virtual ~ReqGetTickSeries();

  ReqGetTickSeries(const ReqGetTickSeries& from);
  ReqGetTickSeries(ReqGetTickSeries&& from) noexcept
    : ReqGetTickSeries() {
    *this = ::std::move(from);
  }

  inline ReqGetTickSeries& operator=(const ReqGetTickSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetTickSeries& operator=(ReqGetTickSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqGetTickSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGetTickSeries* internal_default_instance() {
    return reinterpret_cast<const ReqGetTickSeries*>(
               &_ReqGetTickSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ReqGetTickSeries* other);
  friend void swap(ReqGetTickSeries& a, ReqGetTickSeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGetTickSeries* New() const final {
    return CreateMaybeMessage<ReqGetTickSeries>(nullptr);
  }

  ReqGetTickSeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetTickSeries>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetTickSeries& from);
  void MergeFrom(const ReqGetTickSeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetTickSeries* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqGetTickSeries";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int32 start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 end = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ReqGetTickSeries)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Symbol* symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class RspGetTickSeries :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspGetTickSeries) */ {
 public:
  RspGetTickSeries();
  virtual ~RspGetTickSeries();

  RspGetTickSeries(const RspGetTickSeries& from);
  RspGetTickSeries(RspGetTickSeries&& from) noexcept
    : RspGetTickSeries() {
    *this = ::std::move(from);
  }

  inline RspGetTickSeries& operator=(const RspGetTickSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspGetTickSeries& operator=(RspGetTickSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspGetTickSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspGetTickSeries* internal_default_instance() {
    return reinterpret_cast<const RspGetTickSeries*>(
               &_RspGetTickSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(RspGetTickSeries* other);
  friend void swap(RspGetTickSeries& a, RspGetTickSeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspGetTickSeries* New() const final {
    return CreateMaybeMessage<RspGetTickSeries>(nullptr);
  }

  RspGetTickSeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspGetTickSeries>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspGetTickSeries& from);
  void MergeFrom(const RspGetTickSeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspGetTickSeries* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspGetTickSeries";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.MarketDataSnapshot list = 4;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 4;
  ::pb::MarketDataSnapshot* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MarketDataSnapshot >*
      mutable_list();
  const ::pb::MarketDataSnapshot& list(int index) const;
  ::pb::MarketDataSnapshot* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MarketDataSnapshot >&
      list() const;

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int32 start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 end = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.RspGetTickSeries)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MarketDataSnapshot > list_;
  ::pb::Symbol* symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class ReqGetKlineSeries :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqGetKlineSeries) */ {
 public:
  ReqGetKlineSeries();
  virtual ~ReqGetKlineSeries();

  ReqGetKlineSeries(const ReqGetKlineSeries& from);
  ReqGetKlineSeries(ReqGetKlineSeries&& from) noexcept
    : ReqGetKlineSeries() {
    *this = ::std::move(from);
  }

  inline ReqGetKlineSeries& operator=(const ReqGetKlineSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetKlineSeries& operator=(ReqGetKlineSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqGetKlineSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGetKlineSeries* internal_default_instance() {
    return reinterpret_cast<const ReqGetKlineSeries*>(
               &_ReqGetKlineSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ReqGetKlineSeries* other);
  friend void swap(ReqGetKlineSeries& a, ReqGetKlineSeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGetKlineSeries* New() const final {
    return CreateMaybeMessage<ReqGetKlineSeries>(nullptr);
  }

  ReqGetKlineSeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetKlineSeries>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetKlineSeries& from);
  void MergeFrom(const ReqGetKlineSeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetKlineSeries* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqGetKlineSeries";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int64 start = 3;
  void clear_start();
  static const int kStartFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 end = 4;
  void clear_end();
  static const int kEndFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 lenLimit = 5;
  void clear_lenlimit();
  static const int kLenLimitFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 lenlimit() const;
  void set_lenlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .pb.PeriodType period = 2;
  void clear_period();
  static const int kPeriodFieldNumber = 2;
  ::pb::PeriodType period() const;
  void set_period(::pb::PeriodType value);

  // @@protoc_insertion_point(class_scope:pb.ReqGetKlineSeries)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Symbol* symbol_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_;
  ::PROTOBUF_NAMESPACE_ID::int64 lenlimit_;
  int period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// -------------------------------------------------------------------

class RspGetKlineSeries :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspGetKlineSeries) */ {
 public:
  RspGetKlineSeries();
  virtual ~RspGetKlineSeries();

  RspGetKlineSeries(const RspGetKlineSeries& from);
  RspGetKlineSeries(RspGetKlineSeries&& from) noexcept
    : RspGetKlineSeries() {
    *this = ::std::move(from);
  }

  inline RspGetKlineSeries& operator=(const RspGetKlineSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspGetKlineSeries& operator=(RspGetKlineSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspGetKlineSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspGetKlineSeries* internal_default_instance() {
    return reinterpret_cast<const RspGetKlineSeries*>(
               &_RspGetKlineSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(RspGetKlineSeries* other);
  friend void swap(RspGetKlineSeries& a, RspGetKlineSeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspGetKlineSeries* New() const final {
    return CreateMaybeMessage<RspGetKlineSeries>(nullptr);
  }

  RspGetKlineSeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspGetKlineSeries>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspGetKlineSeries& from);
  void MergeFrom(const RspGetKlineSeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspGetKlineSeries* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspGetKlineSeries";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcenter_2eproto);
    return ::descriptor_table_dcenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Kline list = 6;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 6;
  ::pb::Kline* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Kline >*
      mutable_list();
  const ::pb::Kline& list(int index) const;
  ::pb::Kline* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Kline >&
      list() const;

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int64 start = 3;
  void clear_start();
  static const int kStartFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 end = 4;
  void clear_end();
  static const int kEndFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 lenLimit = 5;
  void clear_lenlimit();
  static const int kLenLimitFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 lenlimit() const;
  void set_lenlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .pb.PeriodType period = 2;
  void clear_period();
  static const int kPeriodFieldNumber = 2;
  ::pb::PeriodType period() const;
  void set_period(::pb::PeriodType value);

  // @@protoc_insertion_point(class_scope:pb.RspGetKlineSeries)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Kline > list_;
  ::pb::Symbol* symbol_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_;
  ::PROTOBUF_NAMESPACE_ID::int64 lenlimit_;
  int period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcenter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqGetTradingInstrumentList

// .pb.ExchangeType exchange = 1;
inline void ReqGetTradingInstrumentList::clear_exchange() {
  exchange_ = 0;
}
inline ::pb::ExchangeType ReqGetTradingInstrumentList::exchange() const {
  // @@protoc_insertion_point(field_get:pb.ReqGetTradingInstrumentList.exchange)
  return static_cast< ::pb::ExchangeType >(exchange_);
}
inline void ReqGetTradingInstrumentList::set_exchange(::pb::ExchangeType value) {
  
  exchange_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqGetTradingInstrumentList.exchange)
}

// -------------------------------------------------------------------

// RspGetTradingInstrumentList

// repeated .pb.TradingInstrument list = 1;
inline int RspGetTradingInstrumentList::list_size() const {
  return list_.size();
}
inline ::pb::TradingInstrument* RspGetTradingInstrumentList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RspGetTradingInstrumentList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingInstrument >*
RspGetTradingInstrumentList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.RspGetTradingInstrumentList.list)
  return &list_;
}
inline const ::pb::TradingInstrument& RspGetTradingInstrumentList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.RspGetTradingInstrumentList.list)
  return list_.Get(index);
}
inline ::pb::TradingInstrument* RspGetTradingInstrumentList::add_list() {
  // @@protoc_insertion_point(field_add:pb.RspGetTradingInstrumentList.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingInstrument >&
RspGetTradingInstrumentList::list() const {
  // @@protoc_insertion_point(field_list:pb.RspGetTradingInstrumentList.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqGetTradingInstrument

// .pb.Symbol symbol = 1;
inline bool ReqGetTradingInstrument::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& ReqGetTradingInstrument::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.ReqGetTradingInstrument.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* ReqGetTradingInstrument::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.ReqGetTradingInstrument.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* ReqGetTradingInstrument::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ReqGetTradingInstrument.symbol)
  return symbol_;
}
inline void ReqGetTradingInstrument::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.ReqGetTradingInstrument.symbol)
}

// -------------------------------------------------------------------

// RspGetTradingInstrument

// -------------------------------------------------------------------

// ReqSetTradingInstrument

// repeated .pb.TradingInstrument list = 1;
inline int ReqSetTradingInstrument::list_size() const {
  return list_.size();
}
inline ::pb::TradingInstrument* ReqSetTradingInstrument::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ReqSetTradingInstrument.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingInstrument >*
ReqSetTradingInstrument::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.ReqSetTradingInstrument.list)
  return &list_;
}
inline const ::pb::TradingInstrument& ReqSetTradingInstrument::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.ReqSetTradingInstrument.list)
  return list_.Get(index);
}
inline ::pb::TradingInstrument* ReqSetTradingInstrument::add_list() {
  // @@protoc_insertion_point(field_add:pb.ReqSetTradingInstrument.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingInstrument >&
ReqSetTradingInstrument::list() const {
  // @@protoc_insertion_point(field_list:pb.ReqSetTradingInstrument.list)
  return list_;
}

// -------------------------------------------------------------------

// RspSetTradingInstrument

// -------------------------------------------------------------------

// ReqSubscribe

// repeated .pb.Symbol list = 1;
inline int ReqSubscribe::list_size() const {
  return list_.size();
}
inline ::pb::Symbol* ReqSubscribe::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ReqSubscribe.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Symbol >*
ReqSubscribe::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.ReqSubscribe.list)
  return &list_;
}
inline const ::pb::Symbol& ReqSubscribe::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.ReqSubscribe.list)
  return list_.Get(index);
}
inline ::pb::Symbol* ReqSubscribe::add_list() {
  // @@protoc_insertion_point(field_add:pb.ReqSubscribe.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Symbol >&
ReqSubscribe::list() const {
  // @@protoc_insertion_point(field_list:pb.ReqSubscribe.list)
  return list_;
}

// bool binary_data = 2;
inline void ReqSubscribe::clear_binary_data() {
  binary_data_ = false;
}
inline bool ReqSubscribe::binary_data() const {
  // @@protoc_insertion_point(field_get:pb.ReqSubscribe.binary_data)
  return binary_data_;
}
inline void ReqSubscribe::set_binary_data(bool value) {
  
  binary_data_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqSubscribe.binary_data)
}

// -------------------------------------------------------------------

// RspSubscribe

// -------------------------------------------------------------------

// ReqUnSubscribe

// repeated .pb.Symbol list = 1;
inline int ReqUnSubscribe::list_size() const {
  return list_.size();
}
inline ::pb::Symbol* ReqUnSubscribe::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ReqUnSubscribe.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Symbol >*
ReqUnSubscribe::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.ReqUnSubscribe.list)
  return &list_;
}
inline const ::pb::Symbol& ReqUnSubscribe::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.ReqUnSubscribe.list)
  return list_.Get(index);
}
inline ::pb::Symbol* ReqUnSubscribe::add_list() {
  // @@protoc_insertion_point(field_add:pb.ReqUnSubscribe.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Symbol >&
ReqUnSubscribe::list() const {
  // @@protoc_insertion_point(field_list:pb.ReqUnSubscribe.list)
  return list_;
}

// -------------------------------------------------------------------

// RspUnSubscribe

// -------------------------------------------------------------------

// ReqSaveKline

// .pb.KlineSeries series = 1;
inline bool ReqSaveKline::has_series() const {
  return this != internal_default_instance() && series_ != nullptr;
}
inline const ::pb::KlineSeries& ReqSaveKline::series() const {
  const ::pb::KlineSeries* p = series_;
  // @@protoc_insertion_point(field_get:pb.ReqSaveKline.series)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::KlineSeries*>(
      &::pb::_KlineSeries_default_instance_);
}
inline ::pb::KlineSeries* ReqSaveKline::release_series() {
  // @@protoc_insertion_point(field_release:pb.ReqSaveKline.series)
  
  ::pb::KlineSeries* temp = series_;
  series_ = nullptr;
  return temp;
}
inline ::pb::KlineSeries* ReqSaveKline::mutable_series() {
  
  if (series_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::KlineSeries>(GetArenaNoVirtual());
    series_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ReqSaveKline.series)
  return series_;
}
inline void ReqSaveKline::set_allocated_series(::pb::KlineSeries* series) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_);
  }
  if (series) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      series = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series, submessage_arena);
    }
    
  } else {
    
  }
  series_ = series;
  // @@protoc_insertion_point(field_set_allocated:pb.ReqSaveKline.series)
}

// -------------------------------------------------------------------

// RspSaveKline

// -------------------------------------------------------------------

// ReqCombineSubscribe

// .pb.Symbol symbol = 1;
inline bool ReqCombineSubscribe::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& ReqCombineSubscribe::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.ReqCombineSubscribe.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* ReqCombineSubscribe::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.ReqCombineSubscribe.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* ReqCombineSubscribe::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ReqCombineSubscribe.symbol)
  return symbol_;
}
inline void ReqCombineSubscribe::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.ReqCombineSubscribe.symbol)
}

// repeated .pb.PeriodType period_list = 2;
inline int ReqCombineSubscribe::period_list_size() const {
  return period_list_.size();
}
inline void ReqCombineSubscribe::clear_period_list() {
  period_list_.Clear();
}
inline ::pb::PeriodType ReqCombineSubscribe::period_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.ReqCombineSubscribe.period_list)
  return static_cast< ::pb::PeriodType >(period_list_.Get(index));
}
inline void ReqCombineSubscribe::set_period_list(int index, ::pb::PeriodType value) {
  period_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ReqCombineSubscribe.period_list)
}
inline void ReqCombineSubscribe::add_period_list(::pb::PeriodType value) {
  period_list_.Add(value);
  // @@protoc_insertion_point(field_add:pb.ReqCombineSubscribe.period_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ReqCombineSubscribe::period_list() const {
  // @@protoc_insertion_point(field_list:pb.ReqCombineSubscribe.period_list)
  return period_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ReqCombineSubscribe::mutable_period_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.ReqCombineSubscribe.period_list)
  return &period_list_;
}

// -------------------------------------------------------------------

// RspCombineSubscribe

// .pb.Symbol symbol = 1;
inline bool RspCombineSubscribe::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& RspCombineSubscribe::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.RspCombineSubscribe.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* RspCombineSubscribe::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.RspCombineSubscribe.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* RspCombineSubscribe::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RspCombineSubscribe.symbol)
  return symbol_;
}
inline void RspCombineSubscribe::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.RspCombineSubscribe.symbol)
}

// repeated .pb.KlineSeries history = 2;
inline int RspCombineSubscribe::history_size() const {
  return history_.size();
}
inline ::pb::KlineSeries* RspCombineSubscribe::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RspCombineSubscribe.history)
  return history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KlineSeries >*
RspCombineSubscribe::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:pb.RspCombineSubscribe.history)
  return &history_;
}
inline const ::pb::KlineSeries& RspCombineSubscribe::history(int index) const {
  // @@protoc_insertion_point(field_get:pb.RspCombineSubscribe.history)
  return history_.Get(index);
}
inline ::pb::KlineSeries* RspCombineSubscribe::add_history() {
  // @@protoc_insertion_point(field_add:pb.RspCombineSubscribe.history)
  return history_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KlineSeries >&
RspCombineSubscribe::history() const {
  // @@protoc_insertion_point(field_list:pb.RspCombineSubscribe.history)
  return history_;
}

// .pb.MarketDataSnapshot tick = 3;
inline bool RspCombineSubscribe::has_tick() const {
  return this != internal_default_instance() && tick_ != nullptr;
}
inline const ::pb::MarketDataSnapshot& RspCombineSubscribe::tick() const {
  const ::pb::MarketDataSnapshot* p = tick_;
  // @@protoc_insertion_point(field_get:pb.RspCombineSubscribe.tick)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::MarketDataSnapshot*>(
      &::pb::_MarketDataSnapshot_default_instance_);
}
inline ::pb::MarketDataSnapshot* RspCombineSubscribe::release_tick() {
  // @@protoc_insertion_point(field_release:pb.RspCombineSubscribe.tick)
  
  ::pb::MarketDataSnapshot* temp = tick_;
  tick_ = nullptr;
  return temp;
}
inline ::pb::MarketDataSnapshot* RspCombineSubscribe::mutable_tick() {
  
  if (tick_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::MarketDataSnapshot>(GetArenaNoVirtual());
    tick_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RspCombineSubscribe.tick)
  return tick_;
}
inline void RspCombineSubscribe::set_allocated_tick(::pb::MarketDataSnapshot* tick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_);
  }
  if (tick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tick, submessage_arena);
    }
    
  } else {
    
  }
  tick_ = tick;
  // @@protoc_insertion_point(field_set_allocated:pb.RspCombineSubscribe.tick)
}

// repeated .pb.Kline klines = 4;
inline int RspCombineSubscribe::klines_size() const {
  return klines_.size();
}
inline ::pb::Kline* RspCombineSubscribe::mutable_klines(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RspCombineSubscribe.klines)
  return klines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Kline >*
RspCombineSubscribe::mutable_klines() {
  // @@protoc_insertion_point(field_mutable_list:pb.RspCombineSubscribe.klines)
  return &klines_;
}
inline const ::pb::Kline& RspCombineSubscribe::klines(int index) const {
  // @@protoc_insertion_point(field_get:pb.RspCombineSubscribe.klines)
  return klines_.Get(index);
}
inline ::pb::Kline* RspCombineSubscribe::add_klines() {
  // @@protoc_insertion_point(field_add:pb.RspCombineSubscribe.klines)
  return klines_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Kline >&
RspCombineSubscribe::klines() const {
  // @@protoc_insertion_point(field_list:pb.RspCombineSubscribe.klines)
  return klines_;
}

// -------------------------------------------------------------------

// SymbolCacheSummary

// .pb.Symbol symbol = 1;
inline bool SymbolCacheSummary::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& SymbolCacheSummary::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.SymbolCacheSummary.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* SymbolCacheSummary::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.SymbolCacheSummary.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* SymbolCacheSummary::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.SymbolCacheSummary.symbol)
  return symbol_;
}
inline void SymbolCacheSummary::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.SymbolCacheSummary.symbol)
}

// int32 kline_len = 2;
inline void SymbolCacheSummary::clear_kline_len() {
  kline_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SymbolCacheSummary::kline_len() const {
  // @@protoc_insertion_point(field_get:pb.SymbolCacheSummary.kline_len)
  return kline_len_;
}
inline void SymbolCacheSummary::set_kline_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kline_len_ = value;
  // @@protoc_insertion_point(field_set:pb.SymbolCacheSummary.kline_len)
}

// int32 tick_len = 3;
inline void SymbolCacheSummary::clear_tick_len() {
  tick_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SymbolCacheSummary::tick_len() const {
  // @@protoc_insertion_point(field_get:pb.SymbolCacheSummary.tick_len)
  return tick_len_;
}
inline void SymbolCacheSummary::set_tick_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tick_len_ = value;
  // @@protoc_insertion_point(field_set:pb.SymbolCacheSummary.tick_len)
}

// int32 subscriber_count = 4;
inline void SymbolCacheSummary::clear_subscriber_count() {
  subscriber_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SymbolCacheSummary::subscriber_count() const {
  // @@protoc_insertion_point(field_get:pb.SymbolCacheSummary.subscriber_count)
  return subscriber_count_;
}
inline void SymbolCacheSummary::set_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subscriber_count_ = value;
  // @@protoc_insertion_point(field_set:pb.SymbolCacheSummary.subscriber_count)
}

// -------------------------------------------------------------------

// CacheSummary

// int32 ks_map_size = 1;
inline void CacheSummary::clear_ks_map_size() {
  ks_map_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CacheSummary::ks_map_size() const {
  // @@protoc_insertion_point(field_get:pb.CacheSummary.ks_map_size)
  return ks_map_size_;
}
inline void CacheSummary::set_ks_map_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ks_map_size_ = value;
  // @@protoc_insertion_point(field_set:pb.CacheSummary.ks_map_size)
}

// int32 total_kline_len = 2;
inline void CacheSummary::clear_total_kline_len() {
  total_kline_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CacheSummary::total_kline_len() const {
  // @@protoc_insertion_point(field_get:pb.CacheSummary.total_kline_len)
  return total_kline_len_;
}
inline void CacheSummary::set_total_kline_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_kline_len_ = value;
  // @@protoc_insertion_point(field_set:pb.CacheSummary.total_kline_len)
}

// int32 total_tick_len = 3;
inline void CacheSummary::clear_total_tick_len() {
  total_tick_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CacheSummary::total_tick_len() const {
  // @@protoc_insertion_point(field_get:pb.CacheSummary.total_tick_len)
  return total_tick_len_;
}
inline void CacheSummary::set_total_tick_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_tick_len_ = value;
  // @@protoc_insertion_point(field_set:pb.CacheSummary.total_tick_len)
}

// int32 total_subscriber_count = 4;
inline void CacheSummary::clear_total_subscriber_count() {
  total_subscriber_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CacheSummary::total_subscriber_count() const {
  // @@protoc_insertion_point(field_get:pb.CacheSummary.total_subscriber_count)
  return total_subscriber_count_;
}
inline void CacheSummary::set_total_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_subscriber_count_ = value;
  // @@protoc_insertion_point(field_set:pb.CacheSummary.total_subscriber_count)
}

// repeated .pb.SymbolCacheSummary symbol_list = 5;
inline int CacheSummary::symbol_list_size() const {
  return symbol_list_.size();
}
inline void CacheSummary::clear_symbol_list() {
  symbol_list_.Clear();
}
inline ::pb::SymbolCacheSummary* CacheSummary::mutable_symbol_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CacheSummary.symbol_list)
  return symbol_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SymbolCacheSummary >*
CacheSummary::mutable_symbol_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CacheSummary.symbol_list)
  return &symbol_list_;
}
inline const ::pb::SymbolCacheSummary& CacheSummary::symbol_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CacheSummary.symbol_list)
  return symbol_list_.Get(index);
}
inline ::pb::SymbolCacheSummary* CacheSummary::add_symbol_list() {
  // @@protoc_insertion_point(field_add:pb.CacheSummary.symbol_list)
  return symbol_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SymbolCacheSummary >&
CacheSummary::symbol_list() const {
  // @@protoc_insertion_point(field_list:pb.CacheSummary.symbol_list)
  return symbol_list_;
}

// -------------------------------------------------------------------

// ReqGetDCenterInfo

// -------------------------------------------------------------------

// RspGetDCenterInfo

// .pb.CacheSummary cache_summary = 1;
inline bool RspGetDCenterInfo::has_cache_summary() const {
  return this != internal_default_instance() && cache_summary_ != nullptr;
}
inline void RspGetDCenterInfo::clear_cache_summary() {
  if (GetArenaNoVirtual() == nullptr && cache_summary_ != nullptr) {
    delete cache_summary_;
  }
  cache_summary_ = nullptr;
}
inline const ::pb::CacheSummary& RspGetDCenterInfo::cache_summary() const {
  const ::pb::CacheSummary* p = cache_summary_;
  // @@protoc_insertion_point(field_get:pb.RspGetDCenterInfo.cache_summary)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CacheSummary*>(
      &::pb::_CacheSummary_default_instance_);
}
inline ::pb::CacheSummary* RspGetDCenterInfo::release_cache_summary() {
  // @@protoc_insertion_point(field_release:pb.RspGetDCenterInfo.cache_summary)
  
  ::pb::CacheSummary* temp = cache_summary_;
  cache_summary_ = nullptr;
  return temp;
}
inline ::pb::CacheSummary* RspGetDCenterInfo::mutable_cache_summary() {
  
  if (cache_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CacheSummary>(GetArenaNoVirtual());
    cache_summary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RspGetDCenterInfo.cache_summary)
  return cache_summary_;
}
inline void RspGetDCenterInfo::set_allocated_cache_summary(::pb::CacheSummary* cache_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cache_summary_;
  }
  if (cache_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cache_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cache_summary, submessage_arena);
    }
    
  } else {
    
  }
  cache_summary_ = cache_summary;
  // @@protoc_insertion_point(field_set_allocated:pb.RspGetDCenterInfo.cache_summary)
}

// -------------------------------------------------------------------

// ReqGetTickSeries

// .pb.Symbol symbol = 1;
inline bool ReqGetTickSeries::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& ReqGetTickSeries::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.ReqGetTickSeries.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* ReqGetTickSeries::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.ReqGetTickSeries.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* ReqGetTickSeries::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ReqGetTickSeries.symbol)
  return symbol_;
}
inline void ReqGetTickSeries::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.ReqGetTickSeries.symbol)
}

// int32 start = 2;
inline void ReqGetTickSeries::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGetTickSeries::start() const {
  // @@protoc_insertion_point(field_get:pb.ReqGetTickSeries.start)
  return start_;
}
inline void ReqGetTickSeries::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqGetTickSeries.start)
}

// int32 end = 3;
inline void ReqGetTickSeries::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGetTickSeries::end() const {
  // @@protoc_insertion_point(field_get:pb.ReqGetTickSeries.end)
  return end_;
}
inline void ReqGetTickSeries::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqGetTickSeries.end)
}

// -------------------------------------------------------------------

// RspGetTickSeries

// .pb.Symbol symbol = 1;
inline bool RspGetTickSeries::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& RspGetTickSeries::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.RspGetTickSeries.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* RspGetTickSeries::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.RspGetTickSeries.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* RspGetTickSeries::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RspGetTickSeries.symbol)
  return symbol_;
}
inline void RspGetTickSeries::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.RspGetTickSeries.symbol)
}

// int32 start = 2;
inline void RspGetTickSeries::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspGetTickSeries::start() const {
  // @@protoc_insertion_point(field_get:pb.RspGetTickSeries.start)
  return start_;
}
inline void RspGetTickSeries::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:pb.RspGetTickSeries.start)
}

// int32 end = 3;
inline void RspGetTickSeries::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspGetTickSeries::end() const {
  // @@protoc_insertion_point(field_get:pb.RspGetTickSeries.end)
  return end_;
}
inline void RspGetTickSeries::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:pb.RspGetTickSeries.end)
}

// repeated .pb.MarketDataSnapshot list = 4;
inline int RspGetTickSeries::list_size() const {
  return list_.size();
}
inline ::pb::MarketDataSnapshot* RspGetTickSeries::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RspGetTickSeries.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MarketDataSnapshot >*
RspGetTickSeries::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.RspGetTickSeries.list)
  return &list_;
}
inline const ::pb::MarketDataSnapshot& RspGetTickSeries::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.RspGetTickSeries.list)
  return list_.Get(index);
}
inline ::pb::MarketDataSnapshot* RspGetTickSeries::add_list() {
  // @@protoc_insertion_point(field_add:pb.RspGetTickSeries.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MarketDataSnapshot >&
RspGetTickSeries::list() const {
  // @@protoc_insertion_point(field_list:pb.RspGetTickSeries.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqGetKlineSeries

// .pb.Symbol symbol = 1;
inline bool ReqGetKlineSeries::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& ReqGetKlineSeries::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.ReqGetKlineSeries.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* ReqGetKlineSeries::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.ReqGetKlineSeries.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* ReqGetKlineSeries::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ReqGetKlineSeries.symbol)
  return symbol_;
}
inline void ReqGetKlineSeries::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.ReqGetKlineSeries.symbol)
}

// .pb.PeriodType period = 2;
inline void ReqGetKlineSeries::clear_period() {
  period_ = 0;
}
inline ::pb::PeriodType ReqGetKlineSeries::period() const {
  // @@protoc_insertion_point(field_get:pb.ReqGetKlineSeries.period)
  return static_cast< ::pb::PeriodType >(period_);
}
inline void ReqGetKlineSeries::set_period(::pb::PeriodType value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqGetKlineSeries.period)
}

// int64 start = 3;
inline void ReqGetKlineSeries::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqGetKlineSeries::start() const {
  // @@protoc_insertion_point(field_get:pb.ReqGetKlineSeries.start)
  return start_;
}
inline void ReqGetKlineSeries::set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqGetKlineSeries.start)
}

// int64 end = 4;
inline void ReqGetKlineSeries::clear_end() {
  end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqGetKlineSeries::end() const {
  // @@protoc_insertion_point(field_get:pb.ReqGetKlineSeries.end)
  return end_;
}
inline void ReqGetKlineSeries::set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqGetKlineSeries.end)
}

// int64 lenLimit = 5;
inline void ReqGetKlineSeries::clear_lenlimit() {
  lenlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqGetKlineSeries::lenlimit() const {
  // @@protoc_insertion_point(field_get:pb.ReqGetKlineSeries.lenLimit)
  return lenlimit_;
}
inline void ReqGetKlineSeries::set_lenlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lenlimit_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqGetKlineSeries.lenLimit)
}

// -------------------------------------------------------------------

// RspGetKlineSeries

// .pb.Symbol symbol = 1;
inline bool RspGetKlineSeries::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& RspGetKlineSeries::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.RspGetKlineSeries.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* RspGetKlineSeries::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.RspGetKlineSeries.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* RspGetKlineSeries::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RspGetKlineSeries.symbol)
  return symbol_;
}
inline void RspGetKlineSeries::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.RspGetKlineSeries.symbol)
}

// .pb.PeriodType period = 2;
inline void RspGetKlineSeries::clear_period() {
  period_ = 0;
}
inline ::pb::PeriodType RspGetKlineSeries::period() const {
  // @@protoc_insertion_point(field_get:pb.RspGetKlineSeries.period)
  return static_cast< ::pb::PeriodType >(period_);
}
inline void RspGetKlineSeries::set_period(::pb::PeriodType value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:pb.RspGetKlineSeries.period)
}

// int64 start = 3;
inline void RspGetKlineSeries::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RspGetKlineSeries::start() const {
  // @@protoc_insertion_point(field_get:pb.RspGetKlineSeries.start)
  return start_;
}
inline void RspGetKlineSeries::set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:pb.RspGetKlineSeries.start)
}

// int64 end = 4;
inline void RspGetKlineSeries::clear_end() {
  end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RspGetKlineSeries::end() const {
  // @@protoc_insertion_point(field_get:pb.RspGetKlineSeries.end)
  return end_;
}
inline void RspGetKlineSeries::set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:pb.RspGetKlineSeries.end)
}

// int64 lenLimit = 5;
inline void RspGetKlineSeries::clear_lenlimit() {
  lenlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RspGetKlineSeries::lenlimit() const {
  // @@protoc_insertion_point(field_get:pb.RspGetKlineSeries.lenLimit)
  return lenlimit_;
}
inline void RspGetKlineSeries::set_lenlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lenlimit_ = value;
  // @@protoc_insertion_point(field_set:pb.RspGetKlineSeries.lenLimit)
}

// repeated .pb.Kline list = 6;
inline int RspGetKlineSeries::list_size() const {
  return list_.size();
}
inline ::pb::Kline* RspGetKlineSeries::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RspGetKlineSeries.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Kline >*
RspGetKlineSeries::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.RspGetKlineSeries.list)
  return &list_;
}
inline const ::pb::Kline& RspGetKlineSeries::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.RspGetKlineSeries.list)
  return list_.Get(index);
}
inline ::pb::Kline* RspGetKlineSeries::add_list() {
  // @@protoc_insertion_point(field_add:pb.RspGetKlineSeries.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Kline >&
RspGetKlineSeries::list() const {
  // @@protoc_insertion_point(field_list:pb.RspGetKlineSeries.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dcenter_2eproto
