// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcenter.proto

#include "dcenter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcenter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CacheSummary_dcenter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Kline_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KlineSeries_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MarketDataSnapshot_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Symbol_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcenter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SymbolCacheSummary_dcenter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TradingInstrument_common_2eproto;
namespace pb {
class ReqGetTradingInstrumentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqGetTradingInstrumentList> _instance;
} _ReqGetTradingInstrumentList_default_instance_;
class RspGetTradingInstrumentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspGetTradingInstrumentList> _instance;
} _RspGetTradingInstrumentList_default_instance_;
class ReqGetTradingInstrumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqGetTradingInstrument> _instance;
} _ReqGetTradingInstrument_default_instance_;
class RspGetTradingInstrumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspGetTradingInstrument> _instance;
} _RspGetTradingInstrument_default_instance_;
class ReqSetTradingInstrumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSetTradingInstrument> _instance;
} _ReqSetTradingInstrument_default_instance_;
class RspSetTradingInstrumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspSetTradingInstrument> _instance;
} _RspSetTradingInstrument_default_instance_;
class ReqSubscribeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSubscribe> _instance;
} _ReqSubscribe_default_instance_;
class RspSubscribeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspSubscribe> _instance;
} _RspSubscribe_default_instance_;
class ReqUnSubscribeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqUnSubscribe> _instance;
} _ReqUnSubscribe_default_instance_;
class RspUnSubscribeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspUnSubscribe> _instance;
} _RspUnSubscribe_default_instance_;
class ReqSaveKlineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSaveKline> _instance;
} _ReqSaveKline_default_instance_;
class RspSaveKlineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspSaveKline> _instance;
} _RspSaveKline_default_instance_;
class ReqCombineSubscribeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqCombineSubscribe> _instance;
} _ReqCombineSubscribe_default_instance_;
class RspCombineSubscribeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspCombineSubscribe> _instance;
} _RspCombineSubscribe_default_instance_;
class SymbolCacheSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SymbolCacheSummary> _instance;
} _SymbolCacheSummary_default_instance_;
class CacheSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheSummary> _instance;
} _CacheSummary_default_instance_;
class ReqGetDCenterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqGetDCenterInfo> _instance;
} _ReqGetDCenterInfo_default_instance_;
class RspGetDCenterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspGetDCenterInfo> _instance;
} _RspGetDCenterInfo_default_instance_;
class ReqGetTickSeriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqGetTickSeries> _instance;
} _ReqGetTickSeries_default_instance_;
class RspGetTickSeriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspGetTickSeries> _instance;
} _RspGetTickSeries_default_instance_;
class ReqGetKlineSeriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqGetKlineSeries> _instance;
} _ReqGetKlineSeries_default_instance_;
class RspGetKlineSeriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspGetKlineSeries> _instance;
} _RspGetKlineSeries_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_CacheSummary_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CacheSummary_default_instance_;
    new (ptr) ::pb::CacheSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CacheSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CacheSummary_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CacheSummary_dcenter_2eproto}, {
      &scc_info_SymbolCacheSummary_dcenter_2eproto.base,}};

static void InitDefaultsscc_info_ReqCombineSubscribe_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqCombineSubscribe_default_instance_;
    new (ptr) ::pb::ReqCombineSubscribe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqCombineSubscribe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqCombineSubscribe_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqCombineSubscribe_dcenter_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_ReqGetDCenterInfo_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqGetDCenterInfo_default_instance_;
    new (ptr) ::pb::ReqGetDCenterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqGetDCenterInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqGetDCenterInfo_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqGetDCenterInfo_dcenter_2eproto}, {}};

static void InitDefaultsscc_info_ReqGetKlineSeries_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqGetKlineSeries_default_instance_;
    new (ptr) ::pb::ReqGetKlineSeries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqGetKlineSeries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqGetKlineSeries_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqGetKlineSeries_dcenter_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_ReqGetTickSeries_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqGetTickSeries_default_instance_;
    new (ptr) ::pb::ReqGetTickSeries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqGetTickSeries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqGetTickSeries_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqGetTickSeries_dcenter_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_ReqGetTradingInstrument_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqGetTradingInstrument_default_instance_;
    new (ptr) ::pb::ReqGetTradingInstrument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqGetTradingInstrument::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqGetTradingInstrument_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqGetTradingInstrument_dcenter_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_ReqGetTradingInstrumentList_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqGetTradingInstrumentList_default_instance_;
    new (ptr) ::pb::ReqGetTradingInstrumentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqGetTradingInstrumentList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqGetTradingInstrumentList_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqGetTradingInstrumentList_dcenter_2eproto}, {}};

static void InitDefaultsscc_info_ReqSaveKline_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqSaveKline_default_instance_;
    new (ptr) ::pb::ReqSaveKline();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqSaveKline::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSaveKline_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqSaveKline_dcenter_2eproto}, {
      &scc_info_KlineSeries_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_ReqSetTradingInstrument_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqSetTradingInstrument_default_instance_;
    new (ptr) ::pb::ReqSetTradingInstrument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqSetTradingInstrument::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSetTradingInstrument_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqSetTradingInstrument_dcenter_2eproto}, {
      &scc_info_TradingInstrument_common_2eproto.base,}};

static void InitDefaultsscc_info_ReqSubscribe_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqSubscribe_default_instance_;
    new (ptr) ::pb::ReqSubscribe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqSubscribe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSubscribe_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqSubscribe_dcenter_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_ReqUnSubscribe_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqUnSubscribe_default_instance_;
    new (ptr) ::pb::ReqUnSubscribe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqUnSubscribe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqUnSubscribe_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqUnSubscribe_dcenter_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_RspCombineSubscribe_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspCombineSubscribe_default_instance_;
    new (ptr) ::pb::RspCombineSubscribe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspCombineSubscribe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RspCombineSubscribe_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_RspCombineSubscribe_dcenter_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_KlineSeries_market_5fdata_2eproto.base,
      &scc_info_MarketDataSnapshot_market_5fdata_2eproto.base,
      &scc_info_Kline_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_RspGetDCenterInfo_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspGetDCenterInfo_default_instance_;
    new (ptr) ::pb::RspGetDCenterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspGetDCenterInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RspGetDCenterInfo_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RspGetDCenterInfo_dcenter_2eproto}, {
      &scc_info_CacheSummary_dcenter_2eproto.base,}};

static void InitDefaultsscc_info_RspGetKlineSeries_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspGetKlineSeries_default_instance_;
    new (ptr) ::pb::RspGetKlineSeries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspGetKlineSeries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RspGetKlineSeries_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RspGetKlineSeries_dcenter_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_Kline_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_RspGetTickSeries_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspGetTickSeries_default_instance_;
    new (ptr) ::pb::RspGetTickSeries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspGetTickSeries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RspGetTickSeries_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RspGetTickSeries_dcenter_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_MarketDataSnapshot_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_RspGetTradingInstrument_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspGetTradingInstrument_default_instance_;
    new (ptr) ::pb::RspGetTradingInstrument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspGetTradingInstrument::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RspGetTradingInstrument_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RspGetTradingInstrument_dcenter_2eproto}, {}};

static void InitDefaultsscc_info_RspGetTradingInstrumentList_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspGetTradingInstrumentList_default_instance_;
    new (ptr) ::pb::RspGetTradingInstrumentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspGetTradingInstrumentList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RspGetTradingInstrumentList_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RspGetTradingInstrumentList_dcenter_2eproto}, {
      &scc_info_TradingInstrument_common_2eproto.base,}};

static void InitDefaultsscc_info_RspSaveKline_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspSaveKline_default_instance_;
    new (ptr) ::pb::RspSaveKline();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspSaveKline::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RspSaveKline_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RspSaveKline_dcenter_2eproto}, {}};

static void InitDefaultsscc_info_RspSetTradingInstrument_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspSetTradingInstrument_default_instance_;
    new (ptr) ::pb::RspSetTradingInstrument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspSetTradingInstrument::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RspSetTradingInstrument_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RspSetTradingInstrument_dcenter_2eproto}, {}};

static void InitDefaultsscc_info_RspSubscribe_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspSubscribe_default_instance_;
    new (ptr) ::pb::RspSubscribe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspSubscribe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RspSubscribe_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RspSubscribe_dcenter_2eproto}, {}};

static void InitDefaultsscc_info_RspUnSubscribe_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspUnSubscribe_default_instance_;
    new (ptr) ::pb::RspUnSubscribe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspUnSubscribe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RspUnSubscribe_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RspUnSubscribe_dcenter_2eproto}, {}};

static void InitDefaultsscc_info_SymbolCacheSummary_dcenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SymbolCacheSummary_default_instance_;
    new (ptr) ::pb::SymbolCacheSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SymbolCacheSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SymbolCacheSummary_dcenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SymbolCacheSummary_dcenter_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dcenter_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dcenter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dcenter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dcenter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetTradingInstrumentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetTradingInstrumentList, exchange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspGetTradingInstrumentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RspGetTradingInstrumentList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetTradingInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetTradingInstrument, symbol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspGetTradingInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSetTradingInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSetTradingInstrument, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspSetTradingInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSubscribe, list_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqSubscribe, binary_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqUnSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqUnSubscribe, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspUnSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSaveKline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSaveKline, series_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspSaveKline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqCombineSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqCombineSubscribe, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqCombineSubscribe, period_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspCombineSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RspCombineSubscribe, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::RspCombineSubscribe, history_),
  PROTOBUF_FIELD_OFFSET(::pb::RspCombineSubscribe, tick_),
  PROTOBUF_FIELD_OFFSET(::pb::RspCombineSubscribe, klines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SymbolCacheSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SymbolCacheSummary, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::SymbolCacheSummary, kline_len_),
  PROTOBUF_FIELD_OFFSET(::pb::SymbolCacheSummary, tick_len_),
  PROTOBUF_FIELD_OFFSET(::pb::SymbolCacheSummary, subscriber_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CacheSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CacheSummary, ks_map_size_),
  PROTOBUF_FIELD_OFFSET(::pb::CacheSummary, total_kline_len_),
  PROTOBUF_FIELD_OFFSET(::pb::CacheSummary, total_tick_len_),
  PROTOBUF_FIELD_OFFSET(::pb::CacheSummary, total_subscriber_count_),
  PROTOBUF_FIELD_OFFSET(::pb::CacheSummary, symbol_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetDCenterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspGetDCenterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RspGetDCenterInfo, cache_summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetTickSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetTickSeries, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetTickSeries, start_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetTickSeries, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspGetTickSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RspGetTickSeries, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::RspGetTickSeries, start_),
  PROTOBUF_FIELD_OFFSET(::pb::RspGetTickSeries, end_),
  PROTOBUF_FIELD_OFFSET(::pb::RspGetTickSeries, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetKlineSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetKlineSeries, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetKlineSeries, period_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetKlineSeries, start_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetKlineSeries, end_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqGetKlineSeries, lenlimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspGetKlineSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RspGetKlineSeries, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::RspGetKlineSeries, period_),
  PROTOBUF_FIELD_OFFSET(::pb::RspGetKlineSeries, start_),
  PROTOBUF_FIELD_OFFSET(::pb::RspGetKlineSeries, end_),
  PROTOBUF_FIELD_OFFSET(::pb::RspGetKlineSeries, lenlimit_),
  PROTOBUF_FIELD_OFFSET(::pb::RspGetKlineSeries, list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::ReqGetTradingInstrumentList)},
  { 6, -1, sizeof(::pb::RspGetTradingInstrumentList)},
  { 12, -1, sizeof(::pb::ReqGetTradingInstrument)},
  { 18, -1, sizeof(::pb::RspGetTradingInstrument)},
  { 23, -1, sizeof(::pb::ReqSetTradingInstrument)},
  { 29, -1, sizeof(::pb::RspSetTradingInstrument)},
  { 34, -1, sizeof(::pb::ReqSubscribe)},
  { 41, -1, sizeof(::pb::RspSubscribe)},
  { 46, -1, sizeof(::pb::ReqUnSubscribe)},
  { 52, -1, sizeof(::pb::RspUnSubscribe)},
  { 57, -1, sizeof(::pb::ReqSaveKline)},
  { 63, -1, sizeof(::pb::RspSaveKline)},
  { 68, -1, sizeof(::pb::ReqCombineSubscribe)},
  { 75, -1, sizeof(::pb::RspCombineSubscribe)},
  { 84, -1, sizeof(::pb::SymbolCacheSummary)},
  { 93, -1, sizeof(::pb::CacheSummary)},
  { 103, -1, sizeof(::pb::ReqGetDCenterInfo)},
  { 108, -1, sizeof(::pb::RspGetDCenterInfo)},
  { 114, -1, sizeof(::pb::ReqGetTickSeries)},
  { 122, -1, sizeof(::pb::RspGetTickSeries)},
  { 131, -1, sizeof(::pb::ReqGetKlineSeries)},
  { 141, -1, sizeof(::pb::RspGetKlineSeries)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqGetTradingInstrumentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspGetTradingInstrumentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqGetTradingInstrument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspGetTradingInstrument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqSetTradingInstrument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspSetTradingInstrument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqSubscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspSubscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqUnSubscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspUnSubscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqSaveKline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspSaveKline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqCombineSubscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspCombineSubscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SymbolCacheSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CacheSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqGetDCenterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspGetDCenterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqGetTickSeries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspGetTickSeries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqGetKlineSeries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspGetKlineSeries_default_instance_),
};

const char descriptor_table_protodef_dcenter_2eproto[] =
  "\n\rdcenter.proto\022\002pb\032\014common.proto\032\021marke"
  "t_data.proto\"A\n\033ReqGetTradingInstrumentL"
  "ist\022\"\n\010exchange\030\001 \001(\0162\020.pb.ExchangeType\""
  "B\n\033RspGetTradingInstrumentList\022#\n\004list\030\001"
  " \003(\0132\025.pb.TradingInstrument\"5\n\027ReqGetTra"
  "dingInstrument\022\032\n\006symbol\030\001 \001(\0132\n.pb.Symb"
  "ol\"\031\n\027RspGetTradingInstrument\">\n\027ReqSetT"
  "radingInstrument\022#\n\004list\030\001 \003(\0132\025.pb.Trad"
  "ingInstrument\"\031\n\027RspSetTradingInstrument"
  "\"=\n\014ReqSubscribe\022\030\n\004list\030\001 \003(\0132\n.pb.Symb"
  "ol\022\023\n\013binary_data\030\002 \001(\010\"\016\n\014RspSubscribe\""
  "*\n\016ReqUnSubscribe\022\030\n\004list\030\001 \003(\0132\n.pb.Sym"
  "bol\"\020\n\016RspUnSubscribe\"/\n\014ReqSaveKline\022\037\n"
  "\006series\030\001 \001(\0132\017.pb.KlineSeries\"\016\n\014RspSav"
  "eKline\"V\n\023ReqCombineSubscribe\022\032\n\006symbol\030"
  "\001 \001(\0132\n.pb.Symbol\022#\n\013period_list\030\002 \003(\0162\016"
  ".pb.PeriodType\"\224\001\n\023RspCombineSubscribe\022\032"
  "\n\006symbol\030\001 \001(\0132\n.pb.Symbol\022 \n\007history\030\002 "
  "\003(\0132\017.pb.KlineSeries\022$\n\004tick\030\003 \001(\0132\026.pb."
  "MarketDataSnapshot\022\031\n\006klines\030\004 \003(\0132\t.pb."
  "Kline\"o\n\022SymbolCacheSummary\022\032\n\006symbol\030\001 "
  "\001(\0132\n.pb.Symbol\022\021\n\tkline_len\030\002 \001(\005\022\020\n\010ti"
  "ck_len\030\003 \001(\005\022\030\n\020subscriber_count\030\004 \001(\005\"\241"
  "\001\n\014CacheSummary\022\023\n\013ks_map_size\030\001 \001(\005\022\027\n\017"
  "total_kline_len\030\002 \001(\005\022\026\n\016total_tick_len\030"
  "\003 \001(\005\022\036\n\026total_subscriber_count\030\004 \001(\005\022+\n"
  "\013symbol_list\030\005 \003(\0132\026.pb.SymbolCacheSumma"
  "ry\"\023\n\021ReqGetDCenterInfo\"<\n\021RspGetDCenter"
  "Info\022\'\n\rcache_summary\030\001 \001(\0132\020.pb.CacheSu"
  "mmary\"J\n\020ReqGetTickSeries\022\032\n\006symbol\030\001 \001("
  "\0132\n.pb.Symbol\022\r\n\005start\030\002 \001(\005\022\013\n\003end\030\003 \001("
  "\005\"p\n\020RspGetTickSeries\022\032\n\006symbol\030\001 \001(\0132\n."
  "pb.Symbol\022\r\n\005start\030\002 \001(\005\022\013\n\003end\030\003 \001(\005\022$\n"
  "\004list\030\004 \003(\0132\026.pb.MarketDataSnapshot\"}\n\021R"
  "eqGetKlineSeries\022\032\n\006symbol\030\001 \001(\0132\n.pb.Sy"
  "mbol\022\036\n\006period\030\002 \001(\0162\016.pb.PeriodType\022\r\n\005"
  "start\030\003 \001(\003\022\013\n\003end\030\004 \001(\003\022\020\n\010lenLimit\030\005 \001"
  "(\003\"\226\001\n\021RspGetKlineSeries\022\032\n\006symbol\030\001 \001(\013"
  "2\n.pb.Symbol\022\036\n\006period\030\002 \001(\0162\016.pb.Period"
  "Type\022\r\n\005start\030\003 \001(\003\022\013\n\003end\030\004 \001(\003\022\020\n\010lenL"
  "imit\030\005 \001(\003\022\027\n\004list\030\006 \003(\0132\t.pb.Kline2\372\002\n\007"
  "DCenter\0227\n\tSubscribe\022\020.pb.ReqSubscribe\032\026"
  ".pb.MarketDataSnapshot0\001\022F\n\020CombineSubsc"
  "ribe\022\027.pb.ReqCombineSubscribe\032\027.pb.RspCo"
  "mbineSubscribe0\001\022>\n\016GetDCenterInfo\022\025.pb."
  "ReqGetDCenterInfo\032\025.pb.RspGetDCenterInfo"
  "\022P\n\024GetTradingInstrument\022\033.pb.ReqGetTrad"
  "ingInstrument\032\033.pb.RspGetTradingInstrume"
  "nt\022\\\n\030GetTradingInstrumentList\022\037.pb.ReqG"
  "etTradingInstrumentList\032\037.pb.RspGetTradi"
  "ngInstrumentListb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dcenter_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_market_5fdata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dcenter_2eproto_sccs[22] = {
  &scc_info_CacheSummary_dcenter_2eproto.base,
  &scc_info_ReqCombineSubscribe_dcenter_2eproto.base,
  &scc_info_ReqGetDCenterInfo_dcenter_2eproto.base,
  &scc_info_ReqGetKlineSeries_dcenter_2eproto.base,
  &scc_info_ReqGetTickSeries_dcenter_2eproto.base,
  &scc_info_ReqGetTradingInstrument_dcenter_2eproto.base,
  &scc_info_ReqGetTradingInstrumentList_dcenter_2eproto.base,
  &scc_info_ReqSaveKline_dcenter_2eproto.base,
  &scc_info_ReqSetTradingInstrument_dcenter_2eproto.base,
  &scc_info_ReqSubscribe_dcenter_2eproto.base,
  &scc_info_ReqUnSubscribe_dcenter_2eproto.base,
  &scc_info_RspCombineSubscribe_dcenter_2eproto.base,
  &scc_info_RspGetDCenterInfo_dcenter_2eproto.base,
  &scc_info_RspGetKlineSeries_dcenter_2eproto.base,
  &scc_info_RspGetTickSeries_dcenter_2eproto.base,
  &scc_info_RspGetTradingInstrument_dcenter_2eproto.base,
  &scc_info_RspGetTradingInstrumentList_dcenter_2eproto.base,
  &scc_info_RspSaveKline_dcenter_2eproto.base,
  &scc_info_RspSetTradingInstrument_dcenter_2eproto.base,
  &scc_info_RspSubscribe_dcenter_2eproto.base,
  &scc_info_RspUnSubscribe_dcenter_2eproto.base,
  &scc_info_SymbolCacheSummary_dcenter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dcenter_2eproto_once;
static bool descriptor_table_dcenter_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dcenter_2eproto = {
  &descriptor_table_dcenter_2eproto_initialized, descriptor_table_protodef_dcenter_2eproto, "dcenter.proto", 2024,
  &descriptor_table_dcenter_2eproto_once, descriptor_table_dcenter_2eproto_sccs, descriptor_table_dcenter_2eproto_deps, 22, 2,
  schemas, file_default_instances, TableStruct_dcenter_2eproto::offsets,
  file_level_metadata_dcenter_2eproto, 22, file_level_enum_descriptors_dcenter_2eproto, file_level_service_descriptors_dcenter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dcenter_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dcenter_2eproto), true);
namespace pb {

// ===================================================================

void ReqGetTradingInstrumentList::InitAsDefaultInstance() {
}
class ReqGetTradingInstrumentList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGetTradingInstrumentList::kExchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetTradingInstrumentList::ReqGetTradingInstrumentList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqGetTradingInstrumentList)
}
ReqGetTradingInstrumentList::ReqGetTradingInstrumentList(const ReqGetTradingInstrumentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_ = from.exchange_;
  // @@protoc_insertion_point(copy_constructor:pb.ReqGetTradingInstrumentList)
}

void ReqGetTradingInstrumentList::SharedCtor() {
  exchange_ = 0;
}

ReqGetTradingInstrumentList::~ReqGetTradingInstrumentList() {
  // @@protoc_insertion_point(destructor:pb.ReqGetTradingInstrumentList)
  SharedDtor();
}

void ReqGetTradingInstrumentList::SharedDtor() {
}

void ReqGetTradingInstrumentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqGetTradingInstrumentList& ReqGetTradingInstrumentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqGetTradingInstrumentList_dcenter_2eproto.base);
  return *internal_default_instance();
}


void ReqGetTradingInstrumentList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqGetTradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqGetTradingInstrumentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.ExchangeType exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_exchange(static_cast<::pb::ExchangeType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqGetTradingInstrumentList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqGetTradingInstrumentList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exchange(static_cast< ::pb::ExchangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqGetTradingInstrumentList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqGetTradingInstrumentList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqGetTradingInstrumentList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqGetTradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqGetTradingInstrumentList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetTradingInstrumentList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqGetTradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqGetTradingInstrumentList)
  return target;
}

size_t ReqGetTradingInstrumentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqGetTradingInstrumentList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->exchange());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetTradingInstrumentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqGetTradingInstrumentList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetTradingInstrumentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetTradingInstrumentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqGetTradingInstrumentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqGetTradingInstrumentList)
    MergeFrom(*source);
  }
}

void ReqGetTradingInstrumentList::MergeFrom(const ReqGetTradingInstrumentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqGetTradingInstrumentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
}

void ReqGetTradingInstrumentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqGetTradingInstrumentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetTradingInstrumentList::CopyFrom(const ReqGetTradingInstrumentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqGetTradingInstrumentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetTradingInstrumentList::IsInitialized() const {
  return true;
}

void ReqGetTradingInstrumentList::Swap(ReqGetTradingInstrumentList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetTradingInstrumentList::InternalSwap(ReqGetTradingInstrumentList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(exchange_, other->exchange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetTradingInstrumentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspGetTradingInstrumentList::InitAsDefaultInstance() {
}
class RspGetTradingInstrumentList::HasBitSetters {
 public:
};

void RspGetTradingInstrumentList::clear_list() {
  list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspGetTradingInstrumentList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspGetTradingInstrumentList::RspGetTradingInstrumentList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspGetTradingInstrumentList)
}
RspGetTradingInstrumentList::RspGetTradingInstrumentList(const RspGetTradingInstrumentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RspGetTradingInstrumentList)
}

void RspGetTradingInstrumentList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RspGetTradingInstrumentList_dcenter_2eproto.base);
}

RspGetTradingInstrumentList::~RspGetTradingInstrumentList() {
  // @@protoc_insertion_point(destructor:pb.RspGetTradingInstrumentList)
  SharedDtor();
}

void RspGetTradingInstrumentList::SharedDtor() {
}

void RspGetTradingInstrumentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspGetTradingInstrumentList& RspGetTradingInstrumentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspGetTradingInstrumentList_dcenter_2eproto.base);
  return *internal_default_instance();
}


void RspGetTradingInstrumentList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspGetTradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspGetTradingInstrumentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.TradingInstrument list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspGetTradingInstrumentList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspGetTradingInstrumentList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TradingInstrument list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspGetTradingInstrumentList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspGetTradingInstrumentList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspGetTradingInstrumentList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspGetTradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.TradingInstrument list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspGetTradingInstrumentList)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspGetTradingInstrumentList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspGetTradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.TradingInstrument list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspGetTradingInstrumentList)
  return target;
}

size_t RspGetTradingInstrumentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspGetTradingInstrumentList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.TradingInstrument list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspGetTradingInstrumentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspGetTradingInstrumentList)
  GOOGLE_DCHECK_NE(&from, this);
  const RspGetTradingInstrumentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspGetTradingInstrumentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspGetTradingInstrumentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspGetTradingInstrumentList)
    MergeFrom(*source);
  }
}

void RspGetTradingInstrumentList::MergeFrom(const RspGetTradingInstrumentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspGetTradingInstrumentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void RspGetTradingInstrumentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspGetTradingInstrumentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetTradingInstrumentList::CopyFrom(const RspGetTradingInstrumentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspGetTradingInstrumentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetTradingInstrumentList::IsInitialized() const {
  return true;
}

void RspGetTradingInstrumentList::Swap(RspGetTradingInstrumentList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspGetTradingInstrumentList::InternalSwap(RspGetTradingInstrumentList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RspGetTradingInstrumentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqGetTradingInstrument::InitAsDefaultInstance() {
  ::pb::_ReqGetTradingInstrument_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class ReqGetTradingInstrument::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const ReqGetTradingInstrument* msg);
};

const ::pb::Symbol&
ReqGetTradingInstrument::HasBitSetters::symbol(const ReqGetTradingInstrument* msg) {
  return *msg->symbol_;
}
void ReqGetTradingInstrument::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGetTradingInstrument::kSymbolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetTradingInstrument::ReqGetTradingInstrument()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqGetTradingInstrument)
}
ReqGetTradingInstrument::ReqGetTradingInstrument(const ReqGetTradingInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.ReqGetTradingInstrument)
}

void ReqGetTradingInstrument::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqGetTradingInstrument_dcenter_2eproto.base);
  symbol_ = nullptr;
}

ReqGetTradingInstrument::~ReqGetTradingInstrument() {
  // @@protoc_insertion_point(destructor:pb.ReqGetTradingInstrument)
  SharedDtor();
}

void ReqGetTradingInstrument::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void ReqGetTradingInstrument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqGetTradingInstrument& ReqGetTradingInstrument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqGetTradingInstrument_dcenter_2eproto.base);
  return *internal_default_instance();
}


void ReqGetTradingInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqGetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqGetTradingInstrument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqGetTradingInstrument::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqGetTradingInstrument)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqGetTradingInstrument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqGetTradingInstrument)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqGetTradingInstrument::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqGetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqGetTradingInstrument)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetTradingInstrument::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqGetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqGetTradingInstrument)
  return target;
}

size_t ReqGetTradingInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqGetTradingInstrument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetTradingInstrument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqGetTradingInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetTradingInstrument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetTradingInstrument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqGetTradingInstrument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqGetTradingInstrument)
    MergeFrom(*source);
  }
}

void ReqGetTradingInstrument::MergeFrom(const ReqGetTradingInstrument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqGetTradingInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
}

void ReqGetTradingInstrument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqGetTradingInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetTradingInstrument::CopyFrom(const ReqGetTradingInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqGetTradingInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetTradingInstrument::IsInitialized() const {
  return true;
}

void ReqGetTradingInstrument::Swap(ReqGetTradingInstrument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetTradingInstrument::InternalSwap(ReqGetTradingInstrument* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(symbol_, other->symbol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetTradingInstrument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspGetTradingInstrument::InitAsDefaultInstance() {
}
class RspGetTradingInstrument::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspGetTradingInstrument::RspGetTradingInstrument()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspGetTradingInstrument)
}
RspGetTradingInstrument::RspGetTradingInstrument(const RspGetTradingInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RspGetTradingInstrument)
}

void RspGetTradingInstrument::SharedCtor() {
}

RspGetTradingInstrument::~RspGetTradingInstrument() {
  // @@protoc_insertion_point(destructor:pb.RspGetTradingInstrument)
  SharedDtor();
}

void RspGetTradingInstrument::SharedDtor() {
}

void RspGetTradingInstrument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspGetTradingInstrument& RspGetTradingInstrument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspGetTradingInstrument_dcenter_2eproto.base);
  return *internal_default_instance();
}


void RspGetTradingInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspGetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspGetTradingInstrument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspGetTradingInstrument::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspGetTradingInstrument)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspGetTradingInstrument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspGetTradingInstrument)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspGetTradingInstrument::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspGetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspGetTradingInstrument)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspGetTradingInstrument::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspGetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspGetTradingInstrument)
  return target;
}

size_t RspGetTradingInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspGetTradingInstrument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspGetTradingInstrument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspGetTradingInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  const RspGetTradingInstrument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspGetTradingInstrument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspGetTradingInstrument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspGetTradingInstrument)
    MergeFrom(*source);
  }
}

void RspGetTradingInstrument::MergeFrom(const RspGetTradingInstrument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspGetTradingInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RspGetTradingInstrument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspGetTradingInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetTradingInstrument::CopyFrom(const RspGetTradingInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspGetTradingInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetTradingInstrument::IsInitialized() const {
  return true;
}

void RspGetTradingInstrument::Swap(RspGetTradingInstrument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspGetTradingInstrument::InternalSwap(RspGetTradingInstrument* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspGetTradingInstrument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSetTradingInstrument::InitAsDefaultInstance() {
}
class ReqSetTradingInstrument::HasBitSetters {
 public:
};

void ReqSetTradingInstrument::clear_list() {
  list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSetTradingInstrument::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSetTradingInstrument::ReqSetTradingInstrument()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqSetTradingInstrument)
}
ReqSetTradingInstrument::ReqSetTradingInstrument(const ReqSetTradingInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ReqSetTradingInstrument)
}

void ReqSetTradingInstrument::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSetTradingInstrument_dcenter_2eproto.base);
}

ReqSetTradingInstrument::~ReqSetTradingInstrument() {
  // @@protoc_insertion_point(destructor:pb.ReqSetTradingInstrument)
  SharedDtor();
}

void ReqSetTradingInstrument::SharedDtor() {
}

void ReqSetTradingInstrument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSetTradingInstrument& ReqSetTradingInstrument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSetTradingInstrument_dcenter_2eproto.base);
  return *internal_default_instance();
}


void ReqSetTradingInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqSetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqSetTradingInstrument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.TradingInstrument list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqSetTradingInstrument::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqSetTradingInstrument)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TradingInstrument list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqSetTradingInstrument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqSetTradingInstrument)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqSetTradingInstrument::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqSetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.TradingInstrument list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqSetTradingInstrument)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSetTradingInstrument::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqSetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.TradingInstrument list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqSetTradingInstrument)
  return target;
}

size_t ReqSetTradingInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqSetTradingInstrument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.TradingInstrument list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSetTradingInstrument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqSetTradingInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetTradingInstrument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSetTradingInstrument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqSetTradingInstrument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqSetTradingInstrument)
    MergeFrom(*source);
  }
}

void ReqSetTradingInstrument::MergeFrom(const ReqSetTradingInstrument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqSetTradingInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ReqSetTradingInstrument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqSetTradingInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetTradingInstrument::CopyFrom(const ReqSetTradingInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqSetTradingInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetTradingInstrument::IsInitialized() const {
  return true;
}

void ReqSetTradingInstrument::Swap(ReqSetTradingInstrument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSetTradingInstrument::InternalSwap(ReqSetTradingInstrument* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSetTradingInstrument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspSetTradingInstrument::InitAsDefaultInstance() {
}
class RspSetTradingInstrument::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspSetTradingInstrument::RspSetTradingInstrument()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspSetTradingInstrument)
}
RspSetTradingInstrument::RspSetTradingInstrument(const RspSetTradingInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RspSetTradingInstrument)
}

void RspSetTradingInstrument::SharedCtor() {
}

RspSetTradingInstrument::~RspSetTradingInstrument() {
  // @@protoc_insertion_point(destructor:pb.RspSetTradingInstrument)
  SharedDtor();
}

void RspSetTradingInstrument::SharedDtor() {
}

void RspSetTradingInstrument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspSetTradingInstrument& RspSetTradingInstrument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspSetTradingInstrument_dcenter_2eproto.base);
  return *internal_default_instance();
}


void RspSetTradingInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspSetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspSetTradingInstrument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspSetTradingInstrument::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspSetTradingInstrument)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspSetTradingInstrument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspSetTradingInstrument)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspSetTradingInstrument::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspSetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspSetTradingInstrument)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspSetTradingInstrument::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspSetTradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspSetTradingInstrument)
  return target;
}

size_t RspSetTradingInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspSetTradingInstrument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspSetTradingInstrument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspSetTradingInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  const RspSetTradingInstrument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspSetTradingInstrument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspSetTradingInstrument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspSetTradingInstrument)
    MergeFrom(*source);
  }
}

void RspSetTradingInstrument::MergeFrom(const RspSetTradingInstrument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspSetTradingInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RspSetTradingInstrument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspSetTradingInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspSetTradingInstrument::CopyFrom(const RspSetTradingInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspSetTradingInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspSetTradingInstrument::IsInitialized() const {
  return true;
}

void RspSetTradingInstrument::Swap(RspSetTradingInstrument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspSetTradingInstrument::InternalSwap(RspSetTradingInstrument* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspSetTradingInstrument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSubscribe::InitAsDefaultInstance() {
}
class ReqSubscribe::HasBitSetters {
 public:
};

void ReqSubscribe::clear_list() {
  list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSubscribe::kListFieldNumber;
const int ReqSubscribe::kBinaryDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSubscribe::ReqSubscribe()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqSubscribe)
}
ReqSubscribe::ReqSubscribe(const ReqSubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  binary_data_ = from.binary_data_;
  // @@protoc_insertion_point(copy_constructor:pb.ReqSubscribe)
}

void ReqSubscribe::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSubscribe_dcenter_2eproto.base);
  binary_data_ = false;
}

ReqSubscribe::~ReqSubscribe() {
  // @@protoc_insertion_point(destructor:pb.ReqSubscribe)
  SharedDtor();
}

void ReqSubscribe::SharedDtor() {
}

void ReqSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSubscribe& ReqSubscribe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSubscribe_dcenter_2eproto.base);
  return *internal_default_instance();
}


void ReqSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  binary_data_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqSubscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.Symbol list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // bool binary_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          binary_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqSubscribe::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqSubscribe)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Symbol list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool binary_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binary_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqSubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqSubscribe::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Symbol list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  // bool binary_data = 2;
  if (this->binary_data() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->binary_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqSubscribe)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSubscribe::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Symbol list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  // bool binary_data = 2;
  if (this->binary_data() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->binary_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqSubscribe)
  return target;
}

size_t ReqSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Symbol list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // bool binary_data = 2;
  if (this->binary_data() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSubscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSubscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqSubscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqSubscribe)
    MergeFrom(*source);
  }
}

void ReqSubscribe::MergeFrom(const ReqSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.binary_data() != 0) {
    set_binary_data(from.binary_data());
  }
}

void ReqSubscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubscribe::CopyFrom(const ReqSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubscribe::IsInitialized() const {
  return true;
}

void ReqSubscribe::Swap(ReqSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSubscribe::InternalSwap(ReqSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(binary_data_, other->binary_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSubscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspSubscribe::InitAsDefaultInstance() {
}
class RspSubscribe::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspSubscribe::RspSubscribe()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspSubscribe)
}
RspSubscribe::RspSubscribe(const RspSubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RspSubscribe)
}

void RspSubscribe::SharedCtor() {
}

RspSubscribe::~RspSubscribe() {
  // @@protoc_insertion_point(destructor:pb.RspSubscribe)
  SharedDtor();
}

void RspSubscribe::SharedDtor() {
}

void RspSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspSubscribe& RspSubscribe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspSubscribe_dcenter_2eproto.base);
  return *internal_default_instance();
}


void RspSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspSubscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspSubscribe::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspSubscribe)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspSubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspSubscribe::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspSubscribe)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspSubscribe::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspSubscribe)
  return target;
}

size_t RspSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspSubscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const RspSubscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspSubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspSubscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspSubscribe)
    MergeFrom(*source);
  }
}

void RspSubscribe::MergeFrom(const RspSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RspSubscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspSubscribe::CopyFrom(const RspSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspSubscribe::IsInitialized() const {
  return true;
}

void RspSubscribe::Swap(RspSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspSubscribe::InternalSwap(RspSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspSubscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqUnSubscribe::InitAsDefaultInstance() {
}
class ReqUnSubscribe::HasBitSetters {
 public:
};

void ReqUnSubscribe::clear_list() {
  list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqUnSubscribe::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqUnSubscribe::ReqUnSubscribe()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqUnSubscribe)
}
ReqUnSubscribe::ReqUnSubscribe(const ReqUnSubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ReqUnSubscribe)
}

void ReqUnSubscribe::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqUnSubscribe_dcenter_2eproto.base);
}

ReqUnSubscribe::~ReqUnSubscribe() {
  // @@protoc_insertion_point(destructor:pb.ReqUnSubscribe)
  SharedDtor();
}

void ReqUnSubscribe::SharedDtor() {
}

void ReqUnSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqUnSubscribe& ReqUnSubscribe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqUnSubscribe_dcenter_2eproto.base);
  return *internal_default_instance();
}


void ReqUnSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqUnSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqUnSubscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.Symbol list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqUnSubscribe::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqUnSubscribe)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Symbol list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqUnSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqUnSubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqUnSubscribe::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqUnSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Symbol list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqUnSubscribe)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUnSubscribe::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqUnSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Symbol list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqUnSubscribe)
  return target;
}

size_t ReqUnSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqUnSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Symbol list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUnSubscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqUnSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUnSubscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUnSubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqUnSubscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqUnSubscribe)
    MergeFrom(*source);
  }
}

void ReqUnSubscribe::MergeFrom(const ReqUnSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqUnSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ReqUnSubscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqUnSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUnSubscribe::CopyFrom(const ReqUnSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqUnSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUnSubscribe::IsInitialized() const {
  return true;
}

void ReqUnSubscribe::Swap(ReqUnSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqUnSubscribe::InternalSwap(ReqUnSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUnSubscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspUnSubscribe::InitAsDefaultInstance() {
}
class RspUnSubscribe::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspUnSubscribe::RspUnSubscribe()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspUnSubscribe)
}
RspUnSubscribe::RspUnSubscribe(const RspUnSubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RspUnSubscribe)
}

void RspUnSubscribe::SharedCtor() {
}

RspUnSubscribe::~RspUnSubscribe() {
  // @@protoc_insertion_point(destructor:pb.RspUnSubscribe)
  SharedDtor();
}

void RspUnSubscribe::SharedDtor() {
}

void RspUnSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspUnSubscribe& RspUnSubscribe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspUnSubscribe_dcenter_2eproto.base);
  return *internal_default_instance();
}


void RspUnSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspUnSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspUnSubscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspUnSubscribe::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspUnSubscribe)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspUnSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspUnSubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspUnSubscribe::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspUnSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspUnSubscribe)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspUnSubscribe::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspUnSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspUnSubscribe)
  return target;
}

size_t RspUnSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspUnSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspUnSubscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspUnSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const RspUnSubscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspUnSubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspUnSubscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspUnSubscribe)
    MergeFrom(*source);
  }
}

void RspUnSubscribe::MergeFrom(const RspUnSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspUnSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RspUnSubscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspUnSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspUnSubscribe::CopyFrom(const RspUnSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspUnSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspUnSubscribe::IsInitialized() const {
  return true;
}

void RspUnSubscribe::Swap(RspUnSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspUnSubscribe::InternalSwap(RspUnSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspUnSubscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSaveKline::InitAsDefaultInstance() {
  ::pb::_ReqSaveKline_default_instance_._instance.get_mutable()->series_ = const_cast< ::pb::KlineSeries*>(
      ::pb::KlineSeries::internal_default_instance());
}
class ReqSaveKline::HasBitSetters {
 public:
  static const ::pb::KlineSeries& series(const ReqSaveKline* msg);
};

const ::pb::KlineSeries&
ReqSaveKline::HasBitSetters::series(const ReqSaveKline* msg) {
  return *msg->series_;
}
void ReqSaveKline::clear_series() {
  if (GetArenaNoVirtual() == nullptr && series_ != nullptr) {
    delete series_;
  }
  series_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSaveKline::kSeriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSaveKline::ReqSaveKline()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqSaveKline)
}
ReqSaveKline::ReqSaveKline(const ReqSaveKline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_series()) {
    series_ = new ::pb::KlineSeries(*from.series_);
  } else {
    series_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.ReqSaveKline)
}

void ReqSaveKline::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSaveKline_dcenter_2eproto.base);
  series_ = nullptr;
}

ReqSaveKline::~ReqSaveKline() {
  // @@protoc_insertion_point(destructor:pb.ReqSaveKline)
  SharedDtor();
}

void ReqSaveKline::SharedDtor() {
  if (this != internal_default_instance()) delete series_;
}

void ReqSaveKline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSaveKline& ReqSaveKline::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSaveKline_dcenter_2eproto.base);
  return *internal_default_instance();
}


void ReqSaveKline::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqSaveKline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && series_ != nullptr) {
    delete series_;
  }
  series_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqSaveKline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.KlineSeries series = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_series(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqSaveKline::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqSaveKline)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.KlineSeries series = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_series()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqSaveKline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqSaveKline)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqSaveKline::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqSaveKline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.KlineSeries series = 1;
  if (this->has_series()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::series(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqSaveKline)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSaveKline::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqSaveKline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.KlineSeries series = 1;
  if (this->has_series()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::series(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqSaveKline)
  return target;
}

size_t ReqSaveKline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqSaveKline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.KlineSeries series = 1;
  if (this->has_series()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *series_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSaveKline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqSaveKline)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSaveKline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSaveKline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqSaveKline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqSaveKline)
    MergeFrom(*source);
  }
}

void ReqSaveKline::MergeFrom(const ReqSaveKline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqSaveKline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_series()) {
    mutable_series()->::pb::KlineSeries::MergeFrom(from.series());
  }
}

void ReqSaveKline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqSaveKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSaveKline::CopyFrom(const ReqSaveKline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqSaveKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSaveKline::IsInitialized() const {
  return true;
}

void ReqSaveKline::Swap(ReqSaveKline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSaveKline::InternalSwap(ReqSaveKline* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(series_, other->series_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSaveKline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspSaveKline::InitAsDefaultInstance() {
}
class RspSaveKline::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspSaveKline::RspSaveKline()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspSaveKline)
}
RspSaveKline::RspSaveKline(const RspSaveKline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RspSaveKline)
}

void RspSaveKline::SharedCtor() {
}

RspSaveKline::~RspSaveKline() {
  // @@protoc_insertion_point(destructor:pb.RspSaveKline)
  SharedDtor();
}

void RspSaveKline::SharedDtor() {
}

void RspSaveKline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspSaveKline& RspSaveKline::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspSaveKline_dcenter_2eproto.base);
  return *internal_default_instance();
}


void RspSaveKline::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspSaveKline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspSaveKline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspSaveKline::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspSaveKline)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspSaveKline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspSaveKline)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspSaveKline::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspSaveKline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspSaveKline)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspSaveKline::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspSaveKline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspSaveKline)
  return target;
}

size_t RspSaveKline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspSaveKline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspSaveKline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspSaveKline)
  GOOGLE_DCHECK_NE(&from, this);
  const RspSaveKline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspSaveKline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspSaveKline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspSaveKline)
    MergeFrom(*source);
  }
}

void RspSaveKline::MergeFrom(const RspSaveKline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspSaveKline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RspSaveKline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspSaveKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspSaveKline::CopyFrom(const RspSaveKline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspSaveKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspSaveKline::IsInitialized() const {
  return true;
}

void RspSaveKline::Swap(RspSaveKline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspSaveKline::InternalSwap(RspSaveKline* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspSaveKline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqCombineSubscribe::InitAsDefaultInstance() {
  ::pb::_ReqCombineSubscribe_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class ReqCombineSubscribe::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const ReqCombineSubscribe* msg);
};

const ::pb::Symbol&
ReqCombineSubscribe::HasBitSetters::symbol(const ReqCombineSubscribe* msg) {
  return *msg->symbol_;
}
void ReqCombineSubscribe::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCombineSubscribe::kSymbolFieldNumber;
const int ReqCombineSubscribe::kPeriodListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCombineSubscribe::ReqCombineSubscribe()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqCombineSubscribe)
}
ReqCombineSubscribe::ReqCombineSubscribe(const ReqCombineSubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      period_list_(from.period_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.ReqCombineSubscribe)
}

void ReqCombineSubscribe::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqCombineSubscribe_dcenter_2eproto.base);
  symbol_ = nullptr;
}

ReqCombineSubscribe::~ReqCombineSubscribe() {
  // @@protoc_insertion_point(destructor:pb.ReqCombineSubscribe)
  SharedDtor();
}

void ReqCombineSubscribe::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void ReqCombineSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqCombineSubscribe& ReqCombineSubscribe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqCombineSubscribe_dcenter_2eproto.base);
  return *internal_default_instance();
}


void ReqCombineSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqCombineSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  period_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqCombineSubscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.PeriodType period_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_period_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_period_list(static_cast<::pb::PeriodType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqCombineSubscribe::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqCombineSubscribe)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.PeriodType period_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_period_list(static_cast< ::pb::PeriodType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_period_list(static_cast< ::pb::PeriodType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqCombineSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqCombineSubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqCombineSubscribe::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqCombineSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // repeated .pb.PeriodType period_list = 2;
  if (this->period_list_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_period_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->period_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->period_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqCombineSubscribe)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCombineSubscribe::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqCombineSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // repeated .pb.PeriodType period_list = 2;
  if (this->period_list_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _period_list_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->period_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqCombineSubscribe)
  return target;
}

size_t ReqCombineSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqCombineSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.PeriodType period_list = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->period_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->period_list(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _period_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCombineSubscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqCombineSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCombineSubscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCombineSubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqCombineSubscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqCombineSubscribe)
    MergeFrom(*source);
  }
}

void ReqCombineSubscribe::MergeFrom(const ReqCombineSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqCombineSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  period_list_.MergeFrom(from.period_list_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
}

void ReqCombineSubscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqCombineSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCombineSubscribe::CopyFrom(const ReqCombineSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqCombineSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCombineSubscribe::IsInitialized() const {
  return true;
}

void ReqCombineSubscribe::Swap(ReqCombineSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCombineSubscribe::InternalSwap(ReqCombineSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  period_list_.InternalSwap(&other->period_list_);
  swap(symbol_, other->symbol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCombineSubscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspCombineSubscribe::InitAsDefaultInstance() {
  ::pb::_RspCombineSubscribe_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_RspCombineSubscribe_default_instance_._instance.get_mutable()->tick_ = const_cast< ::pb::MarketDataSnapshot*>(
      ::pb::MarketDataSnapshot::internal_default_instance());
}
class RspCombineSubscribe::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const RspCombineSubscribe* msg);
  static const ::pb::MarketDataSnapshot& tick(const RspCombineSubscribe* msg);
};

const ::pb::Symbol&
RspCombineSubscribe::HasBitSetters::symbol(const RspCombineSubscribe* msg) {
  return *msg->symbol_;
}
const ::pb::MarketDataSnapshot&
RspCombineSubscribe::HasBitSetters::tick(const RspCombineSubscribe* msg) {
  return *msg->tick_;
}
void RspCombineSubscribe::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void RspCombineSubscribe::clear_history() {
  history_.Clear();
}
void RspCombineSubscribe::clear_tick() {
  if (GetArenaNoVirtual() == nullptr && tick_ != nullptr) {
    delete tick_;
  }
  tick_ = nullptr;
}
void RspCombineSubscribe::clear_klines() {
  klines_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspCombineSubscribe::kSymbolFieldNumber;
const int RspCombineSubscribe::kHistoryFieldNumber;
const int RspCombineSubscribe::kTickFieldNumber;
const int RspCombineSubscribe::kKlinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspCombineSubscribe::RspCombineSubscribe()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspCombineSubscribe)
}
RspCombineSubscribe::RspCombineSubscribe(const RspCombineSubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      history_(from.history_),
      klines_(from.klines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_tick()) {
    tick_ = new ::pb::MarketDataSnapshot(*from.tick_);
  } else {
    tick_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RspCombineSubscribe)
}

void RspCombineSubscribe::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RspCombineSubscribe_dcenter_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(tick_));
}

RspCombineSubscribe::~RspCombineSubscribe() {
  // @@protoc_insertion_point(destructor:pb.RspCombineSubscribe)
  SharedDtor();
}

void RspCombineSubscribe::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete tick_;
}

void RspCombineSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspCombineSubscribe& RspCombineSubscribe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspCombineSubscribe_dcenter_2eproto.base);
  return *internal_default_instance();
}


void RspCombineSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspCombineSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  klines_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tick_ != nullptr) {
    delete tick_;
  }
  tick_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspCombineSubscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.KlineSeries history = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .pb.MarketDataSnapshot tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_tick(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.Kline klines = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_klines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspCombineSubscribe::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspCombineSubscribe)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.KlineSeries history = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.MarketDataSnapshot tick = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Kline klines = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_klines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspCombineSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspCombineSubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspCombineSubscribe::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspCombineSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // repeated .pb.KlineSeries history = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->history(static_cast<int>(i)),
      output);
  }

  // .pb.MarketDataSnapshot tick = 3;
  if (this->has_tick()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::tick(this), output);
  }

  // repeated .pb.Kline klines = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->klines_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->klines(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspCombineSubscribe)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspCombineSubscribe::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspCombineSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // repeated .pb.KlineSeries history = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->history(static_cast<int>(i)), target);
  }

  // .pb.MarketDataSnapshot tick = 3;
  if (this->has_tick()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::tick(this), target);
  }

  // repeated .pb.Kline klines = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->klines_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->klines(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspCombineSubscribe)
  return target;
}

size_t RspCombineSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspCombineSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.KlineSeries history = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->history(static_cast<int>(i)));
    }
  }

  // repeated .pb.Kline klines = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->klines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->klines(static_cast<int>(i)));
    }
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.MarketDataSnapshot tick = 3;
  if (this->has_tick()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspCombineSubscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspCombineSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const RspCombineSubscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspCombineSubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspCombineSubscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspCombineSubscribe)
    MergeFrom(*source);
  }
}

void RspCombineSubscribe::MergeFrom(const RspCombineSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspCombineSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  klines_.MergeFrom(from.klines_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_tick()) {
    mutable_tick()->::pb::MarketDataSnapshot::MergeFrom(from.tick());
  }
}

void RspCombineSubscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspCombineSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCombineSubscribe::CopyFrom(const RspCombineSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspCombineSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCombineSubscribe::IsInitialized() const {
  return true;
}

void RspCombineSubscribe::Swap(RspCombineSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspCombineSubscribe::InternalSwap(RspCombineSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&history_)->InternalSwap(CastToBase(&other->history_));
  CastToBase(&klines_)->InternalSwap(CastToBase(&other->klines_));
  swap(symbol_, other->symbol_);
  swap(tick_, other->tick_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspCombineSubscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SymbolCacheSummary::InitAsDefaultInstance() {
  ::pb::_SymbolCacheSummary_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class SymbolCacheSummary::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const SymbolCacheSummary* msg);
};

const ::pb::Symbol&
SymbolCacheSummary::HasBitSetters::symbol(const SymbolCacheSummary* msg) {
  return *msg->symbol_;
}
void SymbolCacheSummary::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolCacheSummary::kSymbolFieldNumber;
const int SymbolCacheSummary::kKlineLenFieldNumber;
const int SymbolCacheSummary::kTickLenFieldNumber;
const int SymbolCacheSummary::kSubscriberCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolCacheSummary::SymbolCacheSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SymbolCacheSummary)
}
SymbolCacheSummary::SymbolCacheSummary(const SymbolCacheSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&kline_len_, &from.kline_len_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscriber_count_) -
    reinterpret_cast<char*>(&kline_len_)) + sizeof(subscriber_count_));
  // @@protoc_insertion_point(copy_constructor:pb.SymbolCacheSummary)
}

void SymbolCacheSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SymbolCacheSummary_dcenter_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscriber_count_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(subscriber_count_));
}

SymbolCacheSummary::~SymbolCacheSummary() {
  // @@protoc_insertion_point(destructor:pb.SymbolCacheSummary)
  SharedDtor();
}

void SymbolCacheSummary::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void SymbolCacheSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SymbolCacheSummary& SymbolCacheSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SymbolCacheSummary_dcenter_2eproto.base);
  return *internal_default_instance();
}


void SymbolCacheSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SymbolCacheSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&kline_len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscriber_count_) -
      reinterpret_cast<char*>(&kline_len_)) + sizeof(subscriber_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SymbolCacheSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kline_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          kline_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tick_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subscriber_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subscriber_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SymbolCacheSummary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SymbolCacheSummary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 kline_len = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &kline_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tick_len = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subscriber_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscriber_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SymbolCacheSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SymbolCacheSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SymbolCacheSummary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SymbolCacheSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // int32 kline_len = 2;
  if (this->kline_len() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->kline_len(), output);
  }

  // int32 tick_len = 3;
  if (this->tick_len() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->tick_len(), output);
  }

  // int32 subscriber_count = 4;
  if (this->subscriber_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->subscriber_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SymbolCacheSummary)
}

::PROTOBUF_NAMESPACE_ID::uint8* SymbolCacheSummary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SymbolCacheSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // int32 kline_len = 2;
  if (this->kline_len() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->kline_len(), target);
  }

  // int32 tick_len = 3;
  if (this->tick_len() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->tick_len(), target);
  }

  // int32 subscriber_count = 4;
  if (this->subscriber_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->subscriber_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SymbolCacheSummary)
  return target;
}

size_t SymbolCacheSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SymbolCacheSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 kline_len = 2;
  if (this->kline_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->kline_len());
  }

  // int32 tick_len = 3;
  if (this->tick_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->tick_len());
  }

  // int32 subscriber_count = 4;
  if (this->subscriber_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->subscriber_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolCacheSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SymbolCacheSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolCacheSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SymbolCacheSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SymbolCacheSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SymbolCacheSummary)
    MergeFrom(*source);
  }
}

void SymbolCacheSummary::MergeFrom(const SymbolCacheSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SymbolCacheSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.kline_len() != 0) {
    set_kline_len(from.kline_len());
  }
  if (from.tick_len() != 0) {
    set_tick_len(from.tick_len());
  }
  if (from.subscriber_count() != 0) {
    set_subscriber_count(from.subscriber_count());
  }
}

void SymbolCacheSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SymbolCacheSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolCacheSummary::CopyFrom(const SymbolCacheSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SymbolCacheSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolCacheSummary::IsInitialized() const {
  return true;
}

void SymbolCacheSummary::Swap(SymbolCacheSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolCacheSummary::InternalSwap(SymbolCacheSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(symbol_, other->symbol_);
  swap(kline_len_, other->kline_len_);
  swap(tick_len_, other->tick_len_);
  swap(subscriber_count_, other->subscriber_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolCacheSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheSummary::InitAsDefaultInstance() {
}
class CacheSummary::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheSummary::kKsMapSizeFieldNumber;
const int CacheSummary::kTotalKlineLenFieldNumber;
const int CacheSummary::kTotalTickLenFieldNumber;
const int CacheSummary::kTotalSubscriberCountFieldNumber;
const int CacheSummary::kSymbolListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CacheSummary::CacheSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CacheSummary)
}
CacheSummary::CacheSummary(const CacheSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      symbol_list_(from.symbol_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ks_map_size_, &from.ks_map_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_subscriber_count_) -
    reinterpret_cast<char*>(&ks_map_size_)) + sizeof(total_subscriber_count_));
  // @@protoc_insertion_point(copy_constructor:pb.CacheSummary)
}

void CacheSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheSummary_dcenter_2eproto.base);
  ::memset(&ks_map_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_subscriber_count_) -
      reinterpret_cast<char*>(&ks_map_size_)) + sizeof(total_subscriber_count_));
}

CacheSummary::~CacheSummary() {
  // @@protoc_insertion_point(destructor:pb.CacheSummary)
  SharedDtor();
}

void CacheSummary::SharedDtor() {
}

void CacheSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheSummary& CacheSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheSummary_dcenter_2eproto.base);
  return *internal_default_instance();
}


void CacheSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CacheSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_list_.Clear();
  ::memset(&ks_map_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_subscriber_count_) -
      reinterpret_cast<char*>(&ks_map_size_)) + sizeof(total_subscriber_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CacheSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ks_map_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ks_map_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_kline_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_kline_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_tick_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_tick_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_subscriber_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_subscriber_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.SymbolCacheSummary symbol_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_symbol_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CacheSummary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CacheSummary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ks_map_size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ks_map_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_kline_len = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_kline_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_tick_len = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_tick_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_subscriber_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_subscriber_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.SymbolCacheSummary symbol_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_symbol_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CacheSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CacheSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CacheSummary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CacheSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ks_map_size = 1;
  if (this->ks_map_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ks_map_size(), output);
  }

  // int32 total_kline_len = 2;
  if (this->total_kline_len() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->total_kline_len(), output);
  }

  // int32 total_tick_len = 3;
  if (this->total_tick_len() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->total_tick_len(), output);
  }

  // int32 total_subscriber_count = 4;
  if (this->total_subscriber_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->total_subscriber_count(), output);
  }

  // repeated .pb.SymbolCacheSummary symbol_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->symbol_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->symbol_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CacheSummary)
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheSummary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CacheSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ks_map_size = 1;
  if (this->ks_map_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ks_map_size(), target);
  }

  // int32 total_kline_len = 2;
  if (this->total_kline_len() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->total_kline_len(), target);
  }

  // int32 total_tick_len = 3;
  if (this->total_tick_len() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->total_tick_len(), target);
  }

  // int32 total_subscriber_count = 4;
  if (this->total_subscriber_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->total_subscriber_count(), target);
  }

  // repeated .pb.SymbolCacheSummary symbol_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->symbol_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->symbol_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CacheSummary)
  return target;
}

size_t CacheSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CacheSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.SymbolCacheSummary symbol_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->symbol_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->symbol_list(static_cast<int>(i)));
    }
  }

  // int32 ks_map_size = 1;
  if (this->ks_map_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ks_map_size());
  }

  // int32 total_kline_len = 2;
  if (this->total_kline_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->total_kline_len());
  }

  // int32 total_tick_len = 3;
  if (this->total_tick_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->total_tick_len());
  }

  // int32 total_subscriber_count = 4;
  if (this->total_subscriber_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->total_subscriber_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CacheSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CacheSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CacheSummary)
    MergeFrom(*source);
  }
}

void CacheSummary::MergeFrom(const CacheSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CacheSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  symbol_list_.MergeFrom(from.symbol_list_);
  if (from.ks_map_size() != 0) {
    set_ks_map_size(from.ks_map_size());
  }
  if (from.total_kline_len() != 0) {
    set_total_kline_len(from.total_kline_len());
  }
  if (from.total_tick_len() != 0) {
    set_total_tick_len(from.total_tick_len());
  }
  if (from.total_subscriber_count() != 0) {
    set_total_subscriber_count(from.total_subscriber_count());
  }
}

void CacheSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CacheSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheSummary::CopyFrom(const CacheSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CacheSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheSummary::IsInitialized() const {
  return true;
}

void CacheSummary::Swap(CacheSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CacheSummary::InternalSwap(CacheSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&symbol_list_)->InternalSwap(CastToBase(&other->symbol_list_));
  swap(ks_map_size_, other->ks_map_size_);
  swap(total_kline_len_, other->total_kline_len_);
  swap(total_tick_len_, other->total_tick_len_);
  swap(total_subscriber_count_, other->total_subscriber_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqGetDCenterInfo::InitAsDefaultInstance() {
}
class ReqGetDCenterInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetDCenterInfo::ReqGetDCenterInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqGetDCenterInfo)
}
ReqGetDCenterInfo::ReqGetDCenterInfo(const ReqGetDCenterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ReqGetDCenterInfo)
}

void ReqGetDCenterInfo::SharedCtor() {
}

ReqGetDCenterInfo::~ReqGetDCenterInfo() {
  // @@protoc_insertion_point(destructor:pb.ReqGetDCenterInfo)
  SharedDtor();
}

void ReqGetDCenterInfo::SharedDtor() {
}

void ReqGetDCenterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqGetDCenterInfo& ReqGetDCenterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqGetDCenterInfo_dcenter_2eproto.base);
  return *internal_default_instance();
}


void ReqGetDCenterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqGetDCenterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqGetDCenterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqGetDCenterInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqGetDCenterInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqGetDCenterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqGetDCenterInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqGetDCenterInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqGetDCenterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqGetDCenterInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetDCenterInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqGetDCenterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqGetDCenterInfo)
  return target;
}

size_t ReqGetDCenterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqGetDCenterInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetDCenterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqGetDCenterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetDCenterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetDCenterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqGetDCenterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqGetDCenterInfo)
    MergeFrom(*source);
  }
}

void ReqGetDCenterInfo::MergeFrom(const ReqGetDCenterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqGetDCenterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqGetDCenterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqGetDCenterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetDCenterInfo::CopyFrom(const ReqGetDCenterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqGetDCenterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetDCenterInfo::IsInitialized() const {
  return true;
}

void ReqGetDCenterInfo::Swap(ReqGetDCenterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetDCenterInfo::InternalSwap(ReqGetDCenterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetDCenterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspGetDCenterInfo::InitAsDefaultInstance() {
  ::pb::_RspGetDCenterInfo_default_instance_._instance.get_mutable()->cache_summary_ = const_cast< ::pb::CacheSummary*>(
      ::pb::CacheSummary::internal_default_instance());
}
class RspGetDCenterInfo::HasBitSetters {
 public:
  static const ::pb::CacheSummary& cache_summary(const RspGetDCenterInfo* msg);
};

const ::pb::CacheSummary&
RspGetDCenterInfo::HasBitSetters::cache_summary(const RspGetDCenterInfo* msg) {
  return *msg->cache_summary_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspGetDCenterInfo::kCacheSummaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspGetDCenterInfo::RspGetDCenterInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspGetDCenterInfo)
}
RspGetDCenterInfo::RspGetDCenterInfo(const RspGetDCenterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cache_summary()) {
    cache_summary_ = new ::pb::CacheSummary(*from.cache_summary_);
  } else {
    cache_summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RspGetDCenterInfo)
}

void RspGetDCenterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RspGetDCenterInfo_dcenter_2eproto.base);
  cache_summary_ = nullptr;
}

RspGetDCenterInfo::~RspGetDCenterInfo() {
  // @@protoc_insertion_point(destructor:pb.RspGetDCenterInfo)
  SharedDtor();
}

void RspGetDCenterInfo::SharedDtor() {
  if (this != internal_default_instance()) delete cache_summary_;
}

void RspGetDCenterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspGetDCenterInfo& RspGetDCenterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspGetDCenterInfo_dcenter_2eproto.base);
  return *internal_default_instance();
}


void RspGetDCenterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspGetDCenterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cache_summary_ != nullptr) {
    delete cache_summary_;
  }
  cache_summary_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspGetDCenterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.CacheSummary cache_summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_cache_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspGetDCenterInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspGetDCenterInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.CacheSummary cache_summary = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cache_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspGetDCenterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspGetDCenterInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspGetDCenterInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspGetDCenterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CacheSummary cache_summary = 1;
  if (this->has_cache_summary()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cache_summary(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspGetDCenterInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspGetDCenterInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspGetDCenterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CacheSummary cache_summary = 1;
  if (this->has_cache_summary()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cache_summary(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspGetDCenterInfo)
  return target;
}

size_t RspGetDCenterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspGetDCenterInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.CacheSummary cache_summary = 1;
  if (this->has_cache_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cache_summary_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspGetDCenterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspGetDCenterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RspGetDCenterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspGetDCenterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspGetDCenterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspGetDCenterInfo)
    MergeFrom(*source);
  }
}

void RspGetDCenterInfo::MergeFrom(const RspGetDCenterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspGetDCenterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cache_summary()) {
    mutable_cache_summary()->::pb::CacheSummary::MergeFrom(from.cache_summary());
  }
}

void RspGetDCenterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspGetDCenterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetDCenterInfo::CopyFrom(const RspGetDCenterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspGetDCenterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetDCenterInfo::IsInitialized() const {
  return true;
}

void RspGetDCenterInfo::Swap(RspGetDCenterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspGetDCenterInfo::InternalSwap(RspGetDCenterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cache_summary_, other->cache_summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspGetDCenterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqGetTickSeries::InitAsDefaultInstance() {
  ::pb::_ReqGetTickSeries_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class ReqGetTickSeries::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const ReqGetTickSeries* msg);
};

const ::pb::Symbol&
ReqGetTickSeries::HasBitSetters::symbol(const ReqGetTickSeries* msg) {
  return *msg->symbol_;
}
void ReqGetTickSeries::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGetTickSeries::kSymbolFieldNumber;
const int ReqGetTickSeries::kStartFieldNumber;
const int ReqGetTickSeries::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetTickSeries::ReqGetTickSeries()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqGetTickSeries)
}
ReqGetTickSeries::ReqGetTickSeries(const ReqGetTickSeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:pb.ReqGetTickSeries)
}

void ReqGetTickSeries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqGetTickSeries_dcenter_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(end_));
}

ReqGetTickSeries::~ReqGetTickSeries() {
  // @@protoc_insertion_point(destructor:pb.ReqGetTickSeries)
  SharedDtor();
}

void ReqGetTickSeries::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void ReqGetTickSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqGetTickSeries& ReqGetTickSeries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqGetTickSeries_dcenter_2eproto.base);
  return *internal_default_instance();
}


void ReqGetTickSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqGetTickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqGetTickSeries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqGetTickSeries::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqGetTickSeries)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqGetTickSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqGetTickSeries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqGetTickSeries::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqGetTickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // int32 end = 3;
  if (this->end() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqGetTickSeries)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetTickSeries::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqGetTickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // int32 end = 3;
  if (this->end() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqGetTickSeries)
  return target;
}

size_t ReqGetTickSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqGetTickSeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->end());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetTickSeries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqGetTickSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetTickSeries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetTickSeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqGetTickSeries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqGetTickSeries)
    MergeFrom(*source);
  }
}

void ReqGetTickSeries::MergeFrom(const ReqGetTickSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqGetTickSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void ReqGetTickSeries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqGetTickSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetTickSeries::CopyFrom(const ReqGetTickSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqGetTickSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetTickSeries::IsInitialized() const {
  return true;
}

void ReqGetTickSeries::Swap(ReqGetTickSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetTickSeries::InternalSwap(ReqGetTickSeries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(symbol_, other->symbol_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetTickSeries::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspGetTickSeries::InitAsDefaultInstance() {
  ::pb::_RspGetTickSeries_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class RspGetTickSeries::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const RspGetTickSeries* msg);
};

const ::pb::Symbol&
RspGetTickSeries::HasBitSetters::symbol(const RspGetTickSeries* msg) {
  return *msg->symbol_;
}
void RspGetTickSeries::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void RspGetTickSeries::clear_list() {
  list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspGetTickSeries::kSymbolFieldNumber;
const int RspGetTickSeries::kStartFieldNumber;
const int RspGetTickSeries::kEndFieldNumber;
const int RspGetTickSeries::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspGetTickSeries::RspGetTickSeries()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspGetTickSeries)
}
RspGetTickSeries::RspGetTickSeries(const RspGetTickSeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:pb.RspGetTickSeries)
}

void RspGetTickSeries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RspGetTickSeries_dcenter_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(end_));
}

RspGetTickSeries::~RspGetTickSeries() {
  // @@protoc_insertion_point(destructor:pb.RspGetTickSeries)
  SharedDtor();
}

void RspGetTickSeries::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void RspGetTickSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspGetTickSeries& RspGetTickSeries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspGetTickSeries_dcenter_2eproto.base);
  return *internal_default_instance();
}


void RspGetTickSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspGetTickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspGetTickSeries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.MarketDataSnapshot list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspGetTickSeries::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspGetTickSeries)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.MarketDataSnapshot list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspGetTickSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspGetTickSeries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspGetTickSeries::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspGetTickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // int32 end = 3;
  if (this->end() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->end(), output);
  }

  // repeated .pb.MarketDataSnapshot list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspGetTickSeries)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspGetTickSeries::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspGetTickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // int32 end = 3;
  if (this->end() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->end(), target);
  }

  // repeated .pb.MarketDataSnapshot list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspGetTickSeries)
  return target;
}

size_t RspGetTickSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspGetTickSeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.MarketDataSnapshot list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->end());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspGetTickSeries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspGetTickSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const RspGetTickSeries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspGetTickSeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspGetTickSeries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspGetTickSeries)
    MergeFrom(*source);
  }
}

void RspGetTickSeries::MergeFrom(const RspGetTickSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspGetTickSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void RspGetTickSeries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspGetTickSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetTickSeries::CopyFrom(const RspGetTickSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspGetTickSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetTickSeries::IsInitialized() const {
  return true;
}

void RspGetTickSeries::Swap(RspGetTickSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspGetTickSeries::InternalSwap(RspGetTickSeries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(symbol_, other->symbol_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspGetTickSeries::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqGetKlineSeries::InitAsDefaultInstance() {
  ::pb::_ReqGetKlineSeries_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class ReqGetKlineSeries::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const ReqGetKlineSeries* msg);
};

const ::pb::Symbol&
ReqGetKlineSeries::HasBitSetters::symbol(const ReqGetKlineSeries* msg) {
  return *msg->symbol_;
}
void ReqGetKlineSeries::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGetKlineSeries::kSymbolFieldNumber;
const int ReqGetKlineSeries::kPeriodFieldNumber;
const int ReqGetKlineSeries::kStartFieldNumber;
const int ReqGetKlineSeries::kEndFieldNumber;
const int ReqGetKlineSeries::kLenLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetKlineSeries::ReqGetKlineSeries()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqGetKlineSeries)
}
ReqGetKlineSeries::ReqGetKlineSeries(const ReqGetKlineSeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&start_)) + sizeof(period_));
  // @@protoc_insertion_point(copy_constructor:pb.ReqGetKlineSeries)
}

void ReqGetKlineSeries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqGetKlineSeries_dcenter_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(period_));
}

ReqGetKlineSeries::~ReqGetKlineSeries() {
  // @@protoc_insertion_point(destructor:pb.ReqGetKlineSeries)
  SharedDtor();
}

void ReqGetKlineSeries::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void ReqGetKlineSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqGetKlineSeries& ReqGetKlineSeries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqGetKlineSeries_dcenter_2eproto.base);
  return *internal_default_instance();
}


void ReqGetKlineSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqGetKlineSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&start_)) + sizeof(period_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqGetKlineSeries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.PeriodType period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_period(static_cast<::pb::PeriodType>(val));
        } else goto handle_unusual;
        continue;
      // int64 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lenLimit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lenlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqGetKlineSeries::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqGetKlineSeries)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.PeriodType period = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_period(static_cast< ::pb::PeriodType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lenLimit = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lenlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqGetKlineSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqGetKlineSeries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqGetKlineSeries::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqGetKlineSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // .pb.PeriodType period = 2;
  if (this->period() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->period(), output);
  }

  // int64 start = 3;
  if (this->start() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->start(), output);
  }

  // int64 end = 4;
  if (this->end() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->end(), output);
  }

  // int64 lenLimit = 5;
  if (this->lenlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->lenlimit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqGetKlineSeries)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetKlineSeries::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqGetKlineSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // .pb.PeriodType period = 2;
  if (this->period() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->period(), target);
  }

  // int64 start = 3;
  if (this->start() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->start(), target);
  }

  // int64 end = 4;
  if (this->end() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->end(), target);
  }

  // int64 lenLimit = 5;
  if (this->lenlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->lenlimit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqGetKlineSeries)
  return target;
}

size_t ReqGetKlineSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqGetKlineSeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int64 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 4;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int64 lenLimit = 5;
  if (this->lenlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lenlimit());
  }

  // .pb.PeriodType period = 2;
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->period());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetKlineSeries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqGetKlineSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetKlineSeries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetKlineSeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqGetKlineSeries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqGetKlineSeries)
    MergeFrom(*source);
  }
}

void ReqGetKlineSeries::MergeFrom(const ReqGetKlineSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqGetKlineSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.lenlimit() != 0) {
    set_lenlimit(from.lenlimit());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
}

void ReqGetKlineSeries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqGetKlineSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetKlineSeries::CopyFrom(const ReqGetKlineSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqGetKlineSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetKlineSeries::IsInitialized() const {
  return true;
}

void ReqGetKlineSeries::Swap(ReqGetKlineSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetKlineSeries::InternalSwap(ReqGetKlineSeries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(symbol_, other->symbol_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(lenlimit_, other->lenlimit_);
  swap(period_, other->period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetKlineSeries::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspGetKlineSeries::InitAsDefaultInstance() {
  ::pb::_RspGetKlineSeries_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class RspGetKlineSeries::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const RspGetKlineSeries* msg);
};

const ::pb::Symbol&
RspGetKlineSeries::HasBitSetters::symbol(const RspGetKlineSeries* msg) {
  return *msg->symbol_;
}
void RspGetKlineSeries::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void RspGetKlineSeries::clear_list() {
  list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspGetKlineSeries::kSymbolFieldNumber;
const int RspGetKlineSeries::kPeriodFieldNumber;
const int RspGetKlineSeries::kStartFieldNumber;
const int RspGetKlineSeries::kEndFieldNumber;
const int RspGetKlineSeries::kLenLimitFieldNumber;
const int RspGetKlineSeries::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspGetKlineSeries::RspGetKlineSeries()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspGetKlineSeries)
}
RspGetKlineSeries::RspGetKlineSeries(const RspGetKlineSeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&start_)) + sizeof(period_));
  // @@protoc_insertion_point(copy_constructor:pb.RspGetKlineSeries)
}

void RspGetKlineSeries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RspGetKlineSeries_dcenter_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(period_));
}

RspGetKlineSeries::~RspGetKlineSeries() {
  // @@protoc_insertion_point(destructor:pb.RspGetKlineSeries)
  SharedDtor();
}

void RspGetKlineSeries::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void RspGetKlineSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspGetKlineSeries& RspGetKlineSeries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspGetKlineSeries_dcenter_2eproto.base);
  return *internal_default_instance();
}


void RspGetKlineSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspGetKlineSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&start_)) + sizeof(period_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspGetKlineSeries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.PeriodType period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_period(static_cast<::pb::PeriodType>(val));
        } else goto handle_unusual;
        continue;
      // int64 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lenLimit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lenlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.Kline list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspGetKlineSeries::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspGetKlineSeries)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.PeriodType period = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_period(static_cast< ::pb::PeriodType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lenLimit = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lenlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Kline list = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspGetKlineSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspGetKlineSeries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspGetKlineSeries::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspGetKlineSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // .pb.PeriodType period = 2;
  if (this->period() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->period(), output);
  }

  // int64 start = 3;
  if (this->start() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->start(), output);
  }

  // int64 end = 4;
  if (this->end() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->end(), output);
  }

  // int64 lenLimit = 5;
  if (this->lenlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->lenlimit(), output);
  }

  // repeated .pb.Kline list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspGetKlineSeries)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspGetKlineSeries::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspGetKlineSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // .pb.PeriodType period = 2;
  if (this->period() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->period(), target);
  }

  // int64 start = 3;
  if (this->start() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->start(), target);
  }

  // int64 end = 4;
  if (this->end() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->end(), target);
  }

  // int64 lenLimit = 5;
  if (this->lenlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->lenlimit(), target);
  }

  // repeated .pb.Kline list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspGetKlineSeries)
  return target;
}

size_t RspGetKlineSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspGetKlineSeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Kline list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int64 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 4;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int64 lenLimit = 5;
  if (this->lenlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lenlimit());
  }

  // .pb.PeriodType period = 2;
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->period());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspGetKlineSeries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspGetKlineSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const RspGetKlineSeries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspGetKlineSeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspGetKlineSeries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspGetKlineSeries)
    MergeFrom(*source);
  }
}

void RspGetKlineSeries::MergeFrom(const RspGetKlineSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspGetKlineSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.lenlimit() != 0) {
    set_lenlimit(from.lenlimit());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
}

void RspGetKlineSeries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspGetKlineSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetKlineSeries::CopyFrom(const RspGetKlineSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspGetKlineSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetKlineSeries::IsInitialized() const {
  return true;
}

void RspGetKlineSeries::Swap(RspGetKlineSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspGetKlineSeries::InternalSwap(RspGetKlineSeries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(symbol_, other->symbol_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(lenlimit_, other->lenlimit_);
  swap(period_, other->period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspGetKlineSeries::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ReqGetTradingInstrumentList* Arena::CreateMaybeMessage< ::pb::ReqGetTradingInstrumentList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqGetTradingInstrumentList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspGetTradingInstrumentList* Arena::CreateMaybeMessage< ::pb::RspGetTradingInstrumentList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspGetTradingInstrumentList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqGetTradingInstrument* Arena::CreateMaybeMessage< ::pb::ReqGetTradingInstrument >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqGetTradingInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspGetTradingInstrument* Arena::CreateMaybeMessage< ::pb::RspGetTradingInstrument >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspGetTradingInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqSetTradingInstrument* Arena::CreateMaybeMessage< ::pb::ReqSetTradingInstrument >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqSetTradingInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspSetTradingInstrument* Arena::CreateMaybeMessage< ::pb::RspSetTradingInstrument >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspSetTradingInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqSubscribe* Arena::CreateMaybeMessage< ::pb::ReqSubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspSubscribe* Arena::CreateMaybeMessage< ::pb::RspSubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqUnSubscribe* Arena::CreateMaybeMessage< ::pb::ReqUnSubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqUnSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspUnSubscribe* Arena::CreateMaybeMessage< ::pb::RspUnSubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspUnSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqSaveKline* Arena::CreateMaybeMessage< ::pb::ReqSaveKline >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqSaveKline >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspSaveKline* Arena::CreateMaybeMessage< ::pb::RspSaveKline >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspSaveKline >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqCombineSubscribe* Arena::CreateMaybeMessage< ::pb::ReqCombineSubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqCombineSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspCombineSubscribe* Arena::CreateMaybeMessage< ::pb::RspCombineSubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspCombineSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SymbolCacheSummary* Arena::CreateMaybeMessage< ::pb::SymbolCacheSummary >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SymbolCacheSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CacheSummary* Arena::CreateMaybeMessage< ::pb::CacheSummary >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CacheSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqGetDCenterInfo* Arena::CreateMaybeMessage< ::pb::ReqGetDCenterInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqGetDCenterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspGetDCenterInfo* Arena::CreateMaybeMessage< ::pb::RspGetDCenterInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspGetDCenterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqGetTickSeries* Arena::CreateMaybeMessage< ::pb::ReqGetTickSeries >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqGetTickSeries >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspGetTickSeries* Arena::CreateMaybeMessage< ::pb::RspGetTickSeries >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspGetTickSeries >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqGetKlineSeries* Arena::CreateMaybeMessage< ::pb::ReqGetKlineSeries >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqGetKlineSeries >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspGetKlineSeries* Arena::CreateMaybeMessage< ::pb::RspGetKlineSeries >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspGetKlineSeries >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
