// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_report.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trade_5freport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trade_5freport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "order.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trade_5freport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trade_5freport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_5freport_2eproto;
namespace pb {
class TradeReport;
class TradeReportDefaultTypeInternal;
extern TradeReportDefaultTypeInternal _TradeReport_default_instance_;
class TradeReportSession;
class TradeReportSessionDefaultTypeInternal;
extern TradeReportSessionDefaultTypeInternal _TradeReportSession_default_instance_;
class trade_report_list;
class trade_report_listDefaultTypeInternal;
extern trade_report_listDefaultTypeInternal _trade_report_list_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::TradeReport* Arena::CreateMaybeMessage<::pb::TradeReport>(Arena*);
template<> ::pb::TradeReportSession* Arena::CreateMaybeMessage<::pb::TradeReportSession>(Arena*);
template<> ::pb::trade_report_list* Arena::CreateMaybeMessage<::pb::trade_report_list>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum OrderHedgeType : int {
  OHT_SPECULATION = 0,
  OHT_ARBITRAGE = 1,
  OHT_HEDGE = 2,
  OHT_SPECULATION2 = 3,
  OrderHedgeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderHedgeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderHedgeType_IsValid(int value);
constexpr OrderHedgeType OrderHedgeType_MIN = OHT_SPECULATION;
constexpr OrderHedgeType OrderHedgeType_MAX = OHT_SPECULATION2;
constexpr int OrderHedgeType_ARRAYSIZE = OrderHedgeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderHedgeType_descriptor();
template<typename T>
inline const std::string& OrderHedgeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderHedgeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderHedgeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderHedgeType_descriptor(), enum_t_value);
}
inline bool OrderHedgeType_Parse(
    const std::string& name, OrderHedgeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderHedgeType>(
    OrderHedgeType_descriptor(), name, value);
}
enum TradeType : int {
  TT_NORMAL = 0,
  TT_OPTIONS_EXECUTION = 1,
  TT_OTC = 2,
  TT_EFP_DERIVED = 3,
  TT_COMBINATION_DERIVED = 4,
  TT_DELIVERY_CLOSE = 5,
  TT_SETTLEMENT_DERIVED = 6,
  TT_PLACEMENT_DERIVED = 7,
  TT_REPURCHASE = 8,
  TradeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TradeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TradeType_IsValid(int value);
constexpr TradeType TradeType_MIN = TT_NORMAL;
constexpr TradeType TradeType_MAX = TT_REPURCHASE;
constexpr int TradeType_ARRAYSIZE = TradeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeType_descriptor();
template<typename T>
inline const std::string& TradeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TradeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TradeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TradeType_descriptor(), enum_t_value);
}
inline bool TradeType_Parse(
    const std::string& name, TradeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TradeType>(
    TradeType_descriptor(), name, value);
}
// ===================================================================

class TradeReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TradeReport) */ {
 public:
  TradeReport();
  virtual ~TradeReport();

  TradeReport(const TradeReport& from);
  TradeReport(TradeReport&& from) noexcept
    : TradeReport() {
    *this = ::std::move(from);
  }

  inline TradeReport& operator=(const TradeReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeReport& operator=(TradeReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeReport* internal_default_instance() {
    return reinterpret_cast<const TradeReport*>(
               &_TradeReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TradeReport* other);
  friend void swap(TradeReport& a, TradeReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradeReport* New() const final {
    return CreateMaybeMessage<TradeReport>(nullptr);
  }

  TradeReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeReport& from);
  void MergeFrom(const TradeReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TradeReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_5freport_2eproto);
    return ::descriptor_table_trade_5freport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string trade_id = 2;
  void clear_trade_id();
  static const int kTradeIdFieldNumber = 2;
  const std::string& trade_id() const;
  void set_trade_id(const std::string& value);
  void set_trade_id(std::string&& value);
  void set_trade_id(const char* value);
  void set_trade_id(const char* value, size_t size);
  std::string* mutable_trade_id();
  std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);

  // string exchange_order_id = 14;
  void clear_exchange_order_id();
  static const int kExchangeOrderIdFieldNumber = 14;
  const std::string& exchange_order_id() const;
  void set_exchange_order_id(const std::string& value);
  void set_exchange_order_id(std::string&& value);
  void set_exchange_order_id(const char* value);
  void set_exchange_order_id(const char* value, size_t size);
  std::string* mutable_exchange_order_id();
  std::string* release_exchange_order_id();
  void set_allocated_exchange_order_id(std::string* exchange_order_id);

  // string route_account = 22;
  void clear_route_account();
  static const int kRouteAccountFieldNumber = 22;
  const std::string& route_account() const;
  void set_route_account(const std::string& value);
  void set_route_account(std::string&& value);
  void set_route_account(const char* value);
  void set_route_account(const char* value, size_t size);
  std::string* mutable_route_account();
  std::string* release_route_account();
  void set_allocated_route_account(std::string* route_account);

  // string user = 23;
  void clear_user();
  static const int kUserFieldNumber = 23;
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // string symbol_name = 25;
  void clear_symbol_name();
  static const int kSymbolNameFieldNumber = 25;
  const std::string& symbol_name() const;
  void set_symbol_name(const std::string& value);
  void set_symbol_name(std::string&& value);
  void set_symbol_name(const char* value);
  void set_symbol_name(const char* value, size_t size);
  std::string* mutable_symbol_name();
  std::string* release_symbol_name();
  void set_allocated_symbol_name(std::string* symbol_name);

  // string account_name = 28;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 28;
  const std::string& account_name() const;
  void set_account_name(const std::string& value);
  void set_account_name(std::string&& value);
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  std::string* mutable_account_name();
  std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);

  // string user_name = 30;
  void clear_user_name();
  static const int kUserNameFieldNumber = 30;
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);

  // string branch = 33;
  void clear_branch();
  static const int kBranchFieldNumber = 33;
  const std::string& branch() const;
  void set_branch(const std::string& value);
  void set_branch(std::string&& value);
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  std::string* mutable_branch();
  std::string* release_branch();
  void set_allocated_branch(std::string* branch);

  // string branch_name = 34;
  void clear_branch_name();
  static const int kBranchNameFieldNumber = 34;
  const std::string& branch_name() const;
  void set_branch_name(const std::string& value);
  void set_branch_name(std::string&& value);
  void set_branch_name(const char* value);
  void set_branch_name(const char* value, size_t size);
  std::string* mutable_branch_name();
  std::string* release_branch_name();
  void set_allocated_branch_name(std::string* branch_name);

  // string local_order_id = 35;
  void clear_local_order_id();
  static const int kLocalOrderIdFieldNumber = 35;
  const std::string& local_order_id() const;
  void set_local_order_id(const std::string& value);
  void set_local_order_id(std::string&& value);
  void set_local_order_id(const char* value);
  void set_local_order_id(const char* value, size_t size);
  std::string* mutable_local_order_id();
  std::string* release_local_order_id();
  void set_allocated_local_order_id(std::string* local_order_id);

  // .pb.Symbol symbol = 3;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // .pb.OrderID order_id = 9;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 9;
  const ::pb::OrderID& order_id() const;
  ::pb::OrderID* release_order_id();
  ::pb::OrderID* mutable_order_id();
  void set_allocated_order_id(::pb::OrderID* order_id);

  // .pb.OrderID child_order_id = 26;
  bool has_child_order_id() const;
  void clear_child_order_id();
  static const int kChildOrderIdFieldNumber = 26;
  const ::pb::OrderID& child_order_id() const;
  ::pb::OrderID* release_child_order_id();
  ::pb::OrderID* mutable_child_order_id();
  void set_allocated_child_order_id(::pb::OrderID* child_order_id);

  // .pb.ProductID product_id = 32;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 32;
  const ::pb::ProductID& product_id() const;
  ::pb::ProductID* release_product_id();
  ::pb::ProductID* mutable_product_id();
  void set_allocated_product_id(::pb::ProductID* product_id);

  // .pb.OrderID link_local_order_id = 37;
  bool has_link_local_order_id() const;
  void clear_link_local_order_id();
  static const int kLinkLocalOrderIdFieldNumber = 37;
  const ::pb::OrderID& link_local_order_id() const;
  ::pb::OrderID* release_link_local_order_id();
  ::pb::OrderID* mutable_link_local_order_id();
  void set_allocated_link_local_order_id(::pb::OrderID* link_local_order_id);

  // double price = 5;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  double price() const;
  void set_price(double value);

  // .pb.OrderDirection direction = 4;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  ::pb::OrderDirection direction() const;
  void set_direction(::pb::OrderDirection value);

  // int32 volume = 6;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 traded_time = 7;
  void clear_traded_time();
  static const int kTradedTimeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 traded_time() const;
  void set_traded_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 traded_trading_day = 8;
  void clear_traded_trading_day();
  static const int kTradedTradingDayFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 traded_trading_day() const;
  void set_traded_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .pb.OrderPriceType order_price_type = 10;
  void clear_order_price_type();
  static const int kOrderPriceTypeFieldNumber = 10;
  ::pb::OrderPriceType order_price_type() const;
  void set_order_price_type(::pb::OrderPriceType value);

  // .pb.OrderHedgeType order_hedge_type = 11;
  void clear_order_hedge_type();
  static const int kOrderHedgeTypeFieldNumber = 11;
  ::pb::OrderHedgeType order_hedge_type() const;
  void set_order_hedge_type(::pb::OrderHedgeType value);

  // .pb.TradeType trade_type = 12;
  void clear_trade_type();
  static const int kTradeTypeFieldNumber = 12;
  ::pb::TradeType trade_type() const;
  void set_trade_type(::pb::TradeType value);

  // int32 currency_type = 13;
  void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 currency_type() const;
  void set_currency_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 local_type_id = 15;
  void clear_local_type_id();
  static const int kLocalTypeIdFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 local_type_id() const;
  void set_local_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double commission = 16;
  void clear_commission();
  static const int kCommissionFieldNumber = 16;
  double commission() const;
  void set_commission(double value);

  // double tax = 17;
  void clear_tax();
  static const int kTaxFieldNumber = 17;
  double tax() const;
  void set_tax(double value);

  // double total_other_fee = 18;
  void clear_total_other_fee();
  static const int kTotalOtherFeeFieldNumber = 18;
  double total_other_fee() const;
  void set_total_other_fee(double value);

  // double initial_traded_price = 19;
  void clear_initial_traded_price();
  static const int kInitialTradedPriceFieldNumber = 19;
  double initial_traded_price() const;
  void set_initial_traded_price(double value);

  // double reserve = 20;
  void clear_reserve();
  static const int kReserveFieldNumber = 20;
  double reserve() const;
  void set_reserve(double value);

  // .pb.OffsetFlag offset_flag = 21;
  void clear_offset_flag();
  static const int kOffsetFlagFieldNumber = 21;
  ::pb::OffsetFlag offset_flag() const;
  void set_offset_flag(::pb::OffsetFlag value);

  // int32 settlement_group = 24;
  void clear_settlement_group();
  static const int kSettlementGroupFieldNumber = 24;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_group() const;
  void set_settlement_group(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double price_tick = 27;
  void clear_price_tick();
  static const int kPriceTickFieldNumber = 27;
  double price_tick() const;
  void set_price_tick(double value);

  // int32 volume_multiple = 29;
  void clear_volume_multiple();
  static const int kVolumeMultipleFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple() const;
  void set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .pb.OrderSourceType order_source_type = 31;
  void clear_order_source_type();
  static const int kOrderSourceTypeFieldNumber = 31;
  ::pb::OrderSourceType order_source_type() const;
  void set_order_source_type(::pb::OrderSourceType value);

  // int32 broker_order_seq = 36;
  void clear_broker_order_seq();
  static const int kBrokerOrderSeqFieldNumber = 36;
  ::PROTOBUF_NAMESPACE_ID::int32 broker_order_seq() const;
  void set_broker_order_seq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TradeReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_order_id_;
  ::pb::Symbol* symbol_;
  ::pb::OrderID* order_id_;
  ::pb::OrderID* child_order_id_;
  ::pb::ProductID* product_id_;
  ::pb::OrderID* link_local_order_id_;
  double price_;
  int direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_;
  ::PROTOBUF_NAMESPACE_ID::int64 traded_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 traded_trading_day_;
  int order_price_type_;
  int order_hedge_type_;
  int trade_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 currency_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 local_type_id_;
  double commission_;
  double tax_;
  double total_other_fee_;
  double initial_traded_price_;
  double reserve_;
  int offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_group_;
  double price_tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple_;
  int order_source_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 broker_order_seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_5freport_2eproto;
};
// -------------------------------------------------------------------

class trade_report_list :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.trade_report_list) */ {
 public:
  trade_report_list();
  virtual ~trade_report_list();

  trade_report_list(const trade_report_list& from);
  trade_report_list(trade_report_list&& from) noexcept
    : trade_report_list() {
    *this = ::std::move(from);
  }

  inline trade_report_list& operator=(const trade_report_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline trade_report_list& operator=(trade_report_list&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const trade_report_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const trade_report_list* internal_default_instance() {
    return reinterpret_cast<const trade_report_list*>(
               &_trade_report_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(trade_report_list* other);
  friend void swap(trade_report_list& a, trade_report_list& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trade_report_list* New() const final {
    return CreateMaybeMessage<trade_report_list>(nullptr);
  }

  trade_report_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<trade_report_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const trade_report_list& from);
  void MergeFrom(const trade_report_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(trade_report_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.trade_report_list";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_5freport_2eproto);
    return ::descriptor_table_trade_5freport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TradeReport list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::TradeReport* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradeReport >*
      mutable_list();
  const ::pb::TradeReport& list(int index) const;
  ::pb::TradeReport* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradeReport >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.trade_report_list)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradeReport > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_5freport_2eproto;
};
// -------------------------------------------------------------------

class TradeReportSession :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TradeReportSession) */ {
 public:
  TradeReportSession();
  virtual ~TradeReportSession();

  TradeReportSession(const TradeReportSession& from);
  TradeReportSession(TradeReportSession&& from) noexcept
    : TradeReportSession() {
    *this = ::std::move(from);
  }

  inline TradeReportSession& operator=(const TradeReportSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeReportSession& operator=(TradeReportSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeReportSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeReportSession* internal_default_instance() {
    return reinterpret_cast<const TradeReportSession*>(
               &_TradeReportSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TradeReportSession* other);
  friend void swap(TradeReportSession& a, TradeReportSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradeReportSession* New() const final {
    return CreateMaybeMessage<TradeReportSession>(nullptr);
  }

  TradeReportSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeReportSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeReportSession& from);
  void MergeFrom(const TradeReportSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeReportSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TradeReportSession";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_5freport_2eproto);
    return ::descriptor_table_trade_5freport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.TradeReport trade = 1;
  bool has_trade() const;
  void clear_trade();
  static const int kTradeFieldNumber = 1;
  const ::pb::TradeReport& trade() const;
  ::pb::TradeReport* release_trade();
  ::pb::TradeReport* mutable_trade();
  void set_allocated_trade(::pb::TradeReport* trade);

  // @@protoc_insertion_point(class_scope:pb.TradeReportSession)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::TradeReport* trade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_5freport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeReport

// string account = 1;
inline void TradeReport::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::account() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.account)
  return account_.GetNoArena();
}
inline void TradeReport::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.account)
}
inline void TradeReport::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.account)
}
inline void TradeReport::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.account)
}
inline void TradeReport::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.account)
}
inline std::string* TradeReport::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_account() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.account)
}

// string trade_id = 2;
inline void TradeReport::clear_trade_id() {
  trade_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::trade_id() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.trade_id)
  return trade_id_.GetNoArena();
}
inline void TradeReport::set_trade_id(const std::string& value) {
  
  trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.trade_id)
}
inline void TradeReport::set_trade_id(std::string&& value) {
  
  trade_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.trade_id)
}
inline void TradeReport::set_trade_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.trade_id)
}
inline void TradeReport::set_trade_id(const char* value, size_t size) {
  
  trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.trade_id)
}
inline std::string* TradeReport::mutable_trade_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.trade_id)
  return trade_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_trade_id() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.trade_id)
  
  return trade_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_id);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.trade_id)
}

// .pb.Symbol symbol = 3;
inline bool TradeReport::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& TradeReport::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.TradeReport.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* TradeReport::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* TradeReport::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.symbol)
  return symbol_;
}
inline void TradeReport::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.symbol)
}

// .pb.OrderDirection direction = 4;
inline void TradeReport::clear_direction() {
  direction_ = 0;
}
inline ::pb::OrderDirection TradeReport::direction() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.direction)
  return static_cast< ::pb::OrderDirection >(direction_);
}
inline void TradeReport::set_direction(::pb::OrderDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.direction)
}

// double price = 5;
inline void TradeReport::clear_price() {
  price_ = 0;
}
inline double TradeReport::price() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.price)
  return price_;
}
inline void TradeReport::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.price)
}

// int32 volume = 6;
inline void TradeReport::clear_volume() {
  volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeReport::volume() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.volume)
  return volume_;
}
inline void TradeReport::set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.volume)
}

// int64 traded_time = 7;
inline void TradeReport::clear_traded_time() {
  traded_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeReport::traded_time() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.traded_time)
  return traded_time_;
}
inline void TradeReport::set_traded_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  traded_time_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.traded_time)
}

// int32 traded_trading_day = 8;
inline void TradeReport::clear_traded_trading_day() {
  traded_trading_day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeReport::traded_trading_day() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.traded_trading_day)
  return traded_trading_day_;
}
inline void TradeReport::set_traded_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  traded_trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.traded_trading_day)
}

// .pb.OrderID order_id = 9;
inline bool TradeReport::has_order_id() const {
  return this != internal_default_instance() && order_id_ != nullptr;
}
inline const ::pb::OrderID& TradeReport::order_id() const {
  const ::pb::OrderID* p = order_id_;
  // @@protoc_insertion_point(field_get:pb.TradeReport.order_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::OrderID*>(
      &::pb::_OrderID_default_instance_);
}
inline ::pb::OrderID* TradeReport::release_order_id() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.order_id)
  
  ::pb::OrderID* temp = order_id_;
  order_id_ = nullptr;
  return temp;
}
inline ::pb::OrderID* TradeReport::mutable_order_id() {
  
  if (order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::OrderID>(GetArenaNoVirtual());
    order_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.order_id)
  return order_id_;
}
inline void TradeReport::set_allocated_order_id(::pb::OrderID* order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_id_);
  }
  if (order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_id, submessage_arena);
    }
    
  } else {
    
  }
  order_id_ = order_id;
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.order_id)
}

// .pb.OrderPriceType order_price_type = 10;
inline void TradeReport::clear_order_price_type() {
  order_price_type_ = 0;
}
inline ::pb::OrderPriceType TradeReport::order_price_type() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.order_price_type)
  return static_cast< ::pb::OrderPriceType >(order_price_type_);
}
inline void TradeReport::set_order_price_type(::pb::OrderPriceType value) {
  
  order_price_type_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.order_price_type)
}

// .pb.OrderHedgeType order_hedge_type = 11;
inline void TradeReport::clear_order_hedge_type() {
  order_hedge_type_ = 0;
}
inline ::pb::OrderHedgeType TradeReport::order_hedge_type() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.order_hedge_type)
  return static_cast< ::pb::OrderHedgeType >(order_hedge_type_);
}
inline void TradeReport::set_order_hedge_type(::pb::OrderHedgeType value) {
  
  order_hedge_type_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.order_hedge_type)
}

// .pb.TradeType trade_type = 12;
inline void TradeReport::clear_trade_type() {
  trade_type_ = 0;
}
inline ::pb::TradeType TradeReport::trade_type() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.trade_type)
  return static_cast< ::pb::TradeType >(trade_type_);
}
inline void TradeReport::set_trade_type(::pb::TradeType value) {
  
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.trade_type)
}

// int32 currency_type = 13;
inline void TradeReport::clear_currency_type() {
  currency_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeReport::currency_type() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.currency_type)
  return currency_type_;
}
inline void TradeReport::set_currency_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.currency_type)
}

// string exchange_order_id = 14;
inline void TradeReport::clear_exchange_order_id() {
  exchange_order_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.exchange_order_id)
  return exchange_order_id_.GetNoArena();
}
inline void TradeReport::set_exchange_order_id(const std::string& value) {
  
  exchange_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.exchange_order_id)
}
inline void TradeReport::set_exchange_order_id(std::string&& value) {
  
  exchange_order_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.exchange_order_id)
}
inline void TradeReport::set_exchange_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.exchange_order_id)
}
inline void TradeReport::set_exchange_order_id(const char* value, size_t size) {
  
  exchange_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.exchange_order_id)
}
inline std::string* TradeReport::mutable_exchange_order_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.exchange_order_id)
  return exchange_order_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_exchange_order_id() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.exchange_order_id)
  
  return exchange_order_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_exchange_order_id(std::string* exchange_order_id) {
  if (exchange_order_id != nullptr) {
    
  } else {
    
  }
  exchange_order_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_order_id);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.exchange_order_id)
}

// int32 local_type_id = 15;
inline void TradeReport::clear_local_type_id() {
  local_type_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeReport::local_type_id() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.local_type_id)
  return local_type_id_;
}
inline void TradeReport::set_local_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  local_type_id_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.local_type_id)
}

// double commission = 16;
inline void TradeReport::clear_commission() {
  commission_ = 0;
}
inline double TradeReport::commission() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.commission)
  return commission_;
}
inline void TradeReport::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.commission)
}

// double tax = 17;
inline void TradeReport::clear_tax() {
  tax_ = 0;
}
inline double TradeReport::tax() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.tax)
  return tax_;
}
inline void TradeReport::set_tax(double value) {
  
  tax_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.tax)
}

// double total_other_fee = 18;
inline void TradeReport::clear_total_other_fee() {
  total_other_fee_ = 0;
}
inline double TradeReport::total_other_fee() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.total_other_fee)
  return total_other_fee_;
}
inline void TradeReport::set_total_other_fee(double value) {
  
  total_other_fee_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.total_other_fee)
}

// double initial_traded_price = 19;
inline void TradeReport::clear_initial_traded_price() {
  initial_traded_price_ = 0;
}
inline double TradeReport::initial_traded_price() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.initial_traded_price)
  return initial_traded_price_;
}
inline void TradeReport::set_initial_traded_price(double value) {
  
  initial_traded_price_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.initial_traded_price)
}

// double reserve = 20;
inline void TradeReport::clear_reserve() {
  reserve_ = 0;
}
inline double TradeReport::reserve() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.reserve)
  return reserve_;
}
inline void TradeReport::set_reserve(double value) {
  
  reserve_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.reserve)
}

// .pb.OffsetFlag offset_flag = 21;
inline void TradeReport::clear_offset_flag() {
  offset_flag_ = 0;
}
inline ::pb::OffsetFlag TradeReport::offset_flag() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.offset_flag)
  return static_cast< ::pb::OffsetFlag >(offset_flag_);
}
inline void TradeReport::set_offset_flag(::pb::OffsetFlag value) {
  
  offset_flag_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.offset_flag)
}

// string route_account = 22;
inline void TradeReport::clear_route_account() {
  route_account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::route_account() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.route_account)
  return route_account_.GetNoArena();
}
inline void TradeReport::set_route_account(const std::string& value) {
  
  route_account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.route_account)
}
inline void TradeReport::set_route_account(std::string&& value) {
  
  route_account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.route_account)
}
inline void TradeReport::set_route_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.route_account)
}
inline void TradeReport::set_route_account(const char* value, size_t size) {
  
  route_account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.route_account)
}
inline std::string* TradeReport::mutable_route_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.route_account)
  return route_account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_route_account() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.route_account)
  
  return route_account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_route_account(std::string* route_account) {
  if (route_account != nullptr) {
    
  } else {
    
  }
  route_account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route_account);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.route_account)
}

// string user = 23;
inline void TradeReport::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::user() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.user)
  return user_.GetNoArena();
}
inline void TradeReport::set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.user)
}
inline void TradeReport::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.user)
}
inline void TradeReport::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.user)
}
inline void TradeReport::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.user)
}
inline std::string* TradeReport::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_user() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.user)
}

// int32 settlement_group = 24;
inline void TradeReport::clear_settlement_group() {
  settlement_group_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeReport::settlement_group() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.settlement_group)
  return settlement_group_;
}
inline void TradeReport::set_settlement_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settlement_group_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.settlement_group)
}

// string symbol_name = 25;
inline void TradeReport::clear_symbol_name() {
  symbol_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::symbol_name() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.symbol_name)
  return symbol_name_.GetNoArena();
}
inline void TradeReport::set_symbol_name(const std::string& value) {
  
  symbol_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.symbol_name)
}
inline void TradeReport::set_symbol_name(std::string&& value) {
  
  symbol_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.symbol_name)
}
inline void TradeReport::set_symbol_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.symbol_name)
}
inline void TradeReport::set_symbol_name(const char* value, size_t size) {
  
  symbol_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.symbol_name)
}
inline std::string* TradeReport::mutable_symbol_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.symbol_name)
  return symbol_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_symbol_name() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.symbol_name)
  
  return symbol_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_symbol_name(std::string* symbol_name) {
  if (symbol_name != nullptr) {
    
  } else {
    
  }
  symbol_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol_name);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.symbol_name)
}

// .pb.OrderID child_order_id = 26;
inline bool TradeReport::has_child_order_id() const {
  return this != internal_default_instance() && child_order_id_ != nullptr;
}
inline const ::pb::OrderID& TradeReport::child_order_id() const {
  const ::pb::OrderID* p = child_order_id_;
  // @@protoc_insertion_point(field_get:pb.TradeReport.child_order_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::OrderID*>(
      &::pb::_OrderID_default_instance_);
}
inline ::pb::OrderID* TradeReport::release_child_order_id() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.child_order_id)
  
  ::pb::OrderID* temp = child_order_id_;
  child_order_id_ = nullptr;
  return temp;
}
inline ::pb::OrderID* TradeReport::mutable_child_order_id() {
  
  if (child_order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::OrderID>(GetArenaNoVirtual());
    child_order_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.child_order_id)
  return child_order_id_;
}
inline void TradeReport::set_allocated_child_order_id(::pb::OrderID* child_order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_order_id_);
  }
  if (child_order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      child_order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child_order_id, submessage_arena);
    }
    
  } else {
    
  }
  child_order_id_ = child_order_id;
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.child_order_id)
}

// double price_tick = 27;
inline void TradeReport::clear_price_tick() {
  price_tick_ = 0;
}
inline double TradeReport::price_tick() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.price_tick)
  return price_tick_;
}
inline void TradeReport::set_price_tick(double value) {
  
  price_tick_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.price_tick)
}

// string account_name = 28;
inline void TradeReport::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::account_name() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.account_name)
  return account_name_.GetNoArena();
}
inline void TradeReport::set_account_name(const std::string& value) {
  
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.account_name)
}
inline void TradeReport::set_account_name(std::string&& value) {
  
  account_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.account_name)
}
inline void TradeReport::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.account_name)
}
inline void TradeReport::set_account_name(const char* value, size_t size) {
  
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.account_name)
}
inline std::string* TradeReport::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.account_name)
  return account_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_account_name() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.account_name)
  
  return account_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.account_name)
}

// int32 volume_multiple = 29;
inline void TradeReport::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeReport::volume_multiple() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.volume_multiple)
  return volume_multiple_;
}
inline void TradeReport::set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.volume_multiple)
}

// string user_name = 30;
inline void TradeReport::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::user_name() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.user_name)
  return user_name_.GetNoArena();
}
inline void TradeReport::set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.user_name)
}
inline void TradeReport::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.user_name)
}
inline void TradeReport::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.user_name)
}
inline void TradeReport::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.user_name)
}
inline std::string* TradeReport::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.user_name)
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_user_name() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.user_name)
}

// .pb.OrderSourceType order_source_type = 31;
inline void TradeReport::clear_order_source_type() {
  order_source_type_ = 0;
}
inline ::pb::OrderSourceType TradeReport::order_source_type() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.order_source_type)
  return static_cast< ::pb::OrderSourceType >(order_source_type_);
}
inline void TradeReport::set_order_source_type(::pb::OrderSourceType value) {
  
  order_source_type_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.order_source_type)
}

// .pb.ProductID product_id = 32;
inline bool TradeReport::has_product_id() const {
  return this != internal_default_instance() && product_id_ != nullptr;
}
inline const ::pb::ProductID& TradeReport::product_id() const {
  const ::pb::ProductID* p = product_id_;
  // @@protoc_insertion_point(field_get:pb.TradeReport.product_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ProductID*>(
      &::pb::_ProductID_default_instance_);
}
inline ::pb::ProductID* TradeReport::release_product_id() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.product_id)
  
  ::pb::ProductID* temp = product_id_;
  product_id_ = nullptr;
  return temp;
}
inline ::pb::ProductID* TradeReport::mutable_product_id() {
  
  if (product_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ProductID>(GetArenaNoVirtual());
    product_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.product_id)
  return product_id_;
}
inline void TradeReport::set_allocated_product_id(::pb::ProductID* product_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_id_);
  }
  if (product_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      product_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product_id, submessage_arena);
    }
    
  } else {
    
  }
  product_id_ = product_id;
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.product_id)
}

// string branch = 33;
inline void TradeReport::clear_branch() {
  branch_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::branch() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.branch)
  return branch_.GetNoArena();
}
inline void TradeReport::set_branch(const std::string& value) {
  
  branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.branch)
}
inline void TradeReport::set_branch(std::string&& value) {
  
  branch_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.branch)
}
inline void TradeReport::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.branch)
}
inline void TradeReport::set_branch(const char* value, size_t size) {
  
  branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.branch)
}
inline std::string* TradeReport::mutable_branch() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.branch)
  return branch_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_branch() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.branch)
  
  return branch_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_branch(std::string* branch) {
  if (branch != nullptr) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.branch)
}

// string branch_name = 34;
inline void TradeReport::clear_branch_name() {
  branch_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::branch_name() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.branch_name)
  return branch_name_.GetNoArena();
}
inline void TradeReport::set_branch_name(const std::string& value) {
  
  branch_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.branch_name)
}
inline void TradeReport::set_branch_name(std::string&& value) {
  
  branch_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.branch_name)
}
inline void TradeReport::set_branch_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.branch_name)
}
inline void TradeReport::set_branch_name(const char* value, size_t size) {
  
  branch_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.branch_name)
}
inline std::string* TradeReport::mutable_branch_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.branch_name)
  return branch_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_branch_name() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.branch_name)
  
  return branch_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_branch_name(std::string* branch_name) {
  if (branch_name != nullptr) {
    
  } else {
    
  }
  branch_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch_name);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.branch_name)
}

// string local_order_id = 35;
inline void TradeReport::clear_local_order_id() {
  local_order_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TradeReport::local_order_id() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.local_order_id)
  return local_order_id_.GetNoArena();
}
inline void TradeReport::set_local_order_id(const std::string& value) {
  
  local_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeReport.local_order_id)
}
inline void TradeReport::set_local_order_id(std::string&& value) {
  
  local_order_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeReport.local_order_id)
}
inline void TradeReport::set_local_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeReport.local_order_id)
}
inline void TradeReport::set_local_order_id(const char* value, size_t size) {
  
  local_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeReport.local_order_id)
}
inline std::string* TradeReport::mutable_local_order_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.local_order_id)
  return local_order_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TradeReport::release_local_order_id() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.local_order_id)
  
  return local_order_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TradeReport::set_allocated_local_order_id(std::string* local_order_id) {
  if (local_order_id != nullptr) {
    
  } else {
    
  }
  local_order_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_order_id);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.local_order_id)
}

// int32 broker_order_seq = 36;
inline void TradeReport::clear_broker_order_seq() {
  broker_order_seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeReport::broker_order_seq() const {
  // @@protoc_insertion_point(field_get:pb.TradeReport.broker_order_seq)
  return broker_order_seq_;
}
inline void TradeReport::set_broker_order_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  broker_order_seq_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeReport.broker_order_seq)
}

// .pb.OrderID link_local_order_id = 37;
inline bool TradeReport::has_link_local_order_id() const {
  return this != internal_default_instance() && link_local_order_id_ != nullptr;
}
inline const ::pb::OrderID& TradeReport::link_local_order_id() const {
  const ::pb::OrderID* p = link_local_order_id_;
  // @@protoc_insertion_point(field_get:pb.TradeReport.link_local_order_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::OrderID*>(
      &::pb::_OrderID_default_instance_);
}
inline ::pb::OrderID* TradeReport::release_link_local_order_id() {
  // @@protoc_insertion_point(field_release:pb.TradeReport.link_local_order_id)
  
  ::pb::OrderID* temp = link_local_order_id_;
  link_local_order_id_ = nullptr;
  return temp;
}
inline ::pb::OrderID* TradeReport::mutable_link_local_order_id() {
  
  if (link_local_order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::OrderID>(GetArenaNoVirtual());
    link_local_order_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TradeReport.link_local_order_id)
  return link_local_order_id_;
}
inline void TradeReport::set_allocated_link_local_order_id(::pb::OrderID* link_local_order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_local_order_id_);
  }
  if (link_local_order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link_local_order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link_local_order_id, submessage_arena);
    }
    
  } else {
    
  }
  link_local_order_id_ = link_local_order_id;
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReport.link_local_order_id)
}

// -------------------------------------------------------------------

// trade_report_list

// repeated .pb.TradeReport list = 1;
inline int trade_report_list::list_size() const {
  return list_.size();
}
inline void trade_report_list::clear_list() {
  list_.Clear();
}
inline ::pb::TradeReport* trade_report_list::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.trade_report_list.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradeReport >*
trade_report_list::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.trade_report_list.list)
  return &list_;
}
inline const ::pb::TradeReport& trade_report_list::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.trade_report_list.list)
  return list_.Get(index);
}
inline ::pb::TradeReport* trade_report_list::add_list() {
  // @@protoc_insertion_point(field_add:pb.trade_report_list.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradeReport >&
trade_report_list::list() const {
  // @@protoc_insertion_point(field_list:pb.trade_report_list.list)
  return list_;
}

// -------------------------------------------------------------------

// TradeReportSession

// .pb.TradeReport trade = 1;
inline bool TradeReportSession::has_trade() const {
  return this != internal_default_instance() && trade_ != nullptr;
}
inline void TradeReportSession::clear_trade() {
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
inline const ::pb::TradeReport& TradeReportSession::trade() const {
  const ::pb::TradeReport* p = trade_;
  // @@protoc_insertion_point(field_get:pb.TradeReportSession.trade)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::TradeReport*>(
      &::pb::_TradeReport_default_instance_);
}
inline ::pb::TradeReport* TradeReportSession::release_trade() {
  // @@protoc_insertion_point(field_release:pb.TradeReportSession.trade)
  
  ::pb::TradeReport* temp = trade_;
  trade_ = nullptr;
  return temp;
}
inline ::pb::TradeReport* TradeReportSession::mutable_trade() {
  
  if (trade_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::TradeReport>(GetArenaNoVirtual());
    trade_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TradeReportSession.trade)
  return trade_;
}
inline void TradeReportSession::set_allocated_trade(::pb::TradeReport* trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trade_;
  }
  if (trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade, submessage_arena);
    }
    
  } else {
    
  }
  trade_ = trade;
  // @@protoc_insertion_point(field_set_allocated:pb.TradeReportSession.trade)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::OrderHedgeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::OrderHedgeType>() {
  return ::pb::OrderHedgeType_descriptor();
}
template <> struct is_proto_enum< ::pb::TradeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TradeType>() {
  return ::pb::TradeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trade_5freport_2eproto
