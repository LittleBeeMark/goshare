// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goshare.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_goshare_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_goshare_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "market_data.pb.h"
#include "strategy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_goshare_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_goshare_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_goshare_2eproto;
namespace pb {
class ReqSSEStockOptionList;
class ReqSSEStockOptionListDefaultTypeInternal;
extern ReqSSEStockOptionListDefaultTypeInternal _ReqSSEStockOptionList_default_instance_;
class RspSSEStockOptionList;
class RspSSEStockOptionListDefaultTypeInternal;
extern RspSSEStockOptionListDefaultTypeInternal _RspSSEStockOptionList_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ReqSSEStockOptionList* Arena::CreateMaybeMessage<::pb::ReqSSEStockOptionList>(Arena*);
template<> ::pb::RspSSEStockOptionList* Arena::CreateMaybeMessage<::pb::RspSSEStockOptionList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class ReqSSEStockOptionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqSSEStockOptionList) */ {
 public:
  ReqSSEStockOptionList();
  virtual ~ReqSSEStockOptionList();

  ReqSSEStockOptionList(const ReqSSEStockOptionList& from);
  ReqSSEStockOptionList(ReqSSEStockOptionList&& from) noexcept
    : ReqSSEStockOptionList() {
    *this = ::std::move(from);
  }

  inline ReqSSEStockOptionList& operator=(const ReqSSEStockOptionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSSEStockOptionList& operator=(ReqSSEStockOptionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqSSEStockOptionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSSEStockOptionList* internal_default_instance() {
    return reinterpret_cast<const ReqSSEStockOptionList*>(
               &_ReqSSEStockOptionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReqSSEStockOptionList* other);
  friend void swap(ReqSSEStockOptionList& a, ReqSSEStockOptionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSSEStockOptionList* New() const final {
    return CreateMaybeMessage<ReqSSEStockOptionList>(nullptr);
  }

  ReqSSEStockOptionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSSEStockOptionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSSEStockOptionList& from);
  void MergeFrom(const ReqSSEStockOptionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSSEStockOptionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqSSEStockOptionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goshare_2eproto);
    return ::descriptor_table_goshare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.ReqSSEStockOptionList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class RspSSEStockOptionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspSSEStockOptionList) */ {
 public:
  RspSSEStockOptionList();
  virtual ~RspSSEStockOptionList();

  RspSSEStockOptionList(const RspSSEStockOptionList& from);
  RspSSEStockOptionList(RspSSEStockOptionList&& from) noexcept
    : RspSSEStockOptionList() {
    *this = ::std::move(from);
  }

  inline RspSSEStockOptionList& operator=(const RspSSEStockOptionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspSSEStockOptionList& operator=(RspSSEStockOptionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspSSEStockOptionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspSSEStockOptionList* internal_default_instance() {
    return reinterpret_cast<const RspSSEStockOptionList*>(
               &_RspSSEStockOptionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RspSSEStockOptionList* other);
  friend void swap(RspSSEStockOptionList& a, RspSSEStockOptionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspSSEStockOptionList* New() const final {
    return CreateMaybeMessage<RspSSEStockOptionList>(nullptr);
  }

  RspSSEStockOptionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspSSEStockOptionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspSSEStockOptionList& from);
  void MergeFrom(const RspSSEStockOptionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspSSEStockOptionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspSSEStockOptionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goshare_2eproto);
    return ::descriptor_table_goshare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.SSEStockOption list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::SSEStockOption* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SSEStockOption >*
      mutable_list();
  const ::pb::SSEStockOption& list(int index) const;
  ::pb::SSEStockOption* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SSEStockOption >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.RspSSEStockOptionList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SSEStockOption > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqSSEStockOptionList

// -------------------------------------------------------------------

// RspSSEStockOptionList

// repeated .pb.SSEStockOption list = 1;
inline int RspSSEStockOptionList::list_size() const {
  return list_.size();
}
inline ::pb::SSEStockOption* RspSSEStockOptionList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RspSSEStockOptionList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SSEStockOption >*
RspSSEStockOptionList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.RspSSEStockOptionList.list)
  return &list_;
}
inline const ::pb::SSEStockOption& RspSSEStockOptionList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.RspSSEStockOptionList.list)
  return list_.Get(index);
}
inline ::pb::SSEStockOption* RspSSEStockOptionList::add_list() {
  // @@protoc_insertion_point(field_add:pb.RspSSEStockOptionList.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SSEStockOption >&
RspSSEStockOptionList::list() const {
  // @@protoc_insertion_point(field_list:pb.RspSSEStockOptionList.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_goshare_2eproto
