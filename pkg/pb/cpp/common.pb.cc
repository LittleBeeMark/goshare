// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountMoneySummary_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BrokerRoute_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentInfo_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketTimeRule_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneyTransferRecord_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionMonth_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductID_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProductInfo_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqUpdateTIOpenDate_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleTimePeriod_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Symbol_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TradingInstrument_common_2eproto;
namespace pb {
class SymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Symbol> _instance;
} _Symbol_default_instance_;
class SymbolListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SymbolList> _instance;
} _SymbolList_default_instance_;
class ProductIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProductID> _instance;
} _ProductID_default_instance_;
class BrokerRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BrokerRoute> _instance;
} _BrokerRoute_default_instance_;
class BrokerRouteListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BrokerRouteList> _instance;
} _BrokerRouteList_default_instance_;
class InstrumentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentInfo> _instance;
} _InstrumentInfo_default_instance_;
class SimpleTimePeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleTimePeriod> _instance;
} _SimpleTimePeriod_default_instance_;
class MarketTimeRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketTimeRule> _instance;
} _MarketTimeRule_default_instance_;
class ProductInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProductInfo> _instance;
} _ProductInfo_default_instance_;
class TradingInstrumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradingInstrument> _instance;
} _TradingInstrument_default_instance_;
class TradingInstrumentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradingInstrumentList> _instance;
} _TradingInstrumentList_default_instance_;
class ProductInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProductInfoList> _instance;
} _ProductInfoList_default_instance_;
class ReqSetTradingInstrumentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSetTradingInstrumentList> _instance;
} _ReqSetTradingInstrumentList_default_instance_;
class ReqSetProductInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSetProductInfoList> _instance;
} _ReqSetProductInfoList_default_instance_;
class ReqUpdateTIOpenDateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqUpdateTIOpenDate> _instance;
} _ReqUpdateTIOpenDate_default_instance_;
class ReqUpdateTIOpenDateListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqUpdateTIOpenDateList> _instance;
} _ReqUpdateTIOpenDateList_default_instance_;
class AccountMoneySummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountMoneySummary> _instance;
} _AccountMoneySummary_default_instance_;
class AccountMoneySummaryListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountMoneySummaryList> _instance;
} _AccountMoneySummaryList_default_instance_;
class MoneyTransferRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneyTransferRecord> _instance;
} _MoneyTransferRecord_default_instance_;
class MTRListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MTRList> _instance;
} _MTRList_default_instance_;
class SSEStockOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSEStockOption> _instance;
} _SSEStockOption_default_instance_;
class OptionMonthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionMonth> _instance;
} _OptionMonth_default_instance_;
class OptionMonthListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionMonthList> _instance;
} _OptionMonthList_default_instance_;
class EmptyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyRequest> _instance;
} _EmptyRequest_default_instance_;
class EmptyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyResponse> _instance;
} _EmptyResponse_default_instance_;
class CommonRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonRequest> _instance;
} _CommonRequest_default_instance_;
class CommonResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonResponse> _instance;
} _CommonResponse_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_AccountMoneySummary_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_AccountMoneySummary_default_instance_;
    new (ptr) ::pb::AccountMoneySummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::AccountMoneySummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountMoneySummary_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AccountMoneySummary_common_2eproto}, {}};

static void InitDefaultsscc_info_AccountMoneySummaryList_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_AccountMoneySummaryList_default_instance_;
    new (ptr) ::pb::AccountMoneySummaryList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::AccountMoneySummaryList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountMoneySummaryList_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AccountMoneySummaryList_common_2eproto}, {
      &scc_info_AccountMoneySummary_common_2eproto.base,}};

static void InitDefaultsscc_info_BrokerRoute_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BrokerRoute_default_instance_;
    new (ptr) ::pb::BrokerRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BrokerRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BrokerRoute_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BrokerRoute_common_2eproto}, {}};

static void InitDefaultsscc_info_BrokerRouteList_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BrokerRouteList_default_instance_;
    new (ptr) ::pb::BrokerRouteList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BrokerRouteList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BrokerRouteList_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BrokerRouteList_common_2eproto}, {
      &scc_info_BrokerRoute_common_2eproto.base,}};

static void InitDefaultsscc_info_CommonRequest_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CommonRequest_default_instance_;
    new (ptr) ::pb::CommonRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CommonRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonRequest_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CommonRequest_common_2eproto}, {}};

static void InitDefaultsscc_info_CommonResponse_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CommonResponse_default_instance_;
    new (ptr) ::pb::CommonResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CommonResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonResponse_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CommonResponse_common_2eproto}, {}};

static void InitDefaultsscc_info_EmptyRequest_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_EmptyRequest_default_instance_;
    new (ptr) ::pb::EmptyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::EmptyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyRequest_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EmptyRequest_common_2eproto}, {}};

static void InitDefaultsscc_info_EmptyResponse_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_EmptyResponse_default_instance_;
    new (ptr) ::pb::EmptyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::EmptyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyResponse_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EmptyResponse_common_2eproto}, {}};

static void InitDefaultsscc_info_InstrumentInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_InstrumentInfo_default_instance_;
    new (ptr) ::pb::InstrumentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::InstrumentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InstrumentInfo_common_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_MTRList_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_MTRList_default_instance_;
    new (ptr) ::pb::MTRList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::MTRList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MTRList_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MTRList_common_2eproto}, {
      &scc_info_MoneyTransferRecord_common_2eproto.base,}};

static void InitDefaultsscc_info_MarketTimeRule_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_MarketTimeRule_default_instance_;
    new (ptr) ::pb::MarketTimeRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::MarketTimeRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketTimeRule_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MarketTimeRule_common_2eproto}, {
      &scc_info_SimpleTimePeriod_common_2eproto.base,}};

static void InitDefaultsscc_info_MoneyTransferRecord_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_MoneyTransferRecord_default_instance_;
    new (ptr) ::pb::MoneyTransferRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::MoneyTransferRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneyTransferRecord_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoneyTransferRecord_common_2eproto}, {}};

static void InitDefaultsscc_info_OptionMonth_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_OptionMonth_default_instance_;
    new (ptr) ::pb::OptionMonth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::OptionMonth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionMonth_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OptionMonth_common_2eproto}, {}};

static void InitDefaultsscc_info_OptionMonthList_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_OptionMonthList_default_instance_;
    new (ptr) ::pb::OptionMonthList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::OptionMonthList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OptionMonthList_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OptionMonthList_common_2eproto}, {
      &scc_info_OptionMonth_common_2eproto.base,}};

static void InitDefaultsscc_info_ProductID_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ProductID_default_instance_;
    new (ptr) ::pb::ProductID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ProductID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductID_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProductID_common_2eproto}, {}};

static void InitDefaultsscc_info_ProductInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ProductInfo_default_instance_;
    new (ptr) ::pb::ProductInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ProductInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProductInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ProductInfo_common_2eproto}, {
      &scc_info_ProductID_common_2eproto.base,
      &scc_info_MarketTimeRule_common_2eproto.base,}};

static void InitDefaultsscc_info_ProductInfoList_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ProductInfoList_default_instance_;
    new (ptr) ::pb::ProductInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ProductInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProductInfoList_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ProductInfoList_common_2eproto}, {
      &scc_info_ProductInfo_common_2eproto.base,}};

static void InitDefaultsscc_info_ReqSetProductInfoList_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqSetProductInfoList_default_instance_;
    new (ptr) ::pb::ReqSetProductInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqSetProductInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSetProductInfoList_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqSetProductInfoList_common_2eproto}, {
      &scc_info_ProductInfo_common_2eproto.base,}};

static void InitDefaultsscc_info_ReqSetTradingInstrumentList_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqSetTradingInstrumentList_default_instance_;
    new (ptr) ::pb::ReqSetTradingInstrumentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqSetTradingInstrumentList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSetTradingInstrumentList_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqSetTradingInstrumentList_common_2eproto}, {
      &scc_info_TradingInstrument_common_2eproto.base,}};

static void InitDefaultsscc_info_ReqUpdateTIOpenDate_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqUpdateTIOpenDate_default_instance_;
    new (ptr) ::pb::ReqUpdateTIOpenDate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqUpdateTIOpenDate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqUpdateTIOpenDate_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqUpdateTIOpenDate_common_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_ReqUpdateTIOpenDateList_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqUpdateTIOpenDateList_default_instance_;
    new (ptr) ::pb::ReqUpdateTIOpenDateList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqUpdateTIOpenDateList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqUpdateTIOpenDateList_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqUpdateTIOpenDateList_common_2eproto}, {
      &scc_info_ReqUpdateTIOpenDate_common_2eproto.base,}};

static void InitDefaultsscc_info_SSEStockOption_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SSEStockOption_default_instance_;
    new (ptr) ::pb::SSEStockOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SSEStockOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSEStockOption_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SSEStockOption_common_2eproto}, {}};

static void InitDefaultsscc_info_SimpleTimePeriod_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SimpleTimePeriod_default_instance_;
    new (ptr) ::pb::SimpleTimePeriod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SimpleTimePeriod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleTimePeriod_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SimpleTimePeriod_common_2eproto}, {}};

static void InitDefaultsscc_info_Symbol_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Symbol_default_instance_;
    new (ptr) ::pb::Symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Symbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Symbol_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Symbol_common_2eproto}, {}};

static void InitDefaultsscc_info_SymbolList_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SymbolList_default_instance_;
    new (ptr) ::pb::SymbolList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SymbolList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SymbolList_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SymbolList_common_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_TradingInstrument_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TradingInstrument_default_instance_;
    new (ptr) ::pb::TradingInstrument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TradingInstrument::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TradingInstrument_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_TradingInstrument_common_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_InstrumentInfo_common_2eproto.base,
      &scc_info_ProductInfo_common_2eproto.base,}};

static void InitDefaultsscc_info_TradingInstrumentList_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TradingInstrumentList_default_instance_;
    new (ptr) ::pb::TradingInstrumentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TradingInstrumentList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradingInstrumentList_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TradingInstrumentList_common_2eproto}, {
      &scc_info_TradingInstrument_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Symbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Symbol, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::Symbol, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SymbolList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SymbolList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ProductID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ProductID, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductID, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BrokerRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BrokerRoute, id_),
  PROTOBUF_FIELD_OFFSET(::pb::BrokerRoute, type_),
  PROTOBUF_FIELD_OFFSET(::pb::BrokerRoute, name_),
  PROTOBUF_FIELD_OFFSET(::pb::BrokerRoute, md_front_list_),
  PROTOBUF_FIELD_OFFSET(::pb::BrokerRoute, trade_front_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BrokerRouteList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BrokerRouteList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, symbol_name_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, position_rank_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, update_time_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, update_trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, upper_limit_price_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, lower_limit_price_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, pre_close_price_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, pre_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, pre_position_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, create_date_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, open_date_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, expire_date_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, start_deliver_date_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, end_deliver_date_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, is_close_today_allowed_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, max_market_order_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, min_market_order_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, max_limit_order_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, min_limit_order_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, base_symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, strike_price_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, call_put_type_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, underlying_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, combination_type_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, min_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, min_sell_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, instrument_code_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, is_trading_),
  PROTOBUF_FIELD_OFFSET(::pb::InstrumentInfo, delivery_date_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTimePeriod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTimePeriod, start_),
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTimePeriod, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::MarketTimeRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::MarketTimeRule, send_rule_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketTimeRule, cancel_rule_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketTimeRule, matching_rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, product_id_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, product_group_id_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, type_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, product_name_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, price_tick_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, pre_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, pre_position_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, settlement_group_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, time_rule_),
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfo, distinguish_position_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TradingInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TradingInstrument, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingInstrument, instrument_info_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingInstrument, product_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TradingInstrumentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TradingInstrumentList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ProductInfoList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSetTradingInstrumentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSetTradingInstrumentList, op_code_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqSetTradingInstrumentList, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqSetTradingInstrumentList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSetProductInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSetProductInfoList, op_code_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqSetProductInfoList, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqSetProductInfoList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqUpdateTIOpenDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqUpdateTIOpenDate, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqUpdateTIOpenDate, open_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqUpdateTIOpenDateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqUpdateTIOpenDateList, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqUpdateTIOpenDateList, list_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqUpdateTIOpenDateList, op_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, id_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, type_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, balance_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, commission_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, cur_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, net_position_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, pre_balance_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, interest_in_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, deposit_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, withdraw_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, frozen_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, frozen_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, available_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, close_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, position_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, pre_mortgate_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, pre_credit_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, interest_base_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, withdraw_available_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, reserve_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, credit_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, mortgate_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, exchange_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, delivery_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, exchange_delivery_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, reserve_balance_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, delivery_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, frozen_transfer_fee_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, frozen_stamp_tax_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, transfer_fee_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, stamp_tax_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, mtm_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, pre_mtm_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, stock_value_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, bond_repurchase_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, reverse_repurchase_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, margin_trade_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, short_sell_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, margin_trade_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, short_sell_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, frozen_close_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, common_balance_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, prefered_balance_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, base_exchange_rate_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, warning_level_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, force_close_level_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, cleared_closed_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, name_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, interest_),
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummary, frozen_interest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummaryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::AccountMoneySummaryList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, uid_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, settlement_group_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, confirmed_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, is_prefered_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, operator_id_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, session_id_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, time_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, comment_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, bank_trade_id_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, payment_config_id_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, original_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, fee_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, payment_path_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, identity_number_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, phone_number_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, bank_name_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, bank_branch_name_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, bank_card_no_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, province_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, city_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, pay_type_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, payed_time_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, confirmed_time_),
  PROTOBUF_FIELD_OFFSET(::pb::MoneyTransferRecord, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::MTRList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::MTRList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, exercise_price_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, update_version_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, option_type_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, daily_price_up_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, time_save_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, delist_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, start_date_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, expire_date_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, contract_unit_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, call_or_put_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, lmt_ord_max_floor_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, delivery_date_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, change_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, mkt_ord_max_floor_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, underlying_type_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, daily_price_down_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, round_lot_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, security_closepx_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, settl_price_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, contract_symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, num_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, contractid_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, margin_ratio_param1_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, margin_ratio_param2_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, lmt_ord_min_floor_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, mkt_ord_min_floor_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, end_date_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, price_limit_type_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, exercise_date_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, margin_unit_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, securityid_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, security_name_byid_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, contract_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::SSEStockOption, underlying_closepx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::OptionMonth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::OptionMonth, name_),
  PROTOBUF_FIELD_OFFSET(::pb::OptionMonth, value_),
  PROTOBUF_FIELD_OFFSET(::pb::OptionMonth, short__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::OptionMonthList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::OptionMonthList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::EmptyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::EmptyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CommonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CommonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CommonResponse, success_),
  PROTOBUF_FIELD_OFFSET(::pb::CommonResponse, code_),
  PROTOBUF_FIELD_OFFSET(::pb::CommonResponse, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::Symbol)},
  { 7, -1, sizeof(::pb::SymbolList)},
  { 13, -1, sizeof(::pb::ProductID)},
  { 20, -1, sizeof(::pb::BrokerRoute)},
  { 30, -1, sizeof(::pb::BrokerRouteList)},
  { 36, -1, sizeof(::pb::InstrumentInfo)},
  { 72, -1, sizeof(::pb::SimpleTimePeriod)},
  { 79, -1, sizeof(::pb::MarketTimeRule)},
  { 87, -1, sizeof(::pb::ProductInfo)},
  { 104, -1, sizeof(::pb::TradingInstrument)},
  { 112, -1, sizeof(::pb::TradingInstrumentList)},
  { 118, -1, sizeof(::pb::ProductInfoList)},
  { 124, -1, sizeof(::pb::ReqSetTradingInstrumentList)},
  { 132, -1, sizeof(::pb::ReqSetProductInfoList)},
  { 140, -1, sizeof(::pb::ReqUpdateTIOpenDate)},
  { 147, -1, sizeof(::pb::ReqUpdateTIOpenDateList)},
  { 155, -1, sizeof(::pb::AccountMoneySummary)},
  { 212, -1, sizeof(::pb::AccountMoneySummaryList)},
  { 218, -1, sizeof(::pb::MoneyTransferRecord)},
  { 251, -1, sizeof(::pb::MTRList)},
  { 257, -1, sizeof(::pb::SSEStockOption)},
  { 296, -1, sizeof(::pb::OptionMonth)},
  { 304, -1, sizeof(::pb::OptionMonthList)},
  { 310, -1, sizeof(::pb::EmptyRequest)},
  { 315, -1, sizeof(::pb::EmptyResponse)},
  { 320, -1, sizeof(::pb::CommonRequest)},
  { 325, -1, sizeof(::pb::CommonResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Symbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SymbolList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ProductID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BrokerRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BrokerRouteList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_InstrumentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SimpleTimePeriod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_MarketTimeRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ProductInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TradingInstrument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TradingInstrumentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ProductInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqSetTradingInstrumentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqSetProductInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqUpdateTIOpenDate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqUpdateTIOpenDateList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_AccountMoneySummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_AccountMoneySummaryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_MoneyTransferRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_MTRList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SSEStockOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_OptionMonth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_OptionMonthList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_EmptyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_EmptyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CommonRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CommonResponse_default_instance_),
};

const char descriptor_table_protodef_common_2eproto[] =
  "\n\014common.proto\022\002pb\":\n\006Symbol\022\"\n\010exchange"
  "\030\001 \001(\0162\020.pb.ExchangeType\022\014\n\004code\030\002 \001(\t\"&"
  "\n\nSymbolList\022\030\n\004list\030\001 \003(\0132\n.pb.Symbol\"="
  "\n\tProductID\022\"\n\010exchange\030\001 \001(\0162\020.pb.Excha"
  "ngeType\022\014\n\004code\030\002 \001(\t\"f\n\013BrokerRoute\022\n\n\002"
  "id\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\025\n\r"
  "md_front_list\030\004 \003(\t\022\030\n\020trade_front_list\030"
  "\005 \003(\t\"0\n\017BrokerRouteList\022\035\n\004list\030\001 \003(\0132\017"
  ".pb.BrokerRoute\"\361\006\n\016InstrumentInfo\022\023\n\013sy"
  "mbol_name\030\001 \001(\t\022\025\n\rposition_rank\030\002 \001(\005\022\023"
  "\n\013update_time\030\003 \001(\003\022\032\n\022update_trading_da"
  "y\030\004 \001(\005\022\031\n\021upper_limit_price\030\005 \001(\001\022\031\n\021lo"
  "wer_limit_price\030\006 \001(\001\022\027\n\017pre_close_price"
  "\030\007 \001(\001\022\034\n\024pre_settlement_price\030\010 \001(\001\022\022\n\n"
  "pre_volume\030\t \001(\005\022\024\n\014pre_position\030\n \001(\005\022\030"
  "\n\020settlement_price\030\013 \001(\001\022\023\n\013create_date\030"
  "\014 \001(\005\022\021\n\topen_date\030\r \001(\005\022\023\n\013expire_date\030"
  "\016 \001(\005\022\032\n\022start_deliver_date\030\017 \001(\005\022\030\n\020end"
  "_deliver_date\030\020 \001(\005\022\036\n\026is_close_today_al"
  "lowed\030\021 \001(\005\022\037\n\027max_market_order_volume\030\022"
  " \001(\005\022\037\n\027min_market_order_volume\030\023 \001(\005\022\036\n"
  "\026max_limit_order_volume\030\024 \001(\005\022\036\n\026min_lim"
  "it_order_volume\030\025 \001(\005\022\037\n\013base_symbol\030\026 \001"
  "(\0132\n.pb.Symbol\022\024\n\014strike_price\030\027 \001(\001\022,\n\r"
  "call_put_type\030\030 \001(\0162\025.pb.OptionCallPutTy"
  "pe\022\033\n\023underlying_multiple\030\031 \001(\001\022\030\n\020combi"
  "nation_type\030\032 \001(\005\022\026\n\016min_buy_volume\030\033 \001("
  "\005\022\027\n\017min_sell_volume\030\034 \001(\005\022#\n\017instrument"
  "_code\030\035 \001(\0132\n.pb.Symbol\022\022\n\nis_trading\030\036 "
  "\001(\010\0226\n\022delivery_date_type\030\037 \001(\0162\032.pb.Opt"
  "ionDeliveryDateType\".\n\020SimpleTimePeriod\022"
  "\r\n\005start\030\001 \001(\005\022\013\n\003end\030\002 \001(\005\"\221\001\n\016MarketTi"
  "meRule\022\'\n\tsend_rule\030\001 \003(\0132\024.pb.SimpleTim"
  "ePeriod\022)\n\013cancel_rule\030\002 \003(\0132\024.pb.Simple"
  "TimePeriod\022+\n\rmatching_rule\030\003 \003(\0132\024.pb.S"
  "impleTimePeriod\"\340\002\n\013ProductInfo\022!\n\nprodu"
  "ct_id\030\001 \001(\0132\r.pb.ProductID\022\'\n\020product_gr"
  "oup_id\030\002 \001(\0132\r.pb.ProductID\022\035\n\004type\030\003 \001("
  "\0162\017.pb.ProductType\022\024\n\014product_name\030\004 \001(\t"
  "\022\022\n\nprice_tick\030\005 \001(\001\022\027\n\017volume_multiple\030"
  "\006 \001(\005\022\022\n\npre_volume\030\007 \001(\005\022\024\n\014pre_positio"
  "n\030\010 \001(\005\022\025\n\rcurrency_type\030\t \001(\005\022\030\n\020settle"
  "ment_group\030\n \001(\005\022%\n\ttime_rule\030\013 \001(\0132\022.pb"
  ".MarketTimeRule\022!\n\031distinguish_position_"
  "time\030\014 \001(\010\"\203\001\n\021TradingInstrument\022\032\n\006symb"
  "ol\030\001 \001(\0132\n.pb.Symbol\022+\n\017instrument_info\030"
  "\002 \001(\0132\022.pb.InstrumentInfo\022%\n\014product_inf"
  "o\030\003 \001(\0132\017.pb.ProductInfo\"<\n\025TradingInstr"
  "umentList\022#\n\004list\030\001 \003(\0132\025.pb.TradingInst"
  "rument\"0\n\017ProductInfoList\022\035\n\004list\030\001 \003(\0132"
  "\017.pb.ProductInfo\"e\n\033ReqSetTradingInstrum"
  "entList\022\017\n\007op_code\030\001 \001(\t\022\020\n\010exchange\030\002 \001"
  "(\005\022#\n\004list\030\003 \003(\0132\025.pb.TradingInstrument\""
  "Y\n\025ReqSetProductInfoList\022\017\n\007op_code\030\001 \001("
  "\t\022\020\n\010exchange\030\002 \001(\005\022\035\n\004list\030\003 \003(\0132\017.pb.P"
  "roductInfo\"D\n\023ReqUpdateTIOpenDate\022\032\n\006sym"
  "bol\030\001 \001(\0132\n.pb.Symbol\022\021\n\topen_date\030\002 \001(\005"
  "\"c\n\027ReqUpdateTIOpenDateList\022\020\n\010exchange\030"
  "\001 \001(\005\022%\n\004list\030\002 \003(\0132\027.pb.ReqUpdateTIOpen"
  "Date\022\017\n\007op_code\030\003 \001(\t\"\374\t\n\023AccountMoneySu"
  "mmary\022\n\n\002id\030\001 \001(\t\022\035\n\004type\030\002 \001(\0162\017.pb.Acc"
  "ountType\022\'\n\rcurrency_type\030\003 \001(\0162\020.pb.Cur"
  "rencyType\022\017\n\007balance\030\004 \001(\001\022\022\n\ncommission"
  "\030\005 \001(\001\022\022\n\ncur_margin\030\006 \001(\001\022\033\n\023net_positi"
  "on_amount\030\007 \001(\001\022\023\n\013pre_balance\030\010 \001(\001\022\023\n\013"
  "interest_in\030\t \001(\001\022\017\n\007deposit\030\n \001(\001\022\020\n\010wi"
  "thdraw\030\013 \001(\001\022\025\n\rfrozen_margin\030\014 \001(\001\022\031\n\021f"
  "rozen_commission\030\r \001(\001\022\021\n\tavailable\030\016 \001("
  "\001\022\024\n\014close_profit\030\017 \001(\001\022\027\n\017position_prof"
  "it\030\020 \001(\001\022\024\n\014pre_mortgate\030\021 \001(\001\022\022\n\npre_cr"
  "edit\030\022 \001(\001\022\025\n\rinterest_base\030\023 \001(\001\022\032\n\022wit"
  "hdraw_available\030\024 \001(\001\022\017\n\007reserve\030\025 \001(\001\022\023"
  "\n\013trading_day\030\026 \001(\005\022\016\n\006credit\030\027 \001(\001\022\020\n\010m"
  "ortgate\030\030 \001(\001\022\027\n\017exchange_margin\030\031 \001(\001\022\027"
  "\n\017delivery_margin\030\032 \001(\001\022 \n\030exchange_deli"
  "very_margin\030\033 \001(\001\022\027\n\017reserve_balance\030\034 \001"
  "(\001\022\033\n\023delivery_commission\030\035 \001(\001\022\033\n\023froze"
  "n_transfer_fee\030\036 \001(\001\022\030\n\020frozen_stamp_tax"
  "\030\037 \001(\001\022\024\n\014transfer_fee\030  \001(\001\022\021\n\tstamp_ta"
  "x\030! \001(\001\022\022\n\nmtm_profit\030\" \001(\001\022\026\n\016pre_mtm_p"
  "rofit\030# \001(\001\022\023\n\013stock_value\030$ \001(\001\022\036\n\026bond"
  "_repurchase_amount\030% \001(\001\022!\n\031reverse_repu"
  "rchase_amount\030& \001(\001\022\033\n\023margin_trade_amou"
  "nt\030\' \001(\001\022\031\n\021short_sell_amount\030( \001(\001\022\033\n\023m"
  "argin_trade_profit\030) \001(\001\022\031\n\021short_sell_p"
  "rofit\030* \001(\001\022\037\n\027frozen_close_commission\030+"
  " \001(\001\022\026\n\016common_balance\030, \001(\001\022\030\n\020prefered"
  "_balance\030- \001(\001\022\032\n\022base_exchange_rate\030. \001"
  "(\001\022\025\n\rwarning_level\030/ \001(\001\022\031\n\021force_close"
  "_level\0300 \001(\001\022\035\n\025cleared_closed_profit\0301 "
  "\001(\001\022\014\n\004name\0302 \001(\t\022\020\n\010interest\0303 \001(\001\022\027\n\017f"
  "rozen_interest\0304 \001(\001\"@\n\027AccountMoneySumm"
  "aryList\022%\n\004list\030\001 \003(\0132\027.pb.AccountMoneyS"
  "ummary\"\306\004\n\023MoneyTransferRecord\022\013\n\003uid\030\001 "
  "\001(\003\022\021\n\tdirection\030\002 \001(\005\022\025\n\rcurrency_type\030"
  "\003 \001(\005\022\030\n\020settlement_group\030\004 \001(\005\022\021\n\tconfi"
  "rmed\030\005 \001(\005\022\023\n\013is_prefered\030\006 \001(\005\022\016\n\006amoun"
  "t\030\007 \001(\001\022\022\n\naccount_id\030\010 \001(\t\022\023\n\013operator_"
  "id\030\t \001(\t\022\022\n\nsession_id\030\n \001(\005\022\014\n\004time\030\013 \001"
  "(\003\022\017\n\007comment\030\014 \001(\t\022\025\n\rbank_trade_id\030\r \001"
  "(\t\022\031\n\021payment_config_id\030\016 \001(\003\022\027\n\017origina"
  "l_amount\030\017 \001(\001\022\013\n\003fee\030\020 \001(\001\022\024\n\014payment_p"
  "ath\030\021 \001(\t\022\027\n\017identity_number\030\022 \001(\t\022\024\n\014ph"
  "one_number\030\023 \001(\t\022\021\n\tbank_name\030\024 \001(\t\022\030\n\020b"
  "ank_branch_name\030\025 \001(\t\022\024\n\014bank_card_no\030\026 "
  "\001(\t\022\020\n\010province\030\027 \001(\t\022\014\n\004city\030\030 \001(\t\022\020\n\010p"
  "ay_type\030\031 \001(\t\022\022\n\npayed_time\030\032 \001(\003\022\026\n\016con"
  "firmed_time\030\033 \001(\003\022\014\n\004name\030\034 \001(\t\"0\n\007MTRLi"
  "st\022%\n\004list\030\001 \003(\0132\027.pb.MoneyTransferRecor"
  "d\"\262\006\n\016SSEStockOption\022\026\n\016exercise_price\030\001"
  " \001(\t\022\026\n\016update_version\030\002 \001(\t\022\023\n\013option_t"
  "ype\030\003 \001(\t\022\034\n\024daily_price_up_limit\030\004 \001(\t\022"
  "\021\n\ttime_save\030\005 \001(\t\022\023\n\013DELIST_Flag\030\006 \001(\t\022"
  "\022\n\nstart_date\030\007 \001(\t\022\023\n\013expire_date\030\010 \001(\t"
  "\022\025\n\rcontract_unit\030\t \001(\t\022\023\n\013call_or_put\030\n"
  " \001(\t\022\031\n\021lmt_ord_max_floor\030\013 \001(\t\022\025\n\rdeliv"
  "ery_date\030\014 \001(\t\022\023\n\013change_flag\030\r \001(\t\022\031\n\021m"
  "kt_ord_max_floor\030\016 \001(\t\022\027\n\017underlying_typ"
  "e\030\017 \001(\t\022\036\n\026daily_price_down_limit\030\020 \001(\t\022"
  "\021\n\tround_lot\030\021 \001(\t\022\030\n\020security_closePX\030\022"
  " \001(\t\022\023\n\013settl_price\030\023 \001(\t\022\027\n\017contract_sy"
  "mbol\030\024 \001(\t\022\013\n\003num\030\025 \001(\t\022\022\n\ncontractID\030\026 "
  "\001(\t\022\033\n\023margin_ratio_param1\030\027 \001(\t\022\033\n\023marg"
  "in_ratio_param2\030\030 \001(\t\022\031\n\021lmt_ord_min_flo"
  "or\030\031 \001(\t\022\031\n\021mkt_ord_min_floor\030\032 \001(\t\022\020\n\010e"
  "nd_date\030\033 \001(\t\022\030\n\020price_limit_type\030\034 \001(\t\022"
  "\025\n\rexercise_date\030\035 \001(\t\022\023\n\013margin_unit\030\036 "
  "\001(\t\022\022\n\nsecurityID\030\037 \001(\t\022\032\n\022security_name"
  "_byID\030  \001(\t\022\025\n\rcontract_flag\030! \001(\t\022\032\n\022un"
  "derlying_closePX\030\" \001(\t\"9\n\013OptionMonth\022\014\n"
  "\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\r\n\005short\030\003 \001("
  "\t\"0\n\017OptionMonthList\022\035\n\004list\030\001 \003(\0132\017.pb."
  "OptionMonth\"\016\n\014EmptyRequest\"\017\n\rEmptyResp"
  "onse\"\017\n\rCommonRequest\"@\n\016CommonResponse\022"
  "\017\n\007success\030\001 \001(\010\022\014\n\004code\030\002 \001(\005\022\017\n\007messag"
  "e\030\003 \001(\t*\373\001\n\014ExchangeType\022\010\n\004SHFE\020\000\022\010\n\004CZ"
  "CE\020\001\022\007\n\003DCE\020\002\022\t\n\005CFFEX\020\003\022\007\n\003SSE\020\004\022\007\n\003SZE"
  "\020\005\022\007\n\003HKG\020\006\022\010\n\004HKFE\020\007\022\t\n\005INDEX\020\010\022\016\n\nOPTI"
  "ON_SSE\020\t\022\010\n\004NYME\020\n\022\010\n\004GLBX\020\013\022\010\n\004CBOT\020\014\022\007"
  "\n\003CME\020\r\022\t\n\005COMEX\020\016\022\t\n\005EUREX\020\017\022\007\n\003IPE\020\020\022\t"
  "\n\005LIFFE\020\021\022\007\n\003LME\020\022\022\007\n\003SGX\020\023\022\010\n\004DEMO\020\024\022\007\n"
  "\003INE\020\025\022\r\n\tINVALIDEX\020\026*\253\001\n\013ProductType\022\r\n"
  "\tPT_UNKOWN\020\000\022\r\n\tPT_FUTURE\020\001\022\014\n\010PT_STOCK\020"
  "\002\022\013\n\007PT_BOND\020\003\022\022\n\016PT_COMBINATION\020\004\022\r\n\tPT"
  "_OPTION\020\005\022\024\n\020PT_FUTURE_OPTION\020\006\022\023\n\017PT_ST"
  "OCK_OPTION\020\007\022\025\n\021PT_SSE_ETF_OPTION\020\010*s\n\nP"
  "eriodType\022\010\n\004TICK\020\000\022\006\n\002M1\020\001\022\006\n\002M3\020\002\022\006\n\002M"
  "5\020\003\022\007\n\003M10\020\004\022\007\n\003M15\020\005\022\007\n\003M30\020\006\022\006\n\002H1\020\007\022\006"
  "\n\002H3\020\010\022\006\n\002D1\020\t\022\006\n\002W1\020\n\022\010\n\004MON1\020\013*0\n\021Opti"
  "onCallPutType\022\r\n\tOCPT_CALL\020\000\022\014\n\010OCPT_PUT"
  "\020\001*&\n\026OptionDeliveryDateType\022\014\n\010ODDT_EUR"
  "\020\000*S\n\031CloseCommissionAlgorithim\022\016\n\nCCA_N"
  "ORMAL\020\000\022\014\n\010CCA_ONCE\020\001\022\030\n\024CCA_MULTIPLE_BY"
  "_DATE\020\002**\n\013AccountType\022\r\n\tCN_FUTURE\020\000\022\014\n"
  "\010CN_STOCK\020\001* \n\014CurrencyType\022\007\n\003CNY\020\000\022\007\n\003"
  "USD\020\001*K\n\022TradingAccountType\022\016\n\nTAT_NORMA"
  "L\020\000\022\021\n\rTAT_TRAINNING\020\001\022\022\n\016TAT_CTP_MIRROR"
  "\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2eproto_sccs[27] = {
  &scc_info_AccountMoneySummary_common_2eproto.base,
  &scc_info_AccountMoneySummaryList_common_2eproto.base,
  &scc_info_BrokerRoute_common_2eproto.base,
  &scc_info_BrokerRouteList_common_2eproto.base,
  &scc_info_CommonRequest_common_2eproto.base,
  &scc_info_CommonResponse_common_2eproto.base,
  &scc_info_EmptyRequest_common_2eproto.base,
  &scc_info_EmptyResponse_common_2eproto.base,
  &scc_info_InstrumentInfo_common_2eproto.base,
  &scc_info_MTRList_common_2eproto.base,
  &scc_info_MarketTimeRule_common_2eproto.base,
  &scc_info_MoneyTransferRecord_common_2eproto.base,
  &scc_info_OptionMonth_common_2eproto.base,
  &scc_info_OptionMonthList_common_2eproto.base,
  &scc_info_ProductID_common_2eproto.base,
  &scc_info_ProductInfo_common_2eproto.base,
  &scc_info_ProductInfoList_common_2eproto.base,
  &scc_info_ReqSetProductInfoList_common_2eproto.base,
  &scc_info_ReqSetTradingInstrumentList_common_2eproto.base,
  &scc_info_ReqUpdateTIOpenDate_common_2eproto.base,
  &scc_info_ReqUpdateTIOpenDateList_common_2eproto.base,
  &scc_info_SSEStockOption_common_2eproto.base,
  &scc_info_SimpleTimePeriod_common_2eproto.base,
  &scc_info_Symbol_common_2eproto.base,
  &scc_info_SymbolList_common_2eproto.base,
  &scc_info_TradingInstrument_common_2eproto.base,
  &scc_info_TradingInstrumentList_common_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2eproto_once;
static bool descriptor_table_common_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto = {
  &descriptor_table_common_2eproto_initialized, descriptor_table_protodef_common_2eproto, "common.proto", 6290,
  &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_sccs, descriptor_table_common_2eproto_deps, 27, 0,
  schemas, file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, 27, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2eproto), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExchangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool ExchangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool ProductType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeriodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool PeriodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionCallPutType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
bool OptionCallPutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionDeliveryDateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[4];
}
bool OptionDeliveryDateType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloseCommissionAlgorithim_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[5];
}
bool CloseCommissionAlgorithim_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[6];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CurrencyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[7];
}
bool CurrencyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradingAccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[8];
}
bool TradingAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Symbol::InitAsDefaultInstance() {
}
class Symbol::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Symbol::kExchangeFieldNumber;
const int Symbol::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Symbol::Symbol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Symbol)
}
Symbol::Symbol(const Symbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  exchange_ = from.exchange_;
  // @@protoc_insertion_point(copy_constructor:pb.Symbol)
}

void Symbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Symbol_common_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
}

Symbol::~Symbol() {
  // @@protoc_insertion_point(destructor:pb.Symbol)
  SharedDtor();
}

void Symbol::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Symbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Symbol& Symbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Symbol_common_2eproto.base);
  return *internal_default_instance();
}


void Symbol::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Symbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Symbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.ExchangeType exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_exchange(static_cast<::pb::ExchangeType>(val));
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_code(), ptr, ctx, "pb.Symbol.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Symbol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Symbol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exchange(static_cast< ::pb::ExchangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.Symbol.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Symbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Symbol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Symbol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Symbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Symbol.code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Symbol)
}

::PROTOBUF_NAMESPACE_ID::uint8* Symbol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Symbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Symbol.code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Symbol)
  return target;
}

size_t Symbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Symbol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->code());
  }

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->exchange());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Symbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Symbol)
  GOOGLE_DCHECK_NE(&from, this);
  const Symbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Symbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Symbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Symbol)
    MergeFrom(*source);
  }
}

void Symbol::MergeFrom(const Symbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Symbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
}

void Symbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Symbol::CopyFrom(const Symbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Symbol::IsInitialized() const {
  return true;
}

void Symbol::Swap(Symbol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Symbol::InternalSwap(Symbol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exchange_, other->exchange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Symbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SymbolList::InitAsDefaultInstance() {
}
class SymbolList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolList::SymbolList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SymbolList)
}
SymbolList::SymbolList(const SymbolList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.SymbolList)
}

void SymbolList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SymbolList_common_2eproto.base);
}

SymbolList::~SymbolList() {
  // @@protoc_insertion_point(destructor:pb.SymbolList)
  SharedDtor();
}

void SymbolList::SharedDtor() {
}

void SymbolList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SymbolList& SymbolList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SymbolList_common_2eproto.base);
  return *internal_default_instance();
}


void SymbolList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SymbolList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SymbolList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.Symbol list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SymbolList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SymbolList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Symbol list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SymbolList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SymbolList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SymbolList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SymbolList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Symbol list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SymbolList)
}

::PROTOBUF_NAMESPACE_ID::uint8* SymbolList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SymbolList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Symbol list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SymbolList)
  return target;
}

size_t SymbolList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SymbolList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Symbol list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SymbolList)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SymbolList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SymbolList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SymbolList)
    MergeFrom(*source);
  }
}

void SymbolList::MergeFrom(const SymbolList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SymbolList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SymbolList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SymbolList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolList::CopyFrom(const SymbolList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SymbolList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolList::IsInitialized() const {
  return true;
}

void SymbolList::Swap(SymbolList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolList::InternalSwap(SymbolList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProductID::InitAsDefaultInstance() {
}
class ProductID::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductID::kExchangeFieldNumber;
const int ProductID::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductID::ProductID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ProductID)
}
ProductID::ProductID(const ProductID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  exchange_ = from.exchange_;
  // @@protoc_insertion_point(copy_constructor:pb.ProductID)
}

void ProductID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProductID_common_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
}

ProductID::~ProductID() {
  // @@protoc_insertion_point(destructor:pb.ProductID)
  SharedDtor();
}

void ProductID::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProductID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProductID& ProductID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProductID_common_2eproto.base);
  return *internal_default_instance();
}


void ProductID::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ProductID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProductID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.ExchangeType exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_exchange(static_cast<::pb::ExchangeType>(val));
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_code(), ptr, ctx, "pb.ProductID.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProductID::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ProductID)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exchange(static_cast< ::pb::ExchangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.ProductID.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ProductID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ProductID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProductID::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ProductID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ProductID.code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ProductID)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductID::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ProductID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ProductID.code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ProductID)
  return target;
}

size_t ProductID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ProductID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->code());
  }

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->exchange());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ProductID)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ProductID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ProductID)
    MergeFrom(*source);
  }
}

void ProductID::MergeFrom(const ProductID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ProductID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
}

void ProductID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ProductID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductID::CopyFrom(const ProductID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ProductID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductID::IsInitialized() const {
  return true;
}

void ProductID::Swap(ProductID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductID::InternalSwap(ProductID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exchange_, other->exchange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BrokerRoute::InitAsDefaultInstance() {
}
class BrokerRoute::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerRoute::kIdFieldNumber;
const int BrokerRoute::kTypeFieldNumber;
const int BrokerRoute::kNameFieldNumber;
const int BrokerRoute::kMdFrontListFieldNumber;
const int BrokerRoute::kTradeFrontListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerRoute::BrokerRoute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BrokerRoute)
}
BrokerRoute::BrokerRoute(const BrokerRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      md_front_list_(from.md_front_list_),
      trade_front_list_(from.trade_front_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb.BrokerRoute)
}

void BrokerRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BrokerRoute_common_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

BrokerRoute::~BrokerRoute() {
  // @@protoc_insertion_point(destructor:pb.BrokerRoute)
  SharedDtor();
}

void BrokerRoute::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BrokerRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrokerRoute& BrokerRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BrokerRoute_common_2eproto.base);
  return *internal_default_instance();
}


void BrokerRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BrokerRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  md_front_list_.Clear();
  trade_front_list_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BrokerRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "pb.BrokerRoute.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "pb.BrokerRoute.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string md_front_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_md_front_list(), ptr, ctx, "pb.BrokerRoute.md_front_list");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated string trade_front_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_trade_front_list(), ptr, ctx, "pb.BrokerRoute.trade_front_list");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BrokerRoute::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BrokerRoute)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.BrokerRoute.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.BrokerRoute.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string md_front_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_md_front_list()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->md_front_list(this->md_front_list_size() - 1).data(),
            static_cast<int>(this->md_front_list(this->md_front_list_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.BrokerRoute.md_front_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string trade_front_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_trade_front_list()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trade_front_list(this->trade_front_list_size() - 1).data(),
            static_cast<int>(this->trade_front_list(this->trade_front_list_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.BrokerRoute.trade_front_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BrokerRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BrokerRoute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BrokerRoute::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BrokerRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BrokerRoute.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BrokerRoute.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated string md_front_list = 4;
  for (int i = 0, n = this->md_front_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->md_front_list(i).data(), static_cast<int>(this->md_front_list(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BrokerRoute.md_front_list");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->md_front_list(i), output);
  }

  // repeated string trade_front_list = 5;
  for (int i = 0, n = this->trade_front_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trade_front_list(i).data(), static_cast<int>(this->trade_front_list(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BrokerRoute.trade_front_list");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->trade_front_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BrokerRoute)
}

::PROTOBUF_NAMESPACE_ID::uint8* BrokerRoute::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BrokerRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BrokerRoute.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BrokerRoute.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated string md_front_list = 4;
  for (int i = 0, n = this->md_front_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->md_front_list(i).data(), static_cast<int>(this->md_front_list(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BrokerRoute.md_front_list");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->md_front_list(i), target);
  }

  // repeated string trade_front_list = 5;
  for (int i = 0, n = this->trade_front_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trade_front_list(i).data(), static_cast<int>(this->trade_front_list(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BrokerRoute.trade_front_list");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->trade_front_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BrokerRoute)
  return target;
}

size_t BrokerRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BrokerRoute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string md_front_list = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->md_front_list_size());
  for (int i = 0, n = this->md_front_list_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->md_front_list(i));
  }

  // repeated string trade_front_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->trade_front_list_size());
  for (int i = 0, n = this->trade_front_list_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->trade_front_list(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrokerRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BrokerRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const BrokerRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BrokerRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BrokerRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BrokerRoute)
    MergeFrom(*source);
  }
}

void BrokerRoute::MergeFrom(const BrokerRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BrokerRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  md_front_list_.MergeFrom(from.md_front_list_);
  trade_front_list_.MergeFrom(from.trade_front_list_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void BrokerRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BrokerRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerRoute::CopyFrom(const BrokerRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BrokerRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerRoute::IsInitialized() const {
  return true;
}

void BrokerRoute::Swap(BrokerRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerRoute::InternalSwap(BrokerRoute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  md_front_list_.InternalSwap(CastToBase(&other->md_front_list_));
  trade_front_list_.InternalSwap(CastToBase(&other->trade_front_list_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BrokerRouteList::InitAsDefaultInstance() {
}
class BrokerRouteList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerRouteList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerRouteList::BrokerRouteList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BrokerRouteList)
}
BrokerRouteList::BrokerRouteList(const BrokerRouteList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.BrokerRouteList)
}

void BrokerRouteList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BrokerRouteList_common_2eproto.base);
}

BrokerRouteList::~BrokerRouteList() {
  // @@protoc_insertion_point(destructor:pb.BrokerRouteList)
  SharedDtor();
}

void BrokerRouteList::SharedDtor() {
}

void BrokerRouteList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrokerRouteList& BrokerRouteList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BrokerRouteList_common_2eproto.base);
  return *internal_default_instance();
}


void BrokerRouteList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BrokerRouteList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BrokerRouteList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.BrokerRoute list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BrokerRouteList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BrokerRouteList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.BrokerRoute list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BrokerRouteList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BrokerRouteList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BrokerRouteList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BrokerRouteList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.BrokerRoute list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BrokerRouteList)
}

::PROTOBUF_NAMESPACE_ID::uint8* BrokerRouteList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BrokerRouteList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.BrokerRoute list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BrokerRouteList)
  return target;
}

size_t BrokerRouteList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BrokerRouteList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BrokerRoute list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrokerRouteList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BrokerRouteList)
  GOOGLE_DCHECK_NE(&from, this);
  const BrokerRouteList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BrokerRouteList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BrokerRouteList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BrokerRouteList)
    MergeFrom(*source);
  }
}

void BrokerRouteList::MergeFrom(const BrokerRouteList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BrokerRouteList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void BrokerRouteList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BrokerRouteList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerRouteList::CopyFrom(const BrokerRouteList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BrokerRouteList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerRouteList::IsInitialized() const {
  return true;
}

void BrokerRouteList::Swap(BrokerRouteList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerRouteList::InternalSwap(BrokerRouteList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerRouteList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentInfo::InitAsDefaultInstance() {
  ::pb::_InstrumentInfo_default_instance_._instance.get_mutable()->base_symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_InstrumentInfo_default_instance_._instance.get_mutable()->instrument_code_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class InstrumentInfo::HasBitSetters {
 public:
  static const ::pb::Symbol& base_symbol(const InstrumentInfo* msg);
  static const ::pb::Symbol& instrument_code(const InstrumentInfo* msg);
};

const ::pb::Symbol&
InstrumentInfo::HasBitSetters::base_symbol(const InstrumentInfo* msg) {
  return *msg->base_symbol_;
}
const ::pb::Symbol&
InstrumentInfo::HasBitSetters::instrument_code(const InstrumentInfo* msg) {
  return *msg->instrument_code_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrumentInfo::kSymbolNameFieldNumber;
const int InstrumentInfo::kPositionRankFieldNumber;
const int InstrumentInfo::kUpdateTimeFieldNumber;
const int InstrumentInfo::kUpdateTradingDayFieldNumber;
const int InstrumentInfo::kUpperLimitPriceFieldNumber;
const int InstrumentInfo::kLowerLimitPriceFieldNumber;
const int InstrumentInfo::kPreClosePriceFieldNumber;
const int InstrumentInfo::kPreSettlementPriceFieldNumber;
const int InstrumentInfo::kPreVolumeFieldNumber;
const int InstrumentInfo::kPrePositionFieldNumber;
const int InstrumentInfo::kSettlementPriceFieldNumber;
const int InstrumentInfo::kCreateDateFieldNumber;
const int InstrumentInfo::kOpenDateFieldNumber;
const int InstrumentInfo::kExpireDateFieldNumber;
const int InstrumentInfo::kStartDeliverDateFieldNumber;
const int InstrumentInfo::kEndDeliverDateFieldNumber;
const int InstrumentInfo::kIsCloseTodayAllowedFieldNumber;
const int InstrumentInfo::kMaxMarketOrderVolumeFieldNumber;
const int InstrumentInfo::kMinMarketOrderVolumeFieldNumber;
const int InstrumentInfo::kMaxLimitOrderVolumeFieldNumber;
const int InstrumentInfo::kMinLimitOrderVolumeFieldNumber;
const int InstrumentInfo::kBaseSymbolFieldNumber;
const int InstrumentInfo::kStrikePriceFieldNumber;
const int InstrumentInfo::kCallPutTypeFieldNumber;
const int InstrumentInfo::kUnderlyingMultipleFieldNumber;
const int InstrumentInfo::kCombinationTypeFieldNumber;
const int InstrumentInfo::kMinBuyVolumeFieldNumber;
const int InstrumentInfo::kMinSellVolumeFieldNumber;
const int InstrumentInfo::kInstrumentCodeFieldNumber;
const int InstrumentInfo::kIsTradingFieldNumber;
const int InstrumentInfo::kDeliveryDateTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrumentInfo::InstrumentInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InstrumentInfo)
}
InstrumentInfo::InstrumentInfo(const InstrumentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.symbol_name().size() > 0) {
    symbol_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.has_base_symbol()) {
    base_symbol_ = new ::pb::Symbol(*from.base_symbol_);
  } else {
    base_symbol_ = nullptr;
  }
  if (from.has_instrument_code()) {
    instrument_code_ = new ::pb::Symbol(*from.instrument_code_);
  } else {
    instrument_code_ = nullptr;
  }
  ::memcpy(&update_time_, &from.update_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&delivery_date_type_) -
    reinterpret_cast<char*>(&update_time_)) + sizeof(delivery_date_type_));
  // @@protoc_insertion_point(copy_constructor:pb.InstrumentInfo)
}

void InstrumentInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentInfo_common_2eproto.base);
  symbol_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delivery_date_type_) -
      reinterpret_cast<char*>(&base_symbol_)) + sizeof(delivery_date_type_));
}

InstrumentInfo::~InstrumentInfo() {
  // @@protoc_insertion_point(destructor:pb.InstrumentInfo)
  SharedDtor();
}

void InstrumentInfo::SharedDtor() {
  symbol_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_symbol_;
  if (this != internal_default_instance()) delete instrument_code_;
}

void InstrumentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentInfo& InstrumentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentInfo_common_2eproto.base);
  return *internal_default_instance();
}


void InstrumentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.InstrumentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_symbol_ != nullptr) {
    delete base_symbol_;
  }
  base_symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && instrument_code_ != nullptr) {
    delete instrument_code_;
  }
  instrument_code_ = nullptr;
  ::memset(&update_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delivery_date_type_) -
      reinterpret_cast<char*>(&update_time_)) + sizeof(delivery_date_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InstrumentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string symbol_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_symbol_name(), ptr, ctx, "pb.InstrumentInfo.symbol_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 position_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 update_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 update_trading_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          update_trading_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double upper_limit_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          upper_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lower_limit_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          lower_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_close_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          pre_close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_settlement_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          pre_settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 pre_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pre_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pre_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pre_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double settlement_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 create_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          create_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 open_date = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          open_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expire_date = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          expire_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_deliver_date = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          start_deliver_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_deliver_date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          end_deliver_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_close_today_allowed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          is_close_today_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_market_order_volume = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          max_market_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_market_order_volume = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          min_market_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_limit_order_volume = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          max_limit_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_limit_order_volume = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          min_limit_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Symbol base_symbol = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_base_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double strike_price = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          strike_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pb.OptionCallPutType call_put_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_call_put_type(static_cast<::pb::OptionCallPutType>(val));
        } else goto handle_unusual;
        continue;
      // double underlying_multiple = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          underlying_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 combination_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          combination_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_buy_volume = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          min_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_sell_volume = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          min_sell_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Symbol instrument_code = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_instrument_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_trading = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          is_trading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.OptionDeliveryDateType delivery_date_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_delivery_date_type(static_cast<::pb::OptionDeliveryDateType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstrumentInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InstrumentInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string symbol_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.InstrumentInfo.symbol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position_rank = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 update_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 update_trading_day = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double upper_limit_price = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lower_limit_price = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_close_price = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_close_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_settlement_price = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pre_volume = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pre_position = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double settlement_price = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 create_date = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_date = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 expire_date = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start_deliver_date = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_deliver_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end_deliver_date = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_deliver_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_close_today_allowed = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_close_today_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_market_order_volume = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_market_order_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_market_order_volume = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_market_order_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_limit_order_volume = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_limit_order_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_limit_order_volume = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_limit_order_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol base_symbol = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double strike_price = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (185 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strike_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OptionCallPutType call_put_type = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_call_put_type(static_cast< ::pb::OptionCallPutType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double underlying_multiple = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (201 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlying_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 combination_type = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &combination_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_buy_volume = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_buy_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_sell_volume = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_sell_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol instrument_code = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_instrument_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_trading = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OptionDeliveryDateType delivery_date_type = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_delivery_date_type(static_cast< ::pb::OptionDeliveryDateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InstrumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InstrumentInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InstrumentInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InstrumentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol_name = 1;
  if (this->symbol_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.InstrumentInfo.symbol_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol_name(), output);
  }

  // int32 position_rank = 2;
  if (this->position_rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->position_rank(), output);
  }

  // int64 update_time = 3;
  if (this->update_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->update_time(), output);
  }

  // int32 update_trading_day = 4;
  if (this->update_trading_day() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->update_trading_day(), output);
  }

  // double upper_limit_price = 5;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->upper_limit_price(), output);
  }

  // double lower_limit_price = 6;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->lower_limit_price(), output);
  }

  // double pre_close_price = 7;
  if (!(this->pre_close_price() <= 0 && this->pre_close_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->pre_close_price(), output);
  }

  // double pre_settlement_price = 8;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->pre_settlement_price(), output);
  }

  // int32 pre_volume = 9;
  if (this->pre_volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->pre_volume(), output);
  }

  // int32 pre_position = 10;
  if (this->pre_position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->pre_position(), output);
  }

  // double settlement_price = 11;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->settlement_price(), output);
  }

  // int32 create_date = 12;
  if (this->create_date() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->create_date(), output);
  }

  // int32 open_date = 13;
  if (this->open_date() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->open_date(), output);
  }

  // int32 expire_date = 14;
  if (this->expire_date() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->expire_date(), output);
  }

  // int32 start_deliver_date = 15;
  if (this->start_deliver_date() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->start_deliver_date(), output);
  }

  // int32 end_deliver_date = 16;
  if (this->end_deliver_date() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->end_deliver_date(), output);
  }

  // int32 is_close_today_allowed = 17;
  if (this->is_close_today_allowed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->is_close_today_allowed(), output);
  }

  // int32 max_market_order_volume = 18;
  if (this->max_market_order_volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->max_market_order_volume(), output);
  }

  // int32 min_market_order_volume = 19;
  if (this->min_market_order_volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->min_market_order_volume(), output);
  }

  // int32 max_limit_order_volume = 20;
  if (this->max_limit_order_volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->max_limit_order_volume(), output);
  }

  // int32 min_limit_order_volume = 21;
  if (this->min_limit_order_volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->min_limit_order_volume(), output);
  }

  // .pb.Symbol base_symbol = 22;
  if (this->has_base_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::base_symbol(this), output);
  }

  // double strike_price = 23;
  if (!(this->strike_price() <= 0 && this->strike_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(23, this->strike_price(), output);
  }

  // .pb.OptionCallPutType call_put_type = 24;
  if (this->call_put_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      24, this->call_put_type(), output);
  }

  // double underlying_multiple = 25;
  if (!(this->underlying_multiple() <= 0 && this->underlying_multiple() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(25, this->underlying_multiple(), output);
  }

  // int32 combination_type = 26;
  if (this->combination_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(26, this->combination_type(), output);
  }

  // int32 min_buy_volume = 27;
  if (this->min_buy_volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(27, this->min_buy_volume(), output);
  }

  // int32 min_sell_volume = 28;
  if (this->min_sell_volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(28, this->min_sell_volume(), output);
  }

  // .pb.Symbol instrument_code = 29;
  if (this->has_instrument_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, HasBitSetters::instrument_code(this), output);
  }

  // bool is_trading = 30;
  if (this->is_trading() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(30, this->is_trading(), output);
  }

  // .pb.OptionDeliveryDateType delivery_date_type = 31;
  if (this->delivery_date_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      31, this->delivery_date_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.InstrumentInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InstrumentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol_name = 1;
  if (this->symbol_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.InstrumentInfo.symbol_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol_name(), target);
  }

  // int32 position_rank = 2;
  if (this->position_rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->position_rank(), target);
  }

  // int64 update_time = 3;
  if (this->update_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->update_time(), target);
  }

  // int32 update_trading_day = 4;
  if (this->update_trading_day() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->update_trading_day(), target);
  }

  // double upper_limit_price = 5;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->upper_limit_price(), target);
  }

  // double lower_limit_price = 6;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->lower_limit_price(), target);
  }

  // double pre_close_price = 7;
  if (!(this->pre_close_price() <= 0 && this->pre_close_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->pre_close_price(), target);
  }

  // double pre_settlement_price = 8;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->pre_settlement_price(), target);
  }

  // int32 pre_volume = 9;
  if (this->pre_volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->pre_volume(), target);
  }

  // int32 pre_position = 10;
  if (this->pre_position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->pre_position(), target);
  }

  // double settlement_price = 11;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->settlement_price(), target);
  }

  // int32 create_date = 12;
  if (this->create_date() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->create_date(), target);
  }

  // int32 open_date = 13;
  if (this->open_date() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->open_date(), target);
  }

  // int32 expire_date = 14;
  if (this->expire_date() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->expire_date(), target);
  }

  // int32 start_deliver_date = 15;
  if (this->start_deliver_date() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->start_deliver_date(), target);
  }

  // int32 end_deliver_date = 16;
  if (this->end_deliver_date() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->end_deliver_date(), target);
  }

  // int32 is_close_today_allowed = 17;
  if (this->is_close_today_allowed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->is_close_today_allowed(), target);
  }

  // int32 max_market_order_volume = 18;
  if (this->max_market_order_volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->max_market_order_volume(), target);
  }

  // int32 min_market_order_volume = 19;
  if (this->min_market_order_volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->min_market_order_volume(), target);
  }

  // int32 max_limit_order_volume = 20;
  if (this->max_limit_order_volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->max_limit_order_volume(), target);
  }

  // int32 min_limit_order_volume = 21;
  if (this->min_limit_order_volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->min_limit_order_volume(), target);
  }

  // .pb.Symbol base_symbol = 22;
  if (this->has_base_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::base_symbol(this), target);
  }

  // double strike_price = 23;
  if (!(this->strike_price() <= 0 && this->strike_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->strike_price(), target);
  }

  // .pb.OptionCallPutType call_put_type = 24;
  if (this->call_put_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->call_put_type(), target);
  }

  // double underlying_multiple = 25;
  if (!(this->underlying_multiple() <= 0 && this->underlying_multiple() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->underlying_multiple(), target);
  }

  // int32 combination_type = 26;
  if (this->combination_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->combination_type(), target);
  }

  // int32 min_buy_volume = 27;
  if (this->min_buy_volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->min_buy_volume(), target);
  }

  // int32 min_sell_volume = 28;
  if (this->min_sell_volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->min_sell_volume(), target);
  }

  // .pb.Symbol instrument_code = 29;
  if (this->has_instrument_code()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, HasBitSetters::instrument_code(this), target);
  }

  // bool is_trading = 30;
  if (this->is_trading() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->is_trading(), target);
  }

  // .pb.OptionDeliveryDateType delivery_date_type = 31;
  if (this->delivery_date_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->delivery_date_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InstrumentInfo)
  return target;
}

size_t InstrumentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.InstrumentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol_name = 1;
  if (this->symbol_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->symbol_name());
  }

  // .pb.Symbol base_symbol = 22;
  if (this->has_base_symbol()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_symbol_);
  }

  // .pb.Symbol instrument_code = 29;
  if (this->has_instrument_code()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instrument_code_);
  }

  // int64 update_time = 3;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->update_time());
  }

  // int32 position_rank = 2;
  if (this->position_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->position_rank());
  }

  // int32 update_trading_day = 4;
  if (this->update_trading_day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->update_trading_day());
  }

  // double upper_limit_price = 5;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double lower_limit_price = 6;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_close_price = 7;
  if (!(this->pre_close_price() <= 0 && this->pre_close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_settlement_price = 8;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 pre_volume = 9;
  if (this->pre_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pre_volume());
  }

  // int32 pre_position = 10;
  if (this->pre_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pre_position());
  }

  // double settlement_price = 11;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 create_date = 12;
  if (this->create_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->create_date());
  }

  // int32 open_date = 13;
  if (this->open_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->open_date());
  }

  // int32 expire_date = 14;
  if (this->expire_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->expire_date());
  }

  // int32 start_deliver_date = 15;
  if (this->start_deliver_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->start_deliver_date());
  }

  // int32 end_deliver_date = 16;
  if (this->end_deliver_date() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->end_deliver_date());
  }

  // int32 is_close_today_allowed = 17;
  if (this->is_close_today_allowed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->is_close_today_allowed());
  }

  // int32 max_market_order_volume = 18;
  if (this->max_market_order_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_market_order_volume());
  }

  // int32 min_market_order_volume = 19;
  if (this->min_market_order_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_market_order_volume());
  }

  // int32 max_limit_order_volume = 20;
  if (this->max_limit_order_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_limit_order_volume());
  }

  // int32 min_limit_order_volume = 21;
  if (this->min_limit_order_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_limit_order_volume());
  }

  // double strike_price = 23;
  if (!(this->strike_price() <= 0 && this->strike_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double underlying_multiple = 25;
  if (!(this->underlying_multiple() <= 0 && this->underlying_multiple() >= 0)) {
    total_size += 2 + 8;
  }

  // .pb.OptionCallPutType call_put_type = 24;
  if (this->call_put_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->call_put_type());
  }

  // int32 combination_type = 26;
  if (this->combination_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->combination_type());
  }

  // int32 min_buy_volume = 27;
  if (this->min_buy_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_buy_volume());
  }

  // int32 min_sell_volume = 28;
  if (this->min_sell_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_sell_volume());
  }

  // bool is_trading = 30;
  if (this->is_trading() != 0) {
    total_size += 2 + 1;
  }

  // .pb.OptionDeliveryDateType delivery_date_type = 31;
  if (this->delivery_date_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->delivery_date_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.InstrumentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.InstrumentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.InstrumentInfo)
    MergeFrom(*source);
  }
}

void InstrumentInfo::MergeFrom(const InstrumentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.InstrumentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol_name().size() > 0) {

    symbol_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.has_base_symbol()) {
    mutable_base_symbol()->::pb::Symbol::MergeFrom(from.base_symbol());
  }
  if (from.has_instrument_code()) {
    mutable_instrument_code()->::pb::Symbol::MergeFrom(from.instrument_code());
  }
  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
  if (from.position_rank() != 0) {
    set_position_rank(from.position_rank());
  }
  if (from.update_trading_day() != 0) {
    set_update_trading_day(from.update_trading_day());
  }
  if (!(from.upper_limit_price() <= 0 && from.upper_limit_price() >= 0)) {
    set_upper_limit_price(from.upper_limit_price());
  }
  if (!(from.lower_limit_price() <= 0 && from.lower_limit_price() >= 0)) {
    set_lower_limit_price(from.lower_limit_price());
  }
  if (!(from.pre_close_price() <= 0 && from.pre_close_price() >= 0)) {
    set_pre_close_price(from.pre_close_price());
  }
  if (!(from.pre_settlement_price() <= 0 && from.pre_settlement_price() >= 0)) {
    set_pre_settlement_price(from.pre_settlement_price());
  }
  if (from.pre_volume() != 0) {
    set_pre_volume(from.pre_volume());
  }
  if (from.pre_position() != 0) {
    set_pre_position(from.pre_position());
  }
  if (!(from.settlement_price() <= 0 && from.settlement_price() >= 0)) {
    set_settlement_price(from.settlement_price());
  }
  if (from.create_date() != 0) {
    set_create_date(from.create_date());
  }
  if (from.open_date() != 0) {
    set_open_date(from.open_date());
  }
  if (from.expire_date() != 0) {
    set_expire_date(from.expire_date());
  }
  if (from.start_deliver_date() != 0) {
    set_start_deliver_date(from.start_deliver_date());
  }
  if (from.end_deliver_date() != 0) {
    set_end_deliver_date(from.end_deliver_date());
  }
  if (from.is_close_today_allowed() != 0) {
    set_is_close_today_allowed(from.is_close_today_allowed());
  }
  if (from.max_market_order_volume() != 0) {
    set_max_market_order_volume(from.max_market_order_volume());
  }
  if (from.min_market_order_volume() != 0) {
    set_min_market_order_volume(from.min_market_order_volume());
  }
  if (from.max_limit_order_volume() != 0) {
    set_max_limit_order_volume(from.max_limit_order_volume());
  }
  if (from.min_limit_order_volume() != 0) {
    set_min_limit_order_volume(from.min_limit_order_volume());
  }
  if (!(from.strike_price() <= 0 && from.strike_price() >= 0)) {
    set_strike_price(from.strike_price());
  }
  if (!(from.underlying_multiple() <= 0 && from.underlying_multiple() >= 0)) {
    set_underlying_multiple(from.underlying_multiple());
  }
  if (from.call_put_type() != 0) {
    set_call_put_type(from.call_put_type());
  }
  if (from.combination_type() != 0) {
    set_combination_type(from.combination_type());
  }
  if (from.min_buy_volume() != 0) {
    set_min_buy_volume(from.min_buy_volume());
  }
  if (from.min_sell_volume() != 0) {
    set_min_sell_volume(from.min_sell_volume());
  }
  if (from.is_trading() != 0) {
    set_is_trading(from.is_trading());
  }
  if (from.delivery_date_type() != 0) {
    set_delivery_date_type(from.delivery_date_type());
  }
}

void InstrumentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.InstrumentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentInfo::CopyFrom(const InstrumentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.InstrumentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentInfo::IsInitialized() const {
  return true;
}

void InstrumentInfo::Swap(InstrumentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrumentInfo::InternalSwap(InstrumentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  symbol_name_.Swap(&other->symbol_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_symbol_, other->base_symbol_);
  swap(instrument_code_, other->instrument_code_);
  swap(update_time_, other->update_time_);
  swap(position_rank_, other->position_rank_);
  swap(update_trading_day_, other->update_trading_day_);
  swap(upper_limit_price_, other->upper_limit_price_);
  swap(lower_limit_price_, other->lower_limit_price_);
  swap(pre_close_price_, other->pre_close_price_);
  swap(pre_settlement_price_, other->pre_settlement_price_);
  swap(pre_volume_, other->pre_volume_);
  swap(pre_position_, other->pre_position_);
  swap(settlement_price_, other->settlement_price_);
  swap(create_date_, other->create_date_);
  swap(open_date_, other->open_date_);
  swap(expire_date_, other->expire_date_);
  swap(start_deliver_date_, other->start_deliver_date_);
  swap(end_deliver_date_, other->end_deliver_date_);
  swap(is_close_today_allowed_, other->is_close_today_allowed_);
  swap(max_market_order_volume_, other->max_market_order_volume_);
  swap(min_market_order_volume_, other->min_market_order_volume_);
  swap(max_limit_order_volume_, other->max_limit_order_volume_);
  swap(min_limit_order_volume_, other->min_limit_order_volume_);
  swap(strike_price_, other->strike_price_);
  swap(underlying_multiple_, other->underlying_multiple_);
  swap(call_put_type_, other->call_put_type_);
  swap(combination_type_, other->combination_type_);
  swap(min_buy_volume_, other->min_buy_volume_);
  swap(min_sell_volume_, other->min_sell_volume_);
  swap(is_trading_, other->is_trading_);
  swap(delivery_date_type_, other->delivery_date_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleTimePeriod::InitAsDefaultInstance() {
}
class SimpleTimePeriod::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleTimePeriod::kStartFieldNumber;
const int SimpleTimePeriod::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleTimePeriod::SimpleTimePeriod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SimpleTimePeriod)
}
SimpleTimePeriod::SimpleTimePeriod(const SimpleTimePeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:pb.SimpleTimePeriod)
}

void SimpleTimePeriod::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

SimpleTimePeriod::~SimpleTimePeriod() {
  // @@protoc_insertion_point(destructor:pb.SimpleTimePeriod)
  SharedDtor();
}

void SimpleTimePeriod::SharedDtor() {
}

void SimpleTimePeriod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleTimePeriod& SimpleTimePeriod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleTimePeriod_common_2eproto.base);
  return *internal_default_instance();
}


void SimpleTimePeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SimpleTimePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimpleTimePeriod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimpleTimePeriod::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SimpleTimePeriod)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SimpleTimePeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SimpleTimePeriod)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimpleTimePeriod::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SimpleTimePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->start(), output);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SimpleTimePeriod)
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleTimePeriod::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SimpleTimePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->start(), target);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SimpleTimePeriod)
  return target;
}

size_t SimpleTimePeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SimpleTimePeriod)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->end());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleTimePeriod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SimpleTimePeriod)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleTimePeriod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleTimePeriod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SimpleTimePeriod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SimpleTimePeriod)
    MergeFrom(*source);
  }
}

void SimpleTimePeriod::MergeFrom(const SimpleTimePeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SimpleTimePeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void SimpleTimePeriod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SimpleTimePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleTimePeriod::CopyFrom(const SimpleTimePeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SimpleTimePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleTimePeriod::IsInitialized() const {
  return true;
}

void SimpleTimePeriod::Swap(SimpleTimePeriod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleTimePeriod::InternalSwap(SimpleTimePeriod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleTimePeriod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketTimeRule::InitAsDefaultInstance() {
}
class MarketTimeRule::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketTimeRule::kSendRuleFieldNumber;
const int MarketTimeRule::kCancelRuleFieldNumber;
const int MarketTimeRule::kMatchingRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketTimeRule::MarketTimeRule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MarketTimeRule)
}
MarketTimeRule::MarketTimeRule(const MarketTimeRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      send_rule_(from.send_rule_),
      cancel_rule_(from.cancel_rule_),
      matching_rule_(from.matching_rule_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.MarketTimeRule)
}

void MarketTimeRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketTimeRule_common_2eproto.base);
}

MarketTimeRule::~MarketTimeRule() {
  // @@protoc_insertion_point(destructor:pb.MarketTimeRule)
  SharedDtor();
}

void MarketTimeRule::SharedDtor() {
}

void MarketTimeRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketTimeRule& MarketTimeRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketTimeRule_common_2eproto.base);
  return *internal_default_instance();
}


void MarketTimeRule::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.MarketTimeRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_rule_.Clear();
  cancel_rule_.Clear();
  matching_rule_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketTimeRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.SimpleTimePeriod send_rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_send_rule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .pb.SimpleTimePeriod cancel_rule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cancel_rule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .pb.SimpleTimePeriod matching_rule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_matching_rule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketTimeRule::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MarketTimeRule)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SimpleTimePeriod send_rule = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_send_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.SimpleTimePeriod cancel_rule = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cancel_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.SimpleTimePeriod matching_rule = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_matching_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MarketTimeRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MarketTimeRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketTimeRule::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MarketTimeRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.SimpleTimePeriod send_rule = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->send_rule_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->send_rule(static_cast<int>(i)),
      output);
  }

  // repeated .pb.SimpleTimePeriod cancel_rule = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cancel_rule_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->cancel_rule(static_cast<int>(i)),
      output);
  }

  // repeated .pb.SimpleTimePeriod matching_rule = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matching_rule_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->matching_rule(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MarketTimeRule)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketTimeRule::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MarketTimeRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.SimpleTimePeriod send_rule = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->send_rule_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->send_rule(static_cast<int>(i)), target);
  }

  // repeated .pb.SimpleTimePeriod cancel_rule = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cancel_rule_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->cancel_rule(static_cast<int>(i)), target);
  }

  // repeated .pb.SimpleTimePeriod matching_rule = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matching_rule_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->matching_rule(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MarketTimeRule)
  return target;
}

size_t MarketTimeRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.MarketTimeRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.SimpleTimePeriod send_rule = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->send_rule_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->send_rule(static_cast<int>(i)));
    }
  }

  // repeated .pb.SimpleTimePeriod cancel_rule = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cancel_rule_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cancel_rule(static_cast<int>(i)));
    }
  }

  // repeated .pb.SimpleTimePeriod matching_rule = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->matching_rule_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->matching_rule(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketTimeRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.MarketTimeRule)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketTimeRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketTimeRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.MarketTimeRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.MarketTimeRule)
    MergeFrom(*source);
  }
}

void MarketTimeRule::MergeFrom(const MarketTimeRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.MarketTimeRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  send_rule_.MergeFrom(from.send_rule_);
  cancel_rule_.MergeFrom(from.cancel_rule_);
  matching_rule_.MergeFrom(from.matching_rule_);
}

void MarketTimeRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.MarketTimeRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketTimeRule::CopyFrom(const MarketTimeRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.MarketTimeRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketTimeRule::IsInitialized() const {
  return true;
}

void MarketTimeRule::Swap(MarketTimeRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketTimeRule::InternalSwap(MarketTimeRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&send_rule_)->InternalSwap(CastToBase(&other->send_rule_));
  CastToBase(&cancel_rule_)->InternalSwap(CastToBase(&other->cancel_rule_));
  CastToBase(&matching_rule_)->InternalSwap(CastToBase(&other->matching_rule_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketTimeRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProductInfo::InitAsDefaultInstance() {
  ::pb::_ProductInfo_default_instance_._instance.get_mutable()->product_id_ = const_cast< ::pb::ProductID*>(
      ::pb::ProductID::internal_default_instance());
  ::pb::_ProductInfo_default_instance_._instance.get_mutable()->product_group_id_ = const_cast< ::pb::ProductID*>(
      ::pb::ProductID::internal_default_instance());
  ::pb::_ProductInfo_default_instance_._instance.get_mutable()->time_rule_ = const_cast< ::pb::MarketTimeRule*>(
      ::pb::MarketTimeRule::internal_default_instance());
}
class ProductInfo::HasBitSetters {
 public:
  static const ::pb::ProductID& product_id(const ProductInfo* msg);
  static const ::pb::ProductID& product_group_id(const ProductInfo* msg);
  static const ::pb::MarketTimeRule& time_rule(const ProductInfo* msg);
};

const ::pb::ProductID&
ProductInfo::HasBitSetters::product_id(const ProductInfo* msg) {
  return *msg->product_id_;
}
const ::pb::ProductID&
ProductInfo::HasBitSetters::product_group_id(const ProductInfo* msg) {
  return *msg->product_group_id_;
}
const ::pb::MarketTimeRule&
ProductInfo::HasBitSetters::time_rule(const ProductInfo* msg) {
  return *msg->time_rule_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductInfo::kProductIdFieldNumber;
const int ProductInfo::kProductGroupIdFieldNumber;
const int ProductInfo::kTypeFieldNumber;
const int ProductInfo::kProductNameFieldNumber;
const int ProductInfo::kPriceTickFieldNumber;
const int ProductInfo::kVolumeMultipleFieldNumber;
const int ProductInfo::kPreVolumeFieldNumber;
const int ProductInfo::kPrePositionFieldNumber;
const int ProductInfo::kCurrencyTypeFieldNumber;
const int ProductInfo::kSettlementGroupFieldNumber;
const int ProductInfo::kTimeRuleFieldNumber;
const int ProductInfo::kDistinguishPositionTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductInfo::ProductInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ProductInfo)
}
ProductInfo::ProductInfo(const ProductInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.product_name().size() > 0) {
    product_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  if (from.has_product_id()) {
    product_id_ = new ::pb::ProductID(*from.product_id_);
  } else {
    product_id_ = nullptr;
  }
  if (from.has_product_group_id()) {
    product_group_id_ = new ::pb::ProductID(*from.product_group_id_);
  } else {
    product_group_id_ = nullptr;
  }
  if (from.has_time_rule()) {
    time_rule_ = new ::pb::MarketTimeRule(*from.time_rule_);
  } else {
    time_rule_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&distinguish_position_time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(distinguish_position_time_));
  // @@protoc_insertion_point(copy_constructor:pb.ProductInfo)
}

void ProductInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProductInfo_common_2eproto.base);
  product_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&product_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distinguish_position_time_) -
      reinterpret_cast<char*>(&product_id_)) + sizeof(distinguish_position_time_));
}

ProductInfo::~ProductInfo() {
  // @@protoc_insertion_point(destructor:pb.ProductInfo)
  SharedDtor();
}

void ProductInfo::SharedDtor() {
  product_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete product_id_;
  if (this != internal_default_instance()) delete product_group_id_;
  if (this != internal_default_instance()) delete time_rule_;
}

void ProductInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProductInfo& ProductInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProductInfo_common_2eproto.base);
  return *internal_default_instance();
}


void ProductInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ProductInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && product_group_id_ != nullptr) {
    delete product_group_id_;
  }
  product_group_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_rule_ != nullptr) {
    delete time_rule_;
  }
  time_rule_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distinguish_position_time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(distinguish_position_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProductInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.ProductID product_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_product_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.ProductID product_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_product_group_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.ProductType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::pb::ProductType>(val));
        } else goto handle_unusual;
        continue;
      // string product_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_product_name(), ptr, ctx, "pb.ProductInfo.product_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price_tick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          price_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 volume_multiple = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          volume_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pre_volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pre_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pre_position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pre_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currency_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          currency_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 settlement_group = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          settlement_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.MarketTimeRule time_rule = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_time_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool distinguish_position_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          distinguish_position_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProductInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ProductInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.ProductID product_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductID product_group_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_product_group_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductType type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb::ProductType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->product_name().data(), static_cast<int>(this->product_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.ProductInfo.product_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pre_volume = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pre_position = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currency_type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 settlement_group = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.MarketTimeRule time_rule = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool distinguish_position_time = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distinguish_position_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ProductInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ProductInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProductInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ProductInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ProductID product_id = 1;
  if (this->has_product_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::product_id(this), output);
  }

  // .pb.ProductID product_group_id = 2;
  if (this->has_product_group_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::product_group_id(this), output);
  }

  // .pb.ProductType type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // string product_name = 4;
  if (this->product_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), static_cast<int>(this->product_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ProductInfo.product_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->product_name(), output);
  }

  // double price_tick = 5;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->price_tick(), output);
  }

  // int32 volume_multiple = 6;
  if (this->volume_multiple() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->volume_multiple(), output);
  }

  // int32 pre_volume = 7;
  if (this->pre_volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->pre_volume(), output);
  }

  // int32 pre_position = 8;
  if (this->pre_position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->pre_position(), output);
  }

  // int32 currency_type = 9;
  if (this->currency_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->currency_type(), output);
  }

  // int32 settlement_group = 10;
  if (this->settlement_group() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->settlement_group(), output);
  }

  // .pb.MarketTimeRule time_rule = 11;
  if (this->has_time_rule()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::time_rule(this), output);
  }

  // bool distinguish_position_time = 12;
  if (this->distinguish_position_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->distinguish_position_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ProductInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ProductInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ProductID product_id = 1;
  if (this->has_product_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::product_id(this), target);
  }

  // .pb.ProductID product_group_id = 2;
  if (this->has_product_group_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::product_group_id(this), target);
  }

  // .pb.ProductType type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // string product_name = 4;
  if (this->product_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), static_cast<int>(this->product_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ProductInfo.product_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->product_name(), target);
  }

  // double price_tick = 5;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->price_tick(), target);
  }

  // int32 volume_multiple = 6;
  if (this->volume_multiple() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->volume_multiple(), target);
  }

  // int32 pre_volume = 7;
  if (this->pre_volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->pre_volume(), target);
  }

  // int32 pre_position = 8;
  if (this->pre_position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->pre_position(), target);
  }

  // int32 currency_type = 9;
  if (this->currency_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->currency_type(), target);
  }

  // int32 settlement_group = 10;
  if (this->settlement_group() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->settlement_group(), target);
  }

  // .pb.MarketTimeRule time_rule = 11;
  if (this->has_time_rule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::time_rule(this), target);
  }

  // bool distinguish_position_time = 12;
  if (this->distinguish_position_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->distinguish_position_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ProductInfo)
  return target;
}

size_t ProductInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ProductInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string product_name = 4;
  if (this->product_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->product_name());
  }

  // .pb.ProductID product_id = 1;
  if (this->has_product_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_id_);
  }

  // .pb.ProductID product_group_id = 2;
  if (this->has_product_group_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_group_id_);
  }

  // .pb.MarketTimeRule time_rule = 11;
  if (this->has_time_rule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_rule_);
  }

  // .pb.ProductType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 volume_multiple = 6;
  if (this->volume_multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  // double price_tick = 5;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 pre_volume = 7;
  if (this->pre_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pre_volume());
  }

  // int32 pre_position = 8;
  if (this->pre_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pre_position());
  }

  // int32 currency_type = 9;
  if (this->currency_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->currency_type());
  }

  // int32 settlement_group = 10;
  if (this->settlement_group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->settlement_group());
  }

  // bool distinguish_position_time = 12;
  if (this->distinguish_position_time() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ProductInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ProductInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ProductInfo)
    MergeFrom(*source);
  }
}

void ProductInfo::MergeFrom(const ProductInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ProductInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_name().size() > 0) {

    product_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  if (from.has_product_id()) {
    mutable_product_id()->::pb::ProductID::MergeFrom(from.product_id());
  }
  if (from.has_product_group_id()) {
    mutable_product_group_id()->::pb::ProductID::MergeFrom(from.product_group_id());
  }
  if (from.has_time_rule()) {
    mutable_time_rule()->::pb::MarketTimeRule::MergeFrom(from.time_rule());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
  if (!(from.price_tick() <= 0 && from.price_tick() >= 0)) {
    set_price_tick(from.price_tick());
  }
  if (from.pre_volume() != 0) {
    set_pre_volume(from.pre_volume());
  }
  if (from.pre_position() != 0) {
    set_pre_position(from.pre_position());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.settlement_group() != 0) {
    set_settlement_group(from.settlement_group());
  }
  if (from.distinguish_position_time() != 0) {
    set_distinguish_position_time(from.distinguish_position_time());
  }
}

void ProductInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ProductInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductInfo::CopyFrom(const ProductInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ProductInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductInfo::IsInitialized() const {
  return true;
}

void ProductInfo::Swap(ProductInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductInfo::InternalSwap(ProductInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  product_name_.Swap(&other->product_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(product_id_, other->product_id_);
  swap(product_group_id_, other->product_group_id_);
  swap(time_rule_, other->time_rule_);
  swap(type_, other->type_);
  swap(volume_multiple_, other->volume_multiple_);
  swap(price_tick_, other->price_tick_);
  swap(pre_volume_, other->pre_volume_);
  swap(pre_position_, other->pre_position_);
  swap(currency_type_, other->currency_type_);
  swap(settlement_group_, other->settlement_group_);
  swap(distinguish_position_time_, other->distinguish_position_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradingInstrument::InitAsDefaultInstance() {
  ::pb::_TradingInstrument_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_TradingInstrument_default_instance_._instance.get_mutable()->instrument_info_ = const_cast< ::pb::InstrumentInfo*>(
      ::pb::InstrumentInfo::internal_default_instance());
  ::pb::_TradingInstrument_default_instance_._instance.get_mutable()->product_info_ = const_cast< ::pb::ProductInfo*>(
      ::pb::ProductInfo::internal_default_instance());
}
class TradingInstrument::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const TradingInstrument* msg);
  static const ::pb::InstrumentInfo& instrument_info(const TradingInstrument* msg);
  static const ::pb::ProductInfo& product_info(const TradingInstrument* msg);
};

const ::pb::Symbol&
TradingInstrument::HasBitSetters::symbol(const TradingInstrument* msg) {
  return *msg->symbol_;
}
const ::pb::InstrumentInfo&
TradingInstrument::HasBitSetters::instrument_info(const TradingInstrument* msg) {
  return *msg->instrument_info_;
}
const ::pb::ProductInfo&
TradingInstrument::HasBitSetters::product_info(const TradingInstrument* msg) {
  return *msg->product_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradingInstrument::kSymbolFieldNumber;
const int TradingInstrument::kInstrumentInfoFieldNumber;
const int TradingInstrument::kProductInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradingInstrument::TradingInstrument()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TradingInstrument)
}
TradingInstrument::TradingInstrument(const TradingInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_instrument_info()) {
    instrument_info_ = new ::pb::InstrumentInfo(*from.instrument_info_);
  } else {
    instrument_info_ = nullptr;
  }
  if (from.has_product_info()) {
    product_info_ = new ::pb::ProductInfo(*from.product_info_);
  } else {
    product_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.TradingInstrument)
}

void TradingInstrument::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradingInstrument_common_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_info_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(product_info_));
}

TradingInstrument::~TradingInstrument() {
  // @@protoc_insertion_point(destructor:pb.TradingInstrument)
  SharedDtor();
}

void TradingInstrument::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete instrument_info_;
  if (this != internal_default_instance()) delete product_info_;
}

void TradingInstrument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradingInstrument& TradingInstrument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradingInstrument_common_2eproto.base);
  return *internal_default_instance();
}


void TradingInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && instrument_info_ != nullptr) {
    delete instrument_info_;
  }
  instrument_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && product_info_ != nullptr) {
    delete product_info_;
  }
  product_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradingInstrument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.InstrumentInfo instrument_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_instrument_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.ProductInfo product_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_product_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradingInstrument::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TradingInstrument)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.InstrumentInfo instrument_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_instrument_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductInfo product_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_product_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TradingInstrument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TradingInstrument)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradingInstrument::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // .pb.InstrumentInfo instrument_info = 2;
  if (this->has_instrument_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::instrument_info(this), output);
  }

  // .pb.ProductInfo product_info = 3;
  if (this->has_product_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::product_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TradingInstrument)
}

::PROTOBUF_NAMESPACE_ID::uint8* TradingInstrument::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TradingInstrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // .pb.InstrumentInfo instrument_info = 2;
  if (this->has_instrument_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::instrument_info(this), target);
  }

  // .pb.ProductInfo product_info = 3;
  if (this->has_product_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::product_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TradingInstrument)
  return target;
}

size_t TradingInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TradingInstrument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.InstrumentInfo instrument_info = 2;
  if (this->has_instrument_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instrument_info_);
  }

  // .pb.ProductInfo product_info = 3;
  if (this->has_product_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradingInstrument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TradingInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  const TradingInstrument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradingInstrument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TradingInstrument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TradingInstrument)
    MergeFrom(*source);
  }
}

void TradingInstrument::MergeFrom(const TradingInstrument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TradingInstrument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_instrument_info()) {
    mutable_instrument_info()->::pb::InstrumentInfo::MergeFrom(from.instrument_info());
  }
  if (from.has_product_info()) {
    mutable_product_info()->::pb::ProductInfo::MergeFrom(from.product_info());
  }
}

void TradingInstrument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TradingInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingInstrument::CopyFrom(const TradingInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TradingInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingInstrument::IsInitialized() const {
  return true;
}

void TradingInstrument::Swap(TradingInstrument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradingInstrument::InternalSwap(TradingInstrument* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(symbol_, other->symbol_);
  swap(instrument_info_, other->instrument_info_);
  swap(product_info_, other->product_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingInstrument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradingInstrumentList::InitAsDefaultInstance() {
}
class TradingInstrumentList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradingInstrumentList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradingInstrumentList::TradingInstrumentList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TradingInstrumentList)
}
TradingInstrumentList::TradingInstrumentList(const TradingInstrumentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.TradingInstrumentList)
}

void TradingInstrumentList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradingInstrumentList_common_2eproto.base);
}

TradingInstrumentList::~TradingInstrumentList() {
  // @@protoc_insertion_point(destructor:pb.TradingInstrumentList)
  SharedDtor();
}

void TradingInstrumentList::SharedDtor() {
}

void TradingInstrumentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradingInstrumentList& TradingInstrumentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradingInstrumentList_common_2eproto.base);
  return *internal_default_instance();
}


void TradingInstrumentList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradingInstrumentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.TradingInstrument list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradingInstrumentList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TradingInstrumentList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TradingInstrument list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TradingInstrumentList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TradingInstrumentList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradingInstrumentList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.TradingInstrument list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TradingInstrumentList)
}

::PROTOBUF_NAMESPACE_ID::uint8* TradingInstrumentList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.TradingInstrument list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TradingInstrumentList)
  return target;
}

size_t TradingInstrumentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TradingInstrumentList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.TradingInstrument list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradingInstrumentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TradingInstrumentList)
  GOOGLE_DCHECK_NE(&from, this);
  const TradingInstrumentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradingInstrumentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TradingInstrumentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TradingInstrumentList)
    MergeFrom(*source);
  }
}

void TradingInstrumentList::MergeFrom(const TradingInstrumentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TradingInstrumentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void TradingInstrumentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TradingInstrumentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingInstrumentList::CopyFrom(const TradingInstrumentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TradingInstrumentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingInstrumentList::IsInitialized() const {
  return true;
}

void TradingInstrumentList::Swap(TradingInstrumentList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradingInstrumentList::InternalSwap(TradingInstrumentList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingInstrumentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProductInfoList::InitAsDefaultInstance() {
}
class ProductInfoList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductInfoList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductInfoList::ProductInfoList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ProductInfoList)
}
ProductInfoList::ProductInfoList(const ProductInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ProductInfoList)
}

void ProductInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProductInfoList_common_2eproto.base);
}

ProductInfoList::~ProductInfoList() {
  // @@protoc_insertion_point(destructor:pb.ProductInfoList)
  SharedDtor();
}

void ProductInfoList::SharedDtor() {
}

void ProductInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProductInfoList& ProductInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProductInfoList_common_2eproto.base);
  return *internal_default_instance();
}


void ProductInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ProductInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProductInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ProductInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProductInfoList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ProductInfoList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.ProductInfo list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ProductInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ProductInfoList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProductInfoList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ProductInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ProductInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ProductInfoList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductInfoList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ProductInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ProductInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ProductInfoList)
  return target;
}

size_t ProductInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ProductInfoList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ProductInfo list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ProductInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ProductInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ProductInfoList)
    MergeFrom(*source);
  }
}

void ProductInfoList::MergeFrom(const ProductInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ProductInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ProductInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ProductInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductInfoList::CopyFrom(const ProductInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ProductInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductInfoList::IsInitialized() const {
  return true;
}

void ProductInfoList::Swap(ProductInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductInfoList::InternalSwap(ProductInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSetTradingInstrumentList::InitAsDefaultInstance() {
}
class ReqSetTradingInstrumentList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSetTradingInstrumentList::kOpCodeFieldNumber;
const int ReqSetTradingInstrumentList::kExchangeFieldNumber;
const int ReqSetTradingInstrumentList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSetTradingInstrumentList::ReqSetTradingInstrumentList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqSetTradingInstrumentList)
}
ReqSetTradingInstrumentList::ReqSetTradingInstrumentList(const ReqSetTradingInstrumentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.op_code().size() > 0) {
    op_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_code_);
  }
  exchange_ = from.exchange_;
  // @@protoc_insertion_point(copy_constructor:pb.ReqSetTradingInstrumentList)
}

void ReqSetTradingInstrumentList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSetTradingInstrumentList_common_2eproto.base);
  op_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
}

ReqSetTradingInstrumentList::~ReqSetTradingInstrumentList() {
  // @@protoc_insertion_point(destructor:pb.ReqSetTradingInstrumentList)
  SharedDtor();
}

void ReqSetTradingInstrumentList::SharedDtor() {
  op_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqSetTradingInstrumentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSetTradingInstrumentList& ReqSetTradingInstrumentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSetTradingInstrumentList_common_2eproto.base);
  return *internal_default_instance();
}


void ReqSetTradingInstrumentList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqSetTradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  op_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqSetTradingInstrumentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string op_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_op_code(), ptr, ctx, "pb.ReqSetTradingInstrumentList.op_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.TradingInstrument list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqSetTradingInstrumentList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqSetTradingInstrumentList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string op_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_op_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->op_code().data(), static_cast<int>(this->op_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.ReqSetTradingInstrumentList.op_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exchange = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.TradingInstrument list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqSetTradingInstrumentList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqSetTradingInstrumentList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqSetTradingInstrumentList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqSetTradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_code = 1;
  if (this->op_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->op_code().data(), static_cast<int>(this->op_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ReqSetTradingInstrumentList.op_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->op_code(), output);
  }

  // int32 exchange = 2;
  if (this->exchange() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->exchange(), output);
  }

  // repeated .pb.TradingInstrument list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqSetTradingInstrumentList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSetTradingInstrumentList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqSetTradingInstrumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_code = 1;
  if (this->op_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->op_code().data(), static_cast<int>(this->op_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ReqSetTradingInstrumentList.op_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->op_code(), target);
  }

  // int32 exchange = 2;
  if (this->exchange() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange(), target);
  }

  // repeated .pb.TradingInstrument list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqSetTradingInstrumentList)
  return target;
}

size_t ReqSetTradingInstrumentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqSetTradingInstrumentList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.TradingInstrument list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // string op_code = 1;
  if (this->op_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->op_code());
  }

  // int32 exchange = 2;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSetTradingInstrumentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqSetTradingInstrumentList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetTradingInstrumentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSetTradingInstrumentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqSetTradingInstrumentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqSetTradingInstrumentList)
    MergeFrom(*source);
  }
}

void ReqSetTradingInstrumentList::MergeFrom(const ReqSetTradingInstrumentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqSetTradingInstrumentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.op_code().size() > 0) {

    op_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_code_);
  }
  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
}

void ReqSetTradingInstrumentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqSetTradingInstrumentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetTradingInstrumentList::CopyFrom(const ReqSetTradingInstrumentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqSetTradingInstrumentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetTradingInstrumentList::IsInitialized() const {
  return true;
}

void ReqSetTradingInstrumentList::Swap(ReqSetTradingInstrumentList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSetTradingInstrumentList::InternalSwap(ReqSetTradingInstrumentList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  op_code_.Swap(&other->op_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exchange_, other->exchange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSetTradingInstrumentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSetProductInfoList::InitAsDefaultInstance() {
}
class ReqSetProductInfoList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSetProductInfoList::kOpCodeFieldNumber;
const int ReqSetProductInfoList::kExchangeFieldNumber;
const int ReqSetProductInfoList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSetProductInfoList::ReqSetProductInfoList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqSetProductInfoList)
}
ReqSetProductInfoList::ReqSetProductInfoList(const ReqSetProductInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.op_code().size() > 0) {
    op_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_code_);
  }
  exchange_ = from.exchange_;
  // @@protoc_insertion_point(copy_constructor:pb.ReqSetProductInfoList)
}

void ReqSetProductInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSetProductInfoList_common_2eproto.base);
  op_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
}

ReqSetProductInfoList::~ReqSetProductInfoList() {
  // @@protoc_insertion_point(destructor:pb.ReqSetProductInfoList)
  SharedDtor();
}

void ReqSetProductInfoList::SharedDtor() {
  op_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqSetProductInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSetProductInfoList& ReqSetProductInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSetProductInfoList_common_2eproto.base);
  return *internal_default_instance();
}


void ReqSetProductInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqSetProductInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  op_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqSetProductInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string op_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_op_code(), ptr, ctx, "pb.ReqSetProductInfoList.op_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.ProductInfo list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqSetProductInfoList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqSetProductInfoList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string op_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_op_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->op_code().data(), static_cast<int>(this->op_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.ReqSetProductInfoList.op_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exchange = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.ProductInfo list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqSetProductInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqSetProductInfoList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqSetProductInfoList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqSetProductInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_code = 1;
  if (this->op_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->op_code().data(), static_cast<int>(this->op_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ReqSetProductInfoList.op_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->op_code(), output);
  }

  // int32 exchange = 2;
  if (this->exchange() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->exchange(), output);
  }

  // repeated .pb.ProductInfo list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqSetProductInfoList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSetProductInfoList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqSetProductInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_code = 1;
  if (this->op_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->op_code().data(), static_cast<int>(this->op_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ReqSetProductInfoList.op_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->op_code(), target);
  }

  // int32 exchange = 2;
  if (this->exchange() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange(), target);
  }

  // repeated .pb.ProductInfo list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqSetProductInfoList)
  return target;
}

size_t ReqSetProductInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqSetProductInfoList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ProductInfo list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // string op_code = 1;
  if (this->op_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->op_code());
  }

  // int32 exchange = 2;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSetProductInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqSetProductInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetProductInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSetProductInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqSetProductInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqSetProductInfoList)
    MergeFrom(*source);
  }
}

void ReqSetProductInfoList::MergeFrom(const ReqSetProductInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqSetProductInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.op_code().size() > 0) {

    op_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_code_);
  }
  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
}

void ReqSetProductInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqSetProductInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetProductInfoList::CopyFrom(const ReqSetProductInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqSetProductInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetProductInfoList::IsInitialized() const {
  return true;
}

void ReqSetProductInfoList::Swap(ReqSetProductInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSetProductInfoList::InternalSwap(ReqSetProductInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  op_code_.Swap(&other->op_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exchange_, other->exchange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSetProductInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqUpdateTIOpenDate::InitAsDefaultInstance() {
  ::pb::_ReqUpdateTIOpenDate_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class ReqUpdateTIOpenDate::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const ReqUpdateTIOpenDate* msg);
};

const ::pb::Symbol&
ReqUpdateTIOpenDate::HasBitSetters::symbol(const ReqUpdateTIOpenDate* msg) {
  return *msg->symbol_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqUpdateTIOpenDate::kSymbolFieldNumber;
const int ReqUpdateTIOpenDate::kOpenDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqUpdateTIOpenDate::ReqUpdateTIOpenDate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqUpdateTIOpenDate)
}
ReqUpdateTIOpenDate::ReqUpdateTIOpenDate(const ReqUpdateTIOpenDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  open_date_ = from.open_date_;
  // @@protoc_insertion_point(copy_constructor:pb.ReqUpdateTIOpenDate)
}

void ReqUpdateTIOpenDate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqUpdateTIOpenDate_common_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_date_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(open_date_));
}

ReqUpdateTIOpenDate::~ReqUpdateTIOpenDate() {
  // @@protoc_insertion_point(destructor:pb.ReqUpdateTIOpenDate)
  SharedDtor();
}

void ReqUpdateTIOpenDate::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void ReqUpdateTIOpenDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqUpdateTIOpenDate& ReqUpdateTIOpenDate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqUpdateTIOpenDate_common_2eproto.base);
  return *internal_default_instance();
}


void ReqUpdateTIOpenDate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqUpdateTIOpenDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  open_date_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqUpdateTIOpenDate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 open_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          open_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqUpdateTIOpenDate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqUpdateTIOpenDate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_date = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqUpdateTIOpenDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqUpdateTIOpenDate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqUpdateTIOpenDate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqUpdateTIOpenDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // int32 open_date = 2;
  if (this->open_date() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->open_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqUpdateTIOpenDate)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdateTIOpenDate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqUpdateTIOpenDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // int32 open_date = 2;
  if (this->open_date() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->open_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqUpdateTIOpenDate)
  return target;
}

size_t ReqUpdateTIOpenDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqUpdateTIOpenDate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 open_date = 2;
  if (this->open_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->open_date());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdateTIOpenDate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqUpdateTIOpenDate)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdateTIOpenDate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdateTIOpenDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqUpdateTIOpenDate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqUpdateTIOpenDate)
    MergeFrom(*source);
  }
}

void ReqUpdateTIOpenDate::MergeFrom(const ReqUpdateTIOpenDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqUpdateTIOpenDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.open_date() != 0) {
    set_open_date(from.open_date());
  }
}

void ReqUpdateTIOpenDate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqUpdateTIOpenDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateTIOpenDate::CopyFrom(const ReqUpdateTIOpenDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqUpdateTIOpenDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateTIOpenDate::IsInitialized() const {
  return true;
}

void ReqUpdateTIOpenDate::Swap(ReqUpdateTIOpenDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqUpdateTIOpenDate::InternalSwap(ReqUpdateTIOpenDate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(symbol_, other->symbol_);
  swap(open_date_, other->open_date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdateTIOpenDate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqUpdateTIOpenDateList::InitAsDefaultInstance() {
}
class ReqUpdateTIOpenDateList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqUpdateTIOpenDateList::kExchangeFieldNumber;
const int ReqUpdateTIOpenDateList::kListFieldNumber;
const int ReqUpdateTIOpenDateList::kOpCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqUpdateTIOpenDateList::ReqUpdateTIOpenDateList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqUpdateTIOpenDateList)
}
ReqUpdateTIOpenDateList::ReqUpdateTIOpenDateList(const ReqUpdateTIOpenDateList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.op_code().size() > 0) {
    op_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_code_);
  }
  exchange_ = from.exchange_;
  // @@protoc_insertion_point(copy_constructor:pb.ReqUpdateTIOpenDateList)
}

void ReqUpdateTIOpenDateList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqUpdateTIOpenDateList_common_2eproto.base);
  op_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
}

ReqUpdateTIOpenDateList::~ReqUpdateTIOpenDateList() {
  // @@protoc_insertion_point(destructor:pb.ReqUpdateTIOpenDateList)
  SharedDtor();
}

void ReqUpdateTIOpenDateList::SharedDtor() {
  op_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqUpdateTIOpenDateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqUpdateTIOpenDateList& ReqUpdateTIOpenDateList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqUpdateTIOpenDateList_common_2eproto.base);
  return *internal_default_instance();
}


void ReqUpdateTIOpenDateList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqUpdateTIOpenDateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  op_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqUpdateTIOpenDateList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.ReqUpdateTIOpenDate list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string op_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_op_code(), ptr, ctx, "pb.ReqUpdateTIOpenDateList.op_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqUpdateTIOpenDateList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqUpdateTIOpenDateList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 exchange = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.ReqUpdateTIOpenDate list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string op_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_op_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->op_code().data(), static_cast<int>(this->op_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.ReqUpdateTIOpenDateList.op_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqUpdateTIOpenDateList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqUpdateTIOpenDateList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqUpdateTIOpenDateList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqUpdateTIOpenDateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exchange = 1;
  if (this->exchange() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->exchange(), output);
  }

  // repeated .pb.ReqUpdateTIOpenDate list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->list(static_cast<int>(i)),
      output);
  }

  // string op_code = 3;
  if (this->op_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->op_code().data(), static_cast<int>(this->op_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ReqUpdateTIOpenDateList.op_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->op_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqUpdateTIOpenDateList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdateTIOpenDateList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqUpdateTIOpenDateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exchange = 1;
  if (this->exchange() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->exchange(), target);
  }

  // repeated .pb.ReqUpdateTIOpenDate list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->list(static_cast<int>(i)), target);
  }

  // string op_code = 3;
  if (this->op_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->op_code().data(), static_cast<int>(this->op_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ReqUpdateTIOpenDateList.op_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->op_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqUpdateTIOpenDateList)
  return target;
}

size_t ReqUpdateTIOpenDateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqUpdateTIOpenDateList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ReqUpdateTIOpenDate list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // string op_code = 3;
  if (this->op_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->op_code());
  }

  // int32 exchange = 1;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdateTIOpenDateList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqUpdateTIOpenDateList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdateTIOpenDateList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdateTIOpenDateList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqUpdateTIOpenDateList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqUpdateTIOpenDateList)
    MergeFrom(*source);
  }
}

void ReqUpdateTIOpenDateList::MergeFrom(const ReqUpdateTIOpenDateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqUpdateTIOpenDateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.op_code().size() > 0) {

    op_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_code_);
  }
  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
}

void ReqUpdateTIOpenDateList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqUpdateTIOpenDateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateTIOpenDateList::CopyFrom(const ReqUpdateTIOpenDateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqUpdateTIOpenDateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateTIOpenDateList::IsInitialized() const {
  return true;
}

void ReqUpdateTIOpenDateList::Swap(ReqUpdateTIOpenDateList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqUpdateTIOpenDateList::InternalSwap(ReqUpdateTIOpenDateList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  op_code_.Swap(&other->op_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exchange_, other->exchange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdateTIOpenDateList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountMoneySummary::InitAsDefaultInstance() {
}
class AccountMoneySummary::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountMoneySummary::kIdFieldNumber;
const int AccountMoneySummary::kTypeFieldNumber;
const int AccountMoneySummary::kCurrencyTypeFieldNumber;
const int AccountMoneySummary::kBalanceFieldNumber;
const int AccountMoneySummary::kCommissionFieldNumber;
const int AccountMoneySummary::kCurMarginFieldNumber;
const int AccountMoneySummary::kNetPositionAmountFieldNumber;
const int AccountMoneySummary::kPreBalanceFieldNumber;
const int AccountMoneySummary::kInterestInFieldNumber;
const int AccountMoneySummary::kDepositFieldNumber;
const int AccountMoneySummary::kWithdrawFieldNumber;
const int AccountMoneySummary::kFrozenMarginFieldNumber;
const int AccountMoneySummary::kFrozenCommissionFieldNumber;
const int AccountMoneySummary::kAvailableFieldNumber;
const int AccountMoneySummary::kCloseProfitFieldNumber;
const int AccountMoneySummary::kPositionProfitFieldNumber;
const int AccountMoneySummary::kPreMortgateFieldNumber;
const int AccountMoneySummary::kPreCreditFieldNumber;
const int AccountMoneySummary::kInterestBaseFieldNumber;
const int AccountMoneySummary::kWithdrawAvailableFieldNumber;
const int AccountMoneySummary::kReserveFieldNumber;
const int AccountMoneySummary::kTradingDayFieldNumber;
const int AccountMoneySummary::kCreditFieldNumber;
const int AccountMoneySummary::kMortgateFieldNumber;
const int AccountMoneySummary::kExchangeMarginFieldNumber;
const int AccountMoneySummary::kDeliveryMarginFieldNumber;
const int AccountMoneySummary::kExchangeDeliveryMarginFieldNumber;
const int AccountMoneySummary::kReserveBalanceFieldNumber;
const int AccountMoneySummary::kDeliveryCommissionFieldNumber;
const int AccountMoneySummary::kFrozenTransferFeeFieldNumber;
const int AccountMoneySummary::kFrozenStampTaxFieldNumber;
const int AccountMoneySummary::kTransferFeeFieldNumber;
const int AccountMoneySummary::kStampTaxFieldNumber;
const int AccountMoneySummary::kMtmProfitFieldNumber;
const int AccountMoneySummary::kPreMtmProfitFieldNumber;
const int AccountMoneySummary::kStockValueFieldNumber;
const int AccountMoneySummary::kBondRepurchaseAmountFieldNumber;
const int AccountMoneySummary::kReverseRepurchaseAmountFieldNumber;
const int AccountMoneySummary::kMarginTradeAmountFieldNumber;
const int AccountMoneySummary::kShortSellAmountFieldNumber;
const int AccountMoneySummary::kMarginTradeProfitFieldNumber;
const int AccountMoneySummary::kShortSellProfitFieldNumber;
const int AccountMoneySummary::kFrozenCloseCommissionFieldNumber;
const int AccountMoneySummary::kCommonBalanceFieldNumber;
const int AccountMoneySummary::kPreferedBalanceFieldNumber;
const int AccountMoneySummary::kBaseExchangeRateFieldNumber;
const int AccountMoneySummary::kWarningLevelFieldNumber;
const int AccountMoneySummary::kForceCloseLevelFieldNumber;
const int AccountMoneySummary::kClearedClosedProfitFieldNumber;
const int AccountMoneySummary::kNameFieldNumber;
const int AccountMoneySummary::kInterestFieldNumber;
const int AccountMoneySummary::kFrozenInterestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountMoneySummary::AccountMoneySummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AccountMoneySummary)
}
AccountMoneySummary::AccountMoneySummary(const AccountMoneySummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&trading_day_) -
    reinterpret_cast<char*>(&type_)) + sizeof(trading_day_));
  // @@protoc_insertion_point(copy_constructor:pb.AccountMoneySummary)
}

void AccountMoneySummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountMoneySummary_common_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_day_) -
      reinterpret_cast<char*>(&type_)) + sizeof(trading_day_));
}

AccountMoneySummary::~AccountMoneySummary() {
  // @@protoc_insertion_point(destructor:pb.AccountMoneySummary)
  SharedDtor();
}

void AccountMoneySummary::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountMoneySummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountMoneySummary& AccountMoneySummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountMoneySummary_common_2eproto.base);
  return *internal_default_instance();
}


void AccountMoneySummary::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.AccountMoneySummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_day_) -
      reinterpret_cast<char*>(&type_)) + sizeof(trading_day_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountMoneySummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "pb.AccountMoneySummary.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.AccountType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::pb::AccountType>(val));
        } else goto handle_unusual;
        continue;
      // .pb.CurrencyType currency_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_currency_type(static_cast<::pb::CurrencyType>(val));
        } else goto handle_unusual;
        continue;
      // double balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double commission = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cur_margin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          cur_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double net_position_amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          net_position_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_balance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          pre_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double interest_in = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          interest_in_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double deposit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          deposit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double withdraw = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          withdraw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double frozen_margin = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          frozen_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double frozen_commission = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          frozen_commission_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double available = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_profit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          close_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double position_profit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          position_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_mortgate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          pre_mortgate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_credit = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          pre_credit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double interest_base = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          interest_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double withdraw_available = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          withdraw_available_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double reserve = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          reserve_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 trading_day = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          trading_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double credit = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          credit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mortgate = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          mortgate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double exchange_margin = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          exchange_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double delivery_margin = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          delivery_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double exchange_delivery_margin = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          exchange_delivery_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double reserve_balance = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          reserve_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double delivery_commission = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          delivery_commission_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double frozen_transfer_fee = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          frozen_transfer_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double frozen_stamp_tax = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          frozen_stamp_tax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double transfer_fee = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          transfer_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stamp_tax = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          stamp_tax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mtm_profit = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          mtm_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_mtm_profit = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          pre_mtm_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stock_value = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          stock_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bond_repurchase_amount = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          bond_repurchase_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double reverse_repurchase_amount = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          reverse_repurchase_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double margin_trade_amount = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          margin_trade_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double short_sell_amount = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          short_sell_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double margin_trade_profit = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          margin_trade_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double short_sell_profit = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          short_sell_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double frozen_close_commission = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          frozen_close_commission_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double common_balance = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          common_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double prefered_balance = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          prefered_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double base_exchange_rate = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          base_exchange_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double warning_level = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          warning_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double force_close_level = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          force_close_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cleared_closed_profit = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          cleared_closed_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string name = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "pb.AccountMoneySummary.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double interest = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          interest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double frozen_interest = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          frozen_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountMoneySummary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AccountMoneySummary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.AccountMoneySummary.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.AccountType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb::AccountType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CurrencyType currency_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_currency_type(static_cast< ::pb::CurrencyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double balance = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double commission = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cur_margin = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double net_position_amount = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_position_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_balance = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double interest_in = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double deposit = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deposit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double withdraw = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdraw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_margin = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_commission = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double available = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double close_profit = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double position_profit = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_mortgate = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (137 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_mortgate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_credit = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (145 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_credit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double interest_base = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (153 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double withdraw_available = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (161 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdraw_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reserve = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (169 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trading_day = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double credit = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (185 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &credit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mortgate = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (193 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mortgate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double exchange_margin = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (201 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchange_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double delivery_margin = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (209 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delivery_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double exchange_delivery_margin = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (217 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchange_delivery_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reserve_balance = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (225 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double delivery_commission = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (233 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delivery_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_transfer_fee = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (241 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_transfer_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_stamp_tax = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (249 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_stamp_tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double transfer_fee = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (257 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transfer_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stamp_tax = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (265 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stamp_tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mtm_profit = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (273 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mtm_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_mtm_profit = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (281 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_mtm_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stock_value = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (289 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stock_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bond_repurchase_amount = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (297 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bond_repurchase_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reverse_repurchase_amount = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (305 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reverse_repurchase_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double margin_trade_amount = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (313 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_trade_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short_sell_amount = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (321 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short_sell_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double margin_trade_profit = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (329 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_trade_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short_sell_profit = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (337 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short_sell_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_close_commission = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (345 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_close_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double common_balance = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (353 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &common_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double prefered_balance = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (361 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prefered_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double base_exchange_rate = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (369 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_exchange_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double warning_level = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (377 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &warning_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double force_close_level = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (385 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &force_close_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cleared_closed_profit = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (393 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cleared_closed_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.AccountMoneySummary.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double interest = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (409 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_interest = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (417 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AccountMoneySummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AccountMoneySummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountMoneySummary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AccountMoneySummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.AccountMoneySummary.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .pb.AccountType type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .pb.CurrencyType currency_type = 3;
  if (this->currency_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->currency_type(), output);
  }

  // double balance = 4;
  if (!(this->balance() <= 0 && this->balance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->balance(), output);
  }

  // double commission = 5;
  if (!(this->commission() <= 0 && this->commission() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->commission(), output);
  }

  // double cur_margin = 6;
  if (!(this->cur_margin() <= 0 && this->cur_margin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->cur_margin(), output);
  }

  // double net_position_amount = 7;
  if (!(this->net_position_amount() <= 0 && this->net_position_amount() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->net_position_amount(), output);
  }

  // double pre_balance = 8;
  if (!(this->pre_balance() <= 0 && this->pre_balance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->pre_balance(), output);
  }

  // double interest_in = 9;
  if (!(this->interest_in() <= 0 && this->interest_in() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->interest_in(), output);
  }

  // double deposit = 10;
  if (!(this->deposit() <= 0 && this->deposit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->deposit(), output);
  }

  // double withdraw = 11;
  if (!(this->withdraw() <= 0 && this->withdraw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->withdraw(), output);
  }

  // double frozen_margin = 12;
  if (!(this->frozen_margin() <= 0 && this->frozen_margin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->frozen_margin(), output);
  }

  // double frozen_commission = 13;
  if (!(this->frozen_commission() <= 0 && this->frozen_commission() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->frozen_commission(), output);
  }

  // double available = 14;
  if (!(this->available() <= 0 && this->available() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->available(), output);
  }

  // double close_profit = 15;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->close_profit(), output);
  }

  // double position_profit = 16;
  if (!(this->position_profit() <= 0 && this->position_profit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->position_profit(), output);
  }

  // double pre_mortgate = 17;
  if (!(this->pre_mortgate() <= 0 && this->pre_mortgate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(17, this->pre_mortgate(), output);
  }

  // double pre_credit = 18;
  if (!(this->pre_credit() <= 0 && this->pre_credit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(18, this->pre_credit(), output);
  }

  // double interest_base = 19;
  if (!(this->interest_base() <= 0 && this->interest_base() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(19, this->interest_base(), output);
  }

  // double withdraw_available = 20;
  if (!(this->withdraw_available() <= 0 && this->withdraw_available() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(20, this->withdraw_available(), output);
  }

  // double reserve = 21;
  if (!(this->reserve() <= 0 && this->reserve() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(21, this->reserve(), output);
  }

  // int32 trading_day = 22;
  if (this->trading_day() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->trading_day(), output);
  }

  // double credit = 23;
  if (!(this->credit() <= 0 && this->credit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(23, this->credit(), output);
  }

  // double mortgate = 24;
  if (!(this->mortgate() <= 0 && this->mortgate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(24, this->mortgate(), output);
  }

  // double exchange_margin = 25;
  if (!(this->exchange_margin() <= 0 && this->exchange_margin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(25, this->exchange_margin(), output);
  }

  // double delivery_margin = 26;
  if (!(this->delivery_margin() <= 0 && this->delivery_margin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(26, this->delivery_margin(), output);
  }

  // double exchange_delivery_margin = 27;
  if (!(this->exchange_delivery_margin() <= 0 && this->exchange_delivery_margin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(27, this->exchange_delivery_margin(), output);
  }

  // double reserve_balance = 28;
  if (!(this->reserve_balance() <= 0 && this->reserve_balance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(28, this->reserve_balance(), output);
  }

  // double delivery_commission = 29;
  if (!(this->delivery_commission() <= 0 && this->delivery_commission() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(29, this->delivery_commission(), output);
  }

  // double frozen_transfer_fee = 30;
  if (!(this->frozen_transfer_fee() <= 0 && this->frozen_transfer_fee() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(30, this->frozen_transfer_fee(), output);
  }

  // double frozen_stamp_tax = 31;
  if (!(this->frozen_stamp_tax() <= 0 && this->frozen_stamp_tax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(31, this->frozen_stamp_tax(), output);
  }

  // double transfer_fee = 32;
  if (!(this->transfer_fee() <= 0 && this->transfer_fee() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(32, this->transfer_fee(), output);
  }

  // double stamp_tax = 33;
  if (!(this->stamp_tax() <= 0 && this->stamp_tax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(33, this->stamp_tax(), output);
  }

  // double mtm_profit = 34;
  if (!(this->mtm_profit() <= 0 && this->mtm_profit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(34, this->mtm_profit(), output);
  }

  // double pre_mtm_profit = 35;
  if (!(this->pre_mtm_profit() <= 0 && this->pre_mtm_profit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(35, this->pre_mtm_profit(), output);
  }

  // double stock_value = 36;
  if (!(this->stock_value() <= 0 && this->stock_value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(36, this->stock_value(), output);
  }

  // double bond_repurchase_amount = 37;
  if (!(this->bond_repurchase_amount() <= 0 && this->bond_repurchase_amount() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(37, this->bond_repurchase_amount(), output);
  }

  // double reverse_repurchase_amount = 38;
  if (!(this->reverse_repurchase_amount() <= 0 && this->reverse_repurchase_amount() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(38, this->reverse_repurchase_amount(), output);
  }

  // double margin_trade_amount = 39;
  if (!(this->margin_trade_amount() <= 0 && this->margin_trade_amount() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(39, this->margin_trade_amount(), output);
  }

  // double short_sell_amount = 40;
  if (!(this->short_sell_amount() <= 0 && this->short_sell_amount() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(40, this->short_sell_amount(), output);
  }

  // double margin_trade_profit = 41;
  if (!(this->margin_trade_profit() <= 0 && this->margin_trade_profit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(41, this->margin_trade_profit(), output);
  }

  // double short_sell_profit = 42;
  if (!(this->short_sell_profit() <= 0 && this->short_sell_profit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(42, this->short_sell_profit(), output);
  }

  // double frozen_close_commission = 43;
  if (!(this->frozen_close_commission() <= 0 && this->frozen_close_commission() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(43, this->frozen_close_commission(), output);
  }

  // double common_balance = 44;
  if (!(this->common_balance() <= 0 && this->common_balance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(44, this->common_balance(), output);
  }

  // double prefered_balance = 45;
  if (!(this->prefered_balance() <= 0 && this->prefered_balance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(45, this->prefered_balance(), output);
  }

  // double base_exchange_rate = 46;
  if (!(this->base_exchange_rate() <= 0 && this->base_exchange_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(46, this->base_exchange_rate(), output);
  }

  // double warning_level = 47;
  if (!(this->warning_level() <= 0 && this->warning_level() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(47, this->warning_level(), output);
  }

  // double force_close_level = 48;
  if (!(this->force_close_level() <= 0 && this->force_close_level() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(48, this->force_close_level(), output);
  }

  // double cleared_closed_profit = 49;
  if (!(this->cleared_closed_profit() <= 0 && this->cleared_closed_profit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(49, this->cleared_closed_profit(), output);
  }

  // string name = 50;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.AccountMoneySummary.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->name(), output);
  }

  // double interest = 51;
  if (!(this->interest() <= 0 && this->interest() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(51, this->interest(), output);
  }

  // double frozen_interest = 52;
  if (!(this->frozen_interest() <= 0 && this->frozen_interest() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(52, this->frozen_interest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AccountMoneySummary)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountMoneySummary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AccountMoneySummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.AccountMoneySummary.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .pb.AccountType type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .pb.CurrencyType currency_type = 3;
  if (this->currency_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->currency_type(), target);
  }

  // double balance = 4;
  if (!(this->balance() <= 0 && this->balance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->balance(), target);
  }

  // double commission = 5;
  if (!(this->commission() <= 0 && this->commission() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->commission(), target);
  }

  // double cur_margin = 6;
  if (!(this->cur_margin() <= 0 && this->cur_margin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->cur_margin(), target);
  }

  // double net_position_amount = 7;
  if (!(this->net_position_amount() <= 0 && this->net_position_amount() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->net_position_amount(), target);
  }

  // double pre_balance = 8;
  if (!(this->pre_balance() <= 0 && this->pre_balance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->pre_balance(), target);
  }

  // double interest_in = 9;
  if (!(this->interest_in() <= 0 && this->interest_in() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->interest_in(), target);
  }

  // double deposit = 10;
  if (!(this->deposit() <= 0 && this->deposit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->deposit(), target);
  }

  // double withdraw = 11;
  if (!(this->withdraw() <= 0 && this->withdraw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->withdraw(), target);
  }

  // double frozen_margin = 12;
  if (!(this->frozen_margin() <= 0 && this->frozen_margin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->frozen_margin(), target);
  }

  // double frozen_commission = 13;
  if (!(this->frozen_commission() <= 0 && this->frozen_commission() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->frozen_commission(), target);
  }

  // double available = 14;
  if (!(this->available() <= 0 && this->available() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->available(), target);
  }

  // double close_profit = 15;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->close_profit(), target);
  }

  // double position_profit = 16;
  if (!(this->position_profit() <= 0 && this->position_profit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->position_profit(), target);
  }

  // double pre_mortgate = 17;
  if (!(this->pre_mortgate() <= 0 && this->pre_mortgate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->pre_mortgate(), target);
  }

  // double pre_credit = 18;
  if (!(this->pre_credit() <= 0 && this->pre_credit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->pre_credit(), target);
  }

  // double interest_base = 19;
  if (!(this->interest_base() <= 0 && this->interest_base() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->interest_base(), target);
  }

  // double withdraw_available = 20;
  if (!(this->withdraw_available() <= 0 && this->withdraw_available() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->withdraw_available(), target);
  }

  // double reserve = 21;
  if (!(this->reserve() <= 0 && this->reserve() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->reserve(), target);
  }

  // int32 trading_day = 22;
  if (this->trading_day() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->trading_day(), target);
  }

  // double credit = 23;
  if (!(this->credit() <= 0 && this->credit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->credit(), target);
  }

  // double mortgate = 24;
  if (!(this->mortgate() <= 0 && this->mortgate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->mortgate(), target);
  }

  // double exchange_margin = 25;
  if (!(this->exchange_margin() <= 0 && this->exchange_margin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->exchange_margin(), target);
  }

  // double delivery_margin = 26;
  if (!(this->delivery_margin() <= 0 && this->delivery_margin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->delivery_margin(), target);
  }

  // double exchange_delivery_margin = 27;
  if (!(this->exchange_delivery_margin() <= 0 && this->exchange_delivery_margin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->exchange_delivery_margin(), target);
  }

  // double reserve_balance = 28;
  if (!(this->reserve_balance() <= 0 && this->reserve_balance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->reserve_balance(), target);
  }

  // double delivery_commission = 29;
  if (!(this->delivery_commission() <= 0 && this->delivery_commission() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->delivery_commission(), target);
  }

  // double frozen_transfer_fee = 30;
  if (!(this->frozen_transfer_fee() <= 0 && this->frozen_transfer_fee() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->frozen_transfer_fee(), target);
  }

  // double frozen_stamp_tax = 31;
  if (!(this->frozen_stamp_tax() <= 0 && this->frozen_stamp_tax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->frozen_stamp_tax(), target);
  }

  // double transfer_fee = 32;
  if (!(this->transfer_fee() <= 0 && this->transfer_fee() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->transfer_fee(), target);
  }

  // double stamp_tax = 33;
  if (!(this->stamp_tax() <= 0 && this->stamp_tax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->stamp_tax(), target);
  }

  // double mtm_profit = 34;
  if (!(this->mtm_profit() <= 0 && this->mtm_profit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->mtm_profit(), target);
  }

  // double pre_mtm_profit = 35;
  if (!(this->pre_mtm_profit() <= 0 && this->pre_mtm_profit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->pre_mtm_profit(), target);
  }

  // double stock_value = 36;
  if (!(this->stock_value() <= 0 && this->stock_value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->stock_value(), target);
  }

  // double bond_repurchase_amount = 37;
  if (!(this->bond_repurchase_amount() <= 0 && this->bond_repurchase_amount() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->bond_repurchase_amount(), target);
  }

  // double reverse_repurchase_amount = 38;
  if (!(this->reverse_repurchase_amount() <= 0 && this->reverse_repurchase_amount() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->reverse_repurchase_amount(), target);
  }

  // double margin_trade_amount = 39;
  if (!(this->margin_trade_amount() <= 0 && this->margin_trade_amount() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->margin_trade_amount(), target);
  }

  // double short_sell_amount = 40;
  if (!(this->short_sell_amount() <= 0 && this->short_sell_amount() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->short_sell_amount(), target);
  }

  // double margin_trade_profit = 41;
  if (!(this->margin_trade_profit() <= 0 && this->margin_trade_profit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->margin_trade_profit(), target);
  }

  // double short_sell_profit = 42;
  if (!(this->short_sell_profit() <= 0 && this->short_sell_profit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->short_sell_profit(), target);
  }

  // double frozen_close_commission = 43;
  if (!(this->frozen_close_commission() <= 0 && this->frozen_close_commission() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(43, this->frozen_close_commission(), target);
  }

  // double common_balance = 44;
  if (!(this->common_balance() <= 0 && this->common_balance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(44, this->common_balance(), target);
  }

  // double prefered_balance = 45;
  if (!(this->prefered_balance() <= 0 && this->prefered_balance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(45, this->prefered_balance(), target);
  }

  // double base_exchange_rate = 46;
  if (!(this->base_exchange_rate() <= 0 && this->base_exchange_rate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(46, this->base_exchange_rate(), target);
  }

  // double warning_level = 47;
  if (!(this->warning_level() <= 0 && this->warning_level() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(47, this->warning_level(), target);
  }

  // double force_close_level = 48;
  if (!(this->force_close_level() <= 0 && this->force_close_level() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(48, this->force_close_level(), target);
  }

  // double cleared_closed_profit = 49;
  if (!(this->cleared_closed_profit() <= 0 && this->cleared_closed_profit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(49, this->cleared_closed_profit(), target);
  }

  // string name = 50;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.AccountMoneySummary.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        50, this->name(), target);
  }

  // double interest = 51;
  if (!(this->interest() <= 0 && this->interest() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(51, this->interest(), target);
  }

  // double frozen_interest = 52;
  if (!(this->frozen_interest() <= 0 && this->frozen_interest() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(52, this->frozen_interest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AccountMoneySummary)
  return target;
}

size_t AccountMoneySummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.AccountMoneySummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 50;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .pb.AccountType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // .pb.CurrencyType currency_type = 3;
  if (this->currency_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->currency_type());
  }

  // double balance = 4;
  if (!(this->balance() <= 0 && this->balance() >= 0)) {
    total_size += 1 + 8;
  }

  // double commission = 5;
  if (!(this->commission() <= 0 && this->commission() >= 0)) {
    total_size += 1 + 8;
  }

  // double cur_margin = 6;
  if (!(this->cur_margin() <= 0 && this->cur_margin() >= 0)) {
    total_size += 1 + 8;
  }

  // double net_position_amount = 7;
  if (!(this->net_position_amount() <= 0 && this->net_position_amount() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_balance = 8;
  if (!(this->pre_balance() <= 0 && this->pre_balance() >= 0)) {
    total_size += 1 + 8;
  }

  // double interest_in = 9;
  if (!(this->interest_in() <= 0 && this->interest_in() >= 0)) {
    total_size += 1 + 8;
  }

  // double deposit = 10;
  if (!(this->deposit() <= 0 && this->deposit() >= 0)) {
    total_size += 1 + 8;
  }

  // double withdraw = 11;
  if (!(this->withdraw() <= 0 && this->withdraw() >= 0)) {
    total_size += 1 + 8;
  }

  // double frozen_margin = 12;
  if (!(this->frozen_margin() <= 0 && this->frozen_margin() >= 0)) {
    total_size += 1 + 8;
  }

  // double frozen_commission = 13;
  if (!(this->frozen_commission() <= 0 && this->frozen_commission() >= 0)) {
    total_size += 1 + 8;
  }

  // double available = 14;
  if (!(this->available() <= 0 && this->available() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_profit = 15;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    total_size += 1 + 8;
  }

  // double position_profit = 16;
  if (!(this->position_profit() <= 0 && this->position_profit() >= 0)) {
    total_size += 2 + 8;
  }

  // double pre_mortgate = 17;
  if (!(this->pre_mortgate() <= 0 && this->pre_mortgate() >= 0)) {
    total_size += 2 + 8;
  }

  // double pre_credit = 18;
  if (!(this->pre_credit() <= 0 && this->pre_credit() >= 0)) {
    total_size += 2 + 8;
  }

  // double interest_base = 19;
  if (!(this->interest_base() <= 0 && this->interest_base() >= 0)) {
    total_size += 2 + 8;
  }

  // double withdraw_available = 20;
  if (!(this->withdraw_available() <= 0 && this->withdraw_available() >= 0)) {
    total_size += 2 + 8;
  }

  // double reserve = 21;
  if (!(this->reserve() <= 0 && this->reserve() >= 0)) {
    total_size += 2 + 8;
  }

  // double credit = 23;
  if (!(this->credit() <= 0 && this->credit() >= 0)) {
    total_size += 2 + 8;
  }

  // double mortgate = 24;
  if (!(this->mortgate() <= 0 && this->mortgate() >= 0)) {
    total_size += 2 + 8;
  }

  // double exchange_margin = 25;
  if (!(this->exchange_margin() <= 0 && this->exchange_margin() >= 0)) {
    total_size += 2 + 8;
  }

  // double delivery_margin = 26;
  if (!(this->delivery_margin() <= 0 && this->delivery_margin() >= 0)) {
    total_size += 2 + 8;
  }

  // double exchange_delivery_margin = 27;
  if (!(this->exchange_delivery_margin() <= 0 && this->exchange_delivery_margin() >= 0)) {
    total_size += 2 + 8;
  }

  // double reserve_balance = 28;
  if (!(this->reserve_balance() <= 0 && this->reserve_balance() >= 0)) {
    total_size += 2 + 8;
  }

  // double delivery_commission = 29;
  if (!(this->delivery_commission() <= 0 && this->delivery_commission() >= 0)) {
    total_size += 2 + 8;
  }

  // double frozen_transfer_fee = 30;
  if (!(this->frozen_transfer_fee() <= 0 && this->frozen_transfer_fee() >= 0)) {
    total_size += 2 + 8;
  }

  // double frozen_stamp_tax = 31;
  if (!(this->frozen_stamp_tax() <= 0 && this->frozen_stamp_tax() >= 0)) {
    total_size += 2 + 8;
  }

  // double transfer_fee = 32;
  if (!(this->transfer_fee() <= 0 && this->transfer_fee() >= 0)) {
    total_size += 2 + 8;
  }

  // double stamp_tax = 33;
  if (!(this->stamp_tax() <= 0 && this->stamp_tax() >= 0)) {
    total_size += 2 + 8;
  }

  // double mtm_profit = 34;
  if (!(this->mtm_profit() <= 0 && this->mtm_profit() >= 0)) {
    total_size += 2 + 8;
  }

  // double pre_mtm_profit = 35;
  if (!(this->pre_mtm_profit() <= 0 && this->pre_mtm_profit() >= 0)) {
    total_size += 2 + 8;
  }

  // double stock_value = 36;
  if (!(this->stock_value() <= 0 && this->stock_value() >= 0)) {
    total_size += 2 + 8;
  }

  // double bond_repurchase_amount = 37;
  if (!(this->bond_repurchase_amount() <= 0 && this->bond_repurchase_amount() >= 0)) {
    total_size += 2 + 8;
  }

  // double reverse_repurchase_amount = 38;
  if (!(this->reverse_repurchase_amount() <= 0 && this->reverse_repurchase_amount() >= 0)) {
    total_size += 2 + 8;
  }

  // double margin_trade_amount = 39;
  if (!(this->margin_trade_amount() <= 0 && this->margin_trade_amount() >= 0)) {
    total_size += 2 + 8;
  }

  // double short_sell_amount = 40;
  if (!(this->short_sell_amount() <= 0 && this->short_sell_amount() >= 0)) {
    total_size += 2 + 8;
  }

  // double margin_trade_profit = 41;
  if (!(this->margin_trade_profit() <= 0 && this->margin_trade_profit() >= 0)) {
    total_size += 2 + 8;
  }

  // double short_sell_profit = 42;
  if (!(this->short_sell_profit() <= 0 && this->short_sell_profit() >= 0)) {
    total_size += 2 + 8;
  }

  // double frozen_close_commission = 43;
  if (!(this->frozen_close_commission() <= 0 && this->frozen_close_commission() >= 0)) {
    total_size += 2 + 8;
  }

  // double common_balance = 44;
  if (!(this->common_balance() <= 0 && this->common_balance() >= 0)) {
    total_size += 2 + 8;
  }

  // double prefered_balance = 45;
  if (!(this->prefered_balance() <= 0 && this->prefered_balance() >= 0)) {
    total_size += 2 + 8;
  }

  // double base_exchange_rate = 46;
  if (!(this->base_exchange_rate() <= 0 && this->base_exchange_rate() >= 0)) {
    total_size += 2 + 8;
  }

  // double warning_level = 47;
  if (!(this->warning_level() <= 0 && this->warning_level() >= 0)) {
    total_size += 2 + 8;
  }

  // double force_close_level = 48;
  if (!(this->force_close_level() <= 0 && this->force_close_level() >= 0)) {
    total_size += 2 + 8;
  }

  // double cleared_closed_profit = 49;
  if (!(this->cleared_closed_profit() <= 0 && this->cleared_closed_profit() >= 0)) {
    total_size += 2 + 8;
  }

  // double interest = 51;
  if (!(this->interest() <= 0 && this->interest() >= 0)) {
    total_size += 2 + 8;
  }

  // double frozen_interest = 52;
  if (!(this->frozen_interest() <= 0 && this->frozen_interest() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 trading_day = 22;
  if (this->trading_day() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trading_day());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountMoneySummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.AccountMoneySummary)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountMoneySummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountMoneySummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.AccountMoneySummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.AccountMoneySummary)
    MergeFrom(*source);
  }
}

void AccountMoneySummary::MergeFrom(const AccountMoneySummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.AccountMoneySummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (!(from.balance() <= 0 && from.balance() >= 0)) {
    set_balance(from.balance());
  }
  if (!(from.commission() <= 0 && from.commission() >= 0)) {
    set_commission(from.commission());
  }
  if (!(from.cur_margin() <= 0 && from.cur_margin() >= 0)) {
    set_cur_margin(from.cur_margin());
  }
  if (!(from.net_position_amount() <= 0 && from.net_position_amount() >= 0)) {
    set_net_position_amount(from.net_position_amount());
  }
  if (!(from.pre_balance() <= 0 && from.pre_balance() >= 0)) {
    set_pre_balance(from.pre_balance());
  }
  if (!(from.interest_in() <= 0 && from.interest_in() >= 0)) {
    set_interest_in(from.interest_in());
  }
  if (!(from.deposit() <= 0 && from.deposit() >= 0)) {
    set_deposit(from.deposit());
  }
  if (!(from.withdraw() <= 0 && from.withdraw() >= 0)) {
    set_withdraw(from.withdraw());
  }
  if (!(from.frozen_margin() <= 0 && from.frozen_margin() >= 0)) {
    set_frozen_margin(from.frozen_margin());
  }
  if (!(from.frozen_commission() <= 0 && from.frozen_commission() >= 0)) {
    set_frozen_commission(from.frozen_commission());
  }
  if (!(from.available() <= 0 && from.available() >= 0)) {
    set_available(from.available());
  }
  if (!(from.close_profit() <= 0 && from.close_profit() >= 0)) {
    set_close_profit(from.close_profit());
  }
  if (!(from.position_profit() <= 0 && from.position_profit() >= 0)) {
    set_position_profit(from.position_profit());
  }
  if (!(from.pre_mortgate() <= 0 && from.pre_mortgate() >= 0)) {
    set_pre_mortgate(from.pre_mortgate());
  }
  if (!(from.pre_credit() <= 0 && from.pre_credit() >= 0)) {
    set_pre_credit(from.pre_credit());
  }
  if (!(from.interest_base() <= 0 && from.interest_base() >= 0)) {
    set_interest_base(from.interest_base());
  }
  if (!(from.withdraw_available() <= 0 && from.withdraw_available() >= 0)) {
    set_withdraw_available(from.withdraw_available());
  }
  if (!(from.reserve() <= 0 && from.reserve() >= 0)) {
    set_reserve(from.reserve());
  }
  if (!(from.credit() <= 0 && from.credit() >= 0)) {
    set_credit(from.credit());
  }
  if (!(from.mortgate() <= 0 && from.mortgate() >= 0)) {
    set_mortgate(from.mortgate());
  }
  if (!(from.exchange_margin() <= 0 && from.exchange_margin() >= 0)) {
    set_exchange_margin(from.exchange_margin());
  }
  if (!(from.delivery_margin() <= 0 && from.delivery_margin() >= 0)) {
    set_delivery_margin(from.delivery_margin());
  }
  if (!(from.exchange_delivery_margin() <= 0 && from.exchange_delivery_margin() >= 0)) {
    set_exchange_delivery_margin(from.exchange_delivery_margin());
  }
  if (!(from.reserve_balance() <= 0 && from.reserve_balance() >= 0)) {
    set_reserve_balance(from.reserve_balance());
  }
  if (!(from.delivery_commission() <= 0 && from.delivery_commission() >= 0)) {
    set_delivery_commission(from.delivery_commission());
  }
  if (!(from.frozen_transfer_fee() <= 0 && from.frozen_transfer_fee() >= 0)) {
    set_frozen_transfer_fee(from.frozen_transfer_fee());
  }
  if (!(from.frozen_stamp_tax() <= 0 && from.frozen_stamp_tax() >= 0)) {
    set_frozen_stamp_tax(from.frozen_stamp_tax());
  }
  if (!(from.transfer_fee() <= 0 && from.transfer_fee() >= 0)) {
    set_transfer_fee(from.transfer_fee());
  }
  if (!(from.stamp_tax() <= 0 && from.stamp_tax() >= 0)) {
    set_stamp_tax(from.stamp_tax());
  }
  if (!(from.mtm_profit() <= 0 && from.mtm_profit() >= 0)) {
    set_mtm_profit(from.mtm_profit());
  }
  if (!(from.pre_mtm_profit() <= 0 && from.pre_mtm_profit() >= 0)) {
    set_pre_mtm_profit(from.pre_mtm_profit());
  }
  if (!(from.stock_value() <= 0 && from.stock_value() >= 0)) {
    set_stock_value(from.stock_value());
  }
  if (!(from.bond_repurchase_amount() <= 0 && from.bond_repurchase_amount() >= 0)) {
    set_bond_repurchase_amount(from.bond_repurchase_amount());
  }
  if (!(from.reverse_repurchase_amount() <= 0 && from.reverse_repurchase_amount() >= 0)) {
    set_reverse_repurchase_amount(from.reverse_repurchase_amount());
  }
  if (!(from.margin_trade_amount() <= 0 && from.margin_trade_amount() >= 0)) {
    set_margin_trade_amount(from.margin_trade_amount());
  }
  if (!(from.short_sell_amount() <= 0 && from.short_sell_amount() >= 0)) {
    set_short_sell_amount(from.short_sell_amount());
  }
  if (!(from.margin_trade_profit() <= 0 && from.margin_trade_profit() >= 0)) {
    set_margin_trade_profit(from.margin_trade_profit());
  }
  if (!(from.short_sell_profit() <= 0 && from.short_sell_profit() >= 0)) {
    set_short_sell_profit(from.short_sell_profit());
  }
  if (!(from.frozen_close_commission() <= 0 && from.frozen_close_commission() >= 0)) {
    set_frozen_close_commission(from.frozen_close_commission());
  }
  if (!(from.common_balance() <= 0 && from.common_balance() >= 0)) {
    set_common_balance(from.common_balance());
  }
  if (!(from.prefered_balance() <= 0 && from.prefered_balance() >= 0)) {
    set_prefered_balance(from.prefered_balance());
  }
  if (!(from.base_exchange_rate() <= 0 && from.base_exchange_rate() >= 0)) {
    set_base_exchange_rate(from.base_exchange_rate());
  }
  if (!(from.warning_level() <= 0 && from.warning_level() >= 0)) {
    set_warning_level(from.warning_level());
  }
  if (!(from.force_close_level() <= 0 && from.force_close_level() >= 0)) {
    set_force_close_level(from.force_close_level());
  }
  if (!(from.cleared_closed_profit() <= 0 && from.cleared_closed_profit() >= 0)) {
    set_cleared_closed_profit(from.cleared_closed_profit());
  }
  if (!(from.interest() <= 0 && from.interest() >= 0)) {
    set_interest(from.interest());
  }
  if (!(from.frozen_interest() <= 0 && from.frozen_interest() >= 0)) {
    set_frozen_interest(from.frozen_interest());
  }
  if (from.trading_day() != 0) {
    set_trading_day(from.trading_day());
  }
}

void AccountMoneySummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.AccountMoneySummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountMoneySummary::CopyFrom(const AccountMoneySummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.AccountMoneySummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountMoneySummary::IsInitialized() const {
  return true;
}

void AccountMoneySummary::Swap(AccountMoneySummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountMoneySummary::InternalSwap(AccountMoneySummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(currency_type_, other->currency_type_);
  swap(balance_, other->balance_);
  swap(commission_, other->commission_);
  swap(cur_margin_, other->cur_margin_);
  swap(net_position_amount_, other->net_position_amount_);
  swap(pre_balance_, other->pre_balance_);
  swap(interest_in_, other->interest_in_);
  swap(deposit_, other->deposit_);
  swap(withdraw_, other->withdraw_);
  swap(frozen_margin_, other->frozen_margin_);
  swap(frozen_commission_, other->frozen_commission_);
  swap(available_, other->available_);
  swap(close_profit_, other->close_profit_);
  swap(position_profit_, other->position_profit_);
  swap(pre_mortgate_, other->pre_mortgate_);
  swap(pre_credit_, other->pre_credit_);
  swap(interest_base_, other->interest_base_);
  swap(withdraw_available_, other->withdraw_available_);
  swap(reserve_, other->reserve_);
  swap(credit_, other->credit_);
  swap(mortgate_, other->mortgate_);
  swap(exchange_margin_, other->exchange_margin_);
  swap(delivery_margin_, other->delivery_margin_);
  swap(exchange_delivery_margin_, other->exchange_delivery_margin_);
  swap(reserve_balance_, other->reserve_balance_);
  swap(delivery_commission_, other->delivery_commission_);
  swap(frozen_transfer_fee_, other->frozen_transfer_fee_);
  swap(frozen_stamp_tax_, other->frozen_stamp_tax_);
  swap(transfer_fee_, other->transfer_fee_);
  swap(stamp_tax_, other->stamp_tax_);
  swap(mtm_profit_, other->mtm_profit_);
  swap(pre_mtm_profit_, other->pre_mtm_profit_);
  swap(stock_value_, other->stock_value_);
  swap(bond_repurchase_amount_, other->bond_repurchase_amount_);
  swap(reverse_repurchase_amount_, other->reverse_repurchase_amount_);
  swap(margin_trade_amount_, other->margin_trade_amount_);
  swap(short_sell_amount_, other->short_sell_amount_);
  swap(margin_trade_profit_, other->margin_trade_profit_);
  swap(short_sell_profit_, other->short_sell_profit_);
  swap(frozen_close_commission_, other->frozen_close_commission_);
  swap(common_balance_, other->common_balance_);
  swap(prefered_balance_, other->prefered_balance_);
  swap(base_exchange_rate_, other->base_exchange_rate_);
  swap(warning_level_, other->warning_level_);
  swap(force_close_level_, other->force_close_level_);
  swap(cleared_closed_profit_, other->cleared_closed_profit_);
  swap(interest_, other->interest_);
  swap(frozen_interest_, other->frozen_interest_);
  swap(trading_day_, other->trading_day_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountMoneySummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountMoneySummaryList::InitAsDefaultInstance() {
}
class AccountMoneySummaryList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountMoneySummaryList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountMoneySummaryList::AccountMoneySummaryList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AccountMoneySummaryList)
}
AccountMoneySummaryList::AccountMoneySummaryList(const AccountMoneySummaryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.AccountMoneySummaryList)
}

void AccountMoneySummaryList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountMoneySummaryList_common_2eproto.base);
}

AccountMoneySummaryList::~AccountMoneySummaryList() {
  // @@protoc_insertion_point(destructor:pb.AccountMoneySummaryList)
  SharedDtor();
}

void AccountMoneySummaryList::SharedDtor() {
}

void AccountMoneySummaryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountMoneySummaryList& AccountMoneySummaryList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountMoneySummaryList_common_2eproto.base);
  return *internal_default_instance();
}


void AccountMoneySummaryList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.AccountMoneySummaryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountMoneySummaryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.AccountMoneySummary list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountMoneySummaryList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AccountMoneySummaryList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.AccountMoneySummary list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AccountMoneySummaryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AccountMoneySummaryList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountMoneySummaryList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AccountMoneySummaryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.AccountMoneySummary list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AccountMoneySummaryList)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountMoneySummaryList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AccountMoneySummaryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.AccountMoneySummary list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AccountMoneySummaryList)
  return target;
}

size_t AccountMoneySummaryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.AccountMoneySummaryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.AccountMoneySummary list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountMoneySummaryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.AccountMoneySummaryList)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountMoneySummaryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountMoneySummaryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.AccountMoneySummaryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.AccountMoneySummaryList)
    MergeFrom(*source);
  }
}

void AccountMoneySummaryList::MergeFrom(const AccountMoneySummaryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.AccountMoneySummaryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void AccountMoneySummaryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.AccountMoneySummaryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountMoneySummaryList::CopyFrom(const AccountMoneySummaryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.AccountMoneySummaryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountMoneySummaryList::IsInitialized() const {
  return true;
}

void AccountMoneySummaryList::Swap(AccountMoneySummaryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountMoneySummaryList::InternalSwap(AccountMoneySummaryList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountMoneySummaryList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneyTransferRecord::InitAsDefaultInstance() {
}
class MoneyTransferRecord::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoneyTransferRecord::kUidFieldNumber;
const int MoneyTransferRecord::kDirectionFieldNumber;
const int MoneyTransferRecord::kCurrencyTypeFieldNumber;
const int MoneyTransferRecord::kSettlementGroupFieldNumber;
const int MoneyTransferRecord::kConfirmedFieldNumber;
const int MoneyTransferRecord::kIsPreferedFieldNumber;
const int MoneyTransferRecord::kAmountFieldNumber;
const int MoneyTransferRecord::kAccountIdFieldNumber;
const int MoneyTransferRecord::kOperatorIdFieldNumber;
const int MoneyTransferRecord::kSessionIdFieldNumber;
const int MoneyTransferRecord::kTimeFieldNumber;
const int MoneyTransferRecord::kCommentFieldNumber;
const int MoneyTransferRecord::kBankTradeIdFieldNumber;
const int MoneyTransferRecord::kPaymentConfigIdFieldNumber;
const int MoneyTransferRecord::kOriginalAmountFieldNumber;
const int MoneyTransferRecord::kFeeFieldNumber;
const int MoneyTransferRecord::kPaymentPathFieldNumber;
const int MoneyTransferRecord::kIdentityNumberFieldNumber;
const int MoneyTransferRecord::kPhoneNumberFieldNumber;
const int MoneyTransferRecord::kBankNameFieldNumber;
const int MoneyTransferRecord::kBankBranchNameFieldNumber;
const int MoneyTransferRecord::kBankCardNoFieldNumber;
const int MoneyTransferRecord::kProvinceFieldNumber;
const int MoneyTransferRecord::kCityFieldNumber;
const int MoneyTransferRecord::kPayTypeFieldNumber;
const int MoneyTransferRecord::kPayedTimeFieldNumber;
const int MoneyTransferRecord::kConfirmedTimeFieldNumber;
const int MoneyTransferRecord::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoneyTransferRecord::MoneyTransferRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MoneyTransferRecord)
}
MoneyTransferRecord::MoneyTransferRecord(const MoneyTransferRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.operator_id().size() > 0) {
    operator_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operator_id_);
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  bank_trade_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.bank_trade_id().size() > 0) {
    bank_trade_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bank_trade_id_);
  }
  payment_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.payment_path().size() > 0) {
    payment_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_path_);
  }
  identity_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.identity_number().size() > 0) {
    identity_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identity_number_);
  }
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.phone_number().size() > 0) {
    phone_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_number_);
  }
  bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.bank_name().size() > 0) {
    bank_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bank_name_);
  }
  bank_branch_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.bank_branch_name().size() > 0) {
    bank_branch_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bank_branch_name_);
  }
  bank_card_no_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.bank_card_no().size() > 0) {
    bank_card_no_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bank_card_no_);
  }
  province_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.province().size() > 0) {
    province_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.city().size() > 0) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  pay_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.pay_type().size() > 0) {
    pay_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pay_type_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&confirmed_time_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(confirmed_time_));
  // @@protoc_insertion_point(copy_constructor:pb.MoneyTransferRecord)
}

void MoneyTransferRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneyTransferRecord_common_2eproto.base);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_trade_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_branch_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_card_no_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  province_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pay_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confirmed_time_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(confirmed_time_));
}

MoneyTransferRecord::~MoneyTransferRecord() {
  // @@protoc_insertion_point(destructor:pb.MoneyTransferRecord)
  SharedDtor();
}

void MoneyTransferRecord::SharedDtor() {
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_trade_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_branch_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_card_no_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  province_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pay_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneyTransferRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneyTransferRecord& MoneyTransferRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneyTransferRecord_common_2eproto.base);
  return *internal_default_instance();
}


void MoneyTransferRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.MoneyTransferRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_trade_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_branch_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_card_no_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  province_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pay_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confirmed_time_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(confirmed_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoneyTransferRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currency_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          currency_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 settlement_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          settlement_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 confirmed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          confirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_prefered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_prefered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string account_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account_id(), ptr, ctx, "pb.MoneyTransferRecord.account_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_operator_id(), ptr, ctx, "pb.MoneyTransferRecord.operator_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "pb.MoneyTransferRecord.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_trade_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bank_trade_id(), ptr, ctx, "pb.MoneyTransferRecord.bank_trade_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 payment_config_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          payment_config_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double original_amount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          original_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fee = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string payment_path = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_payment_path(), ptr, ctx, "pb.MoneyTransferRecord.payment_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string identity_number = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_identity_number(), ptr, ctx, "pb.MoneyTransferRecord.identity_number");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_number = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_phone_number(), ptr, ctx, "pb.MoneyTransferRecord.phone_number");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_name = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bank_name(), ptr, ctx, "pb.MoneyTransferRecord.bank_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_branch_name = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bank_branch_name(), ptr, ctx, "pb.MoneyTransferRecord.bank_branch_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_card_no = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bank_card_no(), ptr, ctx, "pb.MoneyTransferRecord.bank_card_no");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string province = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_province(), ptr, ctx, "pb.MoneyTransferRecord.province");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_city(), ptr, ctx, "pb.MoneyTransferRecord.city");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pay_type = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_pay_type(), ptr, ctx, "pb.MoneyTransferRecord.pay_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 payed_time = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          payed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 confirmed_time = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          confirmed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "pb.MoneyTransferRecord.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoneyTransferRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MoneyTransferRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currency_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 settlement_group = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 confirmed = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_prefered = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_prefered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double amount = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operator_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->operator_id().data(), static_cast<int>(this->operator_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.operator_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 session_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_trade_id = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_trade_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bank_trade_id().data(), static_cast<int>(this->bank_trade_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.bank_trade_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 payment_config_id = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &payment_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double original_amount = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &original_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fee = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string payment_path = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_payment_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->payment_path().data(), static_cast<int>(this->payment_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.payment_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string identity_number = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_identity_number()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->identity_number().data(), static_cast<int>(this->identity_number().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.identity_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phone_number = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_number()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->phone_number().data(), static_cast<int>(this->phone_number().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.phone_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_name = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bank_name().data(), static_cast<int>(this->bank_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.bank_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_branch_name = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_branch_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bank_branch_name().data(), static_cast<int>(this->bank_branch_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.bank_branch_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_card_no = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_card_no()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bank_card_no().data(), static_cast<int>(this->bank_card_no().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.bank_card_no"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string province = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->province().data(), static_cast<int>(this->province().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.province"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string city = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->city().data(), static_cast<int>(this->city().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.city"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pay_type = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pay_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->pay_type().data(), static_cast<int>(this->pay_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.pay_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 payed_time = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &payed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 confirmed_time = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &confirmed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MoneyTransferRecord.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MoneyTransferRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MoneyTransferRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoneyTransferRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MoneyTransferRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uid = 1;
  if (this->uid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // int32 direction = 2;
  if (this->direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->direction(), output);
  }

  // int32 currency_type = 3;
  if (this->currency_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->currency_type(), output);
  }

  // int32 settlement_group = 4;
  if (this->settlement_group() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->settlement_group(), output);
  }

  // int32 confirmed = 5;
  if (this->confirmed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->confirmed(), output);
  }

  // int32 is_prefered = 6;
  if (this->is_prefered() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->is_prefered(), output);
  }

  // double amount = 7;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->amount(), output);
  }

  // string account_id = 8;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.account_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->account_id(), output);
  }

  // string operator_id = 9;
  if (this->operator_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->operator_id().data(), static_cast<int>(this->operator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.operator_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->operator_id(), output);
  }

  // int32 session_id = 10;
  if (this->session_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->session_id(), output);
  }

  // int64 time = 11;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->time(), output);
  }

  // string comment = 12;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->comment(), output);
  }

  // string bank_trade_id = 13;
  if (this->bank_trade_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bank_trade_id().data(), static_cast<int>(this->bank_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.bank_trade_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->bank_trade_id(), output);
  }

  // int64 payment_config_id = 14;
  if (this->payment_config_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->payment_config_id(), output);
  }

  // double original_amount = 15;
  if (!(this->original_amount() <= 0 && this->original_amount() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->original_amount(), output);
  }

  // double fee = 16;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->fee(), output);
  }

  // string payment_path = 17;
  if (this->payment_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->payment_path().data(), static_cast<int>(this->payment_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.payment_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->payment_path(), output);
  }

  // string identity_number = 18;
  if (this->identity_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->identity_number().data(), static_cast<int>(this->identity_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.identity_number");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->identity_number(), output);
  }

  // string phone_number = 19;
  if (this->phone_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->phone_number().data(), static_cast<int>(this->phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.phone_number");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->phone_number(), output);
  }

  // string bank_name = 20;
  if (this->bank_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bank_name().data(), static_cast<int>(this->bank_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.bank_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->bank_name(), output);
  }

  // string bank_branch_name = 21;
  if (this->bank_branch_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bank_branch_name().data(), static_cast<int>(this->bank_branch_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.bank_branch_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->bank_branch_name(), output);
  }

  // string bank_card_no = 22;
  if (this->bank_card_no().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bank_card_no().data(), static_cast<int>(this->bank_card_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.bank_card_no");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->bank_card_no(), output);
  }

  // string province = 23;
  if (this->province().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->province().data(), static_cast<int>(this->province().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.province");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->province(), output);
  }

  // string city = 24;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), static_cast<int>(this->city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.city");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->city(), output);
  }

  // string pay_type = 25;
  if (this->pay_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pay_type().data(), static_cast<int>(this->pay_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.pay_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->pay_type(), output);
  }

  // int64 payed_time = 26;
  if (this->payed_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(26, this->payed_time(), output);
  }

  // int64 confirmed_time = 27;
  if (this->confirmed_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(27, this->confirmed_time(), output);
  }

  // string name = 28;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MoneyTransferRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneyTransferRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MoneyTransferRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uid = 1;
  if (this->uid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // int32 direction = 2;
  if (this->direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->direction(), target);
  }

  // int32 currency_type = 3;
  if (this->currency_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->currency_type(), target);
  }

  // int32 settlement_group = 4;
  if (this->settlement_group() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->settlement_group(), target);
  }

  // int32 confirmed = 5;
  if (this->confirmed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->confirmed(), target);
  }

  // int32 is_prefered = 6;
  if (this->is_prefered() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->is_prefered(), target);
  }

  // double amount = 7;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->amount(), target);
  }

  // string account_id = 8;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.account_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->account_id(), target);
  }

  // string operator_id = 9;
  if (this->operator_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->operator_id().data(), static_cast<int>(this->operator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.operator_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->operator_id(), target);
  }

  // int32 session_id = 10;
  if (this->session_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->session_id(), target);
  }

  // int64 time = 11;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->time(), target);
  }

  // string comment = 12;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->comment(), target);
  }

  // string bank_trade_id = 13;
  if (this->bank_trade_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bank_trade_id().data(), static_cast<int>(this->bank_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.bank_trade_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->bank_trade_id(), target);
  }

  // int64 payment_config_id = 14;
  if (this->payment_config_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->payment_config_id(), target);
  }

  // double original_amount = 15;
  if (!(this->original_amount() <= 0 && this->original_amount() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->original_amount(), target);
  }

  // double fee = 16;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->fee(), target);
  }

  // string payment_path = 17;
  if (this->payment_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->payment_path().data(), static_cast<int>(this->payment_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.payment_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->payment_path(), target);
  }

  // string identity_number = 18;
  if (this->identity_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->identity_number().data(), static_cast<int>(this->identity_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.identity_number");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        18, this->identity_number(), target);
  }

  // string phone_number = 19;
  if (this->phone_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->phone_number().data(), static_cast<int>(this->phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.phone_number");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        19, this->phone_number(), target);
  }

  // string bank_name = 20;
  if (this->bank_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bank_name().data(), static_cast<int>(this->bank_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.bank_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        20, this->bank_name(), target);
  }

  // string bank_branch_name = 21;
  if (this->bank_branch_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bank_branch_name().data(), static_cast<int>(this->bank_branch_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.bank_branch_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        21, this->bank_branch_name(), target);
  }

  // string bank_card_no = 22;
  if (this->bank_card_no().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bank_card_no().data(), static_cast<int>(this->bank_card_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.bank_card_no");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        22, this->bank_card_no(), target);
  }

  // string province = 23;
  if (this->province().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->province().data(), static_cast<int>(this->province().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.province");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        23, this->province(), target);
  }

  // string city = 24;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), static_cast<int>(this->city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.city");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        24, this->city(), target);
  }

  // string pay_type = 25;
  if (this->pay_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pay_type().data(), static_cast<int>(this->pay_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.pay_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        25, this->pay_type(), target);
  }

  // int64 payed_time = 26;
  if (this->payed_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->payed_time(), target);
  }

  // int64 confirmed_time = 27;
  if (this->confirmed_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->confirmed_time(), target);
  }

  // string name = 28;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MoneyTransferRecord.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        28, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MoneyTransferRecord)
  return target;
}

size_t MoneyTransferRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.MoneyTransferRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 8;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string operator_id = 9;
  if (this->operator_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->operator_id());
  }

  // string comment = 12;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // string bank_trade_id = 13;
  if (this->bank_trade_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bank_trade_id());
  }

  // string payment_path = 17;
  if (this->payment_path().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->payment_path());
  }

  // string identity_number = 18;
  if (this->identity_number().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->identity_number());
  }

  // string phone_number = 19;
  if (this->phone_number().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->phone_number());
  }

  // string bank_name = 20;
  if (this->bank_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bank_name());
  }

  // string bank_branch_name = 21;
  if (this->bank_branch_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bank_branch_name());
  }

  // string bank_card_no = 22;
  if (this->bank_card_no().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bank_card_no());
  }

  // string province = 23;
  if (this->province().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->province());
  }

  // string city = 24;
  if (this->city().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->city());
  }

  // string pay_type = 25;
  if (this->pay_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->pay_type());
  }

  // string name = 28;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  // int32 direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  // int32 currency_type = 3;
  if (this->currency_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->currency_type());
  }

  // int32 settlement_group = 4;
  if (this->settlement_group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->settlement_group());
  }

  // int32 confirmed = 5;
  if (this->confirmed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->confirmed());
  }

  // double amount = 7;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 is_prefered = 6;
  if (this->is_prefered() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->is_prefered());
  }

  // int32 session_id = 10;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->session_id());
  }

  // int64 time = 11;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // int64 payment_config_id = 14;
  if (this->payment_config_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->payment_config_id());
  }

  // double original_amount = 15;
  if (!(this->original_amount() <= 0 && this->original_amount() >= 0)) {
    total_size += 1 + 8;
  }

  // double fee = 16;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 payed_time = 26;
  if (this->payed_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->payed_time());
  }

  // int64 confirmed_time = 27;
  if (this->confirmed_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->confirmed_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneyTransferRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.MoneyTransferRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneyTransferRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneyTransferRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.MoneyTransferRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.MoneyTransferRecord)
    MergeFrom(*source);
  }
}

void MoneyTransferRecord::MergeFrom(const MoneyTransferRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.MoneyTransferRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.operator_id().size() > 0) {

    operator_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operator_id_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.bank_trade_id().size() > 0) {

    bank_trade_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bank_trade_id_);
  }
  if (from.payment_path().size() > 0) {

    payment_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_path_);
  }
  if (from.identity_number().size() > 0) {

    identity_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identity_number_);
  }
  if (from.phone_number().size() > 0) {

    phone_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_number_);
  }
  if (from.bank_name().size() > 0) {

    bank_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bank_name_);
  }
  if (from.bank_branch_name().size() > 0) {

    bank_branch_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bank_branch_name_);
  }
  if (from.bank_card_no().size() > 0) {

    bank_card_no_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bank_card_no_);
  }
  if (from.province().size() > 0) {

    province_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.pay_type().size() > 0) {

    pay_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pay_type_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.settlement_group() != 0) {
    set_settlement_group(from.settlement_group());
  }
  if (from.confirmed() != 0) {
    set_confirmed(from.confirmed());
  }
  if (!(from.amount() <= 0 && from.amount() >= 0)) {
    set_amount(from.amount());
  }
  if (from.is_prefered() != 0) {
    set_is_prefered(from.is_prefered());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.payment_config_id() != 0) {
    set_payment_config_id(from.payment_config_id());
  }
  if (!(from.original_amount() <= 0 && from.original_amount() >= 0)) {
    set_original_amount(from.original_amount());
  }
  if (!(from.fee() <= 0 && from.fee() >= 0)) {
    set_fee(from.fee());
  }
  if (from.payed_time() != 0) {
    set_payed_time(from.payed_time());
  }
  if (from.confirmed_time() != 0) {
    set_confirmed_time(from.confirmed_time());
  }
}

void MoneyTransferRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.MoneyTransferRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyTransferRecord::CopyFrom(const MoneyTransferRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.MoneyTransferRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyTransferRecord::IsInitialized() const {
  return true;
}

void MoneyTransferRecord::Swap(MoneyTransferRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoneyTransferRecord::InternalSwap(MoneyTransferRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  operator_id_.Swap(&other->operator_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_trade_id_.Swap(&other->bank_trade_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_path_.Swap(&other->payment_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  identity_number_.Swap(&other->identity_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_number_.Swap(&other->phone_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_name_.Swap(&other->bank_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_branch_name_.Swap(&other->bank_branch_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_card_no_.Swap(&other->bank_card_no_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  province_.Swap(&other->province_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pay_type_.Swap(&other->pay_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(direction_, other->direction_);
  swap(currency_type_, other->currency_type_);
  swap(settlement_group_, other->settlement_group_);
  swap(confirmed_, other->confirmed_);
  swap(amount_, other->amount_);
  swap(is_prefered_, other->is_prefered_);
  swap(session_id_, other->session_id_);
  swap(time_, other->time_);
  swap(payment_config_id_, other->payment_config_id_);
  swap(original_amount_, other->original_amount_);
  swap(fee_, other->fee_);
  swap(payed_time_, other->payed_time_);
  swap(confirmed_time_, other->confirmed_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneyTransferRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MTRList::InitAsDefaultInstance() {
}
class MTRList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MTRList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MTRList::MTRList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MTRList)
}
MTRList::MTRList(const MTRList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.MTRList)
}

void MTRList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MTRList_common_2eproto.base);
}

MTRList::~MTRList() {
  // @@protoc_insertion_point(destructor:pb.MTRList)
  SharedDtor();
}

void MTRList::SharedDtor() {
}

void MTRList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MTRList& MTRList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MTRList_common_2eproto.base);
  return *internal_default_instance();
}


void MTRList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.MTRList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MTRList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.MoneyTransferRecord list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MTRList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MTRList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.MoneyTransferRecord list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MTRList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MTRList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MTRList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MTRList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.MoneyTransferRecord list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MTRList)
}

::PROTOBUF_NAMESPACE_ID::uint8* MTRList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MTRList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.MoneyTransferRecord list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MTRList)
  return target;
}

size_t MTRList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.MTRList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.MoneyTransferRecord list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MTRList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.MTRList)
  GOOGLE_DCHECK_NE(&from, this);
  const MTRList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MTRList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.MTRList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.MTRList)
    MergeFrom(*source);
  }
}

void MTRList::MergeFrom(const MTRList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.MTRList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void MTRList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.MTRList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTRList::CopyFrom(const MTRList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.MTRList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTRList::IsInitialized() const {
  return true;
}

void MTRList::Swap(MTRList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MTRList::InternalSwap(MTRList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MTRList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSEStockOption::InitAsDefaultInstance() {
}
class SSEStockOption::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSEStockOption::kExercisePriceFieldNumber;
const int SSEStockOption::kUpdateVersionFieldNumber;
const int SSEStockOption::kOptionTypeFieldNumber;
const int SSEStockOption::kDailyPriceUpLimitFieldNumber;
const int SSEStockOption::kTimeSaveFieldNumber;
const int SSEStockOption::kDELISTFlagFieldNumber;
const int SSEStockOption::kStartDateFieldNumber;
const int SSEStockOption::kExpireDateFieldNumber;
const int SSEStockOption::kContractUnitFieldNumber;
const int SSEStockOption::kCallOrPutFieldNumber;
const int SSEStockOption::kLmtOrdMaxFloorFieldNumber;
const int SSEStockOption::kDeliveryDateFieldNumber;
const int SSEStockOption::kChangeFlagFieldNumber;
const int SSEStockOption::kMktOrdMaxFloorFieldNumber;
const int SSEStockOption::kUnderlyingTypeFieldNumber;
const int SSEStockOption::kDailyPriceDownLimitFieldNumber;
const int SSEStockOption::kRoundLotFieldNumber;
const int SSEStockOption::kSecurityClosePXFieldNumber;
const int SSEStockOption::kSettlPriceFieldNumber;
const int SSEStockOption::kContractSymbolFieldNumber;
const int SSEStockOption::kNumFieldNumber;
const int SSEStockOption::kContractIDFieldNumber;
const int SSEStockOption::kMarginRatioParam1FieldNumber;
const int SSEStockOption::kMarginRatioParam2FieldNumber;
const int SSEStockOption::kLmtOrdMinFloorFieldNumber;
const int SSEStockOption::kMktOrdMinFloorFieldNumber;
const int SSEStockOption::kEndDateFieldNumber;
const int SSEStockOption::kPriceLimitTypeFieldNumber;
const int SSEStockOption::kExerciseDateFieldNumber;
const int SSEStockOption::kMarginUnitFieldNumber;
const int SSEStockOption::kSecurityIDFieldNumber;
const int SSEStockOption::kSecurityNameByIDFieldNumber;
const int SSEStockOption::kContractFlagFieldNumber;
const int SSEStockOption::kUnderlyingClosePXFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSEStockOption::SSEStockOption()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SSEStockOption)
}
SSEStockOption::SSEStockOption(const SSEStockOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exercise_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exercise_price().size() > 0) {
    exercise_price_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exercise_price_);
  }
  update_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.update_version().size() > 0) {
    update_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.update_version_);
  }
  option_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.option_type().size() > 0) {
    option_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.option_type_);
  }
  daily_price_up_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.daily_price_up_limit().size() > 0) {
    daily_price_up_limit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.daily_price_up_limit_);
  }
  time_save_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.time_save().size() > 0) {
    time_save_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_save_);
  }
  delist_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.delist_flag().size() > 0) {
    delist_flag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delist_flag_);
  }
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.start_date().size() > 0) {
    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.expire_date().size() > 0) {
    expire_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expire_date_);
  }
  contract_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.contract_unit().size() > 0) {
    contract_unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contract_unit_);
  }
  call_or_put_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.call_or_put().size() > 0) {
    call_or_put_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.call_or_put_);
  }
  lmt_ord_max_floor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.lmt_ord_max_floor().size() > 0) {
    lmt_ord_max_floor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lmt_ord_max_floor_);
  }
  delivery_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.delivery_date().size() > 0) {
    delivery_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delivery_date_);
  }
  change_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.change_flag().size() > 0) {
    change_flag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.change_flag_);
  }
  mkt_ord_max_floor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.mkt_ord_max_floor().size() > 0) {
    mkt_ord_max_floor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mkt_ord_max_floor_);
  }
  underlying_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.underlying_type().size() > 0) {
    underlying_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.underlying_type_);
  }
  daily_price_down_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.daily_price_down_limit().size() > 0) {
    daily_price_down_limit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.daily_price_down_limit_);
  }
  round_lot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.round_lot().size() > 0) {
    round_lot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.round_lot_);
  }
  security_closepx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.security_closepx().size() > 0) {
    security_closepx_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_closepx_);
  }
  settl_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.settl_price().size() > 0) {
    settl_price_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.settl_price_);
  }
  contract_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.contract_symbol().size() > 0) {
    contract_symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contract_symbol_);
  }
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.num().size() > 0) {
    num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.num_);
  }
  contractid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.contractid().size() > 0) {
    contractid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contractid_);
  }
  margin_ratio_param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.margin_ratio_param1().size() > 0) {
    margin_ratio_param1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.margin_ratio_param1_);
  }
  margin_ratio_param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.margin_ratio_param2().size() > 0) {
    margin_ratio_param2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.margin_ratio_param2_);
  }
  lmt_ord_min_floor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.lmt_ord_min_floor().size() > 0) {
    lmt_ord_min_floor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lmt_ord_min_floor_);
  }
  mkt_ord_min_floor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.mkt_ord_min_floor().size() > 0) {
    mkt_ord_min_floor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mkt_ord_min_floor_);
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.end_date().size() > 0) {
    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  price_limit_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.price_limit_type().size() > 0) {
    price_limit_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.price_limit_type_);
  }
  exercise_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exercise_date().size() > 0) {
    exercise_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exercise_date_);
  }
  margin_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.margin_unit().size() > 0) {
    margin_unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.margin_unit_);
  }
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.securityid().size() > 0) {
    securityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securityid_);
  }
  security_name_byid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.security_name_byid().size() > 0) {
    security_name_byid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_name_byid_);
  }
  contract_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.contract_flag().size() > 0) {
    contract_flag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contract_flag_);
  }
  underlying_closepx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.underlying_closepx().size() > 0) {
    underlying_closepx_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.underlying_closepx_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.SSEStockOption)
}

void SSEStockOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSEStockOption_common_2eproto.base);
  exercise_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  option_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daily_price_up_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_save_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delist_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_or_put_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmt_ord_max_floor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delivery_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mkt_ord_max_floor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlying_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daily_price_down_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  round_lot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_closepx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settl_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_ratio_param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_ratio_param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmt_ord_min_floor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mkt_ord_min_floor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_limit_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exercise_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_name_byid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlying_closepx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SSEStockOption::~SSEStockOption() {
  // @@protoc_insertion_point(destructor:pb.SSEStockOption)
  SharedDtor();
}

void SSEStockOption::SharedDtor() {
  exercise_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  option_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daily_price_up_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_save_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delist_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_or_put_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmt_ord_max_floor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delivery_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mkt_ord_max_floor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlying_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daily_price_down_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  round_lot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_closepx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settl_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_ratio_param1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_ratio_param2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmt_ord_min_floor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mkt_ord_min_floor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_limit_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exercise_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_name_byid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlying_closepx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSEStockOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSEStockOption& SSEStockOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSEStockOption_common_2eproto.base);
  return *internal_default_instance();
}


void SSEStockOption::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SSEStockOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exercise_price_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  option_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daily_price_up_limit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_save_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delist_flag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_or_put_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmt_ord_max_floor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delivery_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  change_flag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mkt_ord_max_floor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlying_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daily_price_down_limit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  round_lot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_closepx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settl_price_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_ratio_param1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_ratio_param2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmt_ord_min_floor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mkt_ord_min_floor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_limit_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exercise_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_name_byid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_flag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlying_closepx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SSEStockOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string exercise_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exercise_price(), ptr, ctx, "pb.SSEStockOption.exercise_price");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string update_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_update_version(), ptr, ctx, "pb.SSEStockOption.update_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string option_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_option_type(), ptr, ctx, "pb.SSEStockOption.option_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string daily_price_up_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_daily_price_up_limit(), ptr, ctx, "pb.SSEStockOption.daily_price_up_limit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time_save = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_time_save(), ptr, ctx, "pb.SSEStockOption.time_save");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DELIST_Flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_delist_flag(), ptr, ctx, "pb.SSEStockOption.DELIST_Flag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string start_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_start_date(), ptr, ctx, "pb.SSEStockOption.start_date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expire_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_expire_date(), ptr, ctx, "pb.SSEStockOption.expire_date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_unit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_contract_unit(), ptr, ctx, "pb.SSEStockOption.contract_unit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string call_or_put = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_call_or_put(), ptr, ctx, "pb.SSEStockOption.call_or_put");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lmt_ord_max_floor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_lmt_ord_max_floor(), ptr, ctx, "pb.SSEStockOption.lmt_ord_max_floor");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delivery_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_delivery_date(), ptr, ctx, "pb.SSEStockOption.delivery_date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string change_flag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_change_flag(), ptr, ctx, "pb.SSEStockOption.change_flag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mkt_ord_max_floor = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_mkt_ord_max_floor(), ptr, ctx, "pb.SSEStockOption.mkt_ord_max_floor");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string underlying_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_underlying_type(), ptr, ctx, "pb.SSEStockOption.underlying_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string daily_price_down_limit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_daily_price_down_limit(), ptr, ctx, "pb.SSEStockOption.daily_price_down_limit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string round_lot = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_round_lot(), ptr, ctx, "pb.SSEStockOption.round_lot");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string security_closePX = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_security_closepx(), ptr, ctx, "pb.SSEStockOption.security_closePX");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string settl_price = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_settl_price(), ptr, ctx, "pb.SSEStockOption.settl_price");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_symbol = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_contract_symbol(), ptr, ctx, "pb.SSEStockOption.contract_symbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string num = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_num(), ptr, ctx, "pb.SSEStockOption.num");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contractID = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_contractid(), ptr, ctx, "pb.SSEStockOption.contractID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string margin_ratio_param1 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_margin_ratio_param1(), ptr, ctx, "pb.SSEStockOption.margin_ratio_param1");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string margin_ratio_param2 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_margin_ratio_param2(), ptr, ctx, "pb.SSEStockOption.margin_ratio_param2");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lmt_ord_min_floor = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_lmt_ord_min_floor(), ptr, ctx, "pb.SSEStockOption.lmt_ord_min_floor");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mkt_ord_min_floor = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_mkt_ord_min_floor(), ptr, ctx, "pb.SSEStockOption.mkt_ord_min_floor");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_end_date(), ptr, ctx, "pb.SSEStockOption.end_date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string price_limit_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_price_limit_type(), ptr, ctx, "pb.SSEStockOption.price_limit_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exercise_date = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exercise_date(), ptr, ctx, "pb.SSEStockOption.exercise_date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string margin_unit = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_margin_unit(), ptr, ctx, "pb.SSEStockOption.margin_unit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string securityID = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_securityid(), ptr, ctx, "pb.SSEStockOption.securityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string security_name_byID = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_security_name_byid(), ptr, ctx, "pb.SSEStockOption.security_name_byID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_flag = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_contract_flag(), ptr, ctx, "pb.SSEStockOption.contract_flag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string underlying_closePX = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_underlying_closepx(), ptr, ctx, "pb.SSEStockOption.underlying_closePX");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SSEStockOption::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SSEStockOption)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string exercise_price = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exercise_price()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exercise_price().data(), static_cast<int>(this->exercise_price().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.exercise_price"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_update_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->update_version().data(), static_cast<int>(this->update_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.update_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string option_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_option_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->option_type().data(), static_cast<int>(this->option_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.option_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string daily_price_up_limit = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_daily_price_up_limit()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->daily_price_up_limit().data(), static_cast<int>(this->daily_price_up_limit().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.daily_price_up_limit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string time_save = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_time_save()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->time_save().data(), static_cast<int>(this->time_save().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.time_save"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DELIST_Flag = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_delist_flag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->delist_flag().data(), static_cast<int>(this->delist_flag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.DELIST_Flag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_date = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->start_date().data(), static_cast<int>(this->start_date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.start_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expire_date = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_expire_date()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->expire_date().data(), static_cast<int>(this->expire_date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.expire_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string contract_unit = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_unit()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->contract_unit().data(), static_cast<int>(this->contract_unit().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.contract_unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string call_or_put = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_call_or_put()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->call_or_put().data(), static_cast<int>(this->call_or_put().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.call_or_put"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lmt_ord_max_floor = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_lmt_ord_max_floor()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->lmt_ord_max_floor().data(), static_cast<int>(this->lmt_ord_max_floor().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.lmt_ord_max_floor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string delivery_date = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_delivery_date()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->delivery_date().data(), static_cast<int>(this->delivery_date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.delivery_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string change_flag = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_change_flag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->change_flag().data(), static_cast<int>(this->change_flag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.change_flag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mkt_ord_max_floor = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mkt_ord_max_floor()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->mkt_ord_max_floor().data(), static_cast<int>(this->mkt_ord_max_floor().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.mkt_ord_max_floor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string underlying_type = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->underlying_type().data(), static_cast<int>(this->underlying_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.underlying_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string daily_price_down_limit = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_daily_price_down_limit()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->daily_price_down_limit().data(), static_cast<int>(this->daily_price_down_limit().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.daily_price_down_limit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string round_lot = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_round_lot()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->round_lot().data(), static_cast<int>(this->round_lot().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.round_lot"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string security_closePX = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_security_closepx()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->security_closepx().data(), static_cast<int>(this->security_closepx().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.security_closePX"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string settl_price = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_settl_price()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->settl_price().data(), static_cast<int>(this->settl_price().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.settl_price"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string contract_symbol = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_symbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->contract_symbol().data(), static_cast<int>(this->contract_symbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.contract_symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string num = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_num()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->num().data(), static_cast<int>(this->num().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.num"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string contractID = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_contractid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->contractid().data(), static_cast<int>(this->contractid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.contractID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string margin_ratio_param1 = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_margin_ratio_param1()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->margin_ratio_param1().data(), static_cast<int>(this->margin_ratio_param1().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.margin_ratio_param1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string margin_ratio_param2 = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_margin_ratio_param2()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->margin_ratio_param2().data(), static_cast<int>(this->margin_ratio_param2().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.margin_ratio_param2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lmt_ord_min_floor = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_lmt_ord_min_floor()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->lmt_ord_min_floor().data(), static_cast<int>(this->lmt_ord_min_floor().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.lmt_ord_min_floor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mkt_ord_min_floor = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mkt_ord_min_floor()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->mkt_ord_min_floor().data(), static_cast<int>(this->mkt_ord_min_floor().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.mkt_ord_min_floor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end_date = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_end_date()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->end_date().data(), static_cast<int>(this->end_date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.end_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string price_limit_type = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_price_limit_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->price_limit_type().data(), static_cast<int>(this->price_limit_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.price_limit_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exercise_date = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exercise_date()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exercise_date().data(), static_cast<int>(this->exercise_date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.exercise_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string margin_unit = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_margin_unit()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->margin_unit().data(), static_cast<int>(this->margin_unit().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.margin_unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string securityID = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_securityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->securityid().data(), static_cast<int>(this->securityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.securityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string security_name_byID = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_security_name_byid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->security_name_byid().data(), static_cast<int>(this->security_name_byid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.security_name_byID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string contract_flag = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_flag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->contract_flag().data(), static_cast<int>(this->contract_flag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.contract_flag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string underlying_closePX = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_closepx()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->underlying_closepx().data(), static_cast<int>(this->underlying_closepx().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SSEStockOption.underlying_closePX"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SSEStockOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SSEStockOption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SSEStockOption::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SSEStockOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exercise_price = 1;
  if (this->exercise_price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_price().data(), static_cast<int>(this->exercise_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.exercise_price");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exercise_price(), output);
  }

  // string update_version = 2;
  if (this->update_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->update_version().data(), static_cast<int>(this->update_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.update_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->update_version(), output);
  }

  // string option_type = 3;
  if (this->option_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->option_type().data(), static_cast<int>(this->option_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.option_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->option_type(), output);
  }

  // string daily_price_up_limit = 4;
  if (this->daily_price_up_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->daily_price_up_limit().data(), static_cast<int>(this->daily_price_up_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.daily_price_up_limit");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->daily_price_up_limit(), output);
  }

  // string time_save = 5;
  if (this->time_save().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->time_save().data(), static_cast<int>(this->time_save().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.time_save");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->time_save(), output);
  }

  // string DELIST_Flag = 6;
  if (this->delist_flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->delist_flag().data(), static_cast<int>(this->delist_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.DELIST_Flag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->delist_flag(), output);
  }

  // string start_date = 7;
  if (this->start_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->start_date().data(), static_cast<int>(this->start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.start_date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->start_date(), output);
  }

  // string expire_date = 8;
  if (this->expire_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->expire_date().data(), static_cast<int>(this->expire_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.expire_date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->expire_date(), output);
  }

  // string contract_unit = 9;
  if (this->contract_unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->contract_unit().data(), static_cast<int>(this->contract_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.contract_unit");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->contract_unit(), output);
  }

  // string call_or_put = 10;
  if (this->call_or_put().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->call_or_put().data(), static_cast<int>(this->call_or_put().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.call_or_put");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->call_or_put(), output);
  }

  // string lmt_ord_max_floor = 11;
  if (this->lmt_ord_max_floor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lmt_ord_max_floor().data(), static_cast<int>(this->lmt_ord_max_floor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.lmt_ord_max_floor");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->lmt_ord_max_floor(), output);
  }

  // string delivery_date = 12;
  if (this->delivery_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->delivery_date().data(), static_cast<int>(this->delivery_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.delivery_date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->delivery_date(), output);
  }

  // string change_flag = 13;
  if (this->change_flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->change_flag().data(), static_cast<int>(this->change_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.change_flag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->change_flag(), output);
  }

  // string mkt_ord_max_floor = 14;
  if (this->mkt_ord_max_floor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->mkt_ord_max_floor().data(), static_cast<int>(this->mkt_ord_max_floor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.mkt_ord_max_floor");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->mkt_ord_max_floor(), output);
  }

  // string underlying_type = 15;
  if (this->underlying_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->underlying_type().data(), static_cast<int>(this->underlying_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.underlying_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->underlying_type(), output);
  }

  // string daily_price_down_limit = 16;
  if (this->daily_price_down_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->daily_price_down_limit().data(), static_cast<int>(this->daily_price_down_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.daily_price_down_limit");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->daily_price_down_limit(), output);
  }

  // string round_lot = 17;
  if (this->round_lot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->round_lot().data(), static_cast<int>(this->round_lot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.round_lot");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->round_lot(), output);
  }

  // string security_closePX = 18;
  if (this->security_closepx().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->security_closepx().data(), static_cast<int>(this->security_closepx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.security_closePX");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->security_closepx(), output);
  }

  // string settl_price = 19;
  if (this->settl_price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->settl_price().data(), static_cast<int>(this->settl_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.settl_price");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->settl_price(), output);
  }

  // string contract_symbol = 20;
  if (this->contract_symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->contract_symbol().data(), static_cast<int>(this->contract_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.contract_symbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->contract_symbol(), output);
  }

  // string num = 21;
  if (this->num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->num().data(), static_cast<int>(this->num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.num");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->num(), output);
  }

  // string contractID = 22;
  if (this->contractid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->contractid().data(), static_cast<int>(this->contractid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.contractID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->contractid(), output);
  }

  // string margin_ratio_param1 = 23;
  if (this->margin_ratio_param1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->margin_ratio_param1().data(), static_cast<int>(this->margin_ratio_param1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.margin_ratio_param1");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->margin_ratio_param1(), output);
  }

  // string margin_ratio_param2 = 24;
  if (this->margin_ratio_param2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->margin_ratio_param2().data(), static_cast<int>(this->margin_ratio_param2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.margin_ratio_param2");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->margin_ratio_param2(), output);
  }

  // string lmt_ord_min_floor = 25;
  if (this->lmt_ord_min_floor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lmt_ord_min_floor().data(), static_cast<int>(this->lmt_ord_min_floor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.lmt_ord_min_floor");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->lmt_ord_min_floor(), output);
  }

  // string mkt_ord_min_floor = 26;
  if (this->mkt_ord_min_floor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->mkt_ord_min_floor().data(), static_cast<int>(this->mkt_ord_min_floor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.mkt_ord_min_floor");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->mkt_ord_min_floor(), output);
  }

  // string end_date = 27;
  if (this->end_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->end_date().data(), static_cast<int>(this->end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.end_date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->end_date(), output);
  }

  // string price_limit_type = 28;
  if (this->price_limit_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->price_limit_type().data(), static_cast<int>(this->price_limit_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.price_limit_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->price_limit_type(), output);
  }

  // string exercise_date = 29;
  if (this->exercise_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_date().data(), static_cast<int>(this->exercise_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.exercise_date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->exercise_date(), output);
  }

  // string margin_unit = 30;
  if (this->margin_unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->margin_unit().data(), static_cast<int>(this->margin_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.margin_unit");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->margin_unit(), output);
  }

  // string securityID = 31;
  if (this->securityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securityid().data(), static_cast<int>(this->securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.securityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->securityid(), output);
  }

  // string security_name_byID = 32;
  if (this->security_name_byid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->security_name_byid().data(), static_cast<int>(this->security_name_byid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.security_name_byID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->security_name_byid(), output);
  }

  // string contract_flag = 33;
  if (this->contract_flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->contract_flag().data(), static_cast<int>(this->contract_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.contract_flag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->contract_flag(), output);
  }

  // string underlying_closePX = 34;
  if (this->underlying_closepx().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->underlying_closepx().data(), static_cast<int>(this->underlying_closepx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.underlying_closePX");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->underlying_closepx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SSEStockOption)
}

::PROTOBUF_NAMESPACE_ID::uint8* SSEStockOption::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SSEStockOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exercise_price = 1;
  if (this->exercise_price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_price().data(), static_cast<int>(this->exercise_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.exercise_price");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->exercise_price(), target);
  }

  // string update_version = 2;
  if (this->update_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->update_version().data(), static_cast<int>(this->update_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.update_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->update_version(), target);
  }

  // string option_type = 3;
  if (this->option_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->option_type().data(), static_cast<int>(this->option_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.option_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->option_type(), target);
  }

  // string daily_price_up_limit = 4;
  if (this->daily_price_up_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->daily_price_up_limit().data(), static_cast<int>(this->daily_price_up_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.daily_price_up_limit");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->daily_price_up_limit(), target);
  }

  // string time_save = 5;
  if (this->time_save().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->time_save().data(), static_cast<int>(this->time_save().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.time_save");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->time_save(), target);
  }

  // string DELIST_Flag = 6;
  if (this->delist_flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->delist_flag().data(), static_cast<int>(this->delist_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.DELIST_Flag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->delist_flag(), target);
  }

  // string start_date = 7;
  if (this->start_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->start_date().data(), static_cast<int>(this->start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.start_date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->start_date(), target);
  }

  // string expire_date = 8;
  if (this->expire_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->expire_date().data(), static_cast<int>(this->expire_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.expire_date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->expire_date(), target);
  }

  // string contract_unit = 9;
  if (this->contract_unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->contract_unit().data(), static_cast<int>(this->contract_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.contract_unit");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->contract_unit(), target);
  }

  // string call_or_put = 10;
  if (this->call_or_put().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->call_or_put().data(), static_cast<int>(this->call_or_put().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.call_or_put");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->call_or_put(), target);
  }

  // string lmt_ord_max_floor = 11;
  if (this->lmt_ord_max_floor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lmt_ord_max_floor().data(), static_cast<int>(this->lmt_ord_max_floor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.lmt_ord_max_floor");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->lmt_ord_max_floor(), target);
  }

  // string delivery_date = 12;
  if (this->delivery_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->delivery_date().data(), static_cast<int>(this->delivery_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.delivery_date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->delivery_date(), target);
  }

  // string change_flag = 13;
  if (this->change_flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->change_flag().data(), static_cast<int>(this->change_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.change_flag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->change_flag(), target);
  }

  // string mkt_ord_max_floor = 14;
  if (this->mkt_ord_max_floor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->mkt_ord_max_floor().data(), static_cast<int>(this->mkt_ord_max_floor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.mkt_ord_max_floor");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->mkt_ord_max_floor(), target);
  }

  // string underlying_type = 15;
  if (this->underlying_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->underlying_type().data(), static_cast<int>(this->underlying_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.underlying_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->underlying_type(), target);
  }

  // string daily_price_down_limit = 16;
  if (this->daily_price_down_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->daily_price_down_limit().data(), static_cast<int>(this->daily_price_down_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.daily_price_down_limit");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->daily_price_down_limit(), target);
  }

  // string round_lot = 17;
  if (this->round_lot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->round_lot().data(), static_cast<int>(this->round_lot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.round_lot");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->round_lot(), target);
  }

  // string security_closePX = 18;
  if (this->security_closepx().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->security_closepx().data(), static_cast<int>(this->security_closepx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.security_closePX");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        18, this->security_closepx(), target);
  }

  // string settl_price = 19;
  if (this->settl_price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->settl_price().data(), static_cast<int>(this->settl_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.settl_price");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        19, this->settl_price(), target);
  }

  // string contract_symbol = 20;
  if (this->contract_symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->contract_symbol().data(), static_cast<int>(this->contract_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.contract_symbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        20, this->contract_symbol(), target);
  }

  // string num = 21;
  if (this->num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->num().data(), static_cast<int>(this->num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.num");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        21, this->num(), target);
  }

  // string contractID = 22;
  if (this->contractid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->contractid().data(), static_cast<int>(this->contractid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.contractID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        22, this->contractid(), target);
  }

  // string margin_ratio_param1 = 23;
  if (this->margin_ratio_param1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->margin_ratio_param1().data(), static_cast<int>(this->margin_ratio_param1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.margin_ratio_param1");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        23, this->margin_ratio_param1(), target);
  }

  // string margin_ratio_param2 = 24;
  if (this->margin_ratio_param2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->margin_ratio_param2().data(), static_cast<int>(this->margin_ratio_param2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.margin_ratio_param2");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        24, this->margin_ratio_param2(), target);
  }

  // string lmt_ord_min_floor = 25;
  if (this->lmt_ord_min_floor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lmt_ord_min_floor().data(), static_cast<int>(this->lmt_ord_min_floor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.lmt_ord_min_floor");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        25, this->lmt_ord_min_floor(), target);
  }

  // string mkt_ord_min_floor = 26;
  if (this->mkt_ord_min_floor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->mkt_ord_min_floor().data(), static_cast<int>(this->mkt_ord_min_floor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.mkt_ord_min_floor");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        26, this->mkt_ord_min_floor(), target);
  }

  // string end_date = 27;
  if (this->end_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->end_date().data(), static_cast<int>(this->end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.end_date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        27, this->end_date(), target);
  }

  // string price_limit_type = 28;
  if (this->price_limit_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->price_limit_type().data(), static_cast<int>(this->price_limit_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.price_limit_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        28, this->price_limit_type(), target);
  }

  // string exercise_date = 29;
  if (this->exercise_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_date().data(), static_cast<int>(this->exercise_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.exercise_date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        29, this->exercise_date(), target);
  }

  // string margin_unit = 30;
  if (this->margin_unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->margin_unit().data(), static_cast<int>(this->margin_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.margin_unit");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        30, this->margin_unit(), target);
  }

  // string securityID = 31;
  if (this->securityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securityid().data(), static_cast<int>(this->securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.securityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        31, this->securityid(), target);
  }

  // string security_name_byID = 32;
  if (this->security_name_byid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->security_name_byid().data(), static_cast<int>(this->security_name_byid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.security_name_byID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        32, this->security_name_byid(), target);
  }

  // string contract_flag = 33;
  if (this->contract_flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->contract_flag().data(), static_cast<int>(this->contract_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.contract_flag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        33, this->contract_flag(), target);
  }

  // string underlying_closePX = 34;
  if (this->underlying_closepx().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->underlying_closepx().data(), static_cast<int>(this->underlying_closepx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSEStockOption.underlying_closePX");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        34, this->underlying_closepx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SSEStockOption)
  return target;
}

size_t SSEStockOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SSEStockOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exercise_price = 1;
  if (this->exercise_price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exercise_price());
  }

  // string update_version = 2;
  if (this->update_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->update_version());
  }

  // string option_type = 3;
  if (this->option_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->option_type());
  }

  // string daily_price_up_limit = 4;
  if (this->daily_price_up_limit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->daily_price_up_limit());
  }

  // string time_save = 5;
  if (this->time_save().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->time_save());
  }

  // string DELIST_Flag = 6;
  if (this->delist_flag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->delist_flag());
  }

  // string start_date = 7;
  if (this->start_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->start_date());
  }

  // string expire_date = 8;
  if (this->expire_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->expire_date());
  }

  // string contract_unit = 9;
  if (this->contract_unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->contract_unit());
  }

  // string call_or_put = 10;
  if (this->call_or_put().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->call_or_put());
  }

  // string lmt_ord_max_floor = 11;
  if (this->lmt_ord_max_floor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->lmt_ord_max_floor());
  }

  // string delivery_date = 12;
  if (this->delivery_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->delivery_date());
  }

  // string change_flag = 13;
  if (this->change_flag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->change_flag());
  }

  // string mkt_ord_max_floor = 14;
  if (this->mkt_ord_max_floor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->mkt_ord_max_floor());
  }

  // string underlying_type = 15;
  if (this->underlying_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->underlying_type());
  }

  // string daily_price_down_limit = 16;
  if (this->daily_price_down_limit().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->daily_price_down_limit());
  }

  // string round_lot = 17;
  if (this->round_lot().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->round_lot());
  }

  // string security_closePX = 18;
  if (this->security_closepx().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->security_closepx());
  }

  // string settl_price = 19;
  if (this->settl_price().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->settl_price());
  }

  // string contract_symbol = 20;
  if (this->contract_symbol().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->contract_symbol());
  }

  // string num = 21;
  if (this->num().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->num());
  }

  // string contractID = 22;
  if (this->contractid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->contractid());
  }

  // string margin_ratio_param1 = 23;
  if (this->margin_ratio_param1().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->margin_ratio_param1());
  }

  // string margin_ratio_param2 = 24;
  if (this->margin_ratio_param2().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->margin_ratio_param2());
  }

  // string lmt_ord_min_floor = 25;
  if (this->lmt_ord_min_floor().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->lmt_ord_min_floor());
  }

  // string mkt_ord_min_floor = 26;
  if (this->mkt_ord_min_floor().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->mkt_ord_min_floor());
  }

  // string end_date = 27;
  if (this->end_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->end_date());
  }

  // string price_limit_type = 28;
  if (this->price_limit_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->price_limit_type());
  }

  // string exercise_date = 29;
  if (this->exercise_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exercise_date());
  }

  // string margin_unit = 30;
  if (this->margin_unit().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->margin_unit());
  }

  // string securityID = 31;
  if (this->securityid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->securityid());
  }

  // string security_name_byID = 32;
  if (this->security_name_byid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->security_name_byid());
  }

  // string contract_flag = 33;
  if (this->contract_flag().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->contract_flag());
  }

  // string underlying_closePX = 34;
  if (this->underlying_closepx().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->underlying_closepx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSEStockOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SSEStockOption)
  GOOGLE_DCHECK_NE(&from, this);
  const SSEStockOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSEStockOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SSEStockOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SSEStockOption)
    MergeFrom(*source);
  }
}

void SSEStockOption::MergeFrom(const SSEStockOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SSEStockOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exercise_price().size() > 0) {

    exercise_price_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exercise_price_);
  }
  if (from.update_version().size() > 0) {

    update_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.update_version_);
  }
  if (from.option_type().size() > 0) {

    option_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.option_type_);
  }
  if (from.daily_price_up_limit().size() > 0) {

    daily_price_up_limit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.daily_price_up_limit_);
  }
  if (from.time_save().size() > 0) {

    time_save_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_save_);
  }
  if (from.delist_flag().size() > 0) {

    delist_flag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delist_flag_);
  }
  if (from.start_date().size() > 0) {

    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  if (from.expire_date().size() > 0) {

    expire_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expire_date_);
  }
  if (from.contract_unit().size() > 0) {

    contract_unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contract_unit_);
  }
  if (from.call_or_put().size() > 0) {

    call_or_put_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.call_or_put_);
  }
  if (from.lmt_ord_max_floor().size() > 0) {

    lmt_ord_max_floor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lmt_ord_max_floor_);
  }
  if (from.delivery_date().size() > 0) {

    delivery_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delivery_date_);
  }
  if (from.change_flag().size() > 0) {

    change_flag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.change_flag_);
  }
  if (from.mkt_ord_max_floor().size() > 0) {

    mkt_ord_max_floor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mkt_ord_max_floor_);
  }
  if (from.underlying_type().size() > 0) {

    underlying_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.underlying_type_);
  }
  if (from.daily_price_down_limit().size() > 0) {

    daily_price_down_limit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.daily_price_down_limit_);
  }
  if (from.round_lot().size() > 0) {

    round_lot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.round_lot_);
  }
  if (from.security_closepx().size() > 0) {

    security_closepx_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_closepx_);
  }
  if (from.settl_price().size() > 0) {

    settl_price_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.settl_price_);
  }
  if (from.contract_symbol().size() > 0) {

    contract_symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contract_symbol_);
  }
  if (from.num().size() > 0) {

    num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.num_);
  }
  if (from.contractid().size() > 0) {

    contractid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contractid_);
  }
  if (from.margin_ratio_param1().size() > 0) {

    margin_ratio_param1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.margin_ratio_param1_);
  }
  if (from.margin_ratio_param2().size() > 0) {

    margin_ratio_param2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.margin_ratio_param2_);
  }
  if (from.lmt_ord_min_floor().size() > 0) {

    lmt_ord_min_floor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lmt_ord_min_floor_);
  }
  if (from.mkt_ord_min_floor().size() > 0) {

    mkt_ord_min_floor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mkt_ord_min_floor_);
  }
  if (from.end_date().size() > 0) {

    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  if (from.price_limit_type().size() > 0) {

    price_limit_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.price_limit_type_);
  }
  if (from.exercise_date().size() > 0) {

    exercise_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exercise_date_);
  }
  if (from.margin_unit().size() > 0) {

    margin_unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.margin_unit_);
  }
  if (from.securityid().size() > 0) {

    securityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securityid_);
  }
  if (from.security_name_byid().size() > 0) {

    security_name_byid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_name_byid_);
  }
  if (from.contract_flag().size() > 0) {

    contract_flag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contract_flag_);
  }
  if (from.underlying_closepx().size() > 0) {

    underlying_closepx_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.underlying_closepx_);
  }
}

void SSEStockOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SSEStockOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSEStockOption::CopyFrom(const SSEStockOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SSEStockOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSEStockOption::IsInitialized() const {
  return true;
}

void SSEStockOption::Swap(SSEStockOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSEStockOption::InternalSwap(SSEStockOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exercise_price_.Swap(&other->exercise_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_version_.Swap(&other->update_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  option_type_.Swap(&other->option_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  daily_price_up_limit_.Swap(&other->daily_price_up_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  time_save_.Swap(&other->time_save_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  delist_flag_.Swap(&other->delist_flag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_date_.Swap(&other->start_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expire_date_.Swap(&other->expire_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contract_unit_.Swap(&other->contract_unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  call_or_put_.Swap(&other->call_or_put_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lmt_ord_max_floor_.Swap(&other->lmt_ord_max_floor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  delivery_date_.Swap(&other->delivery_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  change_flag_.Swap(&other->change_flag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mkt_ord_max_floor_.Swap(&other->mkt_ord_max_floor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlying_type_.Swap(&other->underlying_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  daily_price_down_limit_.Swap(&other->daily_price_down_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  round_lot_.Swap(&other->round_lot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  security_closepx_.Swap(&other->security_closepx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  settl_price_.Swap(&other->settl_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contract_symbol_.Swap(&other->contract_symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  num_.Swap(&other->num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contractid_.Swap(&other->contractid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  margin_ratio_param1_.Swap(&other->margin_ratio_param1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  margin_ratio_param2_.Swap(&other->margin_ratio_param2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lmt_ord_min_floor_.Swap(&other->lmt_ord_min_floor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mkt_ord_min_floor_.Swap(&other->mkt_ord_min_floor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_date_.Swap(&other->end_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  price_limit_type_.Swap(&other->price_limit_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exercise_date_.Swap(&other->exercise_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  margin_unit_.Swap(&other->margin_unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  securityid_.Swap(&other->securityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  security_name_byid_.Swap(&other->security_name_byid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contract_flag_.Swap(&other->contract_flag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlying_closepx_.Swap(&other->underlying_closepx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SSEStockOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionMonth::InitAsDefaultInstance() {
}
class OptionMonth::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionMonth::kNameFieldNumber;
const int OptionMonth::kValueFieldNumber;
const int OptionMonth::kShortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionMonth::OptionMonth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OptionMonth)
}
OptionMonth::OptionMonth(const OptionMonth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  short__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.short_().size() > 0) {
    short__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short__);
  }
  // @@protoc_insertion_point(copy_constructor:pb.OptionMonth)
}

void OptionMonth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptionMonth_common_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OptionMonth::~OptionMonth() {
  // @@protoc_insertion_point(destructor:pb.OptionMonth)
  SharedDtor();
}

void OptionMonth::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OptionMonth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionMonth& OptionMonth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionMonth_common_2eproto.base);
  return *internal_default_instance();
}


void OptionMonth::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.OptionMonth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptionMonth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "pb.OptionMonth.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "pb.OptionMonth.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string short = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_short_(), ptr, ctx, "pb.OptionMonth.short");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptionMonth::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OptionMonth)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.OptionMonth.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.OptionMonth.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string short = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_short_()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->short_().data(), static_cast<int>(this->short_().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.OptionMonth.short"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OptionMonth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OptionMonth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptionMonth::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OptionMonth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionMonth.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionMonth.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // string short = 3;
  if (this->short_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->short_().data(), static_cast<int>(this->short_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionMonth.short");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->short_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OptionMonth)
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionMonth::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OptionMonth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionMonth.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionMonth.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // string short = 3;
  if (this->short_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->short_().data(), static_cast<int>(this->short_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionMonth.short");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->short_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OptionMonth)
  return target;
}

size_t OptionMonth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.OptionMonth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string short = 3;
  if (this->short_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->short_());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionMonth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.OptionMonth)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionMonth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionMonth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.OptionMonth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.OptionMonth)
    MergeFrom(*source);
  }
}

void OptionMonth::MergeFrom(const OptionMonth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.OptionMonth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.short_().size() > 0) {

    short__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short__);
  }
}

void OptionMonth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.OptionMonth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionMonth::CopyFrom(const OptionMonth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.OptionMonth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionMonth::IsInitialized() const {
  return true;
}

void OptionMonth::Swap(OptionMonth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionMonth::InternalSwap(OptionMonth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  short__.Swap(&other->short__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionMonth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionMonthList::InitAsDefaultInstance() {
}
class OptionMonthList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionMonthList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionMonthList::OptionMonthList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OptionMonthList)
}
OptionMonthList::OptionMonthList(const OptionMonthList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.OptionMonthList)
}

void OptionMonthList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptionMonthList_common_2eproto.base);
}

OptionMonthList::~OptionMonthList() {
  // @@protoc_insertion_point(destructor:pb.OptionMonthList)
  SharedDtor();
}

void OptionMonthList::SharedDtor() {
}

void OptionMonthList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionMonthList& OptionMonthList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionMonthList_common_2eproto.base);
  return *internal_default_instance();
}


void OptionMonthList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.OptionMonthList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptionMonthList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.OptionMonth list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptionMonthList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OptionMonthList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.OptionMonth list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OptionMonthList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OptionMonthList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptionMonthList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OptionMonthList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.OptionMonth list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OptionMonthList)
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionMonthList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OptionMonthList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.OptionMonth list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OptionMonthList)
  return target;
}

size_t OptionMonthList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.OptionMonthList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.OptionMonth list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionMonthList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.OptionMonthList)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionMonthList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionMonthList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.OptionMonthList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.OptionMonthList)
    MergeFrom(*source);
  }
}

void OptionMonthList::MergeFrom(const OptionMonthList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.OptionMonthList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void OptionMonthList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.OptionMonthList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionMonthList::CopyFrom(const OptionMonthList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.OptionMonthList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionMonthList::IsInitialized() const {
  return true;
}

void OptionMonthList::Swap(OptionMonthList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionMonthList::InternalSwap(OptionMonthList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionMonthList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmptyRequest::InitAsDefaultInstance() {
}
class EmptyRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyRequest::EmptyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EmptyRequest)
}
EmptyRequest::EmptyRequest(const EmptyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.EmptyRequest)
}

void EmptyRequest::SharedCtor() {
}

EmptyRequest::~EmptyRequest() {
  // @@protoc_insertion_point(destructor:pb.EmptyRequest)
  SharedDtor();
}

void EmptyRequest::SharedDtor() {
}

void EmptyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyRequest& EmptyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmptyRequest_common_2eproto.base);
  return *internal_default_instance();
}


void EmptyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.EmptyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmptyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmptyRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EmptyRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EmptyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EmptyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmptyRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EmptyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EmptyRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EmptyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EmptyRequest)
  return target;
}

size_t EmptyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.EmptyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.EmptyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.EmptyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.EmptyRequest)
    MergeFrom(*source);
  }
}

void EmptyRequest::MergeFrom(const EmptyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.EmptyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.EmptyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyRequest::CopyFrom(const EmptyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.EmptyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyRequest::IsInitialized() const {
  return true;
}

void EmptyRequest::Swap(EmptyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyRequest::InternalSwap(EmptyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmptyResponse::InitAsDefaultInstance() {
}
class EmptyResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyResponse::EmptyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EmptyResponse)
}
EmptyResponse::EmptyResponse(const EmptyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.EmptyResponse)
}

void EmptyResponse::SharedCtor() {
}

EmptyResponse::~EmptyResponse() {
  // @@protoc_insertion_point(destructor:pb.EmptyResponse)
  SharedDtor();
}

void EmptyResponse::SharedDtor() {
}

void EmptyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyResponse& EmptyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmptyResponse_common_2eproto.base);
  return *internal_default_instance();
}


void EmptyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.EmptyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmptyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmptyResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EmptyResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EmptyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EmptyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmptyResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EmptyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EmptyResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EmptyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EmptyResponse)
  return target;
}

size_t EmptyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.EmptyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.EmptyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.EmptyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.EmptyResponse)
    MergeFrom(*source);
  }
}

void EmptyResponse::MergeFrom(const EmptyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.EmptyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.EmptyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyResponse::CopyFrom(const EmptyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.EmptyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyResponse::IsInitialized() const {
  return true;
}

void EmptyResponse::Swap(EmptyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyResponse::InternalSwap(EmptyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommonRequest::InitAsDefaultInstance() {
}
class CommonRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonRequest::CommonRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CommonRequest)
}
CommonRequest::CommonRequest(const CommonRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CommonRequest)
}

void CommonRequest::SharedCtor() {
}

CommonRequest::~CommonRequest() {
  // @@protoc_insertion_point(destructor:pb.CommonRequest)
  SharedDtor();
}

void CommonRequest::SharedDtor() {
}

void CommonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonRequest& CommonRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonRequest_common_2eproto.base);
  return *internal_default_instance();
}


void CommonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CommonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommonRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommonRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CommonRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CommonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CommonRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommonRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CommonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CommonRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CommonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CommonRequest)
  return target;
}

size_t CommonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CommonRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CommonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CommonRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CommonRequest)
    MergeFrom(*source);
  }
}

void CommonRequest::MergeFrom(const CommonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CommonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CommonRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CommonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRequest::CopyFrom(const CommonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CommonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRequest::IsInitialized() const {
  return true;
}

void CommonRequest::Swap(CommonRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonRequest::InternalSwap(CommonRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommonResponse::InitAsDefaultInstance() {
}
class CommonResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonResponse::kSuccessFieldNumber;
const int CommonResponse::kCodeFieldNumber;
const int CommonResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonResponse::CommonResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CommonResponse)
}
CommonResponse::CommonResponse(const CommonResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&success_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:pb.CommonResponse)
}

void CommonResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommonResponse_common_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&success_)) + sizeof(code_));
}

CommonResponse::~CommonResponse() {
  // @@protoc_insertion_point(destructor:pb.CommonResponse)
  SharedDtor();
}

void CommonResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonResponse& CommonResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonResponse_common_2eproto.base);
  return *internal_default_instance();
}


void CommonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CommonResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&success_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommonResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message(), ptr, ctx, "pb.CommonResponse.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommonResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CommonResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.CommonResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CommonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CommonResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommonResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CommonResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.CommonResponse.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CommonResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CommonResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.CommonResponse.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CommonResponse)
  return target;
}

size_t CommonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CommonResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CommonResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CommonResponse)
    MergeFrom(*source);
  }
}

void CommonResponse::MergeFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void CommonResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResponse::CopyFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResponse::IsInitialized() const {
  return true;
}

void CommonResponse::Swap(CommonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonResponse::InternalSwap(CommonResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::Symbol* Arena::CreateMaybeMessage< ::pb::Symbol >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Symbol >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SymbolList* Arena::CreateMaybeMessage< ::pb::SymbolList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SymbolList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ProductID* Arena::CreateMaybeMessage< ::pb::ProductID >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ProductID >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BrokerRoute* Arena::CreateMaybeMessage< ::pb::BrokerRoute >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BrokerRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BrokerRouteList* Arena::CreateMaybeMessage< ::pb::BrokerRouteList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BrokerRouteList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::InstrumentInfo* Arena::CreateMaybeMessage< ::pb::InstrumentInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::InstrumentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SimpleTimePeriod* Arena::CreateMaybeMessage< ::pb::SimpleTimePeriod >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SimpleTimePeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::MarketTimeRule* Arena::CreateMaybeMessage< ::pb::MarketTimeRule >(Arena* arena) {
  return Arena::CreateInternal< ::pb::MarketTimeRule >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ProductInfo* Arena::CreateMaybeMessage< ::pb::ProductInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ProductInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TradingInstrument* Arena::CreateMaybeMessage< ::pb::TradingInstrument >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TradingInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TradingInstrumentList* Arena::CreateMaybeMessage< ::pb::TradingInstrumentList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TradingInstrumentList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ProductInfoList* Arena::CreateMaybeMessage< ::pb::ProductInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ProductInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqSetTradingInstrumentList* Arena::CreateMaybeMessage< ::pb::ReqSetTradingInstrumentList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqSetTradingInstrumentList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqSetProductInfoList* Arena::CreateMaybeMessage< ::pb::ReqSetProductInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqSetProductInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqUpdateTIOpenDate* Arena::CreateMaybeMessage< ::pb::ReqUpdateTIOpenDate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqUpdateTIOpenDate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqUpdateTIOpenDateList* Arena::CreateMaybeMessage< ::pb::ReqUpdateTIOpenDateList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqUpdateTIOpenDateList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::AccountMoneySummary* Arena::CreateMaybeMessage< ::pb::AccountMoneySummary >(Arena* arena) {
  return Arena::CreateInternal< ::pb::AccountMoneySummary >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::AccountMoneySummaryList* Arena::CreateMaybeMessage< ::pb::AccountMoneySummaryList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::AccountMoneySummaryList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::MoneyTransferRecord* Arena::CreateMaybeMessage< ::pb::MoneyTransferRecord >(Arena* arena) {
  return Arena::CreateInternal< ::pb::MoneyTransferRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::MTRList* Arena::CreateMaybeMessage< ::pb::MTRList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::MTRList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SSEStockOption* Arena::CreateMaybeMessage< ::pb::SSEStockOption >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SSEStockOption >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::OptionMonth* Arena::CreateMaybeMessage< ::pb::OptionMonth >(Arena* arena) {
  return Arena::CreateInternal< ::pb::OptionMonth >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::OptionMonthList* Arena::CreateMaybeMessage< ::pb::OptionMonthList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::OptionMonthList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::EmptyRequest* Arena::CreateMaybeMessage< ::pb::EmptyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::EmptyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::EmptyResponse* Arena::CreateMaybeMessage< ::pb::EmptyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::EmptyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CommonRequest* Arena::CreateMaybeMessage< ::pb::CommonRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CommonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CommonResponse* Arena::CreateMaybeMessage< ::pb::CommonResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CommonResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
