// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#include "market_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Kline_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MarketDataSnapshot_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OptionTQuoteItem_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderBook_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleTick_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleTickForTQuote_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Symbol_common_2eproto;
namespace pb {
class OrderBookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderBook> _instance;
} _OrderBook_default_instance_;
class MarketDataSnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDataSnapshot> _instance;
} _MarketDataSnapshot_default_instance_;
class MdsListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MdsList> _instance;
} _MdsList_default_instance_;
class OptionTMarketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionTMarket> _instance;
} _OptionTMarket_default_instance_;
class SimpleTickForTQuoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleTickForTQuote> _instance;
} _SimpleTickForTQuote_default_instance_;
class OptionTQuoteItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionTQuoteItem> _instance;
} _OptionTQuoteItem_default_instance_;
class OptionTQuoteItemListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionTQuoteItemList> _instance;
} _OptionTQuoteItemList_default_instance_;
class KlineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Kline> _instance;
} _Kline_default_instance_;
class KlineSeriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KlineSeries> _instance;
} _KlineSeries_default_instance_;
class ReqSubscribeMarketDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSubscribeMarketData> _instance;
} _ReqSubscribeMarketData_default_instance_;
class RspSubscribeMarketDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RspSubscribeMarketData> _instance;
} _RspSubscribeMarketData_default_instance_;
class RtnMarketDataUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RtnMarketDataUpdate> _instance;
} _RtnMarketDataUpdate_default_instance_;
class TickSeriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TickSeries> _instance;
} _TickSeries_default_instance_;
class SimpleTickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleTick> _instance;
} _SimpleTick_default_instance_;
class SimpleTickSeriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleTickSeries> _instance;
} _SimpleTickSeries_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_Kline_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Kline_default_instance_;
    new (ptr) ::pb::Kline();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Kline::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Kline_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Kline_market_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_KlineSeries_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_KlineSeries_default_instance_;
    new (ptr) ::pb::KlineSeries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::KlineSeries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KlineSeries_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_KlineSeries_market_5fdata_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_Kline_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_MarketDataSnapshot_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_MarketDataSnapshot_default_instance_;
    new (ptr) ::pb::MarketDataSnapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::MarketDataSnapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MarketDataSnapshot_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MarketDataSnapshot_market_5fdata_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_OrderBook_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_MdsList_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_MdsList_default_instance_;
    new (ptr) ::pb::MdsList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::MdsList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MdsList_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MdsList_market_5fdata_2eproto}, {
      &scc_info_MarketDataSnapshot_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_OptionTMarket_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_OptionTMarket_default_instance_;
    new (ptr) ::pb::OptionTMarket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::OptionTMarket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OptionTMarket_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OptionTMarket_market_5fdata_2eproto}, {
      &scc_info_MarketDataSnapshot_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_OptionTQuoteItem_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_OptionTQuoteItem_default_instance_;
    new (ptr) ::pb::OptionTQuoteItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::OptionTQuoteItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OptionTQuoteItem_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OptionTQuoteItem_market_5fdata_2eproto}, {
      &scc_info_SimpleTickForTQuote_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_OptionTQuoteItemList_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_OptionTQuoteItemList_default_instance_;
    new (ptr) ::pb::OptionTQuoteItemList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::OptionTQuoteItemList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OptionTQuoteItemList_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OptionTQuoteItemList_market_5fdata_2eproto}, {
      &scc_info_OptionTQuoteItem_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_OrderBook_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_OrderBook_default_instance_;
    new (ptr) ::pb::OrderBook();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::OrderBook::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderBook_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OrderBook_market_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_ReqSubscribeMarketData_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqSubscribeMarketData_default_instance_;
    new (ptr) ::pb::ReqSubscribeMarketData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqSubscribeMarketData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSubscribeMarketData_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqSubscribeMarketData_market_5fdata_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_RspSubscribeMarketData_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspSubscribeMarketData_default_instance_;
    new (ptr) ::pb::RspSubscribeMarketData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspSubscribeMarketData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RspSubscribeMarketData_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RspSubscribeMarketData_market_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_RtnMarketDataUpdate_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RtnMarketDataUpdate_default_instance_;
    new (ptr) ::pb::RtnMarketDataUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RtnMarketDataUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RtnMarketDataUpdate_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RtnMarketDataUpdate_market_5fdata_2eproto}, {
      &scc_info_MarketDataSnapshot_market_5fdata_2eproto.base,
      &scc_info_Kline_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_SimpleTick_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SimpleTick_default_instance_;
    new (ptr) ::pb::SimpleTick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SimpleTick::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleTick_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SimpleTick_market_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_SimpleTickForTQuote_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SimpleTickForTQuote_default_instance_;
    new (ptr) ::pb::SimpleTickForTQuote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SimpleTickForTQuote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleTickForTQuote_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SimpleTickForTQuote_market_5fdata_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsscc_info_SimpleTickSeries_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SimpleTickSeries_default_instance_;
    new (ptr) ::pb::SimpleTickSeries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SimpleTickSeries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimpleTickSeries_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SimpleTickSeries_market_5fdata_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_SimpleTick_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_TickSeries_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TickSeries_default_instance_;
    new (ptr) ::pb::TickSeries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TickSeries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TickSeries_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TickSeries_market_5fdata_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_MarketDataSnapshot_market_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_market_5fdata_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_market_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_market_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_market_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::OrderBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::OrderBook, ask_),
  PROTOBUF_FIELD_OFFSET(::pb::OrderBook, ask_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::OrderBook, bid_),
  PROTOBUF_FIELD_OFFSET(::pb::OrderBook, bid_volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, time_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, milliseconds_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, open_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, high_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, low_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, close_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, volume_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, position_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, price_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, pre_close_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, pre_position_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, upper_limit_price_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, lower_limit_price_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, pre_delta_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, delta_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, average_price_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, order_book_list_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, name_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, exercise_price_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, volume_delta_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, time2_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, action_day_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::MarketDataSnapshot, price_tick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::MdsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::MdsList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::OptionTMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::OptionTMarket, calltk_),
  PROTOBUF_FIELD_OFFSET(::pb::OptionTMarket, puttk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTickForTQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTickForTQuote, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTickForTQuote, price_),
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTickForTQuote, up_down_ratio_),
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTickForTQuote, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTickForTQuote, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::OptionTQuoteItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::OptionTQuoteItem, exercise_price_),
  PROTOBUF_FIELD_OFFSET(::pb::OptionTQuoteItem, call_),
  PROTOBUF_FIELD_OFFSET(::pb::OptionTQuoteItem, put_),
  PROTOBUF_FIELD_OFFSET(::pb::OptionTQuoteItem, exercise_price_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::OptionTQuoteItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::OptionTQuoteItemList, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::OptionTQuoteItemList, strike_symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::OptionTQuoteItemList, month_),
  PROTOBUF_FIELD_OFFSET(::pb::OptionTQuoteItemList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Kline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Kline, time_),
  PROTOBUF_FIELD_OFFSET(::pb::Kline, open_),
  PROTOBUF_FIELD_OFFSET(::pb::Kline, high_),
  PROTOBUF_FIELD_OFFSET(::pb::Kline, low_),
  PROTOBUF_FIELD_OFFSET(::pb::Kline, close_),
  PROTOBUF_FIELD_OFFSET(::pb::Kline, volume_),
  PROTOBUF_FIELD_OFFSET(::pb::Kline, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::Kline, position_),
  PROTOBUF_FIELD_OFFSET(::pb::Kline, trading_day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::KlineSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::KlineSeries, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::KlineSeries, period_),
  PROTOBUF_FIELD_OFFSET(::pb::KlineSeries, period_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::pb::KlineSeries, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSubscribeMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSubscribeMarketData, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqSubscribeMarketData, periodlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspSubscribeMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RtnMarketDataUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RtnMarketDataUpdate, tick_),
  PROTOBUF_FIELD_OFFSET(::pb::RtnMarketDataUpdate, kline_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TickSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TickSeries, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::TickSeries, trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::TickSeries, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTick, time_),
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTick, price_),
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTick, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTickSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTickSeries, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTickSeries, trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::SimpleTickSeries, list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::OrderBook)},
  { 9, -1, sizeof(::pb::MarketDataSnapshot)},
  { 44, -1, sizeof(::pb::MdsList)},
  { 50, -1, sizeof(::pb::OptionTMarket)},
  { 57, -1, sizeof(::pb::SimpleTickForTQuote)},
  { 67, -1, sizeof(::pb::OptionTQuoteItem)},
  { 76, -1, sizeof(::pb::OptionTQuoteItemList)},
  { 85, -1, sizeof(::pb::Kline)},
  { 99, -1, sizeof(::pb::KlineSeries)},
  { 108, -1, sizeof(::pb::ReqSubscribeMarketData)},
  { 115, -1, sizeof(::pb::RspSubscribeMarketData)},
  { 120, -1, sizeof(::pb::RtnMarketDataUpdate)},
  { 127, -1, sizeof(::pb::TickSeries)},
  { 135, -1, sizeof(::pb::SimpleTick)},
  { 143, -1, sizeof(::pb::SimpleTickSeries)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_OrderBook_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_MarketDataSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_MdsList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_OptionTMarket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SimpleTickForTQuote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_OptionTQuoteItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_OptionTQuoteItemList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Kline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_KlineSeries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReqSubscribeMarketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RspSubscribeMarketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RtnMarketDataUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TickSeries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SimpleTick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SimpleTickSeries_default_instance_),
};

const char descriptor_table_protodef_market_5fdata_2eproto[] =
  "\n\021market_data.proto\022\002pb\032\014common.proto\"M\n"
  "\tOrderBook\022\013\n\003ask\030\001 \001(\001\022\022\n\nask_volume\030\002 "
  "\001(\005\022\013\n\003bid\030\003 \001(\001\022\022\n\nbid_volume\030\004 \001(\005\"\370\004\n"
  "\022MarketDataSnapshot\022\032\n\006symbol\030\001 \001(\0132\n.pb"
  ".Symbol\022\014\n\004time\030\002 \001(\003\022\024\n\014milliseconds\030\003 "
  "\001(\005\022\014\n\004open\030\004 \001(\001\022\014\n\004high\030\005 \001(\001\022\013\n\003low\030\006"
  " \001(\001\022\r\n\005close\030\007 \001(\001\022\016\n\006volume\030\010 \001(\005\022\016\n\006a"
  "mount\030\t \001(\001\022\020\n\010position\030\n \001(\005\022\r\n\005price\030\013"
  " \001(\001\022\021\n\tpre_close\030\014 \001(\001\022\034\n\024pre_settlemen"
  "t_price\030\r \001(\001\022\024\n\014pre_position\030\016 \001(\005\022\030\n\020s"
  "ettlement_price\030\017 \001(\001\022\031\n\021upper_limit_pri"
  "ce\030\020 \001(\001\022\031\n\021lower_limit_price\030\021 \001(\001\022\021\n\tp"
  "re_delta\030\022 \001(\001\022\r\n\005delta\030\023 \001(\001\022\025\n\raverage"
  "_price\030\024 \001(\001\022\023\n\013trading_day\030\025 \001(\005\022&\n\017ord"
  "er_book_list\030\026 \003(\0132\r.pb.OrderBook\022\014\n\004nam"
  "e\030\027 \001(\t\022\026\n\016exercise_price\030\030 \001(\001\022\024\n\014volum"
  "e_delta\030\031 \001(\005\022\r\n\005time2\030\032 \001(\t\022\020\n\010exchange"
  "\030\033 \001(\t\022\022\n\naction_day\030\034 \001(\005\022\027\n\017volume_mul"
  "tiple\030\035 \001(\005\022\022\n\nprice_tick\030\036 \001(\001\"/\n\007MdsLi"
  "st\022$\n\004list\030\001 \003(\0132\026.pb.MarketDataSnapshot"
  "\"^\n\rOptionTMarket\022&\n\006callTk\030\001 \001(\0132\026.pb.M"
  "arketDataSnapshot\022%\n\005putTk\030\002 \001(\0132\026.pb.Ma"
  "rketDataSnapshot\"\203\001\n\023SimpleTickForTQuote"
  "\022\032\n\006symbol\030\001 \001(\0132\n.pb.Symbol\022\r\n\005price\030\002 "
  "\001(\001\022\025\n\rup_down_ratio\030\003 \001(\001\022\034\n\024pre_settle"
  "ment_price\030\004 \001(\001\022\014\n\004name\030\005 \001(\t\"\224\001\n\020Optio"
  "nTQuoteItem\022\026\n\016exercise_price\030\001 \001(\001\022%\n\004c"
  "all\030\002 \001(\0132\027.pb.SimpleTickForTQuote\022$\n\003pu"
  "t\030\003 \001(\0132\027.pb.SimpleTickForTQuote\022\033\n\023exer"
  "cise_price_flag\030\004 \001(\t\"r\n\024OptionTQuoteIte"
  "mList\022\020\n\010exchange\030\001 \001(\005\022\025\n\rstrike_symbol"
  "\030\002 \001(\t\022\r\n\005month\030\003 \001(\t\022\"\n\004list\030\004 \003(\0132\024.pb"
  ".OptionTQuoteItem\"\224\001\n\005Kline\022\014\n\004time\030\001 \001("
  "\003\022\014\n\004open\030\002 \001(\001\022\014\n\004high\030\003 \001(\001\022\013\n\003low\030\004 \001"
  "(\001\022\r\n\005close\030\005 \001(\001\022\016\n\006volume\030\006 \001(\005\022\016\n\006amo"
  "unt\030\007 \001(\001\022\020\n\010position\030\010 \001(\005\022\023\n\013trading_d"
  "ay\030\t \001(\005\"}\n\013KlineSeries\022\032\n\006symbol\030\001 \001(\0132"
  "\n.pb.Symbol\022\036\n\006period\030\002 \001(\0162\016.pb.PeriodT"
  "ype\022\031\n\021period_in_seconds\030\003 \001(\005\022\027\n\004list\030\004"
  " \003(\0132\t.pb.Kline\"X\n\026ReqSubscribeMarketDat"
  "a\022\032\n\006symbol\030\001 \001(\0132\n.pb.Symbol\022\"\n\nperiodL"
  "ist\030\002 \003(\0162\016.pb.PeriodType\"\030\n\026RspSubscrib"
  "eMarketData\"Z\n\023RtnMarketDataUpdate\022$\n\004ti"
  "ck\030\001 \001(\0132\026.pb.MarketDataSnapshot\022\035\n\nklin"
  "e_list\030\002 \003(\0132\t.pb.Kline\"c\n\nTickSeries\022\032\n"
  "\006symbol\030\001 \001(\0132\n.pb.Symbol\022\023\n\013trading_day"
  "\030\002 \001(\005\022$\n\004list\030\003 \003(\0132\026.pb.MarketDataSnap"
  "shot\"9\n\nSimpleTick\022\014\n\004time\030\001 \001(\003\022\r\n\005pric"
  "e\030\002 \001(\001\022\016\n\006volume\030\003 \001(\005\"a\n\020SimpleTickSer"
  "ies\022\032\n\006symbol\030\001 \001(\0132\n.pb.Symbol\022\023\n\013tradi"
  "ng_day\030\002 \001(\005\022\034\n\004list\030\003 \003(\0132\016.pb.SimpleTi"
  "ckb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_market_5fdata_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_market_5fdata_2eproto_sccs[15] = {
  &scc_info_Kline_market_5fdata_2eproto.base,
  &scc_info_KlineSeries_market_5fdata_2eproto.base,
  &scc_info_MarketDataSnapshot_market_5fdata_2eproto.base,
  &scc_info_MdsList_market_5fdata_2eproto.base,
  &scc_info_OptionTMarket_market_5fdata_2eproto.base,
  &scc_info_OptionTQuoteItem_market_5fdata_2eproto.base,
  &scc_info_OptionTQuoteItemList_market_5fdata_2eproto.base,
  &scc_info_OrderBook_market_5fdata_2eproto.base,
  &scc_info_ReqSubscribeMarketData_market_5fdata_2eproto.base,
  &scc_info_RspSubscribeMarketData_market_5fdata_2eproto.base,
  &scc_info_RtnMarketDataUpdate_market_5fdata_2eproto.base,
  &scc_info_SimpleTick_market_5fdata_2eproto.base,
  &scc_info_SimpleTickForTQuote_market_5fdata_2eproto.base,
  &scc_info_SimpleTickSeries_market_5fdata_2eproto.base,
  &scc_info_TickSeries_market_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_market_5fdata_2eproto_once;
static bool descriptor_table_market_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_5fdata_2eproto = {
  &descriptor_table_market_5fdata_2eproto_initialized, descriptor_table_protodef_market_5fdata_2eproto, "market_data.proto", 2050,
  &descriptor_table_market_5fdata_2eproto_once, descriptor_table_market_5fdata_2eproto_sccs, descriptor_table_market_5fdata_2eproto_deps, 15, 1,
  schemas, file_default_instances, TableStruct_market_5fdata_2eproto::offsets,
  file_level_metadata_market_5fdata_2eproto, 15, file_level_enum_descriptors_market_5fdata_2eproto, file_level_service_descriptors_market_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_market_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_market_5fdata_2eproto), true);
namespace pb {

// ===================================================================

void OrderBook::InitAsDefaultInstance() {
}
class OrderBook::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderBook::kAskFieldNumber;
const int OrderBook::kAskVolumeFieldNumber;
const int OrderBook::kBidFieldNumber;
const int OrderBook::kBidVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderBook::OrderBook()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OrderBook)
}
OrderBook::OrderBook(const OrderBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ask_, &from.ask_,
    static_cast<size_t>(reinterpret_cast<char*>(&bid_volume_) -
    reinterpret_cast<char*>(&ask_)) + sizeof(bid_volume_));
  // @@protoc_insertion_point(copy_constructor:pb.OrderBook)
}

void OrderBook::SharedCtor() {
  ::memset(&ask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bid_volume_) -
      reinterpret_cast<char*>(&ask_)) + sizeof(bid_volume_));
}

OrderBook::~OrderBook() {
  // @@protoc_insertion_point(destructor:pb.OrderBook)
  SharedDtor();
}

void OrderBook::SharedDtor() {
}

void OrderBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderBook& OrderBook::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderBook_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void OrderBook::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.OrderBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bid_volume_) -
      reinterpret_cast<char*>(&ask_)) + sizeof(bid_volume_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderBook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double ask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ask_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 ask_volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ask_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          bid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 bid_volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bid_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderBook::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OrderBook)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double ask = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ask_volume = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bid_volume = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OrderBook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OrderBook)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderBook::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OrderBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ask = 1;
  if (!(this->ask() <= 0 && this->ask() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->ask(), output);
  }

  // int32 ask_volume = 2;
  if (this->ask_volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->ask_volume(), output);
  }

  // double bid = 3;
  if (!(this->bid() <= 0 && this->bid() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->bid(), output);
  }

  // int32 bid_volume = 4;
  if (this->bid_volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->bid_volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OrderBook)
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderBook::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OrderBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ask = 1;
  if (!(this->ask() <= 0 && this->ask() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->ask(), target);
  }

  // int32 ask_volume = 2;
  if (this->ask_volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->ask_volume(), target);
  }

  // double bid = 3;
  if (!(this->bid() <= 0 && this->bid() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->bid(), target);
  }

  // int32 bid_volume = 4;
  if (this->bid_volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->bid_volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OrderBook)
  return target;
}

size_t OrderBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.OrderBook)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ask = 1;
  if (!(this->ask() <= 0 && this->ask() >= 0)) {
    total_size += 1 + 8;
  }

  // double bid = 3;
  if (!(this->bid() <= 0 && this->bid() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 ask_volume = 2;
  if (this->ask_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ask_volume());
  }

  // int32 bid_volume = 4;
  if (this->bid_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bid_volume());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderBook::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.OrderBook)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderBook* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderBook>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.OrderBook)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.OrderBook)
    MergeFrom(*source);
  }
}

void OrderBook::MergeFrom(const OrderBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.OrderBook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ask() <= 0 && from.ask() >= 0)) {
    set_ask(from.ask());
  }
  if (!(from.bid() <= 0 && from.bid() >= 0)) {
    set_bid(from.bid());
  }
  if (from.ask_volume() != 0) {
    set_ask_volume(from.ask_volume());
  }
  if (from.bid_volume() != 0) {
    set_bid_volume(from.bid_volume());
  }
}

void OrderBook::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.OrderBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBook::CopyFrom(const OrderBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.OrderBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBook::IsInitialized() const {
  return true;
}

void OrderBook::Swap(OrderBook* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderBook::InternalSwap(OrderBook* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ask_, other->ask_);
  swap(bid_, other->bid_);
  swap(ask_volume_, other->ask_volume_);
  swap(bid_volume_, other->bid_volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderBook::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketDataSnapshot::InitAsDefaultInstance() {
  ::pb::_MarketDataSnapshot_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class MarketDataSnapshot::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const MarketDataSnapshot* msg);
};

const ::pb::Symbol&
MarketDataSnapshot::HasBitSetters::symbol(const MarketDataSnapshot* msg) {
  return *msg->symbol_;
}
void MarketDataSnapshot::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataSnapshot::kSymbolFieldNumber;
const int MarketDataSnapshot::kTimeFieldNumber;
const int MarketDataSnapshot::kMillisecondsFieldNumber;
const int MarketDataSnapshot::kOpenFieldNumber;
const int MarketDataSnapshot::kHighFieldNumber;
const int MarketDataSnapshot::kLowFieldNumber;
const int MarketDataSnapshot::kCloseFieldNumber;
const int MarketDataSnapshot::kVolumeFieldNumber;
const int MarketDataSnapshot::kAmountFieldNumber;
const int MarketDataSnapshot::kPositionFieldNumber;
const int MarketDataSnapshot::kPriceFieldNumber;
const int MarketDataSnapshot::kPreCloseFieldNumber;
const int MarketDataSnapshot::kPreSettlementPriceFieldNumber;
const int MarketDataSnapshot::kPrePositionFieldNumber;
const int MarketDataSnapshot::kSettlementPriceFieldNumber;
const int MarketDataSnapshot::kUpperLimitPriceFieldNumber;
const int MarketDataSnapshot::kLowerLimitPriceFieldNumber;
const int MarketDataSnapshot::kPreDeltaFieldNumber;
const int MarketDataSnapshot::kDeltaFieldNumber;
const int MarketDataSnapshot::kAveragePriceFieldNumber;
const int MarketDataSnapshot::kTradingDayFieldNumber;
const int MarketDataSnapshot::kOrderBookListFieldNumber;
const int MarketDataSnapshot::kNameFieldNumber;
const int MarketDataSnapshot::kExercisePriceFieldNumber;
const int MarketDataSnapshot::kVolumeDeltaFieldNumber;
const int MarketDataSnapshot::kTime2FieldNumber;
const int MarketDataSnapshot::kExchangeFieldNumber;
const int MarketDataSnapshot::kActionDayFieldNumber;
const int MarketDataSnapshot::kVolumeMultipleFieldNumber;
const int MarketDataSnapshot::kPriceTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataSnapshot::MarketDataSnapshot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MarketDataSnapshot)
}
MarketDataSnapshot::MarketDataSnapshot(const MarketDataSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      order_book_list_(from.order_book_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  time2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.time2().size() > 0) {
    time2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time2_);
  }
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_tick_) -
    reinterpret_cast<char*>(&time_)) + sizeof(price_tick_));
  // @@protoc_insertion_point(copy_constructor:pb.MarketDataSnapshot)
}

void MarketDataSnapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDataSnapshot_market_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_tick_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(price_tick_));
}

MarketDataSnapshot::~MarketDataSnapshot() {
  // @@protoc_insertion_point(destructor:pb.MarketDataSnapshot)
  SharedDtor();
}

void MarketDataSnapshot::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
}

void MarketDataSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataSnapshot& MarketDataSnapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDataSnapshot_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void MarketDataSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.MarketDataSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_book_list_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_tick_) -
      reinterpret_cast<char*>(&time_)) + sizeof(price_tick_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketDataSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 milliseconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double open = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double high = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double amount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_close = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          pre_close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_settlement_price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          pre_settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 pre_position = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          pre_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double settlement_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double upper_limit_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          upper_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lower_limit_price = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          lower_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_delta = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          pre_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double delta = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double average_price = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          average_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 trading_day = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          trading_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.OrderBook order_book_list = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_order_book_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      // string name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "pb.MarketDataSnapshot.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double exercise_price = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          exercise_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 volume_delta = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          volume_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time2 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_time2(), ptr, ctx, "pb.MarketDataSnapshot.time2");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exchange(), ptr, ctx, "pb.MarketDataSnapshot.exchange");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action_day = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          action_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 volume_multiple = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          volume_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price_tick = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          price_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketDataSnapshot::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MarketDataSnapshot)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 milliseconds = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &milliseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double open = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double high = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double low = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double close = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double amount = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_close = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_settlement_price = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pre_position = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double settlement_price = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double upper_limit_price = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lower_limit_price = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (137 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_delta = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (145 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double delta = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (153 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double average_price = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (161 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trading_day = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.OrderBook order_book_list = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_order_book_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MarketDataSnapshot.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double exercise_price = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (193 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exercise_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_delta = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string time2 = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_time2()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->time2().data(), static_cast<int>(this->time2().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MarketDataSnapshot.time2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.MarketDataSnapshot.exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 action_day = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (241 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MarketDataSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MarketDataSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketDataSnapshot::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MarketDataSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // int32 milliseconds = 3;
  if (this->milliseconds() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->milliseconds(), output);
  }

  // double open = 4;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->open(), output);
  }

  // double high = 5;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->high(), output);
  }

  // double low = 6;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->low(), output);
  }

  // double close = 7;
  if (!(this->close() <= 0 && this->close() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->close(), output);
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->volume(), output);
  }

  // double amount = 9;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->amount(), output);
  }

  // int32 position = 10;
  if (this->position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->position(), output);
  }

  // double price = 11;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->price(), output);
  }

  // double pre_close = 12;
  if (!(this->pre_close() <= 0 && this->pre_close() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->pre_close(), output);
  }

  // double pre_settlement_price = 13;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->pre_settlement_price(), output);
  }

  // int32 pre_position = 14;
  if (this->pre_position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->pre_position(), output);
  }

  // double settlement_price = 15;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->settlement_price(), output);
  }

  // double upper_limit_price = 16;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->upper_limit_price(), output);
  }

  // double lower_limit_price = 17;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(17, this->lower_limit_price(), output);
  }

  // double pre_delta = 18;
  if (!(this->pre_delta() <= 0 && this->pre_delta() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(18, this->pre_delta(), output);
  }

  // double delta = 19;
  if (!(this->delta() <= 0 && this->delta() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(19, this->delta(), output);
  }

  // double average_price = 20;
  if (!(this->average_price() <= 0 && this->average_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(20, this->average_price(), output);
  }

  // int32 trading_day = 21;
  if (this->trading_day() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->trading_day(), output);
  }

  // repeated .pb.OrderBook order_book_list = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_book_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->order_book_list(static_cast<int>(i)),
      output);
  }

  // string name = 23;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MarketDataSnapshot.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->name(), output);
  }

  // double exercise_price = 24;
  if (!(this->exercise_price() <= 0 && this->exercise_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(24, this->exercise_price(), output);
  }

  // int32 volume_delta = 25;
  if (this->volume_delta() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(25, this->volume_delta(), output);
  }

  // string time2 = 26;
  if (this->time2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->time2().data(), static_cast<int>(this->time2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MarketDataSnapshot.time2");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->time2(), output);
  }

  // string exchange = 27;
  if (this->exchange().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MarketDataSnapshot.exchange");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->exchange(), output);
  }

  // int32 action_day = 28;
  if (this->action_day() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(28, this->action_day(), output);
  }

  // int32 volume_multiple = 29;
  if (this->volume_multiple() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(29, this->volume_multiple(), output);
  }

  // double price_tick = 30;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(30, this->price_tick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MarketDataSnapshot)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDataSnapshot::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MarketDataSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // int32 milliseconds = 3;
  if (this->milliseconds() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->milliseconds(), target);
  }

  // double open = 4;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->open(), target);
  }

  // double high = 5;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->high(), target);
  }

  // double low = 6;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->low(), target);
  }

  // double close = 7;
  if (!(this->close() <= 0 && this->close() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->close(), target);
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->volume(), target);
  }

  // double amount = 9;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->amount(), target);
  }

  // int32 position = 10;
  if (this->position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->position(), target);
  }

  // double price = 11;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->price(), target);
  }

  // double pre_close = 12;
  if (!(this->pre_close() <= 0 && this->pre_close() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->pre_close(), target);
  }

  // double pre_settlement_price = 13;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->pre_settlement_price(), target);
  }

  // int32 pre_position = 14;
  if (this->pre_position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->pre_position(), target);
  }

  // double settlement_price = 15;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->settlement_price(), target);
  }

  // double upper_limit_price = 16;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->upper_limit_price(), target);
  }

  // double lower_limit_price = 17;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->lower_limit_price(), target);
  }

  // double pre_delta = 18;
  if (!(this->pre_delta() <= 0 && this->pre_delta() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->pre_delta(), target);
  }

  // double delta = 19;
  if (!(this->delta() <= 0 && this->delta() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->delta(), target);
  }

  // double average_price = 20;
  if (!(this->average_price() <= 0 && this->average_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->average_price(), target);
  }

  // int32 trading_day = 21;
  if (this->trading_day() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->trading_day(), target);
  }

  // repeated .pb.OrderBook order_book_list = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_book_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->order_book_list(static_cast<int>(i)), target);
  }

  // string name = 23;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MarketDataSnapshot.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        23, this->name(), target);
  }

  // double exercise_price = 24;
  if (!(this->exercise_price() <= 0 && this->exercise_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->exercise_price(), target);
  }

  // int32 volume_delta = 25;
  if (this->volume_delta() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->volume_delta(), target);
  }

  // string time2 = 26;
  if (this->time2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->time2().data(), static_cast<int>(this->time2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MarketDataSnapshot.time2");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        26, this->time2(), target);
  }

  // string exchange = 27;
  if (this->exchange().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MarketDataSnapshot.exchange");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        27, this->exchange(), target);
  }

  // int32 action_day = 28;
  if (this->action_day() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->action_day(), target);
  }

  // int32 volume_multiple = 29;
  if (this->volume_multiple() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->volume_multiple(), target);
  }

  // double price_tick = 30;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->price_tick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MarketDataSnapshot)
  return target;
}

size_t MarketDataSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.MarketDataSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.OrderBook order_book_list = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->order_book_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->order_book_list(static_cast<int>(i)));
    }
  }

  // string name = 23;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string time2 = 26;
  if (this->time2().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->time2());
  }

  // string exchange = 27;
  if (this->exchange().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // double open = 4;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    total_size += 1 + 8;
  }

  // double high = 5;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 milliseconds = 3;
  if (this->milliseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->milliseconds());
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // double low = 6;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    total_size += 1 + 8;
  }

  // double close = 7;
  if (!(this->close() <= 0 && this->close() >= 0)) {
    total_size += 1 + 8;
  }

  // double amount = 9;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    total_size += 1 + 8;
  }

  // double price = 11;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_close = 12;
  if (!(this->pre_close() <= 0 && this->pre_close() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 position = 10;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->position());
  }

  // int32 pre_position = 14;
  if (this->pre_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pre_position());
  }

  // double pre_settlement_price = 13;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double settlement_price = 15;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double upper_limit_price = 16;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double lower_limit_price = 17;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double pre_delta = 18;
  if (!(this->pre_delta() <= 0 && this->pre_delta() >= 0)) {
    total_size += 2 + 8;
  }

  // double delta = 19;
  if (!(this->delta() <= 0 && this->delta() >= 0)) {
    total_size += 2 + 8;
  }

  // double average_price = 20;
  if (!(this->average_price() <= 0 && this->average_price() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 trading_day = 21;
  if (this->trading_day() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trading_day());
  }

  // int32 volume_delta = 25;
  if (this->volume_delta() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->volume_delta());
  }

  // double exercise_price = 24;
  if (!(this->exercise_price() <= 0 && this->exercise_price() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 action_day = 28;
  if (this->action_day() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->action_day());
  }

  // int32 volume_multiple = 29;
  if (this->volume_multiple() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  // double price_tick = 30;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    total_size += 2 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataSnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.MarketDataSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataSnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDataSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.MarketDataSnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.MarketDataSnapshot)
    MergeFrom(*source);
  }
}

void MarketDataSnapshot::MergeFrom(const MarketDataSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.MarketDataSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_book_list_.MergeFrom(from.order_book_list_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.time2().size() > 0) {

    time2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time2_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (!(from.open() <= 0 && from.open() >= 0)) {
    set_open(from.open());
  }
  if (!(from.high() <= 0 && from.high() >= 0)) {
    set_high(from.high());
  }
  if (from.milliseconds() != 0) {
    set_milliseconds(from.milliseconds());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (!(from.low() <= 0 && from.low() >= 0)) {
    set_low(from.low());
  }
  if (!(from.close() <= 0 && from.close() >= 0)) {
    set_close(from.close());
  }
  if (!(from.amount() <= 0 && from.amount() >= 0)) {
    set_amount(from.amount());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    set_price(from.price());
  }
  if (!(from.pre_close() <= 0 && from.pre_close() >= 0)) {
    set_pre_close(from.pre_close());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.pre_position() != 0) {
    set_pre_position(from.pre_position());
  }
  if (!(from.pre_settlement_price() <= 0 && from.pre_settlement_price() >= 0)) {
    set_pre_settlement_price(from.pre_settlement_price());
  }
  if (!(from.settlement_price() <= 0 && from.settlement_price() >= 0)) {
    set_settlement_price(from.settlement_price());
  }
  if (!(from.upper_limit_price() <= 0 && from.upper_limit_price() >= 0)) {
    set_upper_limit_price(from.upper_limit_price());
  }
  if (!(from.lower_limit_price() <= 0 && from.lower_limit_price() >= 0)) {
    set_lower_limit_price(from.lower_limit_price());
  }
  if (!(from.pre_delta() <= 0 && from.pre_delta() >= 0)) {
    set_pre_delta(from.pre_delta());
  }
  if (!(from.delta() <= 0 && from.delta() >= 0)) {
    set_delta(from.delta());
  }
  if (!(from.average_price() <= 0 && from.average_price() >= 0)) {
    set_average_price(from.average_price());
  }
  if (from.trading_day() != 0) {
    set_trading_day(from.trading_day());
  }
  if (from.volume_delta() != 0) {
    set_volume_delta(from.volume_delta());
  }
  if (!(from.exercise_price() <= 0 && from.exercise_price() >= 0)) {
    set_exercise_price(from.exercise_price());
  }
  if (from.action_day() != 0) {
    set_action_day(from.action_day());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
  if (!(from.price_tick() <= 0 && from.price_tick() >= 0)) {
    set_price_tick(from.price_tick());
  }
}

void MarketDataSnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.MarketDataSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataSnapshot::CopyFrom(const MarketDataSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.MarketDataSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataSnapshot::IsInitialized() const {
  return true;
}

void MarketDataSnapshot::Swap(MarketDataSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataSnapshot::InternalSwap(MarketDataSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&order_book_list_)->InternalSwap(CastToBase(&other->order_book_list_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  time2_.Swap(&other->time2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(time_, other->time_);
  swap(open_, other->open_);
  swap(high_, other->high_);
  swap(milliseconds_, other->milliseconds_);
  swap(volume_, other->volume_);
  swap(low_, other->low_);
  swap(close_, other->close_);
  swap(amount_, other->amount_);
  swap(price_, other->price_);
  swap(pre_close_, other->pre_close_);
  swap(position_, other->position_);
  swap(pre_position_, other->pre_position_);
  swap(pre_settlement_price_, other->pre_settlement_price_);
  swap(settlement_price_, other->settlement_price_);
  swap(upper_limit_price_, other->upper_limit_price_);
  swap(lower_limit_price_, other->lower_limit_price_);
  swap(pre_delta_, other->pre_delta_);
  swap(delta_, other->delta_);
  swap(average_price_, other->average_price_);
  swap(trading_day_, other->trading_day_);
  swap(volume_delta_, other->volume_delta_);
  swap(exercise_price_, other->exercise_price_);
  swap(action_day_, other->action_day_);
  swap(volume_multiple_, other->volume_multiple_);
  swap(price_tick_, other->price_tick_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataSnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MdsList::InitAsDefaultInstance() {
}
class MdsList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MdsList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MdsList::MdsList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MdsList)
}
MdsList::MdsList(const MdsList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.MdsList)
}

void MdsList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MdsList_market_5fdata_2eproto.base);
}

MdsList::~MdsList() {
  // @@protoc_insertion_point(destructor:pb.MdsList)
  SharedDtor();
}

void MdsList::SharedDtor() {
}

void MdsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MdsList& MdsList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MdsList_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void MdsList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.MdsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MdsList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.MarketDataSnapshot list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MdsList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MdsList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.MarketDataSnapshot list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MdsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MdsList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MdsList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MdsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.MarketDataSnapshot list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MdsList)
}

::PROTOBUF_NAMESPACE_ID::uint8* MdsList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MdsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.MarketDataSnapshot list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MdsList)
  return target;
}

size_t MdsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.MdsList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.MarketDataSnapshot list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdsList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.MdsList)
  GOOGLE_DCHECK_NE(&from, this);
  const MdsList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MdsList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.MdsList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.MdsList)
    MergeFrom(*source);
  }
}

void MdsList::MergeFrom(const MdsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.MdsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void MdsList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.MdsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MdsList::CopyFrom(const MdsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.MdsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdsList::IsInitialized() const {
  return true;
}

void MdsList::Swap(MdsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MdsList::InternalSwap(MdsList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MdsList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionTMarket::InitAsDefaultInstance() {
  ::pb::_OptionTMarket_default_instance_._instance.get_mutable()->calltk_ = const_cast< ::pb::MarketDataSnapshot*>(
      ::pb::MarketDataSnapshot::internal_default_instance());
  ::pb::_OptionTMarket_default_instance_._instance.get_mutable()->puttk_ = const_cast< ::pb::MarketDataSnapshot*>(
      ::pb::MarketDataSnapshot::internal_default_instance());
}
class OptionTMarket::HasBitSetters {
 public:
  static const ::pb::MarketDataSnapshot& calltk(const OptionTMarket* msg);
  static const ::pb::MarketDataSnapshot& puttk(const OptionTMarket* msg);
};

const ::pb::MarketDataSnapshot&
OptionTMarket::HasBitSetters::calltk(const OptionTMarket* msg) {
  return *msg->calltk_;
}
const ::pb::MarketDataSnapshot&
OptionTMarket::HasBitSetters::puttk(const OptionTMarket* msg) {
  return *msg->puttk_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionTMarket::kCallTkFieldNumber;
const int OptionTMarket::kPutTkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionTMarket::OptionTMarket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OptionTMarket)
}
OptionTMarket::OptionTMarket(const OptionTMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_calltk()) {
    calltk_ = new ::pb::MarketDataSnapshot(*from.calltk_);
  } else {
    calltk_ = nullptr;
  }
  if (from.has_puttk()) {
    puttk_ = new ::pb::MarketDataSnapshot(*from.puttk_);
  } else {
    puttk_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.OptionTMarket)
}

void OptionTMarket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptionTMarket_market_5fdata_2eproto.base);
  ::memset(&calltk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&puttk_) -
      reinterpret_cast<char*>(&calltk_)) + sizeof(puttk_));
}

OptionTMarket::~OptionTMarket() {
  // @@protoc_insertion_point(destructor:pb.OptionTMarket)
  SharedDtor();
}

void OptionTMarket::SharedDtor() {
  if (this != internal_default_instance()) delete calltk_;
  if (this != internal_default_instance()) delete puttk_;
}

void OptionTMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionTMarket& OptionTMarket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionTMarket_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void OptionTMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.OptionTMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && calltk_ != nullptr) {
    delete calltk_;
  }
  calltk_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && puttk_ != nullptr) {
    delete puttk_;
  }
  puttk_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptionTMarket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.MarketDataSnapshot callTk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_calltk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.MarketDataSnapshot putTk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_puttk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptionTMarket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OptionTMarket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.MarketDataSnapshot callTk = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_calltk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.MarketDataSnapshot putTk = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_puttk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OptionTMarket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OptionTMarket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptionTMarket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OptionTMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.MarketDataSnapshot callTk = 1;
  if (this->has_calltk()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::calltk(this), output);
  }

  // .pb.MarketDataSnapshot putTk = 2;
  if (this->has_puttk()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::puttk(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OptionTMarket)
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionTMarket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OptionTMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.MarketDataSnapshot callTk = 1;
  if (this->has_calltk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::calltk(this), target);
  }

  // .pb.MarketDataSnapshot putTk = 2;
  if (this->has_puttk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::puttk(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OptionTMarket)
  return target;
}

size_t OptionTMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.OptionTMarket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.MarketDataSnapshot callTk = 1;
  if (this->has_calltk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calltk_);
  }

  // .pb.MarketDataSnapshot putTk = 2;
  if (this->has_puttk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *puttk_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionTMarket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.OptionTMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionTMarket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionTMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.OptionTMarket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.OptionTMarket)
    MergeFrom(*source);
  }
}

void OptionTMarket::MergeFrom(const OptionTMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.OptionTMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_calltk()) {
    mutable_calltk()->::pb::MarketDataSnapshot::MergeFrom(from.calltk());
  }
  if (from.has_puttk()) {
    mutable_puttk()->::pb::MarketDataSnapshot::MergeFrom(from.puttk());
  }
}

void OptionTMarket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.OptionTMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionTMarket::CopyFrom(const OptionTMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.OptionTMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionTMarket::IsInitialized() const {
  return true;
}

void OptionTMarket::Swap(OptionTMarket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionTMarket::InternalSwap(OptionTMarket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(calltk_, other->calltk_);
  swap(puttk_, other->puttk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionTMarket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleTickForTQuote::InitAsDefaultInstance() {
  ::pb::_SimpleTickForTQuote_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class SimpleTickForTQuote::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const SimpleTickForTQuote* msg);
};

const ::pb::Symbol&
SimpleTickForTQuote::HasBitSetters::symbol(const SimpleTickForTQuote* msg) {
  return *msg->symbol_;
}
void SimpleTickForTQuote::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleTickForTQuote::kSymbolFieldNumber;
const int SimpleTickForTQuote::kPriceFieldNumber;
const int SimpleTickForTQuote::kUpDownRatioFieldNumber;
const int SimpleTickForTQuote::kPreSettlementPriceFieldNumber;
const int SimpleTickForTQuote::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleTickForTQuote::SimpleTickForTQuote()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SimpleTickForTQuote)
}
SimpleTickForTQuote::SimpleTickForTQuote(const SimpleTickForTQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&pre_settlement_price_) -
    reinterpret_cast<char*>(&price_)) + sizeof(pre_settlement_price_));
  // @@protoc_insertion_point(copy_constructor:pb.SimpleTickForTQuote)
}

void SimpleTickForTQuote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleTickForTQuote_market_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_settlement_price_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(pre_settlement_price_));
}

SimpleTickForTQuote::~SimpleTickForTQuote() {
  // @@protoc_insertion_point(destructor:pb.SimpleTickForTQuote)
  SharedDtor();
}

void SimpleTickForTQuote::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
}

void SimpleTickForTQuote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleTickForTQuote& SimpleTickForTQuote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleTickForTQuote_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SimpleTickForTQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SimpleTickForTQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_settlement_price_) -
      reinterpret_cast<char*>(&price_)) + sizeof(pre_settlement_price_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimpleTickForTQuote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double up_down_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          up_down_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_settlement_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          pre_settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "pb.SimpleTickForTQuote.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimpleTickForTQuote::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SimpleTickForTQuote)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double up_down_ratio = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &up_down_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_settlement_price = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.SimpleTickForTQuote.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SimpleTickForTQuote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SimpleTickForTQuote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimpleTickForTQuote::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SimpleTickForTQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // double price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // double up_down_ratio = 3;
  if (!(this->up_down_ratio() <= 0 && this->up_down_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->up_down_ratio(), output);
  }

  // double pre_settlement_price = 4;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->pre_settlement_price(), output);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SimpleTickForTQuote.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SimpleTickForTQuote)
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleTickForTQuote::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SimpleTickForTQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // double price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // double up_down_ratio = 3;
  if (!(this->up_down_ratio() <= 0 && this->up_down_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->up_down_ratio(), target);
  }

  // double pre_settlement_price = 4;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->pre_settlement_price(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SimpleTickForTQuote.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SimpleTickForTQuote)
  return target;
}

size_t SimpleTickForTQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SimpleTickForTQuote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // double price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // double up_down_ratio = 3;
  if (!(this->up_down_ratio() <= 0 && this->up_down_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_settlement_price = 4;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleTickForTQuote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SimpleTickForTQuote)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleTickForTQuote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleTickForTQuote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SimpleTickForTQuote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SimpleTickForTQuote)
    MergeFrom(*source);
  }
}

void SimpleTickForTQuote::MergeFrom(const SimpleTickForTQuote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SimpleTickForTQuote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    set_price(from.price());
  }
  if (!(from.up_down_ratio() <= 0 && from.up_down_ratio() >= 0)) {
    set_up_down_ratio(from.up_down_ratio());
  }
  if (!(from.pre_settlement_price() <= 0 && from.pre_settlement_price() >= 0)) {
    set_pre_settlement_price(from.pre_settlement_price());
  }
}

void SimpleTickForTQuote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SimpleTickForTQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleTickForTQuote::CopyFrom(const SimpleTickForTQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SimpleTickForTQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleTickForTQuote::IsInitialized() const {
  return true;
}

void SimpleTickForTQuote::Swap(SimpleTickForTQuote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleTickForTQuote::InternalSwap(SimpleTickForTQuote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(price_, other->price_);
  swap(up_down_ratio_, other->up_down_ratio_);
  swap(pre_settlement_price_, other->pre_settlement_price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleTickForTQuote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionTQuoteItem::InitAsDefaultInstance() {
  ::pb::_OptionTQuoteItem_default_instance_._instance.get_mutable()->call_ = const_cast< ::pb::SimpleTickForTQuote*>(
      ::pb::SimpleTickForTQuote::internal_default_instance());
  ::pb::_OptionTQuoteItem_default_instance_._instance.get_mutable()->put_ = const_cast< ::pb::SimpleTickForTQuote*>(
      ::pb::SimpleTickForTQuote::internal_default_instance());
}
class OptionTQuoteItem::HasBitSetters {
 public:
  static const ::pb::SimpleTickForTQuote& call(const OptionTQuoteItem* msg);
  static const ::pb::SimpleTickForTQuote& put(const OptionTQuoteItem* msg);
};

const ::pb::SimpleTickForTQuote&
OptionTQuoteItem::HasBitSetters::call(const OptionTQuoteItem* msg) {
  return *msg->call_;
}
const ::pb::SimpleTickForTQuote&
OptionTQuoteItem::HasBitSetters::put(const OptionTQuoteItem* msg) {
  return *msg->put_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionTQuoteItem::kExercisePriceFieldNumber;
const int OptionTQuoteItem::kCallFieldNumber;
const int OptionTQuoteItem::kPutFieldNumber;
const int OptionTQuoteItem::kExercisePriceFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionTQuoteItem::OptionTQuoteItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OptionTQuoteItem)
}
OptionTQuoteItem::OptionTQuoteItem(const OptionTQuoteItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exercise_price_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exercise_price_flag().size() > 0) {
    exercise_price_flag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exercise_price_flag_);
  }
  if (from.has_call()) {
    call_ = new ::pb::SimpleTickForTQuote(*from.call_);
  } else {
    call_ = nullptr;
  }
  if (from.has_put()) {
    put_ = new ::pb::SimpleTickForTQuote(*from.put_);
  } else {
    put_ = nullptr;
  }
  exercise_price_ = from.exercise_price_;
  // @@protoc_insertion_point(copy_constructor:pb.OptionTQuoteItem)
}

void OptionTQuoteItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptionTQuoteItem_market_5fdata_2eproto.base);
  exercise_price_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exercise_price_) -
      reinterpret_cast<char*>(&call_)) + sizeof(exercise_price_));
}

OptionTQuoteItem::~OptionTQuoteItem() {
  // @@protoc_insertion_point(destructor:pb.OptionTQuoteItem)
  SharedDtor();
}

void OptionTQuoteItem::SharedDtor() {
  exercise_price_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete put_;
}

void OptionTQuoteItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionTQuoteItem& OptionTQuoteItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionTQuoteItem_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void OptionTQuoteItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.OptionTQuoteItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exercise_price_flag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && put_ != nullptr) {
    delete put_;
  }
  put_ = nullptr;
  exercise_price_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptionTQuoteItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double exercise_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          exercise_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pb.SimpleTickForTQuote call = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.SimpleTickForTQuote put = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_put(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exercise_price_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exercise_price_flag(), ptr, ctx, "pb.OptionTQuoteItem.exercise_price_flag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptionTQuoteItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OptionTQuoteItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double exercise_price = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exercise_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.SimpleTickForTQuote call = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_call()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.SimpleTickForTQuote put = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exercise_price_flag = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exercise_price_flag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exercise_price_flag().data(), static_cast<int>(this->exercise_price_flag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.OptionTQuoteItem.exercise_price_flag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OptionTQuoteItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OptionTQuoteItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptionTQuoteItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OptionTQuoteItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double exercise_price = 1;
  if (!(this->exercise_price() <= 0 && this->exercise_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->exercise_price(), output);
  }

  // .pb.SimpleTickForTQuote call = 2;
  if (this->has_call()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::call(this), output);
  }

  // .pb.SimpleTickForTQuote put = 3;
  if (this->has_put()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::put(this), output);
  }

  // string exercise_price_flag = 4;
  if (this->exercise_price_flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_price_flag().data(), static_cast<int>(this->exercise_price_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionTQuoteItem.exercise_price_flag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exercise_price_flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OptionTQuoteItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionTQuoteItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OptionTQuoteItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double exercise_price = 1;
  if (!(this->exercise_price() <= 0 && this->exercise_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->exercise_price(), target);
  }

  // .pb.SimpleTickForTQuote call = 2;
  if (this->has_call()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::call(this), target);
  }

  // .pb.SimpleTickForTQuote put = 3;
  if (this->has_put()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::put(this), target);
  }

  // string exercise_price_flag = 4;
  if (this->exercise_price_flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exercise_price_flag().data(), static_cast<int>(this->exercise_price_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionTQuoteItem.exercise_price_flag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->exercise_price_flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OptionTQuoteItem)
  return target;
}

size_t OptionTQuoteItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.OptionTQuoteItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exercise_price_flag = 4;
  if (this->exercise_price_flag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exercise_price_flag());
  }

  // .pb.SimpleTickForTQuote call = 2;
  if (this->has_call()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  // .pb.SimpleTickForTQuote put = 3;
  if (this->has_put()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *put_);
  }

  // double exercise_price = 1;
  if (!(this->exercise_price() <= 0 && this->exercise_price() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionTQuoteItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.OptionTQuoteItem)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionTQuoteItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionTQuoteItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.OptionTQuoteItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.OptionTQuoteItem)
    MergeFrom(*source);
  }
}

void OptionTQuoteItem::MergeFrom(const OptionTQuoteItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.OptionTQuoteItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exercise_price_flag().size() > 0) {

    exercise_price_flag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exercise_price_flag_);
  }
  if (from.has_call()) {
    mutable_call()->::pb::SimpleTickForTQuote::MergeFrom(from.call());
  }
  if (from.has_put()) {
    mutable_put()->::pb::SimpleTickForTQuote::MergeFrom(from.put());
  }
  if (!(from.exercise_price() <= 0 && from.exercise_price() >= 0)) {
    set_exercise_price(from.exercise_price());
  }
}

void OptionTQuoteItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.OptionTQuoteItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionTQuoteItem::CopyFrom(const OptionTQuoteItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.OptionTQuoteItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionTQuoteItem::IsInitialized() const {
  return true;
}

void OptionTQuoteItem::Swap(OptionTQuoteItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionTQuoteItem::InternalSwap(OptionTQuoteItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exercise_price_flag_.Swap(&other->exercise_price_flag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(call_, other->call_);
  swap(put_, other->put_);
  swap(exercise_price_, other->exercise_price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionTQuoteItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionTQuoteItemList::InitAsDefaultInstance() {
}
class OptionTQuoteItemList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionTQuoteItemList::kExchangeFieldNumber;
const int OptionTQuoteItemList::kStrikeSymbolFieldNumber;
const int OptionTQuoteItemList::kMonthFieldNumber;
const int OptionTQuoteItemList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionTQuoteItemList::OptionTQuoteItemList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OptionTQuoteItemList)
}
OptionTQuoteItemList::OptionTQuoteItemList(const OptionTQuoteItemList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strike_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.strike_symbol().size() > 0) {
    strike_symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strike_symbol_);
  }
  month_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.month().size() > 0) {
    month_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.month_);
  }
  exchange_ = from.exchange_;
  // @@protoc_insertion_point(copy_constructor:pb.OptionTQuoteItemList)
}

void OptionTQuoteItemList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptionTQuoteItemList_market_5fdata_2eproto.base);
  strike_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  month_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
}

OptionTQuoteItemList::~OptionTQuoteItemList() {
  // @@protoc_insertion_point(destructor:pb.OptionTQuoteItemList)
  SharedDtor();
}

void OptionTQuoteItemList::SharedDtor() {
  strike_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  month_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OptionTQuoteItemList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionTQuoteItemList& OptionTQuoteItemList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionTQuoteItemList_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void OptionTQuoteItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.OptionTQuoteItemList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  strike_symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  month_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptionTQuoteItemList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strike_symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_strike_symbol(), ptr, ctx, "pb.OptionTQuoteItemList.strike_symbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string month = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_month(), ptr, ctx, "pb.OptionTQuoteItemList.month");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.OptionTQuoteItem list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptionTQuoteItemList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OptionTQuoteItemList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 exchange = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strike_symbol = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_strike_symbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->strike_symbol().data(), static_cast<int>(this->strike_symbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.OptionTQuoteItemList.strike_symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string month = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_month()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->month().data(), static_cast<int>(this->month().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.OptionTQuoteItemList.month"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.OptionTQuoteItem list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OptionTQuoteItemList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OptionTQuoteItemList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptionTQuoteItemList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OptionTQuoteItemList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exchange = 1;
  if (this->exchange() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->exchange(), output);
  }

  // string strike_symbol = 2;
  if (this->strike_symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strike_symbol().data(), static_cast<int>(this->strike_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionTQuoteItemList.strike_symbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strike_symbol(), output);
  }

  // string month = 3;
  if (this->month().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->month().data(), static_cast<int>(this->month().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionTQuoteItemList.month");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->month(), output);
  }

  // repeated .pb.OptionTQuoteItem list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OptionTQuoteItemList)
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionTQuoteItemList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OptionTQuoteItemList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exchange = 1;
  if (this->exchange() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->exchange(), target);
  }

  // string strike_symbol = 2;
  if (this->strike_symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strike_symbol().data(), static_cast<int>(this->strike_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionTQuoteItemList.strike_symbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->strike_symbol(), target);
  }

  // string month = 3;
  if (this->month().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->month().data(), static_cast<int>(this->month().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.OptionTQuoteItemList.month");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->month(), target);
  }

  // repeated .pb.OptionTQuoteItem list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OptionTQuoteItemList)
  return target;
}

size_t OptionTQuoteItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.OptionTQuoteItemList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.OptionTQuoteItem list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // string strike_symbol = 2;
  if (this->strike_symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->strike_symbol());
  }

  // string month = 3;
  if (this->month().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->month());
  }

  // int32 exchange = 1;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionTQuoteItemList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.OptionTQuoteItemList)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionTQuoteItemList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionTQuoteItemList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.OptionTQuoteItemList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.OptionTQuoteItemList)
    MergeFrom(*source);
  }
}

void OptionTQuoteItemList::MergeFrom(const OptionTQuoteItemList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.OptionTQuoteItemList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.strike_symbol().size() > 0) {

    strike_symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strike_symbol_);
  }
  if (from.month().size() > 0) {

    month_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.month_);
  }
  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
}

void OptionTQuoteItemList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.OptionTQuoteItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionTQuoteItemList::CopyFrom(const OptionTQuoteItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.OptionTQuoteItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionTQuoteItemList::IsInitialized() const {
  return true;
}

void OptionTQuoteItemList::Swap(OptionTQuoteItemList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionTQuoteItemList::InternalSwap(OptionTQuoteItemList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  strike_symbol_.Swap(&other->strike_symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  month_.Swap(&other->month_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exchange_, other->exchange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionTQuoteItemList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Kline::InitAsDefaultInstance() {
}
class Kline::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Kline::kTimeFieldNumber;
const int Kline::kOpenFieldNumber;
const int Kline::kHighFieldNumber;
const int Kline::kLowFieldNumber;
const int Kline::kCloseFieldNumber;
const int Kline::kVolumeFieldNumber;
const int Kline::kAmountFieldNumber;
const int Kline::kPositionFieldNumber;
const int Kline::kTradingDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Kline::Kline()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Kline)
}
Kline::Kline(const Kline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&trading_day_) -
    reinterpret_cast<char*>(&time_)) + sizeof(trading_day_));
  // @@protoc_insertion_point(copy_constructor:pb.Kline)
}

void Kline::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_day_) -
      reinterpret_cast<char*>(&time_)) + sizeof(trading_day_));
}

Kline::~Kline() {
  // @@protoc_insertion_point(destructor:pb.Kline)
  SharedDtor();
}

void Kline::SharedDtor() {
}

void Kline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Kline& Kline::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Kline_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Kline::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Kline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_day_) -
      reinterpret_cast<char*>(&time_)) + sizeof(trading_day_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Kline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double high = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trading_day = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          trading_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Kline::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Kline)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double open = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double high = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double low = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double close = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double amount = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trading_day = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Kline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Kline)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Kline::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Kline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // double open = 2;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->open(), output);
  }

  // double high = 3;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->high(), output);
  }

  // double low = 4;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->low(), output);
  }

  // double close = 5;
  if (!(this->close() <= 0 && this->close() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->close(), output);
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->volume(), output);
  }

  // double amount = 7;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->amount(), output);
  }

  // int32 position = 8;
  if (this->position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->position(), output);
  }

  // int32 trading_day = 9;
  if (this->trading_day() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->trading_day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Kline)
}

::PROTOBUF_NAMESPACE_ID::uint8* Kline::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Kline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // double open = 2;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->open(), target);
  }

  // double high = 3;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->high(), target);
  }

  // double low = 4;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->low(), target);
  }

  // double close = 5;
  if (!(this->close() <= 0 && this->close() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->close(), target);
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->volume(), target);
  }

  // double amount = 7;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->amount(), target);
  }

  // int32 position = 8;
  if (this->position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->position(), target);
  }

  // int32 trading_day = 9;
  if (this->trading_day() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->trading_day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Kline)
  return target;
}

size_t Kline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Kline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // double open = 2;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    total_size += 1 + 8;
  }

  // double high = 3;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    total_size += 1 + 8;
  }

  // double low = 4;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    total_size += 1 + 8;
  }

  // double close = 5;
  if (!(this->close() <= 0 && this->close() >= 0)) {
    total_size += 1 + 8;
  }

  // double amount = 7;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int32 position = 8;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->position());
  }

  // int32 trading_day = 9;
  if (this->trading_day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trading_day());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Kline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Kline)
  GOOGLE_DCHECK_NE(&from, this);
  const Kline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Kline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Kline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Kline)
    MergeFrom(*source);
  }
}

void Kline::MergeFrom(const Kline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Kline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (!(from.open() <= 0 && from.open() >= 0)) {
    set_open(from.open());
  }
  if (!(from.high() <= 0 && from.high() >= 0)) {
    set_high(from.high());
  }
  if (!(from.low() <= 0 && from.low() >= 0)) {
    set_low(from.low());
  }
  if (!(from.close() <= 0 && from.close() >= 0)) {
    set_close(from.close());
  }
  if (!(from.amount() <= 0 && from.amount() >= 0)) {
    set_amount(from.amount());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.trading_day() != 0) {
    set_trading_day(from.trading_day());
  }
}

void Kline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Kline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kline::CopyFrom(const Kline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Kline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kline::IsInitialized() const {
  return true;
}

void Kline::Swap(Kline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Kline::InternalSwap(Kline* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(open_, other->open_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(close_, other->close_);
  swap(amount_, other->amount_);
  swap(volume_, other->volume_);
  swap(position_, other->position_);
  swap(trading_day_, other->trading_day_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Kline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KlineSeries::InitAsDefaultInstance() {
  ::pb::_KlineSeries_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class KlineSeries::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const KlineSeries* msg);
};

const ::pb::Symbol&
KlineSeries::HasBitSetters::symbol(const KlineSeries* msg) {
  return *msg->symbol_;
}
void KlineSeries::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KlineSeries::kSymbolFieldNumber;
const int KlineSeries::kPeriodFieldNumber;
const int KlineSeries::kPeriodInSecondsFieldNumber;
const int KlineSeries::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KlineSeries::KlineSeries()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.KlineSeries)
}
KlineSeries::KlineSeries(const KlineSeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_in_seconds_) -
    reinterpret_cast<char*>(&period_)) + sizeof(period_in_seconds_));
  // @@protoc_insertion_point(copy_constructor:pb.KlineSeries)
}

void KlineSeries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KlineSeries_market_5fdata_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_in_seconds_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(period_in_seconds_));
}

KlineSeries::~KlineSeries() {
  // @@protoc_insertion_point(destructor:pb.KlineSeries)
  SharedDtor();
}

void KlineSeries::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void KlineSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KlineSeries& KlineSeries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KlineSeries_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void KlineSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.KlineSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_in_seconds_) -
      reinterpret_cast<char*>(&period_)) + sizeof(period_in_seconds_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KlineSeries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.PeriodType period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_period(static_cast<::pb::PeriodType>(val));
        } else goto handle_unusual;
        continue;
      // int32 period_in_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          period_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.Kline list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KlineSeries::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.KlineSeries)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.PeriodType period = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_period(static_cast< ::pb::PeriodType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 period_in_seconds = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_in_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Kline list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.KlineSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.KlineSeries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KlineSeries::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.KlineSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // .pb.PeriodType period = 2;
  if (this->period() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->period(), output);
  }

  // int32 period_in_seconds = 3;
  if (this->period_in_seconds() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->period_in_seconds(), output);
  }

  // repeated .pb.Kline list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.KlineSeries)
}

::PROTOBUF_NAMESPACE_ID::uint8* KlineSeries::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.KlineSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // .pb.PeriodType period = 2;
  if (this->period() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->period(), target);
  }

  // int32 period_in_seconds = 3;
  if (this->period_in_seconds() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->period_in_seconds(), target);
  }

  // repeated .pb.Kline list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.KlineSeries)
  return target;
}

size_t KlineSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.KlineSeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Kline list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.PeriodType period = 2;
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->period());
  }

  // int32 period_in_seconds = 3;
  if (this->period_in_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->period_in_seconds());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KlineSeries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.KlineSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const KlineSeries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KlineSeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.KlineSeries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.KlineSeries)
    MergeFrom(*source);
  }
}

void KlineSeries::MergeFrom(const KlineSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.KlineSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
  if (from.period_in_seconds() != 0) {
    set_period_in_seconds(from.period_in_seconds());
  }
}

void KlineSeries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.KlineSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KlineSeries::CopyFrom(const KlineSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.KlineSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KlineSeries::IsInitialized() const {
  return true;
}

void KlineSeries::Swap(KlineSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KlineSeries::InternalSwap(KlineSeries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(symbol_, other->symbol_);
  swap(period_, other->period_);
  swap(period_in_seconds_, other->period_in_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KlineSeries::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSubscribeMarketData::InitAsDefaultInstance() {
  ::pb::_ReqSubscribeMarketData_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class ReqSubscribeMarketData::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const ReqSubscribeMarketData* msg);
};

const ::pb::Symbol&
ReqSubscribeMarketData::HasBitSetters::symbol(const ReqSubscribeMarketData* msg) {
  return *msg->symbol_;
}
void ReqSubscribeMarketData::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSubscribeMarketData::kSymbolFieldNumber;
const int ReqSubscribeMarketData::kPeriodListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSubscribeMarketData::ReqSubscribeMarketData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqSubscribeMarketData)
}
ReqSubscribeMarketData::ReqSubscribeMarketData(const ReqSubscribeMarketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      periodlist_(from.periodlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.ReqSubscribeMarketData)
}

void ReqSubscribeMarketData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSubscribeMarketData_market_5fdata_2eproto.base);
  symbol_ = nullptr;
}

ReqSubscribeMarketData::~ReqSubscribeMarketData() {
  // @@protoc_insertion_point(destructor:pb.ReqSubscribeMarketData)
  SharedDtor();
}

void ReqSubscribeMarketData::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void ReqSubscribeMarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSubscribeMarketData& ReqSubscribeMarketData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSubscribeMarketData_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void ReqSubscribeMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqSubscribeMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  periodlist_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqSubscribeMarketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.PeriodType periodList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_periodlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_periodlist(static_cast<::pb::PeriodType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqSubscribeMarketData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqSubscribeMarketData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.PeriodType periodList = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_periodlist(static_cast< ::pb::PeriodType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_periodlist(static_cast< ::pb::PeriodType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqSubscribeMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqSubscribeMarketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqSubscribeMarketData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqSubscribeMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // repeated .pb.PeriodType periodList = 2;
  if (this->periodlist_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_periodlist_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->periodlist_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->periodlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqSubscribeMarketData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSubscribeMarketData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqSubscribeMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // repeated .pb.PeriodType periodList = 2;
  if (this->periodlist_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _periodlist_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->periodlist_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqSubscribeMarketData)
  return target;
}

size_t ReqSubscribeMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqSubscribeMarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.PeriodType periodList = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->periodlist_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->periodlist(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _periodlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSubscribeMarketData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqSubscribeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSubscribeMarketData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSubscribeMarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqSubscribeMarketData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqSubscribeMarketData)
    MergeFrom(*source);
  }
}

void ReqSubscribeMarketData::MergeFrom(const ReqSubscribeMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqSubscribeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  periodlist_.MergeFrom(from.periodlist_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
}

void ReqSubscribeMarketData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqSubscribeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubscribeMarketData::CopyFrom(const ReqSubscribeMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqSubscribeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubscribeMarketData::IsInitialized() const {
  return true;
}

void ReqSubscribeMarketData::Swap(ReqSubscribeMarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSubscribeMarketData::InternalSwap(ReqSubscribeMarketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  periodlist_.InternalSwap(&other->periodlist_);
  swap(symbol_, other->symbol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSubscribeMarketData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RspSubscribeMarketData::InitAsDefaultInstance() {
}
class RspSubscribeMarketData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspSubscribeMarketData::RspSubscribeMarketData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspSubscribeMarketData)
}
RspSubscribeMarketData::RspSubscribeMarketData(const RspSubscribeMarketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RspSubscribeMarketData)
}

void RspSubscribeMarketData::SharedCtor() {
}

RspSubscribeMarketData::~RspSubscribeMarketData() {
  // @@protoc_insertion_point(destructor:pb.RspSubscribeMarketData)
  SharedDtor();
}

void RspSubscribeMarketData::SharedDtor() {
}

void RspSubscribeMarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspSubscribeMarketData& RspSubscribeMarketData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RspSubscribeMarketData_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void RspSubscribeMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspSubscribeMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspSubscribeMarketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspSubscribeMarketData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspSubscribeMarketData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspSubscribeMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspSubscribeMarketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspSubscribeMarketData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspSubscribeMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspSubscribeMarketData)
}

::PROTOBUF_NAMESPACE_ID::uint8* RspSubscribeMarketData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspSubscribeMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspSubscribeMarketData)
  return target;
}

size_t RspSubscribeMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspSubscribeMarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspSubscribeMarketData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspSubscribeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const RspSubscribeMarketData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RspSubscribeMarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspSubscribeMarketData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspSubscribeMarketData)
    MergeFrom(*source);
  }
}

void RspSubscribeMarketData::MergeFrom(const RspSubscribeMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspSubscribeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RspSubscribeMarketData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspSubscribeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspSubscribeMarketData::CopyFrom(const RspSubscribeMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspSubscribeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspSubscribeMarketData::IsInitialized() const {
  return true;
}

void RspSubscribeMarketData::Swap(RspSubscribeMarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspSubscribeMarketData::InternalSwap(RspSubscribeMarketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspSubscribeMarketData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RtnMarketDataUpdate::InitAsDefaultInstance() {
  ::pb::_RtnMarketDataUpdate_default_instance_._instance.get_mutable()->tick_ = const_cast< ::pb::MarketDataSnapshot*>(
      ::pb::MarketDataSnapshot::internal_default_instance());
}
class RtnMarketDataUpdate::HasBitSetters {
 public:
  static const ::pb::MarketDataSnapshot& tick(const RtnMarketDataUpdate* msg);
};

const ::pb::MarketDataSnapshot&
RtnMarketDataUpdate::HasBitSetters::tick(const RtnMarketDataUpdate* msg) {
  return *msg->tick_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtnMarketDataUpdate::kTickFieldNumber;
const int RtnMarketDataUpdate::kKlineListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtnMarketDataUpdate::RtnMarketDataUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RtnMarketDataUpdate)
}
RtnMarketDataUpdate::RtnMarketDataUpdate(const RtnMarketDataUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      kline_list_(from.kline_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tick()) {
    tick_ = new ::pb::MarketDataSnapshot(*from.tick_);
  } else {
    tick_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RtnMarketDataUpdate)
}

void RtnMarketDataUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RtnMarketDataUpdate_market_5fdata_2eproto.base);
  tick_ = nullptr;
}

RtnMarketDataUpdate::~RtnMarketDataUpdate() {
  // @@protoc_insertion_point(destructor:pb.RtnMarketDataUpdate)
  SharedDtor();
}

void RtnMarketDataUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete tick_;
}

void RtnMarketDataUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtnMarketDataUpdate& RtnMarketDataUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RtnMarketDataUpdate_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void RtnMarketDataUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RtnMarketDataUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kline_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && tick_ != nullptr) {
    delete tick_;
  }
  tick_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RtnMarketDataUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.MarketDataSnapshot tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_tick(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.Kline kline_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_kline_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RtnMarketDataUpdate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RtnMarketDataUpdate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.MarketDataSnapshot tick = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Kline kline_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_kline_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RtnMarketDataUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RtnMarketDataUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RtnMarketDataUpdate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RtnMarketDataUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.MarketDataSnapshot tick = 1;
  if (this->has_tick()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tick(this), output);
  }

  // repeated .pb.Kline kline_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kline_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->kline_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RtnMarketDataUpdate)
}

::PROTOBUF_NAMESPACE_ID::uint8* RtnMarketDataUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RtnMarketDataUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.MarketDataSnapshot tick = 1;
  if (this->has_tick()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tick(this), target);
  }

  // repeated .pb.Kline kline_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kline_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->kline_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RtnMarketDataUpdate)
  return target;
}

size_t RtnMarketDataUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RtnMarketDataUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Kline kline_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kline_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->kline_list(static_cast<int>(i)));
    }
  }

  // .pb.MarketDataSnapshot tick = 1;
  if (this->has_tick()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtnMarketDataUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RtnMarketDataUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const RtnMarketDataUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtnMarketDataUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RtnMarketDataUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RtnMarketDataUpdate)
    MergeFrom(*source);
  }
}

void RtnMarketDataUpdate::MergeFrom(const RtnMarketDataUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RtnMarketDataUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kline_list_.MergeFrom(from.kline_list_);
  if (from.has_tick()) {
    mutable_tick()->::pb::MarketDataSnapshot::MergeFrom(from.tick());
  }
}

void RtnMarketDataUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RtnMarketDataUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtnMarketDataUpdate::CopyFrom(const RtnMarketDataUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RtnMarketDataUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtnMarketDataUpdate::IsInitialized() const {
  return true;
}

void RtnMarketDataUpdate::Swap(RtnMarketDataUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtnMarketDataUpdate::InternalSwap(RtnMarketDataUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&kline_list_)->InternalSwap(CastToBase(&other->kline_list_));
  swap(tick_, other->tick_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtnMarketDataUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TickSeries::InitAsDefaultInstance() {
  ::pb::_TickSeries_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class TickSeries::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const TickSeries* msg);
};

const ::pb::Symbol&
TickSeries::HasBitSetters::symbol(const TickSeries* msg) {
  return *msg->symbol_;
}
void TickSeries::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TickSeries::kSymbolFieldNumber;
const int TickSeries::kTradingDayFieldNumber;
const int TickSeries::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TickSeries::TickSeries()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TickSeries)
}
TickSeries::TickSeries(const TickSeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  trading_day_ = from.trading_day_;
  // @@protoc_insertion_point(copy_constructor:pb.TickSeries)
}

void TickSeries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TickSeries_market_5fdata_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_day_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(trading_day_));
}

TickSeries::~TickSeries() {
  // @@protoc_insertion_point(destructor:pb.TickSeries)
  SharedDtor();
}

void TickSeries::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void TickSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TickSeries& TickSeries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TickSeries_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TickSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  trading_day_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TickSeries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trading_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          trading_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.MarketDataSnapshot list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TickSeries::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TickSeries)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trading_day = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.MarketDataSnapshot list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TickSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TickSeries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TickSeries::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // int32 trading_day = 2;
  if (this->trading_day() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->trading_day(), output);
  }

  // repeated .pb.MarketDataSnapshot list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TickSeries)
}

::PROTOBUF_NAMESPACE_ID::uint8* TickSeries::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // int32 trading_day = 2;
  if (this->trading_day() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->trading_day(), target);
  }

  // repeated .pb.MarketDataSnapshot list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TickSeries)
  return target;
}

size_t TickSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TickSeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.MarketDataSnapshot list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 trading_day = 2;
  if (this->trading_day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trading_day());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TickSeries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TickSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const TickSeries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TickSeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TickSeries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TickSeries)
    MergeFrom(*source);
  }
}

void TickSeries::MergeFrom(const TickSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TickSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.trading_day() != 0) {
    set_trading_day(from.trading_day());
  }
}

void TickSeries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TickSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickSeries::CopyFrom(const TickSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TickSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickSeries::IsInitialized() const {
  return true;
}

void TickSeries::Swap(TickSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TickSeries::InternalSwap(TickSeries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(symbol_, other->symbol_);
  swap(trading_day_, other->trading_day_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TickSeries::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleTick::InitAsDefaultInstance() {
}
class SimpleTick::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleTick::kTimeFieldNumber;
const int SimpleTick::kPriceFieldNumber;
const int SimpleTick::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleTick::SimpleTick()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SimpleTick)
}
SimpleTick::SimpleTick(const SimpleTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&time_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:pb.SimpleTick)
}

void SimpleTick::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&time_)) + sizeof(volume_));
}

SimpleTick::~SimpleTick() {
  // @@protoc_insertion_point(destructor:pb.SimpleTick)
  SharedDtor();
}

void SimpleTick::SharedDtor() {
}

void SimpleTick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleTick& SimpleTick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleTick_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SimpleTick::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SimpleTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&time_)) + sizeof(volume_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimpleTick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimpleTick::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SimpleTick)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SimpleTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SimpleTick)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimpleTick::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SimpleTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // double price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // int32 volume = 3;
  if (this->volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SimpleTick)
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleTick::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SimpleTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // double price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // int32 volume = 3;
  if (this->volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SimpleTick)
  return target;
}

size_t SimpleTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SimpleTick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // double price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 volume = 3;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleTick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SimpleTick)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleTick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleTick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SimpleTick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SimpleTick)
    MergeFrom(*source);
  }
}

void SimpleTick::MergeFrom(const SimpleTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SimpleTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
}

void SimpleTick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SimpleTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleTick::CopyFrom(const SimpleTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SimpleTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleTick::IsInitialized() const {
  return true;
}

void SimpleTick::Swap(SimpleTick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleTick::InternalSwap(SimpleTick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(price_, other->price_);
  swap(volume_, other->volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleTick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleTickSeries::InitAsDefaultInstance() {
  ::pb::_SimpleTickSeries_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class SimpleTickSeries::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const SimpleTickSeries* msg);
};

const ::pb::Symbol&
SimpleTickSeries::HasBitSetters::symbol(const SimpleTickSeries* msg) {
  return *msg->symbol_;
}
void SimpleTickSeries::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleTickSeries::kSymbolFieldNumber;
const int SimpleTickSeries::kTradingDayFieldNumber;
const int SimpleTickSeries::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleTickSeries::SimpleTickSeries()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SimpleTickSeries)
}
SimpleTickSeries::SimpleTickSeries(const SimpleTickSeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  trading_day_ = from.trading_day_;
  // @@protoc_insertion_point(copy_constructor:pb.SimpleTickSeries)
}

void SimpleTickSeries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleTickSeries_market_5fdata_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_day_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(trading_day_));
}

SimpleTickSeries::~SimpleTickSeries() {
  // @@protoc_insertion_point(destructor:pb.SimpleTickSeries)
  SharedDtor();
}

void SimpleTickSeries::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void SimpleTickSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleTickSeries& SimpleTickSeries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleTickSeries_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SimpleTickSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SimpleTickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  trading_day_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimpleTickSeries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trading_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          trading_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.SimpleTick list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimpleTickSeries::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SimpleTickSeries)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trading_day = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.SimpleTick list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SimpleTickSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SimpleTickSeries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimpleTickSeries::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SimpleTickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // int32 trading_day = 2;
  if (this->trading_day() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->trading_day(), output);
  }

  // repeated .pb.SimpleTick list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SimpleTickSeries)
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleTickSeries::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SimpleTickSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // int32 trading_day = 2;
  if (this->trading_day() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->trading_day(), target);
  }

  // repeated .pb.SimpleTick list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SimpleTickSeries)
  return target;
}

size_t SimpleTickSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SimpleTickSeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.SimpleTick list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 trading_day = 2;
  if (this->trading_day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trading_day());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleTickSeries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SimpleTickSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleTickSeries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleTickSeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SimpleTickSeries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SimpleTickSeries)
    MergeFrom(*source);
  }
}

void SimpleTickSeries::MergeFrom(const SimpleTickSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SimpleTickSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.trading_day() != 0) {
    set_trading_day(from.trading_day());
  }
}

void SimpleTickSeries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SimpleTickSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleTickSeries::CopyFrom(const SimpleTickSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SimpleTickSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleTickSeries::IsInitialized() const {
  return true;
}

void SimpleTickSeries::Swap(SimpleTickSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleTickSeries::InternalSwap(SimpleTickSeries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(symbol_, other->symbol_);
  swap(trading_day_, other->trading_day_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleTickSeries::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::OrderBook* Arena::CreateMaybeMessage< ::pb::OrderBook >(Arena* arena) {
  return Arena::CreateInternal< ::pb::OrderBook >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::MarketDataSnapshot* Arena::CreateMaybeMessage< ::pb::MarketDataSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::pb::MarketDataSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::MdsList* Arena::CreateMaybeMessage< ::pb::MdsList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::MdsList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::OptionTMarket* Arena::CreateMaybeMessage< ::pb::OptionTMarket >(Arena* arena) {
  return Arena::CreateInternal< ::pb::OptionTMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SimpleTickForTQuote* Arena::CreateMaybeMessage< ::pb::SimpleTickForTQuote >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SimpleTickForTQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::OptionTQuoteItem* Arena::CreateMaybeMessage< ::pb::OptionTQuoteItem >(Arena* arena) {
  return Arena::CreateInternal< ::pb::OptionTQuoteItem >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::OptionTQuoteItemList* Arena::CreateMaybeMessage< ::pb::OptionTQuoteItemList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::OptionTQuoteItemList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Kline* Arena::CreateMaybeMessage< ::pb::Kline >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Kline >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::KlineSeries* Arena::CreateMaybeMessage< ::pb::KlineSeries >(Arena* arena) {
  return Arena::CreateInternal< ::pb::KlineSeries >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqSubscribeMarketData* Arena::CreateMaybeMessage< ::pb::ReqSubscribeMarketData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqSubscribeMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspSubscribeMarketData* Arena::CreateMaybeMessage< ::pb::RspSubscribeMarketData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspSubscribeMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RtnMarketDataUpdate* Arena::CreateMaybeMessage< ::pb::RtnMarketDataUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RtnMarketDataUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TickSeries* Arena::CreateMaybeMessage< ::pb::TickSeries >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TickSeries >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SimpleTick* Arena::CreateMaybeMessage< ::pb::SimpleTick >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SimpleTick >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SimpleTickSeries* Arena::CreateMaybeMessage< ::pb::SimpleTickSeries >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SimpleTickSeries >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
