// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data_srv.proto

#include "market_data_srv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Symbol_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Kline_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_KlineSeries_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MarketDataSnapshot_market_5fdata_2eproto;
namespace pb {
class ReqSaveKlineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSaveKline> _instance;
} _ReqSaveKline_default_instance_;
class RspSaveKlineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RspSaveKline> _instance;
} _RspSaveKline_default_instance_;
class ReqCombineSubscribeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqCombineSubscribe> _instance;
} _ReqCombineSubscribe_default_instance_;
class RspCombineSubscribeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RspCombineSubscribe> _instance;
} _RspCombineSubscribe_default_instance_;
}  // namespace pb
static void InitDefaultsReqSaveKline_market_5fdata_5fsrv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqSaveKline_default_instance_;
    new (ptr) ::pb::ReqSaveKline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqSaveKline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqSaveKline_market_5fdata_5fsrv_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqSaveKline_market_5fdata_5fsrv_2eproto}, {
      &scc_info_KlineSeries_market_5fdata_2eproto.base,}};

static void InitDefaultsRspSaveKline_market_5fdata_5fsrv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspSaveKline_default_instance_;
    new (ptr) ::pb::RspSaveKline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspSaveKline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RspSaveKline_market_5fdata_5fsrv_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRspSaveKline_market_5fdata_5fsrv_2eproto}, {}};

static void InitDefaultsReqCombineSubscribe_market_5fdata_5fsrv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReqCombineSubscribe_default_instance_;
    new (ptr) ::pb::ReqCombineSubscribe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReqCombineSubscribe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqCombineSubscribe_market_5fdata_5fsrv_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqCombineSubscribe_market_5fdata_5fsrv_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsRspCombineSubscribe_market_5fdata_5fsrv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RspCombineSubscribe_default_instance_;
    new (ptr) ::pb::RspCombineSubscribe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RspCombineSubscribe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RspCombineSubscribe_market_5fdata_5fsrv_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRspCombineSubscribe_market_5fdata_5fsrv_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_KlineSeries_market_5fdata_2eproto.base,
      &scc_info_MarketDataSnapshot_market_5fdata_2eproto.base,
      &scc_info_Kline_market_5fdata_2eproto.base,}};

void InitDefaults_market_5fdata_5fsrv_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSaveKline_market_5fdata_5fsrv_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RspSaveKline_market_5fdata_5fsrv_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqCombineSubscribe_market_5fdata_5fsrv_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RspCombineSubscribe_market_5fdata_5fsrv_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_market_5fdata_5fsrv_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_market_5fdata_5fsrv_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_market_5fdata_5fsrv_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_market_5fdata_5fsrv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSaveKline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqSaveKline, series_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspSaveKline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReqCombineSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReqCombineSubscribe, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::ReqCombineSubscribe, period_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RspCombineSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RspCombineSubscribe, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::RspCombineSubscribe, history_),
  PROTOBUF_FIELD_OFFSET(::pb::RspCombineSubscribe, tick_),
  PROTOBUF_FIELD_OFFSET(::pb::RspCombineSubscribe, klines_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::ReqSaveKline)},
  { 6, -1, sizeof(::pb::RspSaveKline)},
  { 11, -1, sizeof(::pb::ReqCombineSubscribe)},
  { 18, -1, sizeof(::pb::RspCombineSubscribe)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_ReqSaveKline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RspSaveKline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_ReqCombineSubscribe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RspCombineSubscribe_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_market_5fdata_5fsrv_2eproto = {
  {}, AddDescriptors_market_5fdata_5fsrv_2eproto, "market_data_srv.proto", schemas,
  file_default_instances, TableStruct_market_5fdata_5fsrv_2eproto::offsets,
  file_level_metadata_market_5fdata_5fsrv_2eproto, 4, file_level_enum_descriptors_market_5fdata_5fsrv_2eproto, file_level_service_descriptors_market_5fdata_5fsrv_2eproto,
};

const char descriptor_table_protodef_market_5fdata_5fsrv_2eproto[] =
  "\n\025market_data_srv.proto\022\002pb\032\014common.prot"
  "o\032\021market_data.proto\"/\n\014ReqSaveKline\022\037\n\006"
  "series\030\001 \001(\0132\017.pb.KlineSeries\"\016\n\014RspSave"
  "Kline\"V\n\023ReqCombineSubscribe\022\032\n\006symbol\030\001"
  " \001(\0132\n.pb.Symbol\022#\n\013period_list\030\002 \003(\0162\016."
  "pb.PeriodType\"\224\001\n\023RspCombineSubscribe\022\032\n"
  "\006symbol\030\001 \001(\0132\n.pb.Symbol\022 \n\007history\030\002 \003"
  "(\0132\017.pb.KlineSeries\022$\n\004tick\030\003 \001(\0132\026.pb.M"
  "arketDataSnapshot\022\031\n\006klines\030\004 \003(\0132\t.pb.K"
  "line2\361\001\n\nDataSource\022/\n\tSaveKline\022\020.pb.Re"
  "qSaveKline\032\020.pb.RspSaveKline\0221\n\tSubscrib"
  "e\022\n.pb.Symbol\032\026.pb.MarketDataSnapshot0\001\022"
  "7\n\nUpdateTick\022\026.pb.MarketDataSnapshot\032\021."
  "pb.EmptyResponse\022F\n\020CombineSubscribe\022\027.p"
  "b.ReqCombineSubscribe\032\027.pb.RspCombineSub"
  "scribe0\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_market_5fdata_5fsrv_2eproto = {
  false, InitDefaults_market_5fdata_5fsrv_2eproto, 
  descriptor_table_protodef_market_5fdata_5fsrv_2eproto,
  "market_data_srv.proto", &assign_descriptors_table_market_5fdata_5fsrv_2eproto, 616,
};

void AddDescriptors_market_5fdata_5fsrv_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_common_2eproto,
    ::AddDescriptors_market_5fdata_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_market_5fdata_5fsrv_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_market_5fdata_5fsrv_2eproto = []() { AddDescriptors_market_5fdata_5fsrv_2eproto(); return true; }();
namespace pb {

// ===================================================================

void ReqSaveKline::InitAsDefaultInstance() {
  ::pb::_ReqSaveKline_default_instance_._instance.get_mutable()->series_ = const_cast< ::pb::KlineSeries*>(
      ::pb::KlineSeries::internal_default_instance());
}
class ReqSaveKline::HasBitSetters {
 public:
  static const ::pb::KlineSeries& series(const ReqSaveKline* msg);
};

const ::pb::KlineSeries&
ReqSaveKline::HasBitSetters::series(const ReqSaveKline* msg) {
  return *msg->series_;
}
void ReqSaveKline::clear_series() {
  if (GetArenaNoVirtual() == nullptr && series_ != nullptr) {
    delete series_;
  }
  series_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSaveKline::kSeriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSaveKline::ReqSaveKline()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqSaveKline)
}
ReqSaveKline::ReqSaveKline(const ReqSaveKline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_series()) {
    series_ = new ::pb::KlineSeries(*from.series_);
  } else {
    series_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.ReqSaveKline)
}

void ReqSaveKline::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReqSaveKline_market_5fdata_5fsrv_2eproto.base);
  series_ = nullptr;
}

ReqSaveKline::~ReqSaveKline() {
  // @@protoc_insertion_point(destructor:pb.ReqSaveKline)
  SharedDtor();
}

void ReqSaveKline::SharedDtor() {
  if (this != internal_default_instance()) delete series_;
}

void ReqSaveKline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSaveKline& ReqSaveKline::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReqSaveKline_market_5fdata_5fsrv_2eproto.base);
  return *internal_default_instance();
}


void ReqSaveKline::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqSaveKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && series_ != nullptr) {
    delete series_;
  }
  series_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqSaveKline::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReqSaveKline*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.KlineSeries series = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::KlineSeries::_InternalParse;
        object = msg->mutable_series();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqSaveKline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqSaveKline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.KlineSeries series = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_series()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqSaveKline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqSaveKline)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqSaveKline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqSaveKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.KlineSeries series = 1;
  if (this->has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::series(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqSaveKline)
}

::google::protobuf::uint8* ReqSaveKline::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqSaveKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.KlineSeries series = 1;
  if (this->has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::series(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqSaveKline)
  return target;
}

size_t ReqSaveKline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqSaveKline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.KlineSeries series = 1;
  if (this->has_series()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *series_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSaveKline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqSaveKline)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSaveKline* source =
      ::google::protobuf::DynamicCastToGenerated<ReqSaveKline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqSaveKline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqSaveKline)
    MergeFrom(*source);
  }
}

void ReqSaveKline::MergeFrom(const ReqSaveKline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqSaveKline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_series()) {
    mutable_series()->::pb::KlineSeries::MergeFrom(from.series());
  }
}

void ReqSaveKline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqSaveKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSaveKline::CopyFrom(const ReqSaveKline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqSaveKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSaveKline::IsInitialized() const {
  return true;
}

void ReqSaveKline::Swap(ReqSaveKline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSaveKline::InternalSwap(ReqSaveKline* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(series_, other->series_);
}

::google::protobuf::Metadata ReqSaveKline::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_market_5fdata_5fsrv_2eproto);
  return ::file_level_metadata_market_5fdata_5fsrv_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RspSaveKline::InitAsDefaultInstance() {
}
class RspSaveKline::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspSaveKline::RspSaveKline()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspSaveKline)
}
RspSaveKline::RspSaveKline(const RspSaveKline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RspSaveKline)
}

void RspSaveKline::SharedCtor() {
}

RspSaveKline::~RspSaveKline() {
  // @@protoc_insertion_point(destructor:pb.RspSaveKline)
  SharedDtor();
}

void RspSaveKline::SharedDtor() {
}

void RspSaveKline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspSaveKline& RspSaveKline::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RspSaveKline_market_5fdata_5fsrv_2eproto.base);
  return *internal_default_instance();
}


void RspSaveKline::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspSaveKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspSaveKline::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RspSaveKline*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspSaveKline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspSaveKline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspSaveKline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspSaveKline)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspSaveKline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspSaveKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspSaveKline)
}

::google::protobuf::uint8* RspSaveKline::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspSaveKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspSaveKline)
  return target;
}

size_t RspSaveKline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspSaveKline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspSaveKline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspSaveKline)
  GOOGLE_DCHECK_NE(&from, this);
  const RspSaveKline* source =
      ::google::protobuf::DynamicCastToGenerated<RspSaveKline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspSaveKline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspSaveKline)
    MergeFrom(*source);
  }
}

void RspSaveKline::MergeFrom(const RspSaveKline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspSaveKline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RspSaveKline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspSaveKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspSaveKline::CopyFrom(const RspSaveKline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspSaveKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspSaveKline::IsInitialized() const {
  return true;
}

void RspSaveKline::Swap(RspSaveKline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspSaveKline::InternalSwap(RspSaveKline* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RspSaveKline::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_market_5fdata_5fsrv_2eproto);
  return ::file_level_metadata_market_5fdata_5fsrv_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReqCombineSubscribe::InitAsDefaultInstance() {
  ::pb::_ReqCombineSubscribe_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class ReqCombineSubscribe::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const ReqCombineSubscribe* msg);
};

const ::pb::Symbol&
ReqCombineSubscribe::HasBitSetters::symbol(const ReqCombineSubscribe* msg) {
  return *msg->symbol_;
}
void ReqCombineSubscribe::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCombineSubscribe::kSymbolFieldNumber;
const int ReqCombineSubscribe::kPeriodListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCombineSubscribe::ReqCombineSubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReqCombineSubscribe)
}
ReqCombineSubscribe::ReqCombineSubscribe(const ReqCombineSubscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      period_list_(from.period_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.ReqCombineSubscribe)
}

void ReqCombineSubscribe::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReqCombineSubscribe_market_5fdata_5fsrv_2eproto.base);
  symbol_ = nullptr;
}

ReqCombineSubscribe::~ReqCombineSubscribe() {
  // @@protoc_insertion_point(destructor:pb.ReqCombineSubscribe)
  SharedDtor();
}

void ReqCombineSubscribe::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void ReqCombineSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqCombineSubscribe& ReqCombineSubscribe::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReqCombineSubscribe_market_5fdata_5fsrv_2eproto.base);
  return *internal_default_instance();
}


void ReqCombineSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReqCombineSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  period_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqCombineSubscribe::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReqCombineSubscribe*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.PeriodType period_list = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_period_list();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_period_list(static_cast<::pb::PeriodType>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqCombineSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReqCombineSubscribe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.PeriodType period_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_period_list(static_cast< ::pb::PeriodType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_period_list(static_cast< ::pb::PeriodType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReqCombineSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReqCombineSubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqCombineSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReqCombineSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // repeated .pb.PeriodType period_list = 2;
  if (this->period_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_period_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->period_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->period_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReqCombineSubscribe)
}

::google::protobuf::uint8* ReqCombineSubscribe::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReqCombineSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // repeated .pb.PeriodType period_list = 2;
  if (this->period_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _period_list_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->period_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReqCombineSubscribe)
  return target;
}

size_t ReqCombineSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReqCombineSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.PeriodType period_list = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->period_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->period_list(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _period_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCombineSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReqCombineSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCombineSubscribe* source =
      ::google::protobuf::DynamicCastToGenerated<ReqCombineSubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReqCombineSubscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReqCombineSubscribe)
    MergeFrom(*source);
  }
}

void ReqCombineSubscribe::MergeFrom(const ReqCombineSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReqCombineSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  period_list_.MergeFrom(from.period_list_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
}

void ReqCombineSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReqCombineSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCombineSubscribe::CopyFrom(const ReqCombineSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReqCombineSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCombineSubscribe::IsInitialized() const {
  return true;
}

void ReqCombineSubscribe::Swap(ReqCombineSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCombineSubscribe::InternalSwap(ReqCombineSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  period_list_.InternalSwap(&other->period_list_);
  swap(symbol_, other->symbol_);
}

::google::protobuf::Metadata ReqCombineSubscribe::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_market_5fdata_5fsrv_2eproto);
  return ::file_level_metadata_market_5fdata_5fsrv_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RspCombineSubscribe::InitAsDefaultInstance() {
  ::pb::_RspCombineSubscribe_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_RspCombineSubscribe_default_instance_._instance.get_mutable()->tick_ = const_cast< ::pb::MarketDataSnapshot*>(
      ::pb::MarketDataSnapshot::internal_default_instance());
}
class RspCombineSubscribe::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const RspCombineSubscribe* msg);
  static const ::pb::MarketDataSnapshot& tick(const RspCombineSubscribe* msg);
};

const ::pb::Symbol&
RspCombineSubscribe::HasBitSetters::symbol(const RspCombineSubscribe* msg) {
  return *msg->symbol_;
}
const ::pb::MarketDataSnapshot&
RspCombineSubscribe::HasBitSetters::tick(const RspCombineSubscribe* msg) {
  return *msg->tick_;
}
void RspCombineSubscribe::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void RspCombineSubscribe::clear_history() {
  history_.Clear();
}
void RspCombineSubscribe::clear_tick() {
  if (GetArenaNoVirtual() == nullptr && tick_ != nullptr) {
    delete tick_;
  }
  tick_ = nullptr;
}
void RspCombineSubscribe::clear_klines() {
  klines_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspCombineSubscribe::kSymbolFieldNumber;
const int RspCombineSubscribe::kHistoryFieldNumber;
const int RspCombineSubscribe::kTickFieldNumber;
const int RspCombineSubscribe::kKlinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspCombineSubscribe::RspCombineSubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RspCombineSubscribe)
}
RspCombineSubscribe::RspCombineSubscribe(const RspCombineSubscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      history_(from.history_),
      klines_(from.klines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_tick()) {
    tick_ = new ::pb::MarketDataSnapshot(*from.tick_);
  } else {
    tick_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RspCombineSubscribe)
}

void RspCombineSubscribe::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RspCombineSubscribe_market_5fdata_5fsrv_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(tick_));
}

RspCombineSubscribe::~RspCombineSubscribe() {
  // @@protoc_insertion_point(destructor:pb.RspCombineSubscribe)
  SharedDtor();
}

void RspCombineSubscribe::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete tick_;
}

void RspCombineSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspCombineSubscribe& RspCombineSubscribe::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RspCombineSubscribe_market_5fdata_5fsrv_2eproto.base);
  return *internal_default_instance();
}


void RspCombineSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RspCombineSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  klines_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tick_ != nullptr) {
    delete tick_;
  }
  tick_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspCombineSubscribe::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RspCombineSubscribe*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.KlineSeries history = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::KlineSeries::_InternalParse;
          object = msg->add_history();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .pb.MarketDataSnapshot tick = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::MarketDataSnapshot::_InternalParse;
        object = msg->mutable_tick();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.Kline klines = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::Kline::_InternalParse;
          object = msg->add_klines();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspCombineSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RspCombineSubscribe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.KlineSeries history = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.MarketDataSnapshot tick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Kline klines = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_klines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RspCombineSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RspCombineSubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspCombineSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RspCombineSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // repeated .pb.KlineSeries history = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->history(static_cast<int>(i)),
      output);
  }

  // .pb.MarketDataSnapshot tick = 3;
  if (this->has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::tick(this), output);
  }

  // repeated .pb.Kline klines = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->klines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->klines(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RspCombineSubscribe)
}

::google::protobuf::uint8* RspCombineSubscribe::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RspCombineSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // repeated .pb.KlineSeries history = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->history(static_cast<int>(i)), target);
  }

  // .pb.MarketDataSnapshot tick = 3;
  if (this->has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::tick(this), target);
  }

  // repeated .pb.Kline klines = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->klines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->klines(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RspCombineSubscribe)
  return target;
}

size_t RspCombineSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RspCombineSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.KlineSeries history = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history(static_cast<int>(i)));
    }
  }

  // repeated .pb.Kline klines = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->klines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->klines(static_cast<int>(i)));
    }
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.MarketDataSnapshot tick = 3;
  if (this->has_tick()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tick_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspCombineSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RspCombineSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const RspCombineSubscribe* source =
      ::google::protobuf::DynamicCastToGenerated<RspCombineSubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RspCombineSubscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RspCombineSubscribe)
    MergeFrom(*source);
  }
}

void RspCombineSubscribe::MergeFrom(const RspCombineSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RspCombineSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  klines_.MergeFrom(from.klines_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_tick()) {
    mutable_tick()->::pb::MarketDataSnapshot::MergeFrom(from.tick());
  }
}

void RspCombineSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RspCombineSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCombineSubscribe::CopyFrom(const RspCombineSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RspCombineSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCombineSubscribe::IsInitialized() const {
  return true;
}

void RspCombineSubscribe::Swap(RspCombineSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspCombineSubscribe::InternalSwap(RspCombineSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&history_)->InternalSwap(CastToBase(&other->history_));
  CastToBase(&klines_)->InternalSwap(CastToBase(&other->klines_));
  swap(symbol_, other->symbol_);
  swap(tick_, other->tick_);
}

::google::protobuf::Metadata RspCombineSubscribe::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_market_5fdata_5fsrv_2eproto);
  return ::file_level_metadata_market_5fdata_5fsrv_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pb::ReqSaveKline* Arena::CreateMaybeMessage< ::pb::ReqSaveKline >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqSaveKline >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspSaveKline* Arena::CreateMaybeMessage< ::pb::RspSaveKline >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspSaveKline >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReqCombineSubscribe* Arena::CreateMaybeMessage< ::pb::ReqCombineSubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReqCombineSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RspCombineSubscribe* Arena::CreateMaybeMessage< ::pb::RspCombineSubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RspCombineSubscribe >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
