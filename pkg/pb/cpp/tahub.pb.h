// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tahub.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tahub_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tahub_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "trading.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tahub_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tahub_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tahub_2eproto;
namespace pb {
class ReqAddAccount;
class ReqAddAccountDefaultTypeInternal;
extern ReqAddAccountDefaultTypeInternal _ReqAddAccount_default_instance_;
class ReqCreateTradingRoute;
class ReqCreateTradingRouteDefaultTypeInternal;
extern ReqCreateTradingRouteDefaultTypeInternal _ReqCreateTradingRoute_default_instance_;
class ReqDeleteAccount;
class ReqDeleteAccountDefaultTypeInternal;
extern ReqDeleteAccountDefaultTypeInternal _ReqDeleteAccount_default_instance_;
class ReqDeleteTradingRoute;
class ReqDeleteTradingRouteDefaultTypeInternal;
extern ReqDeleteTradingRouteDefaultTypeInternal _ReqDeleteTradingRoute_default_instance_;
class ReqGetAccountList;
class ReqGetAccountListDefaultTypeInternal;
extern ReqGetAccountListDefaultTypeInternal _ReqGetAccountList_default_instance_;
class ReqGetTradingRouteList;
class ReqGetTradingRouteListDefaultTypeInternal;
extern ReqGetTradingRouteListDefaultTypeInternal _ReqGetTradingRouteList_default_instance_;
class RspAddAccount;
class RspAddAccountDefaultTypeInternal;
extern RspAddAccountDefaultTypeInternal _RspAddAccount_default_instance_;
class RspCreateTradingRoute;
class RspCreateTradingRouteDefaultTypeInternal;
extern RspCreateTradingRouteDefaultTypeInternal _RspCreateTradingRoute_default_instance_;
class RspDeleteAccount;
class RspDeleteAccountDefaultTypeInternal;
extern RspDeleteAccountDefaultTypeInternal _RspDeleteAccount_default_instance_;
class RspDeleteTradingRoute;
class RspDeleteTradingRouteDefaultTypeInternal;
extern RspDeleteTradingRouteDefaultTypeInternal _RspDeleteTradingRoute_default_instance_;
class RspGetAccountList;
class RspGetAccountListDefaultTypeInternal;
extern RspGetAccountListDefaultTypeInternal _RspGetAccountList_default_instance_;
class RspGetTradingRouteList;
class RspGetTradingRouteListDefaultTypeInternal;
extern RspGetTradingRouteListDefaultTypeInternal _RspGetTradingRouteList_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ReqAddAccount* Arena::CreateMaybeMessage<::pb::ReqAddAccount>(Arena*);
template<> ::pb::ReqCreateTradingRoute* Arena::CreateMaybeMessage<::pb::ReqCreateTradingRoute>(Arena*);
template<> ::pb::ReqDeleteAccount* Arena::CreateMaybeMessage<::pb::ReqDeleteAccount>(Arena*);
template<> ::pb::ReqDeleteTradingRoute* Arena::CreateMaybeMessage<::pb::ReqDeleteTradingRoute>(Arena*);
template<> ::pb::ReqGetAccountList* Arena::CreateMaybeMessage<::pb::ReqGetAccountList>(Arena*);
template<> ::pb::ReqGetTradingRouteList* Arena::CreateMaybeMessage<::pb::ReqGetTradingRouteList>(Arena*);
template<> ::pb::RspAddAccount* Arena::CreateMaybeMessage<::pb::RspAddAccount>(Arena*);
template<> ::pb::RspCreateTradingRoute* Arena::CreateMaybeMessage<::pb::RspCreateTradingRoute>(Arena*);
template<> ::pb::RspDeleteAccount* Arena::CreateMaybeMessage<::pb::RspDeleteAccount>(Arena*);
template<> ::pb::RspDeleteTradingRoute* Arena::CreateMaybeMessage<::pb::RspDeleteTradingRoute>(Arena*);
template<> ::pb::RspGetAccountList* Arena::CreateMaybeMessage<::pb::RspGetAccountList>(Arena*);
template<> ::pb::RspGetTradingRouteList* Arena::CreateMaybeMessage<::pb::RspGetTradingRouteList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class ReqGetAccountList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqGetAccountList) */ {
 public:
  ReqGetAccountList();
  virtual ~ReqGetAccountList();

  ReqGetAccountList(const ReqGetAccountList& from);
  ReqGetAccountList(ReqGetAccountList&& from) noexcept
    : ReqGetAccountList() {
    *this = ::std::move(from);
  }

  inline ReqGetAccountList& operator=(const ReqGetAccountList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetAccountList& operator=(ReqGetAccountList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqGetAccountList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGetAccountList* internal_default_instance() {
    return reinterpret_cast<const ReqGetAccountList*>(
               &_ReqGetAccountList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReqGetAccountList* other);
  friend void swap(ReqGetAccountList& a, ReqGetAccountList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGetAccountList* New() const final {
    return CreateMaybeMessage<ReqGetAccountList>(nullptr);
  }

  ReqGetAccountList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetAccountList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetAccountList& from);
  void MergeFrom(const ReqGetAccountList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetAccountList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqGetAccountList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.ReqGetAccountList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class RspGetAccountList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspGetAccountList) */ {
 public:
  RspGetAccountList();
  virtual ~RspGetAccountList();

  RspGetAccountList(const RspGetAccountList& from);
  RspGetAccountList(RspGetAccountList&& from) noexcept
    : RspGetAccountList() {
    *this = ::std::move(from);
  }

  inline RspGetAccountList& operator=(const RspGetAccountList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspGetAccountList& operator=(RspGetAccountList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspGetAccountList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspGetAccountList* internal_default_instance() {
    return reinterpret_cast<const RspGetAccountList*>(
               &_RspGetAccountList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RspGetAccountList* other);
  friend void swap(RspGetAccountList& a, RspGetAccountList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspGetAccountList* New() const final {
    return CreateMaybeMessage<RspGetAccountList>(nullptr);
  }

  RspGetAccountList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspGetAccountList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspGetAccountList& from);
  void MergeFrom(const RspGetAccountList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspGetAccountList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspGetAccountList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspGetAccountList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class ReqAddAccount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqAddAccount) */ {
 public:
  ReqAddAccount();
  virtual ~ReqAddAccount();

  ReqAddAccount(const ReqAddAccount& from);
  ReqAddAccount(ReqAddAccount&& from) noexcept
    : ReqAddAccount() {
    *this = ::std::move(from);
  }

  inline ReqAddAccount& operator=(const ReqAddAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAddAccount& operator=(ReqAddAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAddAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAddAccount* internal_default_instance() {
    return reinterpret_cast<const ReqAddAccount*>(
               &_ReqAddAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReqAddAccount* other);
  friend void swap(ReqAddAccount& a, ReqAddAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAddAccount* New() const final {
    return CreateMaybeMessage<ReqAddAccount>(nullptr);
  }

  ReqAddAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAddAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAddAccount& from);
  void MergeFrom(const ReqAddAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAddAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqAddAccount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.ReqAddAccount)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class RspAddAccount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspAddAccount) */ {
 public:
  RspAddAccount();
  virtual ~RspAddAccount();

  RspAddAccount(const RspAddAccount& from);
  RspAddAccount(RspAddAccount&& from) noexcept
    : RspAddAccount() {
    *this = ::std::move(from);
  }

  inline RspAddAccount& operator=(const RspAddAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspAddAccount& operator=(RspAddAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspAddAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspAddAccount* internal_default_instance() {
    return reinterpret_cast<const RspAddAccount*>(
               &_RspAddAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RspAddAccount* other);
  friend void swap(RspAddAccount& a, RspAddAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspAddAccount* New() const final {
    return CreateMaybeMessage<RspAddAccount>(nullptr);
  }

  RspAddAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspAddAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspAddAccount& from);
  void MergeFrom(const RspAddAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspAddAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspAddAccount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspAddAccount)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class ReqDeleteAccount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqDeleteAccount) */ {
 public:
  ReqDeleteAccount();
  virtual ~ReqDeleteAccount();

  ReqDeleteAccount(const ReqDeleteAccount& from);
  ReqDeleteAccount(ReqDeleteAccount&& from) noexcept
    : ReqDeleteAccount() {
    *this = ::std::move(from);
  }

  inline ReqDeleteAccount& operator=(const ReqDeleteAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDeleteAccount& operator=(ReqDeleteAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqDeleteAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqDeleteAccount* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteAccount*>(
               &_ReqDeleteAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReqDeleteAccount* other);
  friend void swap(ReqDeleteAccount& a, ReqDeleteAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteAccount* New() const final {
    return CreateMaybeMessage<ReqDeleteAccount>(nullptr);
  }

  ReqDeleteAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDeleteAccount& from);
  void MergeFrom(const ReqDeleteAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqDeleteAccount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.ReqDeleteAccount)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class RspDeleteAccount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspDeleteAccount) */ {
 public:
  RspDeleteAccount();
  virtual ~RspDeleteAccount();

  RspDeleteAccount(const RspDeleteAccount& from);
  RspDeleteAccount(RspDeleteAccount&& from) noexcept
    : RspDeleteAccount() {
    *this = ::std::move(from);
  }

  inline RspDeleteAccount& operator=(const RspDeleteAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspDeleteAccount& operator=(RspDeleteAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspDeleteAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspDeleteAccount* internal_default_instance() {
    return reinterpret_cast<const RspDeleteAccount*>(
               &_RspDeleteAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RspDeleteAccount* other);
  friend void swap(RspDeleteAccount& a, RspDeleteAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspDeleteAccount* New() const final {
    return CreateMaybeMessage<RspDeleteAccount>(nullptr);
  }

  RspDeleteAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspDeleteAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspDeleteAccount& from);
  void MergeFrom(const RspDeleteAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspDeleteAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspDeleteAccount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspDeleteAccount)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class ReqGetTradingRouteList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqGetTradingRouteList) */ {
 public:
  ReqGetTradingRouteList();
  virtual ~ReqGetTradingRouteList();

  ReqGetTradingRouteList(const ReqGetTradingRouteList& from);
  ReqGetTradingRouteList(ReqGetTradingRouteList&& from) noexcept
    : ReqGetTradingRouteList() {
    *this = ::std::move(from);
  }

  inline ReqGetTradingRouteList& operator=(const ReqGetTradingRouteList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetTradingRouteList& operator=(ReqGetTradingRouteList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqGetTradingRouteList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGetTradingRouteList* internal_default_instance() {
    return reinterpret_cast<const ReqGetTradingRouteList*>(
               &_ReqGetTradingRouteList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReqGetTradingRouteList* other);
  friend void swap(ReqGetTradingRouteList& a, ReqGetTradingRouteList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGetTradingRouteList* New() const final {
    return CreateMaybeMessage<ReqGetTradingRouteList>(nullptr);
  }

  ReqGetTradingRouteList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetTradingRouteList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetTradingRouteList& from);
  void MergeFrom(const ReqGetTradingRouteList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetTradingRouteList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqGetTradingRouteList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.ReqGetTradingRouteList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class RspGetTradingRouteList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspGetTradingRouteList) */ {
 public:
  RspGetTradingRouteList();
  virtual ~RspGetTradingRouteList();

  RspGetTradingRouteList(const RspGetTradingRouteList& from);
  RspGetTradingRouteList(RspGetTradingRouteList&& from) noexcept
    : RspGetTradingRouteList() {
    *this = ::std::move(from);
  }

  inline RspGetTradingRouteList& operator=(const RspGetTradingRouteList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspGetTradingRouteList& operator=(RspGetTradingRouteList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspGetTradingRouteList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspGetTradingRouteList* internal_default_instance() {
    return reinterpret_cast<const RspGetTradingRouteList*>(
               &_RspGetTradingRouteList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RspGetTradingRouteList* other);
  friend void swap(RspGetTradingRouteList& a, RspGetTradingRouteList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspGetTradingRouteList* New() const final {
    return CreateMaybeMessage<RspGetTradingRouteList>(nullptr);
  }

  RspGetTradingRouteList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspGetTradingRouteList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspGetTradingRouteList& from);
  void MergeFrom(const RspGetTradingRouteList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspGetTradingRouteList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspGetTradingRouteList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TradingRoute list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::TradingRoute* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingRoute >*
      mutable_list();
  const ::pb::TradingRoute& list(int index) const;
  ::pb::TradingRoute* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingRoute >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.RspGetTradingRouteList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingRoute > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class ReqCreateTradingRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqCreateTradingRoute) */ {
 public:
  ReqCreateTradingRoute();
  virtual ~ReqCreateTradingRoute();

  ReqCreateTradingRoute(const ReqCreateTradingRoute& from);
  ReqCreateTradingRoute(ReqCreateTradingRoute&& from) noexcept
    : ReqCreateTradingRoute() {
    *this = ::std::move(from);
  }

  inline ReqCreateTradingRoute& operator=(const ReqCreateTradingRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCreateTradingRoute& operator=(ReqCreateTradingRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqCreateTradingRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCreateTradingRoute* internal_default_instance() {
    return reinterpret_cast<const ReqCreateTradingRoute*>(
               &_ReqCreateTradingRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReqCreateTradingRoute* other);
  friend void swap(ReqCreateTradingRoute& a, ReqCreateTradingRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCreateTradingRoute* New() const final {
    return CreateMaybeMessage<ReqCreateTradingRoute>(nullptr);
  }

  ReqCreateTradingRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCreateTradingRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCreateTradingRoute& from);
  void MergeFrom(const ReqCreateTradingRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCreateTradingRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqCreateTradingRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.ReqCreateTradingRoute)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class RspCreateTradingRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspCreateTradingRoute) */ {
 public:
  RspCreateTradingRoute();
  virtual ~RspCreateTradingRoute();

  RspCreateTradingRoute(const RspCreateTradingRoute& from);
  RspCreateTradingRoute(RspCreateTradingRoute&& from) noexcept
    : RspCreateTradingRoute() {
    *this = ::std::move(from);
  }

  inline RspCreateTradingRoute& operator=(const RspCreateTradingRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspCreateTradingRoute& operator=(RspCreateTradingRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspCreateTradingRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspCreateTradingRoute* internal_default_instance() {
    return reinterpret_cast<const RspCreateTradingRoute*>(
               &_RspCreateTradingRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RspCreateTradingRoute* other);
  friend void swap(RspCreateTradingRoute& a, RspCreateTradingRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspCreateTradingRoute* New() const final {
    return CreateMaybeMessage<RspCreateTradingRoute>(nullptr);
  }

  RspCreateTradingRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspCreateTradingRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspCreateTradingRoute& from);
  void MergeFrom(const RspCreateTradingRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspCreateTradingRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspCreateTradingRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspCreateTradingRoute)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class ReqDeleteTradingRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReqDeleteTradingRoute) */ {
 public:
  ReqDeleteTradingRoute();
  virtual ~ReqDeleteTradingRoute();

  ReqDeleteTradingRoute(const ReqDeleteTradingRoute& from);
  ReqDeleteTradingRoute(ReqDeleteTradingRoute&& from) noexcept
    : ReqDeleteTradingRoute() {
    *this = ::std::move(from);
  }

  inline ReqDeleteTradingRoute& operator=(const ReqDeleteTradingRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDeleteTradingRoute& operator=(ReqDeleteTradingRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqDeleteTradingRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqDeleteTradingRoute* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteTradingRoute*>(
               &_ReqDeleteTradingRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ReqDeleteTradingRoute* other);
  friend void swap(ReqDeleteTradingRoute& a, ReqDeleteTradingRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteTradingRoute* New() const final {
    return CreateMaybeMessage<ReqDeleteTradingRoute>(nullptr);
  }

  ReqDeleteTradingRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteTradingRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDeleteTradingRoute& from);
  void MergeFrom(const ReqDeleteTradingRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteTradingRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReqDeleteTradingRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:pb.ReqDeleteTradingRoute)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// -------------------------------------------------------------------

class RspDeleteTradingRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RspDeleteTradingRoute) */ {
 public:
  RspDeleteTradingRoute();
  virtual ~RspDeleteTradingRoute();

  RspDeleteTradingRoute(const RspDeleteTradingRoute& from);
  RspDeleteTradingRoute(RspDeleteTradingRoute&& from) noexcept
    : RspDeleteTradingRoute() {
    *this = ::std::move(from);
  }

  inline RspDeleteTradingRoute& operator=(const RspDeleteTradingRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspDeleteTradingRoute& operator=(RspDeleteTradingRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspDeleteTradingRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspDeleteTradingRoute* internal_default_instance() {
    return reinterpret_cast<const RspDeleteTradingRoute*>(
               &_RspDeleteTradingRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RspDeleteTradingRoute* other);
  friend void swap(RspDeleteTradingRoute& a, RspDeleteTradingRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspDeleteTradingRoute* New() const final {
    return CreateMaybeMessage<RspDeleteTradingRoute>(nullptr);
  }

  RspDeleteTradingRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspDeleteTradingRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspDeleteTradingRoute& from);
  void MergeFrom(const RspDeleteTradingRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspDeleteTradingRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RspDeleteTradingRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tahub_2eproto);
    return ::descriptor_table_tahub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspDeleteTradingRoute)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tahub_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqGetAccountList

// -------------------------------------------------------------------

// RspGetAccountList

// -------------------------------------------------------------------

// ReqAddAccount

// -------------------------------------------------------------------

// RspAddAccount

// -------------------------------------------------------------------

// ReqDeleteAccount

// -------------------------------------------------------------------

// RspDeleteAccount

// -------------------------------------------------------------------

// ReqGetTradingRouteList

// -------------------------------------------------------------------

// RspGetTradingRouteList

// repeated .pb.TradingRoute list = 1;
inline int RspGetTradingRouteList::list_size() const {
  return list_.size();
}
inline ::pb::TradingRoute* RspGetTradingRouteList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RspGetTradingRouteList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingRoute >*
RspGetTradingRouteList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.RspGetTradingRouteList.list)
  return &list_;
}
inline const ::pb::TradingRoute& RspGetTradingRouteList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.RspGetTradingRouteList.list)
  return list_.Get(index);
}
inline ::pb::TradingRoute* RspGetTradingRouteList::add_list() {
  // @@protoc_insertion_point(field_add:pb.RspGetTradingRouteList.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TradingRoute >&
RspGetTradingRouteList::list() const {
  // @@protoc_insertion_point(field_list:pb.RspGetTradingRouteList.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqCreateTradingRoute

// -------------------------------------------------------------------

// RspCreateTradingRoute

// -------------------------------------------------------------------

// ReqDeleteTradingRoute

// int64 id = 1;
inline void ReqDeleteTradingRoute::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqDeleteTradingRoute::id() const {
  // @@protoc_insertion_point(field_get:pb.ReqDeleteTradingRoute.id)
  return id_;
}
inline void ReqDeleteTradingRoute::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqDeleteTradingRoute.id)
}

// -------------------------------------------------------------------

// RspDeleteTradingRoute

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tahub_2eproto
