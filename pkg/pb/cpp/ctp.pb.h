// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ctp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ctp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ctp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ctp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[49]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ctp_2eproto;
namespace pb {
class CTPCancelOrderRequest;
class CTPCancelOrderRequestDefaultTypeInternal;
extern CTPCancelOrderRequestDefaultTypeInternal _CTPCancelOrderRequest_default_instance_;
class CTPCloseTradeRecord;
class CTPCloseTradeRecordDefaultTypeInternal;
extern CTPCloseTradeRecordDefaultTypeInternal _CTPCloseTradeRecord_default_instance_;
class CTPCloseTradeRecordList;
class CTPCloseTradeRecordListDefaultTypeInternal;
extern CTPCloseTradeRecordListDefaultTypeInternal _CTPCloseTradeRecordList_default_instance_;
class CTPCommissionRate;
class CTPCommissionRateDefaultTypeInternal;
extern CTPCommissionRateDefaultTypeInternal _CTPCommissionRate_default_instance_;
class CTPCommissionRateItem;
class CTPCommissionRateItemDefaultTypeInternal;
extern CTPCommissionRateItemDefaultTypeInternal _CTPCommissionRateItem_default_instance_;
class CTPForceCloseTimeRule;
class CTPForceCloseTimeRuleDefaultTypeInternal;
extern CTPForceCloseTimeRuleDefaultTypeInternal _CTPForceCloseTimeRule_default_instance_;
class CTPInstrumentField;
class CTPInstrumentFieldDefaultTypeInternal;
extern CTPInstrumentFieldDefaultTypeInternal _CTPInstrumentField_default_instance_;
class CTPMarginItem;
class CTPMarginItemDefaultTypeInternal;
extern CTPMarginItemDefaultTypeInternal _CTPMarginItem_default_instance_;
class CTPMarginRate;
class CTPMarginRateDefaultTypeInternal;
extern CTPMarginRateDefaultTypeInternal _CTPMarginRate_default_instance_;
class CTPOnRspOrderInsert;
class CTPOnRspOrderInsertDefaultTypeInternal;
extern CTPOnRspOrderInsertDefaultTypeInternal _CTPOnRspOrderInsert_default_instance_;
class CTPOnRspQryInstrument;
class CTPOnRspQryInstrumentDefaultTypeInternal;
extern CTPOnRspQryInstrumentDefaultTypeInternal _CTPOnRspQryInstrument_default_instance_;
class CTPOnRtnCancelOrder;
class CTPOnRtnCancelOrderDefaultTypeInternal;
extern CTPOnRtnCancelOrderDefaultTypeInternal _CTPOnRtnCancelOrder_default_instance_;
class CTPOrderField;
class CTPOrderFieldDefaultTypeInternal;
extern CTPOrderFieldDefaultTypeInternal _CTPOrderField_default_instance_;
class CTPOrderID;
class CTPOrderIDDefaultTypeInternal;
extern CTPOrderIDDefaultTypeInternal _CTPOrderID_default_instance_;
class CTPOrderLink;
class CTPOrderLinkDefaultTypeInternal;
extern CTPOrderLinkDefaultTypeInternal _CTPOrderLink_default_instance_;
class CTPOrderList;
class CTPOrderListDefaultTypeInternal;
extern CTPOrderListDefaultTypeInternal _CTPOrderList_default_instance_;
class CTPPosition;
class CTPPositionDefaultTypeInternal;
extern CTPPositionDefaultTypeInternal _CTPPosition_default_instance_;
class CTPPositionList;
class CTPPositionListDefaultTypeInternal;
extern CTPPositionListDefaultTypeInternal _CTPPositionList_default_instance_;
class CTPPositionSummation;
class CTPPositionSummationDefaultTypeInternal;
extern CTPPositionSummationDefaultTypeInternal _CTPPositionSummation_default_instance_;
class CTPReqSubscribeMarketData;
class CTPReqSubscribeMarketDataDefaultTypeInternal;
extern CTPReqSubscribeMarketDataDefaultTypeInternal _CTPReqSubscribeMarketData_default_instance_;
class CTPReqUnSusbibeMarketData;
class CTPReqUnSusbibeMarketDataDefaultTypeInternal;
extern CTPReqUnSusbibeMarketDataDefaultTypeInternal _CTPReqUnSusbibeMarketData_default_instance_;
class CTPRspInfo;
class CTPRspInfoDefaultTypeInternal;
extern CTPRspInfoDefaultTypeInternal _CTPRspInfo_default_instance_;
class CTPRspSusbcribeMarketData;
class CTPRspSusbcribeMarketDataDefaultTypeInternal;
extern CTPRspSusbcribeMarketDataDefaultTypeInternal _CTPRspSusbcribeMarketData_default_instance_;
class CTPRspUnSusbibeMarketData;
class CTPRspUnSusbibeMarketDataDefaultTypeInternal;
extern CTPRspUnSusbibeMarketDataDefaultTypeInternal _CTPRspUnSusbibeMarketData_default_instance_;
class CTPTradeField;
class CTPTradeFieldDefaultTypeInternal;
extern CTPTradeFieldDefaultTypeInternal _CTPTradeField_default_instance_;
class CTPTradeReportList;
class CTPTradeReportListDefaultTypeInternal;
extern CTPTradeReportListDefaultTypeInternal _CTPTradeReportList_default_instance_;
class CTPTradingAccount;
class CTPTradingAccountDefaultTypeInternal;
extern CTPTradingAccountDefaultTypeInternal _CTPTradingAccount_default_instance_;
class CTPTradingAccountSnapshot;
class CTPTradingAccountSnapshotDefaultTypeInternal;
extern CTPTradingAccountSnapshotDefaultTypeInternal _CTPTradingAccountSnapshot_default_instance_;
class CTPTradingUnit;
class CTPTradingUnitDefaultTypeInternal;
extern CTPTradingUnitDefaultTypeInternal _CTPTradingUnit_default_instance_;
class CTPTradingUnitOption;
class CTPTradingUnitOptionDefaultTypeInternal;
extern CTPTradingUnitOptionDefaultTypeInternal _CTPTradingUnitOption_default_instance_;
class CtpOnFrontConnected;
class CtpOnFrontConnectedDefaultTypeInternal;
extern CtpOnFrontConnectedDefaultTypeInternal _CtpOnFrontConnected_default_instance_;
class CtpOnFrontDisconnected;
class CtpOnFrontDisconnectedDefaultTypeInternal;
extern CtpOnFrontDisconnectedDefaultTypeInternal _CtpOnFrontDisconnected_default_instance_;
class CtpOnRspSettlementInfoConfirm;
class CtpOnRspSettlementInfoConfirmDefaultTypeInternal;
extern CtpOnRspSettlementInfoConfirmDefaultTypeInternal _CtpOnRspSettlementInfoConfirm_default_instance_;
class CtpReqAuthencate;
class CtpReqAuthencateDefaultTypeInternal;
extern CtpReqAuthencateDefaultTypeInternal _CtpReqAuthencate_default_instance_;
class CtpReqConnect;
class CtpReqConnectDefaultTypeInternal;
extern CtpReqConnectDefaultTypeInternal _CtpReqConnect_default_instance_;
class CtpReqQryAccountRegister;
class CtpReqQryAccountRegisterDefaultTypeInternal;
extern CtpReqQryAccountRegisterDefaultTypeInternal _CtpReqQryAccountRegister_default_instance_;
class CtpReqQryInvestor;
class CtpReqQryInvestorDefaultTypeInternal;
extern CtpReqQryInvestorDefaultTypeInternal _CtpReqQryInvestor_default_instance_;
class CtpReqQryTransferBank;
class CtpReqQryTransferBankDefaultTypeInternal;
extern CtpReqQryTransferBankDefaultTypeInternal _CtpReqQryTransferBank_default_instance_;
class CtpReqSettlementInfoConfirm;
class CtpReqSettlementInfoConfirmDefaultTypeInternal;
extern CtpReqSettlementInfoConfirmDefaultTypeInternal _CtpReqSettlementInfoConfirm_default_instance_;
class CtpReqTransfer;
class CtpReqTransferDefaultTypeInternal;
extern CtpReqTransferDefaultTypeInternal _CtpReqTransfer_default_instance_;
class CtpReqUserLogin;
class CtpReqUserLoginDefaultTypeInternal;
extern CtpReqUserLoginDefaultTypeInternal _CtpReqUserLogin_default_instance_;
class CtpRspAuthencate;
class CtpRspAuthencateDefaultTypeInternal;
extern CtpRspAuthencateDefaultTypeInternal _CtpRspAuthencate_default_instance_;
class CtpRspQryAccountRegister;
class CtpRspQryAccountRegisterDefaultTypeInternal;
extern CtpRspQryAccountRegisterDefaultTypeInternal _CtpRspQryAccountRegister_default_instance_;
class CtpRspQryInvestor;
class CtpRspQryInvestorDefaultTypeInternal;
extern CtpRspQryInvestorDefaultTypeInternal _CtpRspQryInvestor_default_instance_;
class CtpRspQryTransferBank;
class CtpRspQryTransferBankDefaultTypeInternal;
extern CtpRspQryTransferBankDefaultTypeInternal _CtpRspQryTransferBank_default_instance_;
class CtpRspTransfer;
class CtpRspTransferDefaultTypeInternal;
extern CtpRspTransferDefaultTypeInternal _CtpRspTransfer_default_instance_;
class CtpRspUserLogin;
class CtpRspUserLoginDefaultTypeInternal;
extern CtpRspUserLoginDefaultTypeInternal _CtpRspUserLogin_default_instance_;
class MarginCheckRule;
class MarginCheckRuleDefaultTypeInternal;
extern MarginCheckRuleDefaultTypeInternal _MarginCheckRule_default_instance_;
class SettlementUnitOption;
class SettlementUnitOptionDefaultTypeInternal;
extern SettlementUnitOptionDefaultTypeInternal _SettlementUnitOption_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::CTPCancelOrderRequest* Arena::CreateMaybeMessage<::pb::CTPCancelOrderRequest>(Arena*);
template<> ::pb::CTPCloseTradeRecord* Arena::CreateMaybeMessage<::pb::CTPCloseTradeRecord>(Arena*);
template<> ::pb::CTPCloseTradeRecordList* Arena::CreateMaybeMessage<::pb::CTPCloseTradeRecordList>(Arena*);
template<> ::pb::CTPCommissionRate* Arena::CreateMaybeMessage<::pb::CTPCommissionRate>(Arena*);
template<> ::pb::CTPCommissionRateItem* Arena::CreateMaybeMessage<::pb::CTPCommissionRateItem>(Arena*);
template<> ::pb::CTPForceCloseTimeRule* Arena::CreateMaybeMessage<::pb::CTPForceCloseTimeRule>(Arena*);
template<> ::pb::CTPInstrumentField* Arena::CreateMaybeMessage<::pb::CTPInstrumentField>(Arena*);
template<> ::pb::CTPMarginItem* Arena::CreateMaybeMessage<::pb::CTPMarginItem>(Arena*);
template<> ::pb::CTPMarginRate* Arena::CreateMaybeMessage<::pb::CTPMarginRate>(Arena*);
template<> ::pb::CTPOnRspOrderInsert* Arena::CreateMaybeMessage<::pb::CTPOnRspOrderInsert>(Arena*);
template<> ::pb::CTPOnRspQryInstrument* Arena::CreateMaybeMessage<::pb::CTPOnRspQryInstrument>(Arena*);
template<> ::pb::CTPOnRtnCancelOrder* Arena::CreateMaybeMessage<::pb::CTPOnRtnCancelOrder>(Arena*);
template<> ::pb::CTPOrderField* Arena::CreateMaybeMessage<::pb::CTPOrderField>(Arena*);
template<> ::pb::CTPOrderID* Arena::CreateMaybeMessage<::pb::CTPOrderID>(Arena*);
template<> ::pb::CTPOrderLink* Arena::CreateMaybeMessage<::pb::CTPOrderLink>(Arena*);
template<> ::pb::CTPOrderList* Arena::CreateMaybeMessage<::pb::CTPOrderList>(Arena*);
template<> ::pb::CTPPosition* Arena::CreateMaybeMessage<::pb::CTPPosition>(Arena*);
template<> ::pb::CTPPositionList* Arena::CreateMaybeMessage<::pb::CTPPositionList>(Arena*);
template<> ::pb::CTPPositionSummation* Arena::CreateMaybeMessage<::pb::CTPPositionSummation>(Arena*);
template<> ::pb::CTPReqSubscribeMarketData* Arena::CreateMaybeMessage<::pb::CTPReqSubscribeMarketData>(Arena*);
template<> ::pb::CTPReqUnSusbibeMarketData* Arena::CreateMaybeMessage<::pb::CTPReqUnSusbibeMarketData>(Arena*);
template<> ::pb::CTPRspInfo* Arena::CreateMaybeMessage<::pb::CTPRspInfo>(Arena*);
template<> ::pb::CTPRspSusbcribeMarketData* Arena::CreateMaybeMessage<::pb::CTPRspSusbcribeMarketData>(Arena*);
template<> ::pb::CTPRspUnSusbibeMarketData* Arena::CreateMaybeMessage<::pb::CTPRspUnSusbibeMarketData>(Arena*);
template<> ::pb::CTPTradeField* Arena::CreateMaybeMessage<::pb::CTPTradeField>(Arena*);
template<> ::pb::CTPTradeReportList* Arena::CreateMaybeMessage<::pb::CTPTradeReportList>(Arena*);
template<> ::pb::CTPTradingAccount* Arena::CreateMaybeMessage<::pb::CTPTradingAccount>(Arena*);
template<> ::pb::CTPTradingAccountSnapshot* Arena::CreateMaybeMessage<::pb::CTPTradingAccountSnapshot>(Arena*);
template<> ::pb::CTPTradingUnit* Arena::CreateMaybeMessage<::pb::CTPTradingUnit>(Arena*);
template<> ::pb::CTPTradingUnitOption* Arena::CreateMaybeMessage<::pb::CTPTradingUnitOption>(Arena*);
template<> ::pb::CtpOnFrontConnected* Arena::CreateMaybeMessage<::pb::CtpOnFrontConnected>(Arena*);
template<> ::pb::CtpOnFrontDisconnected* Arena::CreateMaybeMessage<::pb::CtpOnFrontDisconnected>(Arena*);
template<> ::pb::CtpOnRspSettlementInfoConfirm* Arena::CreateMaybeMessage<::pb::CtpOnRspSettlementInfoConfirm>(Arena*);
template<> ::pb::CtpReqAuthencate* Arena::CreateMaybeMessage<::pb::CtpReqAuthencate>(Arena*);
template<> ::pb::CtpReqConnect* Arena::CreateMaybeMessage<::pb::CtpReqConnect>(Arena*);
template<> ::pb::CtpReqQryAccountRegister* Arena::CreateMaybeMessage<::pb::CtpReqQryAccountRegister>(Arena*);
template<> ::pb::CtpReqQryInvestor* Arena::CreateMaybeMessage<::pb::CtpReqQryInvestor>(Arena*);
template<> ::pb::CtpReqQryTransferBank* Arena::CreateMaybeMessage<::pb::CtpReqQryTransferBank>(Arena*);
template<> ::pb::CtpReqSettlementInfoConfirm* Arena::CreateMaybeMessage<::pb::CtpReqSettlementInfoConfirm>(Arena*);
template<> ::pb::CtpReqTransfer* Arena::CreateMaybeMessage<::pb::CtpReqTransfer>(Arena*);
template<> ::pb::CtpReqUserLogin* Arena::CreateMaybeMessage<::pb::CtpReqUserLogin>(Arena*);
template<> ::pb::CtpRspAuthencate* Arena::CreateMaybeMessage<::pb::CtpRspAuthencate>(Arena*);
template<> ::pb::CtpRspQryAccountRegister* Arena::CreateMaybeMessage<::pb::CtpRspQryAccountRegister>(Arena*);
template<> ::pb::CtpRspQryInvestor* Arena::CreateMaybeMessage<::pb::CtpRspQryInvestor>(Arena*);
template<> ::pb::CtpRspQryTransferBank* Arena::CreateMaybeMessage<::pb::CtpRspQryTransferBank>(Arena*);
template<> ::pb::CtpRspTransfer* Arena::CreateMaybeMessage<::pb::CtpRspTransfer>(Arena*);
template<> ::pb::CtpRspUserLogin* Arena::CreateMaybeMessage<::pb::CtpRspUserLogin>(Arena*);
template<> ::pb::MarginCheckRule* Arena::CreateMaybeMessage<::pb::MarginCheckRule>(Arena*);
template<> ::pb::SettlementUnitOption* Arena::CreateMaybeMessage<::pb::SettlementUnitOption>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum CTPDirection : int {
  LONG = 0,
  SHORT = 1,
  CTPDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CTPDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CTPDirection_IsValid(int value);
constexpr CTPDirection CTPDirection_MIN = LONG;
constexpr CTPDirection CTPDirection_MAX = SHORT;
constexpr int CTPDirection_ARRAYSIZE = CTPDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CTPDirection_descriptor();
template<typename T>
inline const std::string& CTPDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CTPDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CTPDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CTPDirection_descriptor(), enum_t_value);
}
inline bool CTPDirection_Parse(
    const std::string& name, CTPDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CTPDirection>(
    CTPDirection_descriptor(), name, value);
}
enum CTPOrderStatus : int {
  CTP_OS_DONE = 0,
  CTP_OS_PENDING_WITH_PARTIAL_DONE = 1,
  CTP_OS_CANCELED_WITH_PARTIAL_DONE = 2,
  CTP_OS_PENDING = 3,
  CTP_OS_CANCELED = 4,
  CTP_OS_UNKOWN = 5,
  CTPOrderStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CTPOrderStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CTPOrderStatus_IsValid(int value);
constexpr CTPOrderStatus CTPOrderStatus_MIN = CTP_OS_DONE;
constexpr CTPOrderStatus CTPOrderStatus_MAX = CTP_OS_UNKOWN;
constexpr int CTPOrderStatus_ARRAYSIZE = CTPOrderStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CTPOrderStatus_descriptor();
template<typename T>
inline const std::string& CTPOrderStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CTPOrderStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CTPOrderStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CTPOrderStatus_descriptor(), enum_t_value);
}
inline bool CTPOrderStatus_Parse(
    const std::string& name, CTPOrderStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CTPOrderStatus>(
    CTPOrderStatus_descriptor(), name, value);
}
enum CTPPriceType : int {
  LIMIT_PRICE = 0,
  MARKET_PRICE = 1,
  BEST_PRICE = 2,
  LAST_PRICE = 3,
  CTPPriceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CTPPriceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CTPPriceType_IsValid(int value);
constexpr CTPPriceType CTPPriceType_MIN = LIMIT_PRICE;
constexpr CTPPriceType CTPPriceType_MAX = LAST_PRICE;
constexpr int CTPPriceType_ARRAYSIZE = CTPPriceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CTPPriceType_descriptor();
template<typename T>
inline const std::string& CTPPriceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CTPPriceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CTPPriceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CTPPriceType_descriptor(), enum_t_value);
}
inline bool CTPPriceType_Parse(
    const std::string& name, CTPPriceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CTPPriceType>(
    CTPPriceType_descriptor(), name, value);
}
enum CTPOffsetFlag : int {
  NONE = 0,
  OPEN = 1,
  CLOSE = 2,
  FORCE_CLOSE = 3,
  CLOSE_TODAY = 4,
  CLOSE_YESTERDAY = 5,
  CTPOffsetFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CTPOffsetFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CTPOffsetFlag_IsValid(int value);
constexpr CTPOffsetFlag CTPOffsetFlag_MIN = NONE;
constexpr CTPOffsetFlag CTPOffsetFlag_MAX = CLOSE_YESTERDAY;
constexpr int CTPOffsetFlag_ARRAYSIZE = CTPOffsetFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CTPOffsetFlag_descriptor();
template<typename T>
inline const std::string& CTPOffsetFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CTPOffsetFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CTPOffsetFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CTPOffsetFlag_descriptor(), enum_t_value);
}
inline bool CTPOffsetFlag_Parse(
    const std::string& name, CTPOffsetFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CTPOffsetFlag>(
    CTPOffsetFlag_descriptor(), name, value);
}
enum CTPHedgeType : int {
  SPECULATION = 0,
  ARBITRAGE = 1,
  HEDGE = 2,
  CTPHedgeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CTPHedgeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CTPHedgeType_IsValid(int value);
constexpr CTPHedgeType CTPHedgeType_MIN = SPECULATION;
constexpr CTPHedgeType CTPHedgeType_MAX = HEDGE;
constexpr int CTPHedgeType_ARRAYSIZE = CTPHedgeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CTPHedgeType_descriptor();
template<typename T>
inline const std::string& CTPHedgeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CTPHedgeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CTPHedgeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CTPHedgeType_descriptor(), enum_t_value);
}
inline bool CTPHedgeType_Parse(
    const std::string& name, CTPHedgeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CTPHedgeType>(
    CTPHedgeType_descriptor(), name, value);
}
enum CTPTradeType : int {
  NORMAL = 0,
  OPTIONS_EXECUTION = 1,
  OTC = 2,
  EFP_DERIVED = 3,
  COMBINATION_DERIVED = 4,
  DELIVERY_CLOSE = 5,
  SETTLEMENT_DERIVED = 6,
  PLACEMENT_DERIVED = 7,
  CTPTradeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CTPTradeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CTPTradeType_IsValid(int value);
constexpr CTPTradeType CTPTradeType_MIN = NORMAL;
constexpr CTPTradeType CTPTradeType_MAX = PLACEMENT_DERIVED;
constexpr int CTPTradeType_ARRAYSIZE = CTPTradeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CTPTradeType_descriptor();
template<typename T>
inline const std::string& CTPTradeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CTPTradeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CTPTradeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CTPTradeType_descriptor(), enum_t_value);
}
inline bool CTPTradeType_Parse(
    const std::string& name, CTPTradeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CTPTradeType>(
    CTPTradeType_descriptor(), name, value);
}
// ===================================================================

class CTPOrderID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPOrderID) */ {
 public:
  CTPOrderID();
  virtual ~CTPOrderID();

  CTPOrderID(const CTPOrderID& from);
  CTPOrderID(CTPOrderID&& from) noexcept
    : CTPOrderID() {
    *this = ::std::move(from);
  }

  inline CTPOrderID& operator=(const CTPOrderID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPOrderID& operator=(CTPOrderID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPOrderID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPOrderID* internal_default_instance() {
    return reinterpret_cast<const CTPOrderID*>(
               &_CTPOrderID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CTPOrderID* other);
  friend void swap(CTPOrderID& a, CTPOrderID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPOrderID* New() const final {
    return CreateMaybeMessage<CTPOrderID>(nullptr);
  }

  CTPOrderID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPOrderID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPOrderID& from);
  void MergeFrom(const CTPOrderID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPOrderID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPOrderID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string string_id = 4;
  void clear_string_id();
  static const int kStringIdFieldNumber = 4;
  const std::string& string_id() const;
  void set_string_id(const std::string& value);
  void set_string_id(std::string&& value);
  void set_string_id(const char* value);
  void set_string_id(const char* value, size_t size);
  std::string* mutable_string_id();
  std::string* release_string_id();
  void set_allocated_string_id(std::string* string_id);

  // int64 front_id = 1;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 front_id() const;
  void set_front_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 order_ref = 3;
  void clear_order_ref();
  static const int kOrderRefFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 order_ref() const;
  void set_order_ref(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:pb.CTPOrderID)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 front_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 order_ref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPOrderField :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPOrderField) */ {
 public:
  CTPOrderField();
  virtual ~CTPOrderField();

  CTPOrderField(const CTPOrderField& from);
  CTPOrderField(CTPOrderField&& from) noexcept
    : CTPOrderField() {
    *this = ::std::move(from);
  }

  inline CTPOrderField& operator=(const CTPOrderField& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPOrderField& operator=(CTPOrderField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPOrderField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPOrderField* internal_default_instance() {
    return reinterpret_cast<const CTPOrderField*>(
               &_CTPOrderField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CTPOrderField* other);
  friend void swap(CTPOrderField& a, CTPOrderField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPOrderField* New() const final {
    return CreateMaybeMessage<CTPOrderField>(nullptr);
  }

  CTPOrderField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPOrderField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPOrderField& from);
  void MergeFrom(const CTPOrderField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPOrderField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPOrderField";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string broker_id = 1;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 1;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string investor_id = 2;
  void clear_investor_id();
  static const int kInvestorIdFieldNumber = 2;
  const std::string& investor_id() const;
  void set_investor_id(const std::string& value);
  void set_investor_id(std::string&& value);
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  std::string* mutable_investor_id();
  std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);

  // string instrument_id = 3;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 3;
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);

  // string order_ref = 4;
  void clear_order_ref();
  static const int kOrderRefFieldNumber = 4;
  const std::string& order_ref() const;
  void set_order_ref(const std::string& value);
  void set_order_ref(std::string&& value);
  void set_order_ref(const char* value);
  void set_order_ref(const char* value, size_t size);
  std::string* mutable_order_ref();
  std::string* release_order_ref();
  void set_allocated_order_ref(std::string* order_ref);

  // string user_id = 5;
  void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // string GTD_date = 13;
  void clear_gtd_date();
  static const int kGTDDateFieldNumber = 13;
  const std::string& gtd_date() const;
  void set_gtd_date(const std::string& value);
  void set_gtd_date(std::string&& value);
  void set_gtd_date(const char* value);
  void set_gtd_date(const char* value, size_t size);
  std::string* mutable_gtd_date();
  std::string* release_gtd_date();
  void set_allocated_gtd_date(std::string* gtd_date);

  // string business_unit = 20;
  void clear_business_unit();
  static const int kBusinessUnitFieldNumber = 20;
  const std::string& business_unit() const;
  void set_business_unit(const std::string& value);
  void set_business_unit(std::string&& value);
  void set_business_unit(const char* value);
  void set_business_unit(const char* value, size_t size);
  std::string* mutable_business_unit();
  std::string* release_business_unit();
  void set_allocated_business_unit(std::string* business_unit);

  // string order_local_id = 22;
  void clear_order_local_id();
  static const int kOrderLocalIdFieldNumber = 22;
  const std::string& order_local_id() const;
  void set_order_local_id(const std::string& value);
  void set_order_local_id(std::string&& value);
  void set_order_local_id(const char* value);
  void set_order_local_id(const char* value, size_t size);
  std::string* mutable_order_local_id();
  std::string* release_order_local_id();
  void set_allocated_order_local_id(std::string* order_local_id);

  // string exchange_id = 23;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 23;
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);

  // string participant_id = 24;
  void clear_participant_id();
  static const int kParticipantIdFieldNumber = 24;
  const std::string& participant_id() const;
  void set_participant_id(const std::string& value);
  void set_participant_id(std::string&& value);
  void set_participant_id(const char* value);
  void set_participant_id(const char* value, size_t size);
  std::string* mutable_participant_id();
  std::string* release_participant_id();
  void set_allocated_participant_id(std::string* participant_id);

  // string client_id = 25;
  void clear_client_id();
  static const int kClientIdFieldNumber = 25;
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);

  // string exchange_inst_id = 26;
  void clear_exchange_inst_id();
  static const int kExchangeInstIdFieldNumber = 26;
  const std::string& exchange_inst_id() const;
  void set_exchange_inst_id(const std::string& value);
  void set_exchange_inst_id(std::string&& value);
  void set_exchange_inst_id(const char* value);
  void set_exchange_inst_id(const char* value, size_t size);
  std::string* mutable_exchange_inst_id();
  std::string* release_exchange_inst_id();
  void set_allocated_exchange_inst_id(std::string* exchange_inst_id);

  // string trader_id = 27;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 27;
  const std::string& trader_id() const;
  void set_trader_id(const std::string& value);
  void set_trader_id(std::string&& value);
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  std::string* mutable_trader_id();
  std::string* release_trader_id();
  void set_allocated_trader_id(std::string* trader_id);

  // string order_sys_id = 33;
  void clear_order_sys_id();
  static const int kOrderSysIdFieldNumber = 33;
  const std::string& order_sys_id() const;
  void set_order_sys_id(const std::string& value);
  void set_order_sys_id(std::string&& value);
  void set_order_sys_id(const char* value);
  void set_order_sys_id(const char* value, size_t size);
  std::string* mutable_order_sys_id();
  std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);

  // string insert_date = 39;
  void clear_insert_date();
  static const int kInsertDateFieldNumber = 39;
  const std::string& insert_date() const;
  void set_insert_date(const std::string& value);
  void set_insert_date(std::string&& value);
  void set_insert_date(const char* value);
  void set_insert_date(const char* value, size_t size);
  std::string* mutable_insert_date();
  std::string* release_insert_date();
  void set_allocated_insert_date(std::string* insert_date);

  // string insert_time = 40;
  void clear_insert_time();
  static const int kInsertTimeFieldNumber = 40;
  const std::string& insert_time() const;
  void set_insert_time(const std::string& value);
  void set_insert_time(std::string&& value);
  void set_insert_time(const char* value);
  void set_insert_time(const char* value, size_t size);
  std::string* mutable_insert_time();
  std::string* release_insert_time();
  void set_allocated_insert_time(std::string* insert_time);

  // string active_time = 41;
  void clear_active_time();
  static const int kActiveTimeFieldNumber = 41;
  const std::string& active_time() const;
  void set_active_time(const std::string& value);
  void set_active_time(std::string&& value);
  void set_active_time(const char* value);
  void set_active_time(const char* value, size_t size);
  std::string* mutable_active_time();
  std::string* release_active_time();
  void set_allocated_active_time(std::string* active_time);

  // string suspend_time = 42;
  void clear_suspend_time();
  static const int kSuspendTimeFieldNumber = 42;
  const std::string& suspend_time() const;
  void set_suspend_time(const std::string& value);
  void set_suspend_time(std::string&& value);
  void set_suspend_time(const char* value);
  void set_suspend_time(const char* value, size_t size);
  std::string* mutable_suspend_time();
  std::string* release_suspend_time();
  void set_allocated_suspend_time(std::string* suspend_time);

  // string update_time = 43;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 43;
  const std::string& update_time() const;
  void set_update_time(const std::string& value);
  void set_update_time(std::string&& value);
  void set_update_time(const char* value);
  void set_update_time(const char* value, size_t size);
  std::string* mutable_update_time();
  std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);

  // string cancel_time = 44;
  void clear_cancel_time();
  static const int kCancelTimeFieldNumber = 44;
  const std::string& cancel_time() const;
  void set_cancel_time(const std::string& value);
  void set_cancel_time(std::string&& value);
  void set_cancel_time(const char* value);
  void set_cancel_time(const char* value, size_t size);
  std::string* mutable_cancel_time();
  std::string* release_cancel_time();
  void set_allocated_cancel_time(std::string* cancel_time);

  // string active_trader_id = 45;
  void clear_active_trader_id();
  static const int kActiveTraderIdFieldNumber = 45;
  const std::string& active_trader_id() const;
  void set_active_trader_id(const std::string& value);
  void set_active_trader_id(std::string&& value);
  void set_active_trader_id(const char* value);
  void set_active_trader_id(const char* value, size_t size);
  std::string* mutable_active_trader_id();
  std::string* release_active_trader_id();
  void set_allocated_active_trader_id(std::string* active_trader_id);

  // string clearing_part_id = 46;
  void clear_clearing_part_id();
  static const int kClearingPartIdFieldNumber = 46;
  const std::string& clearing_part_id() const;
  void set_clearing_part_id(const std::string& value);
  void set_clearing_part_id(std::string&& value);
  void set_clearing_part_id(const char* value);
  void set_clearing_part_id(const char* value, size_t size);
  std::string* mutable_clearing_part_id();
  std::string* release_clearing_part_id();
  void set_allocated_clearing_part_id(std::string* clearing_part_id);

  // string user_product_info = 50;
  void clear_user_product_info();
  static const int kUserProductInfoFieldNumber = 50;
  const std::string& user_product_info() const;
  void set_user_product_info(const std::string& value);
  void set_user_product_info(std::string&& value);
  void set_user_product_info(const char* value);
  void set_user_product_info(const char* value, size_t size);
  std::string* mutable_user_product_info();
  std::string* release_user_product_info();
  void set_allocated_user_product_info(std::string* user_product_info);

  // bytes status_msg = 51;
  void clear_status_msg();
  static const int kStatusMsgFieldNumber = 51;
  const std::string& status_msg() const;
  void set_status_msg(const std::string& value);
  void set_status_msg(std::string&& value);
  void set_status_msg(const char* value);
  void set_status_msg(const void* value, size_t size);
  std::string* mutable_status_msg();
  std::string* release_status_msg();
  void set_allocated_status_msg(std::string* status_msg);

  // string active_user_id = 53;
  void clear_active_user_id();
  static const int kActiveUserIdFieldNumber = 53;
  const std::string& active_user_id() const;
  void set_active_user_id(const std::string& value);
  void set_active_user_id(std::string&& value);
  void set_active_user_id(const char* value);
  void set_active_user_id(const char* value, size_t size);
  std::string* mutable_active_user_id();
  std::string* release_active_user_id();
  void set_allocated_active_user_id(std::string* active_user_id);

  // string relative_order_sys_id = 55;
  void clear_relative_order_sys_id();
  static const int kRelativeOrderSysIdFieldNumber = 55;
  const std::string& relative_order_sys_id() const;
  void set_relative_order_sys_id(const std::string& value);
  void set_relative_order_sys_id(std::string&& value);
  void set_relative_order_sys_id(const char* value);
  void set_relative_order_sys_id(const char* value, size_t size);
  std::string* mutable_relative_order_sys_id();
  std::string* release_relative_order_sys_id();
  void set_allocated_relative_order_sys_id(std::string* relative_order_sys_id);

  // string branch_id = 58;
  void clear_branch_id();
  static const int kBranchIdFieldNumber = 58;
  const std::string& branch_id() const;
  void set_branch_id(const std::string& value);
  void set_branch_id(std::string&& value);
  void set_branch_id(const char* value);
  void set_branch_id(const char* value, size_t size);
  std::string* mutable_branch_id();
  std::string* release_branch_id();
  void set_allocated_branch_id(std::string* branch_id);

  // string invest_unit_id = 59;
  void clear_invest_unit_id();
  static const int kInvestUnitIdFieldNumber = 59;
  const std::string& invest_unit_id() const;
  void set_invest_unit_id(const std::string& value);
  void set_invest_unit_id(std::string&& value);
  void set_invest_unit_id(const char* value);
  void set_invest_unit_id(const char* value, size_t size);
  std::string* mutable_invest_unit_id();
  std::string* release_invest_unit_id();
  void set_allocated_invest_unit_id(std::string* invest_unit_id);

  // string account_id = 60;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 60;
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // string currency_id = 61;
  void clear_currency_id();
  static const int kCurrencyIdFieldNumber = 61;
  const std::string& currency_id() const;
  void set_currency_id(const std::string& value);
  void set_currency_id(std::string&& value);
  void set_currency_id(const char* value);
  void set_currency_id(const char* value, size_t size);
  std::string* mutable_currency_id();
  std::string* release_currency_id();
  void set_allocated_currency_id(std::string* currency_id);

  // string IP_address = 62;
  void clear_ip_address();
  static const int kIPAddressFieldNumber = 62;
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);

  // string Mac_address = 63;
  void clear_mac_address();
  static const int kMacAddressFieldNumber = 63;
  const std::string& mac_address() const;
  void set_mac_address(const std::string& value);
  void set_mac_address(std::string&& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  std::string* mutable_mac_address();
  std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);

  // int32 order_price_type = 6;
  void clear_order_price_type();
  static const int kOrderPriceTypeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 order_price_type() const;
  void set_order_price_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 direction = 7;
  void clear_direction();
  static const int kDirectionFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 comb_offset_flag = 8;
  void clear_comb_offset_flag();
  static const int kCombOffsetFlagFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_offset_flag() const;
  void set_comb_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 comb_hedge_flag = 9;
  void clear_comb_hedge_flag();
  static const int kCombHedgeFlagFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_hedge_flag() const;
  void set_comb_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double limit_price = 10;
  void clear_limit_price();
  static const int kLimitPriceFieldNumber = 10;
  double limit_price() const;
  void set_limit_price(double value);

  // int32 volume_total_original = 11;
  void clear_volume_total_original();
  static const int kVolumeTotalOriginalFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_total_original() const;
  void set_volume_total_original(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 time_condition = 12;
  void clear_time_condition();
  static const int kTimeConditionFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 time_condition() const;
  void set_time_condition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 volume_condition = 14;
  void clear_volume_condition();
  static const int kVolumeConditionFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_condition() const;
  void set_volume_condition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_volume = 15;
  void clear_min_volume();
  static const int kMinVolumeFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 min_volume() const;
  void set_min_volume(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double stop_price = 17;
  void clear_stop_price();
  static const int kStopPriceFieldNumber = 17;
  double stop_price() const;
  void set_stop_price(double value);

  // int32 contingent_condition = 16;
  void clear_contingent_condition();
  static const int kContingentConditionFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int32 contingent_condition() const;
  void set_contingent_condition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 force_close_reason = 18;
  void clear_force_close_reason();
  static const int kForceCloseReasonFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int32 force_close_reason() const;
  void set_force_close_reason(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 request_id = 21;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 install_id = 28;
  void clear_install_id();
  static const int kInstallIdFieldNumber = 28;
  ::PROTOBUF_NAMESPACE_ID::int32 install_id() const;
  void set_install_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 order_submit_status = 29;
  void clear_order_submit_status();
  static const int kOrderSubmitStatusFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::int32 order_submit_status() const;
  void set_order_submit_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 notify_sequence = 30;
  void clear_notify_sequence();
  static const int kNotifySequenceFieldNumber = 30;
  ::PROTOBUF_NAMESPACE_ID::int32 notify_sequence() const;
  void set_notify_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trading_day = 31;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 31;
  ::PROTOBUF_NAMESPACE_ID::int32 trading_day() const;
  void set_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 settlement_id = 32;
  void clear_settlement_id();
  static const int kSettlementIdFieldNumber = 32;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_id() const;
  void set_settlement_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 order_source = 34;
  void clear_order_source();
  static const int kOrderSourceFieldNumber = 34;
  ::PROTOBUF_NAMESPACE_ID::int32 order_source() const;
  void set_order_source(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 order_status = 35;
  void clear_order_status();
  static const int kOrderStatusFieldNumber = 35;
  ::PROTOBUF_NAMESPACE_ID::int32 order_status() const;
  void set_order_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 order_type = 36;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 36;
  ::PROTOBUF_NAMESPACE_ID::int32 order_type() const;
  void set_order_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 volume_traded = 37;
  void clear_volume_traded();
  static const int kVolumeTradedFieldNumber = 37;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_traded() const;
  void set_volume_traded(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 volume_total = 38;
  void clear_volume_total();
  static const int kVolumeTotalFieldNumber = 38;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_total() const;
  void set_volume_total(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_auto_suspend = 19;
  void clear_is_auto_suspend();
  static const int kIsAutoSuspendFieldNumber = 19;
  bool is_auto_suspend() const;
  void set_is_auto_suspend(bool value);

  // bool user_force_close = 52;
  void clear_user_force_close();
  static const int kUserForceCloseFieldNumber = 52;
  bool user_force_close() const;
  void set_user_force_close(bool value);

  // bool is_swap_order = 57;
  void clear_is_swap_order();
  static const int kIsSwapOrderFieldNumber = 57;
  bool is_swap_order() const;
  void set_is_swap_order(bool value);

  // int32 sequence_no = 47;
  void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 47;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_no() const;
  void set_sequence_no(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 front_id = 48;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 48;
  ::PROTOBUF_NAMESPACE_ID::int32 front_id() const;
  void set_front_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 session_id = 49;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 49;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 broker_order_seq = 54;
  void clear_broker_order_seq();
  static const int kBrokerOrderSeqFieldNumber = 54;
  ::PROTOBUF_NAMESPACE_ID::int32 broker_order_seq() const;
  void set_broker_order_seq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ZCE_total_traded_volume = 56;
  void clear_zce_total_traded_volume();
  static const int kZCETotalTradedVolumeFieldNumber = 56;
  ::PROTOBUF_NAMESPACE_ID::int32 zce_total_traded_volume() const;
  void set_zce_total_traded_volume(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPOrderField)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gtd_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr business_unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suspend_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_trader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clearing_part_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_product_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invest_unit_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_price_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_hedge_flag_;
  double limit_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_total_original_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_volume_;
  double stop_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 contingent_condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 force_close_reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 install_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_submit_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 notify_sequence_;
  ::PROTOBUF_NAMESPACE_ID::int32 trading_day_;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_traded_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_total_;
  bool is_auto_suspend_;
  bool user_force_close_;
  bool is_swap_order_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 front_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 broker_order_seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 zce_total_traded_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPOrderList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPOrderList) */ {
 public:
  CTPOrderList();
  virtual ~CTPOrderList();

  CTPOrderList(const CTPOrderList& from);
  CTPOrderList(CTPOrderList&& from) noexcept
    : CTPOrderList() {
    *this = ::std::move(from);
  }

  inline CTPOrderList& operator=(const CTPOrderList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPOrderList& operator=(CTPOrderList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPOrderList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPOrderList* internal_default_instance() {
    return reinterpret_cast<const CTPOrderList*>(
               &_CTPOrderList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CTPOrderList* other);
  friend void swap(CTPOrderList& a, CTPOrderList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPOrderList* New() const final {
    return CreateMaybeMessage<CTPOrderList>(nullptr);
  }

  CTPOrderList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPOrderList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPOrderList& from);
  void MergeFrom(const CTPOrderList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPOrderList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPOrderList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CTPOrderField list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::CTPOrderField* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >*
      mutable_list();
  const ::pb::CTPOrderField& list(int index) const;
  ::pb::CTPOrderField* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.CTPOrderList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPOrderLink :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPOrderLink) */ {
 public:
  CTPOrderLink();
  virtual ~CTPOrderLink();

  CTPOrderLink(const CTPOrderLink& from);
  CTPOrderLink(CTPOrderLink&& from) noexcept
    : CTPOrderLink() {
    *this = ::std::move(from);
  }

  inline CTPOrderLink& operator=(const CTPOrderLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPOrderLink& operator=(CTPOrderLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPOrderLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPOrderLink* internal_default_instance() {
    return reinterpret_cast<const CTPOrderLink*>(
               &_CTPOrderLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CTPOrderLink* other);
  friend void swap(CTPOrderLink& a, CTPOrderLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPOrderLink* New() const final {
    return CreateMaybeMessage<CTPOrderLink>(nullptr);
  }

  CTPOrderLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPOrderLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPOrderLink& from);
  void MergeFrom(const CTPOrderLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPOrderLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPOrderLink";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CTPOrderField children = 2;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 2;
  ::pb::CTPOrderField* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >*
      mutable_children();
  const ::pb::CTPOrderField& children(int index) const;
  ::pb::CTPOrderField* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >&
      children() const;

  // .pb.CTPOrderField parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::pb::CTPOrderField& parent() const;
  ::pb::CTPOrderField* release_parent();
  ::pb::CTPOrderField* mutable_parent();
  void set_allocated_parent(::pb::CTPOrderField* parent);

  // @@protoc_insertion_point(class_scope:pb.CTPOrderLink)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField > children_;
  ::pb::CTPOrderField* parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPCancelOrderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPCancelOrderRequest) */ {
 public:
  CTPCancelOrderRequest();
  virtual ~CTPCancelOrderRequest();

  CTPCancelOrderRequest(const CTPCancelOrderRequest& from);
  CTPCancelOrderRequest(CTPCancelOrderRequest&& from) noexcept
    : CTPCancelOrderRequest() {
    *this = ::std::move(from);
  }

  inline CTPCancelOrderRequest& operator=(const CTPCancelOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPCancelOrderRequest& operator=(CTPCancelOrderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPCancelOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPCancelOrderRequest* internal_default_instance() {
    return reinterpret_cast<const CTPCancelOrderRequest*>(
               &_CTPCancelOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CTPCancelOrderRequest* other);
  friend void swap(CTPCancelOrderRequest& a, CTPCancelOrderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPCancelOrderRequest* New() const final {
    return CreateMaybeMessage<CTPCancelOrderRequest>(nullptr);
  }

  CTPCancelOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPCancelOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPCancelOrderRequest& from);
  void MergeFrom(const CTPCancelOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPCancelOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPCancelOrderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account_id = 1;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // string exchange_order_id = 7;
  void clear_exchange_order_id();
  static const int kExchangeOrderIdFieldNumber = 7;
  const std::string& exchange_order_id() const;
  void set_exchange_order_id(const std::string& value);
  void set_exchange_order_id(std::string&& value);
  void set_exchange_order_id(const char* value);
  void set_exchange_order_id(const char* value, size_t size);
  std::string* mutable_exchange_order_id();
  std::string* release_exchange_order_id();
  void set_allocated_exchange_order_id(std::string* exchange_order_id);

  // string token = 8;
  void clear_token();
  static const int kTokenFieldNumber = 8;
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // string route_account_id = 9;
  void clear_route_account_id();
  static const int kRouteAccountIdFieldNumber = 9;
  const std::string& route_account_id() const;
  void set_route_account_id(const std::string& value);
  void set_route_account_id(std::string&& value);
  void set_route_account_id(const char* value);
  void set_route_account_id(const char* value, size_t size);
  std::string* mutable_route_account_id();
  std::string* release_route_account_id();
  void set_allocated_route_account_id(std::string* route_account_id);

  // .pb.CTPOrderID CTPOrderID = 2;
  bool has_ctporderid() const;
  void clear_ctporderid();
  static const int kCTPOrderIDFieldNumber = 2;
  const ::pb::CTPOrderID& ctporderid() const;
  ::pb::CTPOrderID* release_ctporderid();
  ::pb::CTPOrderID* mutable_ctporderid();
  void set_allocated_ctporderid(::pb::CTPOrderID* ctporderid);

  // .pb.Symbol symbol = 3;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int32 request_id = 4;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 front_id = 5;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 front_id() const;
  void set_front_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 session_id = 6;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPCancelOrderRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_account_id_;
  ::pb::CTPOrderID* ctporderid_;
  ::pb::Symbol* symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 front_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPOnRtnCancelOrder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPOnRtnCancelOrder) */ {
 public:
  CTPOnRtnCancelOrder();
  virtual ~CTPOnRtnCancelOrder();

  CTPOnRtnCancelOrder(const CTPOnRtnCancelOrder& from);
  CTPOnRtnCancelOrder(CTPOnRtnCancelOrder&& from) noexcept
    : CTPOnRtnCancelOrder() {
    *this = ::std::move(from);
  }

  inline CTPOnRtnCancelOrder& operator=(const CTPOnRtnCancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPOnRtnCancelOrder& operator=(CTPOnRtnCancelOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPOnRtnCancelOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPOnRtnCancelOrder* internal_default_instance() {
    return reinterpret_cast<const CTPOnRtnCancelOrder*>(
               &_CTPOnRtnCancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CTPOnRtnCancelOrder* other);
  friend void swap(CTPOnRtnCancelOrder& a, CTPOnRtnCancelOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPOnRtnCancelOrder* New() const final {
    return CreateMaybeMessage<CTPOnRtnCancelOrder>(nullptr);
  }

  CTPOnRtnCancelOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPOnRtnCancelOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPOnRtnCancelOrder& from);
  void MergeFrom(const CTPOnRtnCancelOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPOnRtnCancelOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPOnRtnCancelOrder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account_id = 1;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // string exchange_order_id = 3;
  void clear_exchange_order_id();
  static const int kExchangeOrderIdFieldNumber = 3;
  const std::string& exchange_order_id() const;
  void set_exchange_order_id(const std::string& value);
  void set_exchange_order_id(std::string&& value);
  void set_exchange_order_id(const char* value);
  void set_exchange_order_id(const char* value, size_t size);
  std::string* mutable_exchange_order_id();
  std::string* release_exchange_order_id();
  void set_allocated_exchange_order_id(std::string* exchange_order_id);

  // string msg = 8;
  void clear_msg();
  static const int kMsgFieldNumber = 8;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // string route_account_id = 9;
  void clear_route_account_id();
  static const int kRouteAccountIdFieldNumber = 9;
  const std::string& route_account_id() const;
  void set_route_account_id(const std::string& value);
  void set_route_account_id(std::string&& value);
  void set_route_account_id(const char* value);
  void set_route_account_id(const char* value, size_t size);
  std::string* mutable_route_account_id();
  std::string* release_route_account_id();
  void set_allocated_route_account_id(std::string* route_account_id);

  // .pb.CTPOrderID order_id = 2;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  const ::pb::CTPOrderID& order_id() const;
  ::pb::CTPOrderID* release_order_id();
  ::pb::CTPOrderID* mutable_order_id();
  void set_allocated_order_id(::pb::CTPOrderID* order_id);

  // .pb.Symbol symbol = 4;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 4;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int32 request_id = 5;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 error_type = 6;
  void clear_error_type();
  static const int kErrorTypeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 error_type() const;
  void set_error_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 error = 7;
  void clear_error();
  static const int kErrorFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPOnRtnCancelOrder)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_account_id_;
  ::pb::CTPOrderID* order_id_;
  ::pb::Symbol* symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPTradeField :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPTradeField) */ {
 public:
  CTPTradeField();
  virtual ~CTPTradeField();

  CTPTradeField(const CTPTradeField& from);
  CTPTradeField(CTPTradeField&& from) noexcept
    : CTPTradeField() {
    *this = ::std::move(from);
  }

  inline CTPTradeField& operator=(const CTPTradeField& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPTradeField& operator=(CTPTradeField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPTradeField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPTradeField* internal_default_instance() {
    return reinterpret_cast<const CTPTradeField*>(
               &_CTPTradeField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CTPTradeField* other);
  friend void swap(CTPTradeField& a, CTPTradeField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPTradeField* New() const final {
    return CreateMaybeMessage<CTPTradeField>(nullptr);
  }

  CTPTradeField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPTradeField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPTradeField& from);
  void MergeFrom(const CTPTradeField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPTradeField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPTradeField";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string broker_id = 1;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 1;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string investor_id = 2;
  void clear_investor_id();
  static const int kInvestorIdFieldNumber = 2;
  const std::string& investor_id() const;
  void set_investor_id(const std::string& value);
  void set_investor_id(std::string&& value);
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  std::string* mutable_investor_id();
  std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);

  // string instrument_id = 3;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 3;
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);

  // string order_ref = 4;
  void clear_order_ref();
  static const int kOrderRefFieldNumber = 4;
  const std::string& order_ref() const;
  void set_order_ref(const std::string& value);
  void set_order_ref(std::string&& value);
  void set_order_ref(const char* value);
  void set_order_ref(const char* value, size_t size);
  std::string* mutable_order_ref();
  std::string* release_order_ref();
  void set_allocated_order_ref(std::string* order_ref);

  // string user_id = 5;
  void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // string exchange_id = 6;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 6;
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);

  // string trade_id = 7;
  void clear_trade_id();
  static const int kTradeIdFieldNumber = 7;
  const std::string& trade_id() const;
  void set_trade_id(const std::string& value);
  void set_trade_id(std::string&& value);
  void set_trade_id(const char* value);
  void set_trade_id(const char* value, size_t size);
  std::string* mutable_trade_id();
  std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);

  // string order_sys_id = 9;
  void clear_order_sys_id();
  static const int kOrderSysIdFieldNumber = 9;
  const std::string& order_sys_id() const;
  void set_order_sys_id(const std::string& value);
  void set_order_sys_id(std::string&& value);
  void set_order_sys_id(const char* value);
  void set_order_sys_id(const char* value, size_t size);
  std::string* mutable_order_sys_id();
  std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);

  // string participant_id = 10;
  void clear_participant_id();
  static const int kParticipantIdFieldNumber = 10;
  const std::string& participant_id() const;
  void set_participant_id(const std::string& value);
  void set_participant_id(std::string&& value);
  void set_participant_id(const char* value);
  void set_participant_id(const char* value, size_t size);
  std::string* mutable_participant_id();
  std::string* release_participant_id();
  void set_allocated_participant_id(std::string* participant_id);

  // string client_id = 11;
  void clear_client_id();
  static const int kClientIdFieldNumber = 11;
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);

  // string exchange_inst_id = 13;
  void clear_exchange_inst_id();
  static const int kExchangeInstIdFieldNumber = 13;
  const std::string& exchange_inst_id() const;
  void set_exchange_inst_id(const std::string& value);
  void set_exchange_inst_id(std::string&& value);
  void set_exchange_inst_id(const char* value);
  void set_exchange_inst_id(const char* value, size_t size);
  std::string* mutable_exchange_inst_id();
  std::string* release_exchange_inst_id();
  void set_allocated_exchange_inst_id(std::string* exchange_inst_id);

  // string trade_date = 18;
  void clear_trade_date();
  static const int kTradeDateFieldNumber = 18;
  const std::string& trade_date() const;
  void set_trade_date(const std::string& value);
  void set_trade_date(std::string&& value);
  void set_trade_date(const char* value);
  void set_trade_date(const char* value, size_t size);
  std::string* mutable_trade_date();
  std::string* release_trade_date();
  void set_allocated_trade_date(std::string* trade_date);

  // string trade_time = 19;
  void clear_trade_time();
  static const int kTradeTimeFieldNumber = 19;
  const std::string& trade_time() const;
  void set_trade_time(const std::string& value);
  void set_trade_time(std::string&& value);
  void set_trade_time(const char* value);
  void set_trade_time(const char* value, size_t size);
  std::string* mutable_trade_time();
  std::string* release_trade_time();
  void set_allocated_trade_time(std::string* trade_time);

  // string trader_id = 22;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 22;
  const std::string& trader_id() const;
  void set_trader_id(const std::string& value);
  void set_trader_id(std::string&& value);
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  std::string* mutable_trader_id();
  std::string* release_trader_id();
  void set_allocated_trader_id(std::string* trader_id);

  // string order_local_id = 23;
  void clear_order_local_id();
  static const int kOrderLocalIdFieldNumber = 23;
  const std::string& order_local_id() const;
  void set_order_local_id(const std::string& value);
  void set_order_local_id(std::string&& value);
  void set_order_local_id(const char* value);
  void set_order_local_id(const char* value, size_t size);
  std::string* mutable_order_local_id();
  std::string* release_order_local_id();
  void set_allocated_order_local_id(std::string* order_local_id);

  // string clearing_part_id = 24;
  void clear_clearing_part_id();
  static const int kClearingPartIdFieldNumber = 24;
  const std::string& clearing_part_id() const;
  void set_clearing_part_id(const std::string& value);
  void set_clearing_part_id(std::string&& value);
  void set_clearing_part_id(const char* value);
  void set_clearing_part_id(const char* value, size_t size);
  std::string* mutable_clearing_part_id();
  std::string* release_clearing_part_id();
  void set_allocated_clearing_part_id(std::string* clearing_part_id);

  // string business_unit = 25;
  void clear_business_unit();
  static const int kBusinessUnitFieldNumber = 25;
  const std::string& business_unit() const;
  void set_business_unit(const std::string& value);
  void set_business_unit(std::string&& value);
  void set_business_unit(const char* value);
  void set_business_unit(const char* value, size_t size);
  std::string* mutable_business_unit();
  std::string* release_business_unit();
  void set_allocated_business_unit(std::string* business_unit);

  // string invest_unit_id = 31;
  void clear_invest_unit_id();
  static const int kInvestUnitIdFieldNumber = 31;
  const std::string& invest_unit_id() const;
  void set_invest_unit_id(const std::string& value);
  void set_invest_unit_id(std::string&& value);
  void set_invest_unit_id(const char* value);
  void set_invest_unit_id(const char* value, size_t size);
  std::string* mutable_invest_unit_id();
  std::string* release_invest_unit_id();
  void set_allocated_invest_unit_id(std::string* invest_unit_id);

  // int32 direction = 8;
  void clear_direction();
  static const int kDirectionFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trading_role = 12;
  void clear_trading_role();
  static const int kTradingRoleFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 trading_role() const;
  void set_trading_role(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 offset_flag = 14;
  void clear_offset_flag();
  static const int kOffsetFlagFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_flag() const;
  void set_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hedge_flag = 15;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 hedge_flag() const;
  void set_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double price = 16;
  void clear_price();
  static const int kPriceFieldNumber = 16;
  double price() const;
  void set_price(double value);

  // int32 volume = 17;
  void clear_volume();
  static const int kVolumeFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trade_type = 20;
  void clear_trade_type();
  static const int kTradeTypeFieldNumber = 20;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_type() const;
  void set_trade_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 price_source = 21;
  void clear_price_source();
  static const int kPriceSourceFieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::int32 price_source() const;
  void set_price_source(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 sequence_no = 26;
  void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 26;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_no() const;
  void set_sequence_no(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trading_day = 27;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 27;
  ::PROTOBUF_NAMESPACE_ID::int32 trading_day() const;
  void set_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 settlement_id = 28;
  void clear_settlement_id();
  static const int kSettlementIdFieldNumber = 28;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_id() const;
  void set_settlement_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 broker_order_seq = 29;
  void clear_broker_order_seq();
  static const int kBrokerOrderSeqFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::int32 broker_order_seq() const;
  void set_broker_order_seq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trade_source = 30;
  void clear_trade_source();
  static const int kTradeSourceFieldNumber = 30;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_source() const;
  void set_trade_source(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPTradeField)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clearing_part_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr business_unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invest_unit_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 trading_role_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 hedge_flag_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 trading_day_;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 broker_order_seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPTradeReportList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPTradeReportList) */ {
 public:
  CTPTradeReportList();
  virtual ~CTPTradeReportList();

  CTPTradeReportList(const CTPTradeReportList& from);
  CTPTradeReportList(CTPTradeReportList&& from) noexcept
    : CTPTradeReportList() {
    *this = ::std::move(from);
  }

  inline CTPTradeReportList& operator=(const CTPTradeReportList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPTradeReportList& operator=(CTPTradeReportList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPTradeReportList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPTradeReportList* internal_default_instance() {
    return reinterpret_cast<const CTPTradeReportList*>(
               &_CTPTradeReportList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CTPTradeReportList* other);
  friend void swap(CTPTradeReportList& a, CTPTradeReportList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPTradeReportList* New() const final {
    return CreateMaybeMessage<CTPTradeReportList>(nullptr);
  }

  CTPTradeReportList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPTradeReportList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPTradeReportList& from);
  void MergeFrom(const CTPTradeReportList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPTradeReportList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPTradeReportList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CTPTradeField list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::CTPTradeField* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradeField >*
      mutable_list();
  const ::pb::CTPTradeField& list(int index) const;
  ::pb::CTPTradeField* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradeField >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.CTPTradeReportList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradeField > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPPositionSummation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPPositionSummation) */ {
 public:
  CTPPositionSummation();
  virtual ~CTPPositionSummation();

  CTPPositionSummation(const CTPPositionSummation& from);
  CTPPositionSummation(CTPPositionSummation&& from) noexcept
    : CTPPositionSummation() {
    *this = ::std::move(from);
  }

  inline CTPPositionSummation& operator=(const CTPPositionSummation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPPositionSummation& operator=(CTPPositionSummation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPPositionSummation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPPositionSummation* internal_default_instance() {
    return reinterpret_cast<const CTPPositionSummation*>(
               &_CTPPositionSummation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CTPPositionSummation* other);
  friend void swap(CTPPositionSummation& a, CTPPositionSummation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPPositionSummation* New() const final {
    return CreateMaybeMessage<CTPPositionSummation>(nullptr);
  }

  CTPPositionSummation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPPositionSummation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPPositionSummation& from);
  void MergeFrom(const CTPPositionSummation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPPositionSummation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPPositionSummation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string route_account_id = 3;
  void clear_route_account_id();
  static const int kRouteAccountIdFieldNumber = 3;
  const std::string& route_account_id() const;
  void set_route_account_id(const std::string& value);
  void set_route_account_id(std::string&& value);
  void set_route_account_id(const char* value);
  void set_route_account_id(const char* value, size_t size);
  std::string* mutable_route_account_id();
  std::string* release_route_account_id();
  void set_allocated_route_account_id(std::string* route_account_id);

  // .pb.CTPDirection direction = 1;
  void clear_direction();
  static const int kDirectionFieldNumber = 1;
  ::pb::CTPDirection direction() const;
  void set_direction(::pb::CTPDirection value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double amount = 5;
  void clear_amount();
  static const int kAmountFieldNumber = 5;
  double amount() const;
  void set_amount(double value);

  // int32 position = 4;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 frozen = 7;
  void clear_frozen();
  static const int kFrozenFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 frozen() const;
  void set_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double cost = 6;
  void clear_cost();
  static const int kCostFieldNumber = 6;
  double cost() const;
  void set_cost(double value);

  // double position_profit = 9;
  void clear_position_profit();
  static const int kPositionProfitFieldNumber = 9;
  double position_profit() const;
  void set_position_profit(double value);

  // double closed_profit = 10;
  void clear_closed_profit();
  static const int kClosedProfitFieldNumber = 10;
  double closed_profit() const;
  void set_closed_profit(double value);

  // double margin = 11;
  void clear_margin();
  static const int kMarginFieldNumber = 11;
  double margin() const;
  void set_margin(double value);

  // double frozen_margin = 12;
  void clear_frozen_margin();
  static const int kFrozenMarginFieldNumber = 12;
  double frozen_margin() const;
  void set_frozen_margin(double value);

  // double commission = 13;
  void clear_commission();
  static const int kCommissionFieldNumber = 13;
  double commission() const;
  void set_commission(double value);

  // double frozen_commission = 14;
  void clear_frozen_commission();
  static const int kFrozenCommissionFieldNumber = 14;
  double frozen_commission() const;
  void set_frozen_commission(double value);

  // double interest = 15;
  void clear_interest();
  static const int kInterestFieldNumber = 15;
  double interest() const;
  void set_interest(double value);

  // double frozen_interest = 16;
  void clear_frozen_interest();
  static const int kFrozenInterestFieldNumber = 16;
  double frozen_interest() const;
  void set_frozen_interest(double value);

  // double mtm_profit = 17;
  void clear_mtm_profit();
  static const int kMtmProfitFieldNumber = 17;
  double mtm_profit() const;
  void set_mtm_profit(double value);

  // double cleared_closed_profit = 18;
  void clear_cleared_closed_profit();
  static const int kClearedClosedProfitFieldNumber = 18;
  double cleared_closed_profit() const;
  void set_cleared_closed_profit(double value);

  // int32 available = 8;
  void clear_available();
  static const int kAvailableFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 available() const;
  void set_available(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPPositionSummation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_account_id_;
  int direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  ::PROTOBUF_NAMESPACE_ID::int32 frozen_;
  double cost_;
  double position_profit_;
  double closed_profit_;
  double margin_;
  double frozen_margin_;
  double commission_;
  double frozen_commission_;
  double interest_;
  double frozen_interest_;
  double mtm_profit_;
  double cleared_closed_profit_;
  ::PROTOBUF_NAMESPACE_ID::int32 available_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPPosition) */ {
 public:
  CTPPosition();
  virtual ~CTPPosition();

  CTPPosition(const CTPPosition& from);
  CTPPosition(CTPPosition&& from) noexcept
    : CTPPosition() {
    *this = ::std::move(from);
  }

  inline CTPPosition& operator=(const CTPPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPPosition& operator=(CTPPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPPosition* internal_default_instance() {
    return reinterpret_cast<const CTPPosition*>(
               &_CTPPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CTPPosition* other);
  friend void swap(CTPPosition& a, CTPPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPPosition* New() const final {
    return CreateMaybeMessage<CTPPosition>(nullptr);
  }

  CTPPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPPosition& from);
  void MergeFrom(const CTPPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol_name = 14;
  void clear_symbol_name();
  static const int kSymbolNameFieldNumber = 14;
  const std::string& symbol_name() const;
  void set_symbol_name(const std::string& value);
  void set_symbol_name(std::string&& value);
  void set_symbol_name(const char* value);
  void set_symbol_name(const char* value, size_t size);
  std::string* mutable_symbol_name();
  std::string* release_symbol_name();
  void set_allocated_symbol_name(std::string* symbol_name);

  // string account_id = 15;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 15;
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // .pb.CTPPositionSummation summation = 2;
  bool has_summation() const;
  void clear_summation();
  static const int kSummationFieldNumber = 2;
  const ::pb::CTPPositionSummation& summation() const;
  ::pb::CTPPositionSummation* release_summation();
  ::pb::CTPPositionSummation* mutable_summation();
  void set_allocated_summation(::pb::CTPPositionSummation* summation);

  // .pb.CTPPositionSummation today_summation = 3;
  bool has_today_summation() const;
  void clear_today_summation();
  static const int kTodaySummationFieldNumber = 3;
  const ::pb::CTPPositionSummation& today_summation() const;
  ::pb::CTPPositionSummation* release_today_summation();
  ::pb::CTPPositionSummation* mutable_today_summation();
  void set_allocated_today_summation(::pb::CTPPositionSummation* today_summation);

  // .pb.CTPPositionSummation yesterday_summation = 4;
  bool has_yesterday_summation() const;
  void clear_yesterday_summation();
  static const int kYesterdaySummationFieldNumber = 4;
  const ::pb::CTPPositionSummation& yesterday_summation() const;
  ::pb::CTPPositionSummation* release_yesterday_summation();
  ::pb::CTPPositionSummation* mutable_yesterday_summation();
  void set_allocated_yesterday_summation(::pb::CTPPositionSummation* yesterday_summation);

  // .pb.ProductID product_id = 12;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 12;
  const ::pb::ProductID& product_id() const;
  ::pb::ProductID* release_product_id();
  ::pb::ProductID* mutable_product_id();
  void set_allocated_product_id(::pb::ProductID* product_id);

  // double pre_settlement_price = 5;
  void clear_pre_settlement_price();
  static const int kPreSettlementPriceFieldNumber = 5;
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);

  // double settlement_price = 6;
  void clear_settlement_price();
  static const int kSettlementPriceFieldNumber = 6;
  double settlement_price() const;
  void set_settlement_price(double value);

  // double last_price = 7;
  void clear_last_price();
  static const int kLastPriceFieldNumber = 7;
  double last_price() const;
  void set_last_price(double value);

  // int32 trading_day = 8;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 trading_day() const;
  void set_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 product_type = 9;
  void clear_product_type();
  static const int kProductTypeFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 product_type() const;
  void set_product_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double price_tick = 13;
  void clear_price_tick();
  static const int kPriceTickFieldNumber = 13;
  double price_tick() const;
  void set_price_tick(double value);

  // int32 volume_multiple = 11;
  void clear_volume_multiple();
  static const int kVolumeMultipleFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple() const;
  void set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPPosition)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::pb::Symbol* symbol_;
  ::pb::CTPPositionSummation* summation_;
  ::pb::CTPPositionSummation* today_summation_;
  ::pb::CTPPositionSummation* yesterday_summation_;
  ::pb::ProductID* product_id_;
  double pre_settlement_price_;
  double settlement_price_;
  double last_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 trading_day_;
  ::PROTOBUF_NAMESPACE_ID::int32 product_type_;
  double price_tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPPositionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPPositionList) */ {
 public:
  CTPPositionList();
  virtual ~CTPPositionList();

  CTPPositionList(const CTPPositionList& from);
  CTPPositionList(CTPPositionList&& from) noexcept
    : CTPPositionList() {
    *this = ::std::move(from);
  }

  inline CTPPositionList& operator=(const CTPPositionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPPositionList& operator=(CTPPositionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPPositionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPPositionList* internal_default_instance() {
    return reinterpret_cast<const CTPPositionList*>(
               &_CTPPositionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CTPPositionList* other);
  friend void swap(CTPPositionList& a, CTPPositionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPPositionList* New() const final {
    return CreateMaybeMessage<CTPPositionList>(nullptr);
  }

  CTPPositionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPPositionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPPositionList& from);
  void MergeFrom(const CTPPositionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPPositionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPPositionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CTPPosition list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::CTPPosition* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPPosition >*
      mutable_list();
  const ::pb::CTPPosition& list(int index) const;
  ::pb::CTPPosition* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPPosition >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.CTPPositionList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPPosition > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPCloseTradeRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPCloseTradeRecord) */ {
 public:
  CTPCloseTradeRecord();
  virtual ~CTPCloseTradeRecord();

  CTPCloseTradeRecord(const CTPCloseTradeRecord& from);
  CTPCloseTradeRecord(CTPCloseTradeRecord&& from) noexcept
    : CTPCloseTradeRecord() {
    *this = ::std::move(from);
  }

  inline CTPCloseTradeRecord& operator=(const CTPCloseTradeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPCloseTradeRecord& operator=(CTPCloseTradeRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPCloseTradeRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPCloseTradeRecord* internal_default_instance() {
    return reinterpret_cast<const CTPCloseTradeRecord*>(
               &_CTPCloseTradeRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CTPCloseTradeRecord* other);
  friend void swap(CTPCloseTradeRecord& a, CTPCloseTradeRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPCloseTradeRecord* New() const final {
    return CreateMaybeMessage<CTPCloseTradeRecord>(nullptr);
  }

  CTPCloseTradeRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPCloseTradeRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPCloseTradeRecord& from);
  void MergeFrom(const CTPCloseTradeRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPCloseTradeRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPCloseTradeRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account_id = 1;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // string open_trade_id = 11;
  void clear_open_trade_id();
  static const int kOpenTradeIdFieldNumber = 11;
  const std::string& open_trade_id() const;
  void set_open_trade_id(const std::string& value);
  void set_open_trade_id(std::string&& value);
  void set_open_trade_id(const char* value);
  void set_open_trade_id(const char* value, size_t size);
  std::string* mutable_open_trade_id();
  std::string* release_open_trade_id();
  void set_allocated_open_trade_id(std::string* open_trade_id);

  // string close_trade_id = 17;
  void clear_close_trade_id();
  static const int kCloseTradeIdFieldNumber = 17;
  const std::string& close_trade_id() const;
  void set_close_trade_id(const std::string& value);
  void set_close_trade_id(std::string&& value);
  void set_close_trade_id(const char* value);
  void set_close_trade_id(const char* value, size_t size);
  std::string* mutable_close_trade_id();
  std::string* release_close_trade_id();
  void set_allocated_close_trade_id(std::string* close_trade_id);

  // string route_account_id = 29;
  void clear_route_account_id();
  static const int kRouteAccountIdFieldNumber = 29;
  const std::string& route_account_id() const;
  void set_route_account_id(const std::string& value);
  void set_route_account_id(std::string&& value);
  void set_route_account_id(const char* value);
  void set_route_account_id(const char* value, size_t size);
  std::string* mutable_route_account_id();
  std::string* release_route_account_id();
  void set_allocated_route_account_id(std::string* route_account_id);

  // .pb.Symbol symbol = 2;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // .pb.CTPOrderID open_order_id = 10;
  bool has_open_order_id() const;
  void clear_open_order_id();
  static const int kOpenOrderIdFieldNumber = 10;
  const ::pb::CTPOrderID& open_order_id() const;
  ::pb::CTPOrderID* release_open_order_id();
  ::pb::CTPOrderID* mutable_open_order_id();
  void set_allocated_open_order_id(::pb::CTPOrderID* open_order_id);

  // .pb.CTPOrderID close_order_id = 16;
  bool has_close_order_id() const;
  void clear_close_order_id();
  static const int kCloseOrderIdFieldNumber = 16;
  const ::pb::CTPOrderID& close_order_id() const;
  ::pb::CTPOrderID* release_close_order_id();
  ::pb::CTPOrderID* mutable_close_order_id();
  void set_allocated_close_order_id(::pb::CTPOrderID* close_order_id);

  // .pb.CTPDirection direction = 3;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::pb::CTPDirection direction() const;
  void set_direction(::pb::CTPDirection value);

  // int32 open_volume = 4;
  void clear_open_volume();
  static const int kOpenVolumeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 open_volume() const;
  void set_open_volume(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double open_amount = 5;
  void clear_open_amount();
  static const int kOpenAmountFieldNumber = 5;
  double open_amount() const;
  void set_open_amount(double value);

  // double closed_amount = 7;
  void clear_closed_amount();
  static const int kClosedAmountFieldNumber = 7;
  double closed_amount() const;
  void set_closed_amount(double value);

  // int32 closed_volume = 6;
  void clear_closed_volume();
  static const int kClosedVolumeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 closed_volume() const;
  void set_closed_volume(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 open_trading_day = 9;
  void clear_open_trading_day();
  static const int kOpenTradingDayFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 open_trading_day() const;
  void set_open_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 open_time = 8;
  void clear_open_time();
  static const int kOpenTimeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 open_time() const;
  void set_open_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 open_trade_type = 12;
  void clear_open_trade_type();
  static const int kOpenTradeTypeFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 open_trade_type() const;
  void set_open_trade_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 open_hedge_type = 13;
  void clear_open_hedge_type();
  static const int kOpenHedgeTypeFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 open_hedge_type() const;
  void set_open_hedge_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 close_time = 14;
  void clear_close_time();
  static const int kCloseTimeFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int64 close_time() const;
  void set_close_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 close_trading_day = 15;
  void clear_close_trading_day();
  static const int kCloseTradingDayFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 close_trading_day() const;
  void set_close_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 close_trade_type = 18;
  void clear_close_trade_type();
  static const int kCloseTradeTypeFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int32 close_trade_type() const;
  void set_close_trade_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double close_profit = 20;
  void clear_close_profit();
  static const int kCloseProfitFieldNumber = 20;
  double close_profit() const;
  void set_close_profit(double value);

  // int32 close_hedge_type = 19;
  void clear_close_hedge_type();
  static const int kCloseHedgeTypeFieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int32 close_hedge_type() const;
  void set_close_hedge_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .pb.CurrencyType currency_type = 22;
  void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 22;
  ::pb::CurrencyType currency_type() const;
  void set_currency_type(::pb::CurrencyType value);

  // double pre_settlement_price = 21;
  void clear_pre_settlement_price();
  static const int kPreSettlementPriceFieldNumber = 21;
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);

  // double open_commission = 23;
  void clear_open_commission();
  static const int kOpenCommissionFieldNumber = 23;
  double open_commission() const;
  void set_open_commission(double value);

  // double close_commission = 24;
  void clear_close_commission();
  static const int kCloseCommissionFieldNumber = 24;
  double close_commission() const;
  void set_close_commission(double value);

  // double margin = 25;
  void clear_margin();
  static const int kMarginFieldNumber = 25;
  double margin() const;
  void set_margin(double value);

  // double initial_open_amount = 26;
  void clear_initial_open_amount();
  static const int kInitialOpenAmountFieldNumber = 26;
  double initial_open_amount() const;
  void set_initial_open_amount(double value);

  // double frozen_interest = 28;
  void clear_frozen_interest();
  static const int kFrozenInterestFieldNumber = 28;
  double frozen_interest() const;
  void set_frozen_interest(double value);

  // double position_profit = 30;
  void clear_position_profit();
  static const int kPositionProfitFieldNumber = 30;
  double position_profit() const;
  void set_position_profit(double value);

  // int32 volume_multiple = 27;
  void clear_volume_multiple();
  static const int kVolumeMultipleFieldNumber = 27;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple() const;
  void set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPCloseTradeRecord)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_trade_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_trade_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_account_id_;
  ::pb::Symbol* symbol_;
  ::pb::CTPOrderID* open_order_id_;
  ::pb::CTPOrderID* close_order_id_;
  int direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_volume_;
  double open_amount_;
  double closed_amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 closed_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_trading_day_;
  ::PROTOBUF_NAMESPACE_ID::int64 open_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_trade_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_hedge_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 close_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 close_trading_day_;
  ::PROTOBUF_NAMESPACE_ID::int32 close_trade_type_;
  double close_profit_;
  ::PROTOBUF_NAMESPACE_ID::int32 close_hedge_type_;
  int currency_type_;
  double pre_settlement_price_;
  double open_commission_;
  double close_commission_;
  double margin_;
  double initial_open_amount_;
  double frozen_interest_;
  double position_profit_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPCloseTradeRecordList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPCloseTradeRecordList) */ {
 public:
  CTPCloseTradeRecordList();
  virtual ~CTPCloseTradeRecordList();

  CTPCloseTradeRecordList(const CTPCloseTradeRecordList& from);
  CTPCloseTradeRecordList(CTPCloseTradeRecordList&& from) noexcept
    : CTPCloseTradeRecordList() {
    *this = ::std::move(from);
  }

  inline CTPCloseTradeRecordList& operator=(const CTPCloseTradeRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPCloseTradeRecordList& operator=(CTPCloseTradeRecordList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPCloseTradeRecordList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPCloseTradeRecordList* internal_default_instance() {
    return reinterpret_cast<const CTPCloseTradeRecordList*>(
               &_CTPCloseTradeRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CTPCloseTradeRecordList* other);
  friend void swap(CTPCloseTradeRecordList& a, CTPCloseTradeRecordList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPCloseTradeRecordList* New() const final {
    return CreateMaybeMessage<CTPCloseTradeRecordList>(nullptr);
  }

  CTPCloseTradeRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPCloseTradeRecordList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPCloseTradeRecordList& from);
  void MergeFrom(const CTPCloseTradeRecordList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPCloseTradeRecordList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPCloseTradeRecordList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CTPCloseTradeRecord list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::CTPCloseTradeRecord* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >*
      mutable_list();
  const ::pb::CTPCloseTradeRecord& list(int index) const;
  ::pb::CTPCloseTradeRecord* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.CTPCloseTradeRecordList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPMarginRate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPMarginRate) */ {
 public:
  CTPMarginRate();
  virtual ~CTPMarginRate();

  CTPMarginRate(const CTPMarginRate& from);
  CTPMarginRate(CTPMarginRate&& from) noexcept
    : CTPMarginRate() {
    *this = ::std::move(from);
  }

  inline CTPMarginRate& operator=(const CTPMarginRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPMarginRate& operator=(CTPMarginRate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPMarginRate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPMarginRate* internal_default_instance() {
    return reinterpret_cast<const CTPMarginRate*>(
               &_CTPMarginRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CTPMarginRate* other);
  friend void swap(CTPMarginRate& a, CTPMarginRate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPMarginRate* New() const final {
    return CreateMaybeMessage<CTPMarginRate>(nullptr);
  }

  CTPMarginRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPMarginRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPMarginRate& from);
  void MergeFrom(const CTPMarginRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPMarginRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPMarginRate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);

  // string product = 3;
  void clear_product();
  static const int kProductFieldNumber = 3;
  const std::string& product() const;
  void set_product(const std::string& value);
  void set_product(std::string&& value);
  void set_product(const char* value);
  void set_product(const char* value, size_t size);
  std::string* mutable_product();
  std::string* release_product();
  void set_allocated_product(std::string* product);

  // double long_by_volume = 4;
  void clear_long_by_volume();
  static const int kLongByVolumeFieldNumber = 4;
  double long_by_volume() const;
  void set_long_by_volume(double value);

  // double long_by_amount = 5;
  void clear_long_by_amount();
  static const int kLongByAmountFieldNumber = 5;
  double long_by_amount() const;
  void set_long_by_amount(double value);

  // double short_by_volume = 6;
  void clear_short_by_volume();
  static const int kShortByVolumeFieldNumber = 6;
  double short_by_volume() const;
  void set_short_by_volume(double value);

  // double short_by_amount = 7;
  void clear_short_by_amount();
  static const int kShortByAmountFieldNumber = 7;
  double short_by_amount() const;
  void set_short_by_amount(double value);

  // .pb.ExchangeType exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  ::pb::ExchangeType exchange() const;
  void set_exchange(::pb::ExchangeType value);

  // int64 id = 10;
  void clear_id();
  static const int kIdFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:pb.CTPMarginRate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  double long_by_volume_;
  double long_by_amount_;
  double short_by_volume_;
  double short_by_amount_;
  int exchange_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPMarginItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPMarginItem) */ {
 public:
  CTPMarginItem();
  virtual ~CTPMarginItem();

  CTPMarginItem(const CTPMarginItem& from);
  CTPMarginItem(CTPMarginItem&& from) noexcept
    : CTPMarginItem() {
    *this = ::std::move(from);
  }

  inline CTPMarginItem& operator=(const CTPMarginItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPMarginItem& operator=(CTPMarginItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPMarginItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPMarginItem* internal_default_instance() {
    return reinterpret_cast<const CTPMarginItem*>(
               &_CTPMarginItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CTPMarginItem* other);
  friend void swap(CTPMarginItem& a, CTPMarginItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPMarginItem* New() const final {
    return CreateMaybeMessage<CTPMarginItem>(nullptr);
  }

  CTPMarginItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPMarginItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPMarginItem& from);
  void MergeFrom(const CTPMarginItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPMarginItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPMarginItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double long_by_volume = 1;
  void clear_long_by_volume();
  static const int kLongByVolumeFieldNumber = 1;
  double long_by_volume() const;
  void set_long_by_volume(double value);

  // double long_by_amount = 2;
  void clear_long_by_amount();
  static const int kLongByAmountFieldNumber = 2;
  double long_by_amount() const;
  void set_long_by_amount(double value);

  // double short_by_volume = 3;
  void clear_short_by_volume();
  static const int kShortByVolumeFieldNumber = 3;
  double short_by_volume() const;
  void set_short_by_volume(double value);

  // double short_by_amount = 4;
  void clear_short_by_amount();
  static const int kShortByAmountFieldNumber = 4;
  double short_by_amount() const;
  void set_short_by_amount(double value);

  // @@protoc_insertion_point(class_scope:pb.CTPMarginItem)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double long_by_volume_;
  double long_by_amount_;
  double short_by_volume_;
  double short_by_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPCommissionRateItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPCommissionRateItem) */ {
 public:
  CTPCommissionRateItem();
  virtual ~CTPCommissionRateItem();

  CTPCommissionRateItem(const CTPCommissionRateItem& from);
  CTPCommissionRateItem(CTPCommissionRateItem&& from) noexcept
    : CTPCommissionRateItem() {
    *this = ::std::move(from);
  }

  inline CTPCommissionRateItem& operator=(const CTPCommissionRateItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPCommissionRateItem& operator=(CTPCommissionRateItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPCommissionRateItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPCommissionRateItem* internal_default_instance() {
    return reinterpret_cast<const CTPCommissionRateItem*>(
               &_CTPCommissionRateItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CTPCommissionRateItem* other);
  friend void swap(CTPCommissionRateItem& a, CTPCommissionRateItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPCommissionRateItem* New() const final {
    return CreateMaybeMessage<CTPCommissionRateItem>(nullptr);
  }

  CTPCommissionRateItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPCommissionRateItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPCommissionRateItem& from);
  void MergeFrom(const CTPCommissionRateItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPCommissionRateItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPCommissionRateItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tag = 5;
  void clear_tag();
  static const int kTagFieldNumber = 5;
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // double by_amount = 1;
  void clear_by_amount();
  static const int kByAmountFieldNumber = 1;
  double by_amount() const;
  void set_by_amount(double value);

  // double by_volume = 2;
  void clear_by_volume();
  static const int kByVolumeFieldNumber = 2;
  double by_volume() const;
  void set_by_volume(double value);

  // double minimum = 3;
  void clear_minimum();
  static const int kMinimumFieldNumber = 3;
  double minimum() const;
  void set_minimum(double value);

  // .pb.CTPOffsetFlag offset_flag = 4;
  void clear_offset_flag();
  static const int kOffsetFlagFieldNumber = 4;
  ::pb::CTPOffsetFlag offset_flag() const;
  void set_offset_flag(::pb::CTPOffsetFlag value);

  // @@protoc_insertion_point(class_scope:pb.CTPCommissionRateItem)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  double by_amount_;
  double by_volume_;
  double minimum_;
  int offset_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPCommissionRate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPCommissionRate) */ {
 public:
  CTPCommissionRate();
  virtual ~CTPCommissionRate();

  CTPCommissionRate(const CTPCommissionRate& from);
  CTPCommissionRate(CTPCommissionRate&& from) noexcept
    : CTPCommissionRate() {
    *this = ::std::move(from);
  }

  inline CTPCommissionRate& operator=(const CTPCommissionRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPCommissionRate& operator=(CTPCommissionRate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPCommissionRate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPCommissionRate* internal_default_instance() {
    return reinterpret_cast<const CTPCommissionRate*>(
               &_CTPCommissionRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CTPCommissionRate* other);
  friend void swap(CTPCommissionRate& a, CTPCommissionRate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPCommissionRate* New() const final {
    return CreateMaybeMessage<CTPCommissionRate>(nullptr);
  }

  CTPCommissionRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPCommissionRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPCommissionRate& from);
  void MergeFrom(const CTPCommissionRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPCommissionRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPCommissionRate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CTPCommissionRateItem settings = 4;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 4;
  ::pb::CTPCommissionRateItem* mutable_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCommissionRateItem >*
      mutable_settings();
  const ::pb::CTPCommissionRateItem& settings(int index) const;
  ::pb::CTPCommissionRateItem* add_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCommissionRateItem >&
      settings() const;

  // string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);

  // string product = 3;
  void clear_product();
  static const int kProductFieldNumber = 3;
  const std::string& product() const;
  void set_product(const std::string& value);
  void set_product(std::string&& value);
  void set_product(const char* value);
  void set_product(const char* value, size_t size);
  std::string* mutable_product();
  std::string* release_product();
  void set_allocated_product(std::string* product);

  // int64 id = 5;
  void clear_id();
  static const int kIdFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .pb.ExchangeType exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  ::pb::ExchangeType exchange() const;
  void set_exchange(::pb::ExchangeType value);

  // @@protoc_insertion_point(class_scope:pb.CTPCommissionRate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCommissionRateItem > settings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int exchange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPTradingUnit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPTradingUnit) */ {
 public:
  CTPTradingUnit();
  virtual ~CTPTradingUnit();

  CTPTradingUnit(const CTPTradingUnit& from);
  CTPTradingUnit(CTPTradingUnit&& from) noexcept
    : CTPTradingUnit() {
    *this = ::std::move(from);
  }

  inline CTPTradingUnit& operator=(const CTPTradingUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPTradingUnit& operator=(CTPTradingUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPTradingUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPTradingUnit* internal_default_instance() {
    return reinterpret_cast<const CTPTradingUnit*>(
               &_CTPTradingUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CTPTradingUnit* other);
  friend void swap(CTPTradingUnit& a, CTPTradingUnit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPTradingUnit* New() const final {
    return CreateMaybeMessage<CTPTradingUnit>(nullptr);
  }

  CTPTradingUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPTradingUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPTradingUnit& from);
  void MergeFrom(const CTPTradingUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPTradingUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPTradingUnit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CTPPosition position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::pb::CTPPosition* mutable_position(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPPosition >*
      mutable_position();
  const ::pb::CTPPosition& position(int index) const;
  ::pb::CTPPosition* add_position();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPPosition >&
      position() const;

  // repeated .pb.CTPOrderLink order_link_list = 3;
  int order_link_list_size() const;
  void clear_order_link_list();
  static const int kOrderLinkListFieldNumber = 3;
  ::pb::CTPOrderLink* mutable_order_link_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderLink >*
      mutable_order_link_list();
  const ::pb::CTPOrderLink& order_link_list(int index) const;
  ::pb::CTPOrderLink* add_order_link_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderLink >&
      order_link_list() const;

  // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
  int position_detail_list_size() const;
  void clear_position_detail_list();
  static const int kPositionDetailListFieldNumber = 4;
  ::pb::CTPCloseTradeRecord* mutable_position_detail_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >*
      mutable_position_detail_list();
  const ::pb::CTPCloseTradeRecord& position_detail_list(int index) const;
  ::pb::CTPCloseTradeRecord* add_position_detail_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >&
      position_detail_list() const;

  // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
  int history_ctr_list_size() const;
  void clear_history_ctr_list();
  static const int kHistoryCtrListFieldNumber = 5;
  ::pb::CTPCloseTradeRecord* mutable_history_ctr_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >*
      mutable_history_ctr_list();
  const ::pb::CTPCloseTradeRecord& history_ctr_list(int index) const;
  ::pb::CTPCloseTradeRecord* add_history_ctr_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >&
      history_ctr_list() const;

  // repeated .pb.CTPOrderField history_order_list = 6;
  int history_order_list_size() const;
  void clear_history_order_list();
  static const int kHistoryOrderListFieldNumber = 6;
  ::pb::CTPOrderField* mutable_history_order_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >*
      mutable_history_order_list();
  const ::pb::CTPOrderField& history_order_list(int index) const;
  ::pb::CTPOrderField* add_history_order_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >&
      history_order_list() const;

  // repeated .pb.CTPTradeField history_trade_list = 7;
  int history_trade_list_size() const;
  void clear_history_trade_list();
  static const int kHistoryTradeListFieldNumber = 7;
  ::pb::CTPTradeField* mutable_history_trade_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradeField >*
      mutable_history_trade_list();
  const ::pb::CTPTradeField& history_trade_list(int index) const;
  ::pb::CTPTradeField* add_history_trade_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradeField >&
      history_trade_list() const;

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // .pb.CTPCommissionRate cr = 14;
  bool has_cr() const;
  void clear_cr();
  static const int kCrFieldNumber = 14;
  const ::pb::CTPCommissionRate& cr() const;
  ::pb::CTPCommissionRate* release_cr();
  ::pb::CTPCommissionRate* mutable_cr();
  void set_allocated_cr(::pb::CTPCommissionRate* cr);

  // .pb.CTPMarginRate mr = 15;
  bool has_mr() const;
  void clear_mr();
  static const int kMrFieldNumber = 15;
  const ::pb::CTPMarginRate& mr() const;
  ::pb::CTPMarginRate* release_mr();
  ::pb::CTPMarginRate* mutable_mr();
  void set_allocated_mr(::pb::CTPMarginRate* mr);

  // double last_price = 10;
  void clear_last_price();
  static const int kLastPriceFieldNumber = 10;
  double last_price() const;
  void set_last_price(double value);

  // int64 last_mds_update_time = 11;
  void clear_last_mds_update_time();
  static const int kLastMdsUpdateTimeFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 last_mds_update_time() const;
  void set_last_mds_update_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double price_tick = 12;
  void clear_price_tick();
  static const int kPriceTickFieldNumber = 12;
  double price_tick() const;
  void set_price_tick(double value);

  // int32 volume_multiple = 13;
  void clear_volume_multiple();
  static const int kVolumeMultipleFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple() const;
  void set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPTradingUnit)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPPosition > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderLink > order_link_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord > position_detail_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord > history_ctr_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField > history_order_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradeField > history_trade_list_;
  ::pb::Symbol* symbol_;
  ::pb::CTPCommissionRate* cr_;
  ::pb::CTPMarginRate* mr_;
  double last_price_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_mds_update_time_;
  double price_tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPForceCloseTimeRule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPForceCloseTimeRule) */ {
 public:
  CTPForceCloseTimeRule();
  virtual ~CTPForceCloseTimeRule();

  CTPForceCloseTimeRule(const CTPForceCloseTimeRule& from);
  CTPForceCloseTimeRule(CTPForceCloseTimeRule&& from) noexcept
    : CTPForceCloseTimeRule() {
    *this = ::std::move(from);
  }

  inline CTPForceCloseTimeRule& operator=(const CTPForceCloseTimeRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPForceCloseTimeRule& operator=(CTPForceCloseTimeRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPForceCloseTimeRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPForceCloseTimeRule* internal_default_instance() {
    return reinterpret_cast<const CTPForceCloseTimeRule*>(
               &_CTPForceCloseTimeRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CTPForceCloseTimeRule* other);
  friend void swap(CTPForceCloseTimeRule& a, CTPForceCloseTimeRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPForceCloseTimeRule* New() const final {
    return CreateMaybeMessage<CTPForceCloseTimeRule>(nullptr);
  }

  CTPForceCloseTimeRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPForceCloseTimeRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPForceCloseTimeRule& from);
  void MergeFrom(const CTPForceCloseTimeRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPForceCloseTimeRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPForceCloseTimeRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 disable_open_start = 3;
  void clear_disable_open_start();
  static const int kDisableOpenStartFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 disable_open_start() const;
  void set_disable_open_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:pb.CTPForceCloseTimeRule)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_;
  ::PROTOBUF_NAMESPACE_ID::int64 disable_open_start_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPTradingUnitOption :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPTradingUnitOption) */ {
 public:
  CTPTradingUnitOption();
  virtual ~CTPTradingUnitOption();

  CTPTradingUnitOption(const CTPTradingUnitOption& from);
  CTPTradingUnitOption(CTPTradingUnitOption&& from) noexcept
    : CTPTradingUnitOption() {
    *this = ::std::move(from);
  }

  inline CTPTradingUnitOption& operator=(const CTPTradingUnitOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPTradingUnitOption& operator=(CTPTradingUnitOption&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPTradingUnitOption& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPTradingUnitOption* internal_default_instance() {
    return reinterpret_cast<const CTPTradingUnitOption*>(
               &_CTPTradingUnitOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CTPTradingUnitOption* other);
  friend void swap(CTPTradingUnitOption& a, CTPTradingUnitOption& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPTradingUnitOption* New() const final {
    return CreateMaybeMessage<CTPTradingUnitOption>(nullptr);
  }

  CTPTradingUnitOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPTradingUnitOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPTradingUnitOption& from);
  void MergeFrom(const CTPTradingUnitOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPTradingUnitOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPTradingUnitOption";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
  int fcr_list_size() const;
  void clear_fcr_list();
  static const int kFcrListFieldNumber = 8;
  ::pb::CTPForceCloseTimeRule* mutable_fcr_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPForceCloseTimeRule >*
      mutable_fcr_list();
  const ::pb::CTPForceCloseTimeRule& fcr_list(int index) const;
  ::pb::CTPForceCloseTimeRule* add_fcr_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPForceCloseTimeRule >&
      fcr_list() const;

  // repeated .pb.CTPCommissionRateItem cr_settings = 10;
  int cr_settings_size() const;
  void clear_cr_settings();
  static const int kCrSettingsFieldNumber = 10;
  ::pb::CTPCommissionRateItem* mutable_cr_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCommissionRateItem >*
      mutable_cr_settings();
  const ::pb::CTPCommissionRateItem& cr_settings(int index) const;
  ::pb::CTPCommissionRateItem* add_cr_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCommissionRateItem >&
      cr_settings() const;

  // repeated int32 stoploss_candidates = 12;
  int stoploss_candidates_size() const;
  void clear_stoploss_candidates();
  static const int kStoplossCandidatesFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 stoploss_candidates(int index) const;
  void set_stoploss_candidates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_stoploss_candidates(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      stoploss_candidates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_stoploss_candidates();

  // repeated int32 take_profit_candidates = 13;
  int take_profit_candidates_size() const;
  void clear_take_profit_candidates();
  static const int kTakeProfitCandidatesFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 take_profit_candidates(int index) const;
  void set_take_profit_candidates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_take_profit_candidates(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      take_profit_candidates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_take_profit_candidates();

  // repeated int32 volume_candidates = 14;
  int volume_candidates_size() const;
  void clear_volume_candidates();
  static const int kVolumeCandidatesFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_candidates(int index) const;
  void set_volume_candidates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_volume_candidates(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      volume_candidates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_volume_candidates();

  // repeated string disable_open_symbol_list = 15;
  int disable_open_symbol_list_size() const;
  void clear_disable_open_symbol_list();
  static const int kDisableOpenSymbolListFieldNumber = 15;
  const std::string& disable_open_symbol_list(int index) const;
  std::string* mutable_disable_open_symbol_list(int index);
  void set_disable_open_symbol_list(int index, const std::string& value);
  void set_disable_open_symbol_list(int index, std::string&& value);
  void set_disable_open_symbol_list(int index, const char* value);
  void set_disable_open_symbol_list(int index, const char* value, size_t size);
  std::string* add_disable_open_symbol_list();
  void add_disable_open_symbol_list(const std::string& value);
  void add_disable_open_symbol_list(std::string&& value);
  void add_disable_open_symbol_list(const char* value);
  void add_disable_open_symbol_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& disable_open_symbol_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_disable_open_symbol_list();

  // repeated string disable_open_class_list = 16;
  int disable_open_class_list_size() const;
  void clear_disable_open_class_list();
  static const int kDisableOpenClassListFieldNumber = 16;
  const std::string& disable_open_class_list(int index) const;
  std::string* mutable_disable_open_class_list(int index);
  void set_disable_open_class_list(int index, const std::string& value);
  void set_disable_open_class_list(int index, std::string&& value);
  void set_disable_open_class_list(int index, const char* value);
  void set_disable_open_class_list(int index, const char* value, size_t size);
  std::string* add_disable_open_class_list();
  void add_disable_open_class_list(const std::string& value);
  void add_disable_open_class_list(std::string&& value);
  void add_disable_open_class_list(const char* value);
  void add_disable_open_class_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& disable_open_class_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_disable_open_class_list();

  // .pb.CTPMarginItem margin_rate = 11;
  bool has_margin_rate() const;
  void clear_margin_rate();
  static const int kMarginRateFieldNumber = 11;
  const ::pb::CTPMarginItem& margin_rate() const;
  ::pb::CTPMarginItem* release_margin_rate();
  ::pb::CTPMarginItem* mutable_margin_rate();
  void set_allocated_margin_rate(::pb::CTPMarginItem* margin_rate);

  // int32 limit_price_disable_open = 1;
  void clear_limit_price_disable_open();
  static const int kLimitPriceDisableOpenFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_price_disable_open() const;
  void set_limit_price_disable_open(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 limit_price_force_close = 2;
  void clear_limit_price_force_close();
  static const int kLimitPriceForceCloseFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_price_force_close() const;
  void set_limit_price_force_close(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double pre_position_percentage_threshold = 3;
  void clear_pre_position_percentage_threshold();
  static const int kPrePositionPercentageThresholdFieldNumber = 3;
  double pre_position_percentage_threshold() const;
  void set_pre_position_percentage_threshold(double value);

  // double pre_position_threshold = 4;
  void clear_pre_position_threshold();
  static const int kPrePositionThresholdFieldNumber = 4;
  double pre_position_threshold() const;
  void set_pre_position_threshold(double value);

  // double pre_volume_percentage_threshold = 5;
  void clear_pre_volume_percentage_threshold();
  static const int kPreVolumePercentageThresholdFieldNumber = 5;
  double pre_volume_percentage_threshold() const;
  void set_pre_volume_percentage_threshold(double value);

  // double pre_volume_threshold = 6;
  void clear_pre_volume_threshold();
  static const int kPreVolumeThresholdFieldNumber = 6;
  double pre_volume_threshold() const;
  void set_pre_volume_threshold(double value);

  // double single_product_margin_weight_limit = 7;
  void clear_single_product_margin_weight_limit();
  static const int kSingleProductMarginWeightLimitFieldNumber = 7;
  double single_product_margin_weight_limit() const;
  void set_single_product_margin_weight_limit(double value);

  // bool disable_open = 9;
  void clear_disable_open();
  static const int kDisableOpenFieldNumber = 9;
  bool disable_open() const;
  void set_disable_open(bool value);

  // int32 open_days_limit = 17;
  void clear_open_days_limit();
  static const int kOpenDaysLimitFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int32 open_days_limit() const;
  void set_open_days_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPTradingUnitOption)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPForceCloseTimeRule > fcr_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCommissionRateItem > cr_settings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > stoploss_candidates_;
  mutable std::atomic<int> _stoploss_candidates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > take_profit_candidates_;
  mutable std::atomic<int> _take_profit_candidates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > volume_candidates_;
  mutable std::atomic<int> _volume_candidates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> disable_open_symbol_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> disable_open_class_list_;
  ::pb::CTPMarginItem* margin_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_price_disable_open_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_price_force_close_;
  double pre_position_percentage_threshold_;
  double pre_position_threshold_;
  double pre_volume_percentage_threshold_;
  double pre_volume_threshold_;
  double single_product_margin_weight_limit_;
  bool disable_open_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_days_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class MarginCheckRule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.MarginCheckRule) */ {
 public:
  MarginCheckRule();
  virtual ~MarginCheckRule();

  MarginCheckRule(const MarginCheckRule& from);
  MarginCheckRule(MarginCheckRule&& from) noexcept
    : MarginCheckRule() {
    *this = ::std::move(from);
  }

  inline MarginCheckRule& operator=(const MarginCheckRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginCheckRule& operator=(MarginCheckRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginCheckRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarginCheckRule* internal_default_instance() {
    return reinterpret_cast<const MarginCheckRule*>(
               &_MarginCheckRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(MarginCheckRule* other);
  friend void swap(MarginCheckRule& a, MarginCheckRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarginCheckRule* New() const final {
    return CreateMaybeMessage<MarginCheckRule>(nullptr);
  }

  MarginCheckRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginCheckRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginCheckRule& from);
  void MergeFrom(const MarginCheckRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginCheckRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.MarginCheckRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double warning_level = 4;
  void clear_warning_level();
  static const int kWarningLevelFieldNumber = 4;
  double warning_level() const;
  void set_warning_level(double value);

  // double force_close_level = 5;
  void clear_force_close_level();
  static const int kForceCloseLevelFieldNumber = 5;
  double force_close_level() const;
  void set_force_close_level(double value);

  // int32 force_close_order = 3;
  void clear_force_close_order();
  static const int kForceCloseOrderFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 force_close_order() const;
  void set_force_close_order(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool disable_open_under_warning_level = 7;
  void clear_disable_open_under_warning_level();
  static const int kDisableOpenUnderWarningLevelFieldNumber = 7;
  bool disable_open_under_warning_level() const;
  void set_disable_open_under_warning_level(bool value);

  // double common_balance_multiple = 6;
  void clear_common_balance_multiple();
  static const int kCommonBalanceMultipleFieldNumber = 6;
  double common_balance_multiple() const;
  void set_common_balance_multiple(double value);

  // double warning_level_by_prefer_ratio = 8;
  void clear_warning_level_by_prefer_ratio();
  static const int kWarningLevelByPreferRatioFieldNumber = 8;
  double warning_level_by_prefer_ratio() const;
  void set_warning_level_by_prefer_ratio(double value);

  // double force_close_level_by_prefer_ratio = 9;
  void clear_force_close_level_by_prefer_ratio();
  static const int kForceCloseLevelByPreferRatioFieldNumber = 9;
  double force_close_level_by_prefer_ratio() const;
  void set_force_close_level_by_prefer_ratio(double value);

  // double warning_level_by_margin = 10;
  void clear_warning_level_by_margin();
  static const int kWarningLevelByMarginFieldNumber = 10;
  double warning_level_by_margin() const;
  void set_warning_level_by_margin(double value);

  // double force_close_level_by_margin = 11;
  void clear_force_close_level_by_margin();
  static const int kForceCloseLevelByMarginFieldNumber = 11;
  double force_close_level_by_margin() const;
  void set_force_close_level_by_margin(double value);

  // double margin_ceiling = 12;
  void clear_margin_ceiling();
  static const int kMarginCeilingFieldNumber = 12;
  double margin_ceiling() const;
  void set_margin_ceiling(double value);

  // double position_amount_ceiling = 13;
  void clear_position_amount_ceiling();
  static const int kPositionAmountCeilingFieldNumber = 13;
  double position_amount_ceiling() const;
  void set_position_amount_ceiling(double value);

  // @@protoc_insertion_point(class_scope:pb.MarginCheckRule)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_;
  double warning_level_;
  double force_close_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 force_close_order_;
  bool disable_open_under_warning_level_;
  double common_balance_multiple_;
  double warning_level_by_prefer_ratio_;
  double force_close_level_by_prefer_ratio_;
  double warning_level_by_margin_;
  double force_close_level_by_margin_;
  double margin_ceiling_;
  double position_amount_ceiling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class SettlementUnitOption :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SettlementUnitOption) */ {
 public:
  SettlementUnitOption();
  virtual ~SettlementUnitOption();

  SettlementUnitOption(const SettlementUnitOption& from);
  SettlementUnitOption(SettlementUnitOption&& from) noexcept
    : SettlementUnitOption() {
    *this = ::std::move(from);
  }

  inline SettlementUnitOption& operator=(const SettlementUnitOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettlementUnitOption& operator=(SettlementUnitOption&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettlementUnitOption& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettlementUnitOption* internal_default_instance() {
    return reinterpret_cast<const SettlementUnitOption*>(
               &_SettlementUnitOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(SettlementUnitOption* other);
  friend void swap(SettlementUnitOption& a, SettlementUnitOption& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettlementUnitOption* New() const final {
    return CreateMaybeMessage<SettlementUnitOption>(nullptr);
  }

  SettlementUnitOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettlementUnitOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettlementUnitOption& from);
  void MergeFrom(const SettlementUnitOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettlementUnitOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SettlementUnitOption";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.MarginCheckRule mcr_list = 6;
  int mcr_list_size() const;
  void clear_mcr_list();
  static const int kMcrListFieldNumber = 6;
  ::pb::MarginCheckRule* mutable_mcr_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MarginCheckRule >*
      mutable_mcr_list();
  const ::pb::MarginCheckRule& mcr_list(int index) const;
  ::pb::MarginCheckRule* add_mcr_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MarginCheckRule >&
      mcr_list() const;

  // string comment = 2;
  void clear_comment();
  static const int kCommentFieldNumber = 2;
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 settlement_group = 3;
  void clear_settlement_group();
  static const int kSettlementGroupFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_group() const;
  void set_settlement_group(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 available_check_level = 4;
  void clear_available_check_level();
  static const int kAvailableCheckLevelFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 available_check_level() const;
  void set_available_check_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool force_close_on = 5;
  void clear_force_close_on();
  static const int kForceCloseOnFieldNumber = 5;
  bool force_close_on() const;
  void set_force_close_on(bool value);

  // bool disable_open = 7;
  void clear_disable_open();
  static const int kDisableOpenFieldNumber = 7;
  bool disable_open() const;
  void set_disable_open(bool value);

  // @@protoc_insertion_point(class_scope:pb.SettlementUnitOption)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MarginCheckRule > mcr_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_group_;
  ::PROTOBUF_NAMESPACE_ID::int32 available_check_level_;
  bool force_close_on_;
  bool disable_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPTradingAccount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPTradingAccount) */ {
 public:
  CTPTradingAccount();
  virtual ~CTPTradingAccount();

  CTPTradingAccount(const CTPTradingAccount& from);
  CTPTradingAccount(CTPTradingAccount&& from) noexcept
    : CTPTradingAccount() {
    *this = ::std::move(from);
  }

  inline CTPTradingAccount& operator=(const CTPTradingAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPTradingAccount& operator=(CTPTradingAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPTradingAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPTradingAccount* internal_default_instance() {
    return reinterpret_cast<const CTPTradingAccount*>(
               &_CTPTradingAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CTPTradingAccount* other);
  friend void swap(CTPTradingAccount& a, CTPTradingAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPTradingAccount* New() const final {
    return CreateMaybeMessage<CTPTradingAccount>(nullptr);
  }

  CTPTradingAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPTradingAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPTradingAccount& from);
  void MergeFrom(const CTPTradingAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPTradingAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPTradingAccount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.MoneyTransferRecord mtr_list = 2;
  int mtr_list_size() const;
  void clear_mtr_list();
  static const int kMtrListFieldNumber = 2;
  ::pb::MoneyTransferRecord* mutable_mtr_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MoneyTransferRecord >*
      mutable_mtr_list();
  const ::pb::MoneyTransferRecord& mtr_list(int index) const;
  ::pb::MoneyTransferRecord* add_mtr_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MoneyTransferRecord >&
      mtr_list() const;

  // repeated .pb.CTPTradingUnit tu_list = 3;
  int tu_list_size() const;
  void clear_tu_list();
  static const int kTuListFieldNumber = 3;
  ::pb::CTPTradingUnit* mutable_tu_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradingUnit >*
      mutable_tu_list();
  const ::pb::CTPTradingUnit& tu_list(int index) const;
  ::pb::CTPTradingUnit* add_tu_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradingUnit >&
      tu_list() const;

  // .pb.AccountMoneySummary summary = 1;
  bool has_summary() const;
  void clear_summary();
  static const int kSummaryFieldNumber = 1;
  const ::pb::AccountMoneySummary& summary() const;
  ::pb::AccountMoneySummary* release_summary();
  ::pb::AccountMoneySummary* mutable_summary();
  void set_allocated_summary(::pb::AccountMoneySummary* summary);

  // .pb.SettlementUnitOption options = 5;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 5;
  const ::pb::SettlementUnitOption& options() const;
  ::pb::SettlementUnitOption* release_options();
  ::pb::SettlementUnitOption* mutable_options();
  void set_allocated_options(::pb::SettlementUnitOption* options);

  // int32 last_settle_date = 4;
  void clear_last_settle_date();
  static const int kLastSettleDateFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 last_settle_date() const;
  void set_last_settle_date(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPTradingAccount)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MoneyTransferRecord > mtr_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradingUnit > tu_list_;
  ::pb::AccountMoneySummary* summary_;
  ::pb::SettlementUnitOption* options_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_settle_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPTradingAccountSnapshot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPTradingAccountSnapshot) */ {
 public:
  CTPTradingAccountSnapshot();
  virtual ~CTPTradingAccountSnapshot();

  CTPTradingAccountSnapshot(const CTPTradingAccountSnapshot& from);
  CTPTradingAccountSnapshot(CTPTradingAccountSnapshot&& from) noexcept
    : CTPTradingAccountSnapshot() {
    *this = ::std::move(from);
  }

  inline CTPTradingAccountSnapshot& operator=(const CTPTradingAccountSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPTradingAccountSnapshot& operator=(CTPTradingAccountSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPTradingAccountSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPTradingAccountSnapshot* internal_default_instance() {
    return reinterpret_cast<const CTPTradingAccountSnapshot*>(
               &_CTPTradingAccountSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CTPTradingAccountSnapshot* other);
  friend void swap(CTPTradingAccountSnapshot& a, CTPTradingAccountSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPTradingAccountSnapshot* New() const final {
    return CreateMaybeMessage<CTPTradingAccountSnapshot>(nullptr);
  }

  CTPTradingAccountSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPTradingAccountSnapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPTradingAccountSnapshot& from);
  void MergeFrom(const CTPTradingAccountSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPTradingAccountSnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPTradingAccountSnapshot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string comment = 3;
  void clear_comment();
  static const int kCommentFieldNumber = 3;
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // .pb.CTPTradingAccount account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::pb::CTPTradingAccount& account() const;
  ::pb::CTPTradingAccount* release_account();
  ::pb::CTPTradingAccount* mutable_account();
  void set_allocated_account(::pb::CTPTradingAccount* account);

  // int64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:pb.CTPTradingAccountSnapshot)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::pb::CTPTradingAccount* account_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPRspInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPRspInfo) */ {
 public:
  CTPRspInfo();
  virtual ~CTPRspInfo();

  CTPRspInfo(const CTPRspInfo& from);
  CTPRspInfo(CTPRspInfo&& from) noexcept
    : CTPRspInfo() {
    *this = ::std::move(from);
  }

  inline CTPRspInfo& operator=(const CTPRspInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPRspInfo& operator=(CTPRspInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPRspInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPRspInfo* internal_default_instance() {
    return reinterpret_cast<const CTPRspInfo*>(
               &_CTPRspInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CTPRspInfo* other);
  friend void swap(CTPRspInfo& a, CTPRspInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPRspInfo* New() const final {
    return CreateMaybeMessage<CTPRspInfo>(nullptr);
  }

  CTPRspInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPRspInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPRspInfo& from);
  void MergeFrom(const CTPRspInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPRspInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPRspInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const void* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);

  // int32 error_id = 1;
  void clear_error_id();
  static const int kErrorIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id() const;
  void set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_last = 4;
  void clear_is_last();
  static const int kIsLastFieldNumber = 4;
  bool is_last() const;
  void set_is_last(bool value);

  // @@protoc_insertion_point(class_scope:pb.CTPRspInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  bool is_last_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpReqQryAccountRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpReqQryAccountRegister) */ {
 public:
  CtpReqQryAccountRegister();
  virtual ~CtpReqQryAccountRegister();

  CtpReqQryAccountRegister(const CtpReqQryAccountRegister& from);
  CtpReqQryAccountRegister(CtpReqQryAccountRegister&& from) noexcept
    : CtpReqQryAccountRegister() {
    *this = ::std::move(from);
  }

  inline CtpReqQryAccountRegister& operator=(const CtpReqQryAccountRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpReqQryAccountRegister& operator=(CtpReqQryAccountRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpReqQryAccountRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpReqQryAccountRegister* internal_default_instance() {
    return reinterpret_cast<const CtpReqQryAccountRegister*>(
               &_CtpReqQryAccountRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CtpReqQryAccountRegister* other);
  friend void swap(CtpReqQryAccountRegister& a, CtpReqQryAccountRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpReqQryAccountRegister* New() const final {
    return CreateMaybeMessage<CtpReqQryAccountRegister>(nullptr);
  }

  CtpReqQryAccountRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpReqQryAccountRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpReqQryAccountRegister& from);
  void MergeFrom(const CtpReqQryAccountRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpReqQryAccountRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpReqQryAccountRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string broker_id = 1;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 1;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string account_id = 2;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // string bank_id = 3;
  void clear_bank_id();
  static const int kBankIdFieldNumber = 3;
  const std::string& bank_id() const;
  void set_bank_id(const std::string& value);
  void set_bank_id(std::string&& value);
  void set_bank_id(const char* value);
  void set_bank_id(const char* value, size_t size);
  std::string* mutable_bank_id();
  std::string* release_bank_id();
  void set_allocated_bank_id(std::string* bank_id);

  // string bank_branch_id = 4;
  void clear_bank_branch_id();
  static const int kBankBranchIdFieldNumber = 4;
  const std::string& bank_branch_id() const;
  void set_bank_branch_id(const std::string& value);
  void set_bank_branch_id(std::string&& value);
  void set_bank_branch_id(const char* value);
  void set_bank_branch_id(const char* value, size_t size);
  std::string* mutable_bank_branch_id();
  std::string* release_bank_branch_id();
  void set_allocated_bank_branch_id(std::string* bank_branch_id);

  // string currency_id = 5;
  void clear_currency_id();
  static const int kCurrencyIdFieldNumber = 5;
  const std::string& currency_id() const;
  void set_currency_id(const std::string& value);
  void set_currency_id(std::string&& value);
  void set_currency_id(const char* value);
  void set_currency_id(const char* value, size_t size);
  std::string* mutable_currency_id();
  std::string* release_currency_id();
  void set_allocated_currency_id(std::string* currency_id);

  // @@protoc_insertion_point(class_scope:pb.CtpReqQryAccountRegister)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_branch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpRspQryAccountRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpRspQryAccountRegister) */ {
 public:
  CtpRspQryAccountRegister();
  virtual ~CtpRspQryAccountRegister();

  CtpRspQryAccountRegister(const CtpRspQryAccountRegister& from);
  CtpRspQryAccountRegister(CtpRspQryAccountRegister&& from) noexcept
    : CtpRspQryAccountRegister() {
    *this = ::std::move(from);
  }

  inline CtpRspQryAccountRegister& operator=(const CtpRspQryAccountRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpRspQryAccountRegister& operator=(CtpRspQryAccountRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpRspQryAccountRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpRspQryAccountRegister* internal_default_instance() {
    return reinterpret_cast<const CtpRspQryAccountRegister*>(
               &_CtpRspQryAccountRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CtpRspQryAccountRegister* other);
  friend void swap(CtpRspQryAccountRegister& a, CtpRspQryAccountRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpRspQryAccountRegister* New() const final {
    return CreateMaybeMessage<CtpRspQryAccountRegister>(nullptr);
  }

  CtpRspQryAccountRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpRspQryAccountRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpRspQryAccountRegister& from);
  void MergeFrom(const CtpRspQryAccountRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpRspQryAccountRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpRspQryAccountRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);

  // string trading_day = 5;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 5;
  const std::string& trading_day() const;
  void set_trading_day(const std::string& value);
  void set_trading_day(std::string&& value);
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  std::string* mutable_trading_day();
  std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);

  // string bank_id = 6;
  void clear_bank_id();
  static const int kBankIdFieldNumber = 6;
  const std::string& bank_id() const;
  void set_bank_id(const std::string& value);
  void set_bank_id(std::string&& value);
  void set_bank_id(const char* value);
  void set_bank_id(const char* value, size_t size);
  std::string* mutable_bank_id();
  std::string* release_bank_id();
  void set_allocated_bank_id(std::string* bank_id);

  // string bank_branch_id = 7;
  void clear_bank_branch_id();
  static const int kBankBranchIdFieldNumber = 7;
  const std::string& bank_branch_id() const;
  void set_bank_branch_id(const std::string& value);
  void set_bank_branch_id(std::string&& value);
  void set_bank_branch_id(const char* value);
  void set_bank_branch_id(const char* value, size_t size);
  std::string* mutable_bank_branch_id();
  std::string* release_bank_branch_id();
  void set_allocated_bank_branch_id(std::string* bank_branch_id);

  // string bank_account = 8;
  void clear_bank_account();
  static const int kBankAccountFieldNumber = 8;
  const std::string& bank_account() const;
  void set_bank_account(const std::string& value);
  void set_bank_account(std::string&& value);
  void set_bank_account(const char* value);
  void set_bank_account(const char* value, size_t size);
  std::string* mutable_bank_account();
  std::string* release_bank_account();
  void set_allocated_bank_account(std::string* bank_account);

  // string broker_id = 9;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 9;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string broker_branch_id = 10;
  void clear_broker_branch_id();
  static const int kBrokerBranchIdFieldNumber = 10;
  const std::string& broker_branch_id() const;
  void set_broker_branch_id(const std::string& value);
  void set_broker_branch_id(std::string&& value);
  void set_broker_branch_id(const char* value);
  void set_broker_branch_id(const char* value, size_t size);
  std::string* mutable_broker_branch_id();
  std::string* release_broker_branch_id();
  void set_allocated_broker_branch_id(std::string* broker_branch_id);

  // string account_id = 11;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 11;
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // string identified_card_no = 13;
  void clear_identified_card_no();
  static const int kIdentifiedCardNoFieldNumber = 13;
  const std::string& identified_card_no() const;
  void set_identified_card_no(const std::string& value);
  void set_identified_card_no(std::string&& value);
  void set_identified_card_no(const char* value);
  void set_identified_card_no(const char* value, size_t size);
  std::string* mutable_identified_card_no();
  std::string* release_identified_card_no();
  void set_allocated_identified_card_no(std::string* identified_card_no);

  // string customer_name = 14;
  void clear_customer_name();
  static const int kCustomerNameFieldNumber = 14;
  const std::string& customer_name() const;
  void set_customer_name(const std::string& value);
  void set_customer_name(std::string&& value);
  void set_customer_name(const char* value);
  void set_customer_name(const char* value, size_t size);
  std::string* mutable_customer_name();
  std::string* release_customer_name();
  void set_allocated_customer_name(std::string* customer_name);

  // string currency_id = 15;
  void clear_currency_id();
  static const int kCurrencyIdFieldNumber = 15;
  const std::string& currency_id() const;
  void set_currency_id(const std::string& value);
  void set_currency_id(std::string&& value);
  void set_currency_id(const char* value);
  void set_currency_id(const char* value, size_t size);
  std::string* mutable_currency_id();
  std::string* release_currency_id();
  void set_allocated_currency_id(std::string* currency_id);

  // string reg_date = 17;
  void clear_reg_date();
  static const int kRegDateFieldNumber = 17;
  const std::string& reg_date() const;
  void set_reg_date(const std::string& value);
  void set_reg_date(std::string&& value);
  void set_reg_date(const char* value);
  void set_reg_date(const char* value, size_t size);
  std::string* mutable_reg_date();
  std::string* release_reg_date();
  void set_allocated_reg_date(std::string* reg_date);

  // string out_date = 18;
  void clear_out_date();
  static const int kOutDateFieldNumber = 18;
  const std::string& out_date() const;
  void set_out_date(const std::string& value);
  void set_out_date(std::string&& value);
  void set_out_date(const char* value);
  void set_out_date(const char* value, size_t size);
  std::string* mutable_out_date();
  std::string* release_out_date();
  void set_allocated_out_date(std::string* out_date);

  // string long_customer_name = 22;
  void clear_long_customer_name();
  static const int kLongCustomerNameFieldNumber = 22;
  const std::string& long_customer_name() const;
  void set_long_customer_name(const std::string& value);
  void set_long_customer_name(std::string&& value);
  void set_long_customer_name(const char* value);
  void set_long_customer_name(const char* value, size_t size);
  std::string* mutable_long_customer_name();
  std::string* release_long_customer_name();
  void set_allocated_long_customer_name(std::string* long_customer_name);

  // int32 error_id = 1;
  void clear_error_id();
  static const int kErrorIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id() const;
  void set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_last = 4;
  void clear_is_last();
  static const int kIsLastFieldNumber = 4;
  bool is_last() const;
  void set_is_last(bool value);

  // int32 id_card_type = 12;
  void clear_id_card_type();
  static const int kIdCardTypeFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 id_card_type() const;
  void set_id_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 open_or_destory = 16;
  void clear_open_or_destory();
  static const int kOpenOrDestoryFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int32 open_or_destory() const;
  void set_open_or_destory(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 tid = 19;
  void clear_tid();
  static const int kTidFieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cust_type = 20;
  void clear_cust_type();
  static const int kCustTypeFieldNumber = 20;
  ::PROTOBUF_NAMESPACE_ID::int32 cust_type() const;
  void set_cust_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 bank_acc_type = 21;
  void clear_bank_acc_type();
  static const int kBankAccTypeFieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::int32 bank_acc_type() const;
  void set_bank_acc_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CtpRspQryAccountRegister)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_branch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_branch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identified_card_no_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reg_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_customer_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  bool is_last_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_card_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_or_destory_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cust_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 bank_acc_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpReqAuthencate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpReqAuthencate) */ {
 public:
  CtpReqAuthencate();
  virtual ~CtpReqAuthencate();

  CtpReqAuthencate(const CtpReqAuthencate& from);
  CtpReqAuthencate(CtpReqAuthencate&& from) noexcept
    : CtpReqAuthencate() {
    *this = ::std::move(from);
  }

  inline CtpReqAuthencate& operator=(const CtpReqAuthencate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpReqAuthencate& operator=(CtpReqAuthencate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpReqAuthencate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpReqAuthencate* internal_default_instance() {
    return reinterpret_cast<const CtpReqAuthencate*>(
               &_CtpReqAuthencate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CtpReqAuthencate* other);
  friend void swap(CtpReqAuthencate& a, CtpReqAuthencate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpReqAuthencate* New() const final {
    return CreateMaybeMessage<CtpReqAuthencate>(nullptr);
  }

  CtpReqAuthencate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpReqAuthencate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpReqAuthencate& from);
  void MergeFrom(const CtpReqAuthencate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpReqAuthencate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpReqAuthencate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string auth_code = 1;
  void clear_auth_code();
  static const int kAuthCodeFieldNumber = 1;
  const std::string& auth_code() const;
  void set_auth_code(const std::string& value);
  void set_auth_code(std::string&& value);
  void set_auth_code(const char* value);
  void set_auth_code(const char* value, size_t size);
  std::string* mutable_auth_code();
  std::string* release_auth_code();
  void set_allocated_auth_code(std::string* auth_code);

  // string product = 2;
  void clear_product();
  static const int kProductFieldNumber = 2;
  const std::string& product() const;
  void set_product(const std::string& value);
  void set_product(std::string&& value);
  void set_product(const char* value);
  void set_product(const char* value, size_t size);
  std::string* mutable_product();
  std::string* release_product();
  void set_allocated_product(std::string* product);

  // @@protoc_insertion_point(class_scope:pb.CtpReqAuthencate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpRspAuthencate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpRspAuthencate) */ {
 public:
  CtpRspAuthencate();
  virtual ~CtpRspAuthencate();

  CtpRspAuthencate(const CtpRspAuthencate& from);
  CtpRspAuthencate(CtpRspAuthencate&& from) noexcept
    : CtpRspAuthencate() {
    *this = ::std::move(from);
  }

  inline CtpRspAuthencate& operator=(const CtpRspAuthencate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpRspAuthencate& operator=(CtpRspAuthencate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpRspAuthencate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpRspAuthencate* internal_default_instance() {
    return reinterpret_cast<const CtpRspAuthencate*>(
               &_CtpRspAuthencate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CtpRspAuthencate* other);
  friend void swap(CtpRspAuthencate& a, CtpRspAuthencate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpRspAuthencate* New() const final {
    return CreateMaybeMessage<CtpRspAuthencate>(nullptr);
  }

  CtpRspAuthencate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpRspAuthencate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpRspAuthencate& from);
  void MergeFrom(const CtpRspAuthencate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpRspAuthencate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpRspAuthencate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);

  // string broker_id = 5;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 5;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string user_id = 6;
  void clear_user_id();
  static const int kUserIdFieldNumber = 6;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // string user_product_info = 7;
  void clear_user_product_info();
  static const int kUserProductInfoFieldNumber = 7;
  const std::string& user_product_info() const;
  void set_user_product_info(const std::string& value);
  void set_user_product_info(std::string&& value);
  void set_user_product_info(const char* value);
  void set_user_product_info(const char* value, size_t size);
  std::string* mutable_user_product_info();
  std::string* release_user_product_info();
  void set_allocated_user_product_info(std::string* user_product_info);

  // int32 error_id = 1;
  void clear_error_id();
  static const int kErrorIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id() const;
  void set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_last = 4;
  void clear_is_last();
  static const int kIsLastFieldNumber = 4;
  bool is_last() const;
  void set_is_last(bool value);

  // @@protoc_insertion_point(class_scope:pb.CtpRspAuthencate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_product_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  bool is_last_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpReqUserLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpReqUserLogin) */ {
 public:
  CtpReqUserLogin();
  virtual ~CtpReqUserLogin();

  CtpReqUserLogin(const CtpReqUserLogin& from);
  CtpReqUserLogin(CtpReqUserLogin&& from) noexcept
    : CtpReqUserLogin() {
    *this = ::std::move(from);
  }

  inline CtpReqUserLogin& operator=(const CtpReqUserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpReqUserLogin& operator=(CtpReqUserLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpReqUserLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpReqUserLogin* internal_default_instance() {
    return reinterpret_cast<const CtpReqUserLogin*>(
               &_CtpReqUserLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(CtpReqUserLogin* other);
  friend void swap(CtpReqUserLogin& a, CtpReqUserLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpReqUserLogin* New() const final {
    return CreateMaybeMessage<CtpReqUserLogin>(nullptr);
  }

  CtpReqUserLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpReqUserLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpReqUserLogin& from);
  void MergeFrom(const CtpReqUserLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpReqUserLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpReqUserLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string broker_id = 1;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 1;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // @@protoc_insertion_point(class_scope:pb.CtpReqUserLogin)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpRspUserLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpRspUserLogin) */ {
 public:
  CtpRspUserLogin();
  virtual ~CtpRspUserLogin();

  CtpRspUserLogin(const CtpRspUserLogin& from);
  CtpRspUserLogin(CtpRspUserLogin&& from) noexcept
    : CtpRspUserLogin() {
    *this = ::std::move(from);
  }

  inline CtpRspUserLogin& operator=(const CtpRspUserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpRspUserLogin& operator=(CtpRspUserLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpRspUserLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpRspUserLogin* internal_default_instance() {
    return reinterpret_cast<const CtpRspUserLogin*>(
               &_CtpRspUserLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(CtpRspUserLogin* other);
  friend void swap(CtpRspUserLogin& a, CtpRspUserLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpRspUserLogin* New() const final {
    return CreateMaybeMessage<CtpRspUserLogin>(nullptr);
  }

  CtpRspUserLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpRspUserLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpRspUserLogin& from);
  void MergeFrom(const CtpRspUserLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpRspUserLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpRspUserLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);

  // string trading_day = 5;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 5;
  const std::string& trading_day() const;
  void set_trading_day(const std::string& value);
  void set_trading_day(std::string&& value);
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  std::string* mutable_trading_day();
  std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);

  // string login_time = 6;
  void clear_login_time();
  static const int kLoginTimeFieldNumber = 6;
  const std::string& login_time() const;
  void set_login_time(const std::string& value);
  void set_login_time(std::string&& value);
  void set_login_time(const char* value);
  void set_login_time(const char* value, size_t size);
  std::string* mutable_login_time();
  std::string* release_login_time();
  void set_allocated_login_time(std::string* login_time);

  // string broker_id = 7;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 7;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string user_id = 8;
  void clear_user_id();
  static const int kUserIdFieldNumber = 8;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // string system_name = 9;
  void clear_system_name();
  static const int kSystemNameFieldNumber = 9;
  const std::string& system_name() const;
  void set_system_name(const std::string& value);
  void set_system_name(std::string&& value);
  void set_system_name(const char* value);
  void set_system_name(const char* value, size_t size);
  std::string* mutable_system_name();
  std::string* release_system_name();
  void set_allocated_system_name(std::string* system_name);

  // string max_order_ref = 12;
  void clear_max_order_ref();
  static const int kMaxOrderRefFieldNumber = 12;
  const std::string& max_order_ref() const;
  void set_max_order_ref(const std::string& value);
  void set_max_order_ref(std::string&& value);
  void set_max_order_ref(const char* value);
  void set_max_order_ref(const char* value, size_t size);
  std::string* mutable_max_order_ref();
  std::string* release_max_order_ref();
  void set_allocated_max_order_ref(std::string* max_order_ref);

  // string shfe_time = 13;
  void clear_shfe_time();
  static const int kShfeTimeFieldNumber = 13;
  const std::string& shfe_time() const;
  void set_shfe_time(const std::string& value);
  void set_shfe_time(std::string&& value);
  void set_shfe_time(const char* value);
  void set_shfe_time(const char* value, size_t size);
  std::string* mutable_shfe_time();
  std::string* release_shfe_time();
  void set_allocated_shfe_time(std::string* shfe_time);

  // string dce_time = 14;
  void clear_dce_time();
  static const int kDceTimeFieldNumber = 14;
  const std::string& dce_time() const;
  void set_dce_time(const std::string& value);
  void set_dce_time(std::string&& value);
  void set_dce_time(const char* value);
  void set_dce_time(const char* value, size_t size);
  std::string* mutable_dce_time();
  std::string* release_dce_time();
  void set_allocated_dce_time(std::string* dce_time);

  // string czce_time = 15;
  void clear_czce_time();
  static const int kCzceTimeFieldNumber = 15;
  const std::string& czce_time() const;
  void set_czce_time(const std::string& value);
  void set_czce_time(std::string&& value);
  void set_czce_time(const char* value);
  void set_czce_time(const char* value, size_t size);
  std::string* mutable_czce_time();
  std::string* release_czce_time();
  void set_allocated_czce_time(std::string* czce_time);

  // string cffex_time = 16;
  void clear_cffex_time();
  static const int kCffexTimeFieldNumber = 16;
  const std::string& cffex_time() const;
  void set_cffex_time(const std::string& value);
  void set_cffex_time(std::string&& value);
  void set_cffex_time(const char* value);
  void set_cffex_time(const char* value, size_t size);
  std::string* mutable_cffex_time();
  std::string* release_cffex_time();
  void set_allocated_cffex_time(std::string* cffex_time);

  // string ine_time = 17;
  void clear_ine_time();
  static const int kIneTimeFieldNumber = 17;
  const std::string& ine_time() const;
  void set_ine_time(const std::string& value);
  void set_ine_time(std::string&& value);
  void set_ine_time(const char* value);
  void set_ine_time(const char* value, size_t size);
  std::string* mutable_ine_time();
  std::string* release_ine_time();
  void set_allocated_ine_time(std::string* ine_time);

  // int32 error_id = 1;
  void clear_error_id();
  static const int kErrorIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id() const;
  void set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_last = 4;
  void clear_is_last();
  static const int kIsLastFieldNumber = 4;
  bool is_last() const;
  void set_is_last(bool value);

  // int32 front_id = 10;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 front_id() const;
  void set_front_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 session_id = 11;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CtpRspUserLogin)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_order_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shfe_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dce_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr czce_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cffex_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ine_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  bool is_last_;
  ::PROTOBUF_NAMESPACE_ID::int32 front_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpReqConnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpReqConnect) */ {
 public:
  CtpReqConnect();
  virtual ~CtpReqConnect();

  CtpReqConnect(const CtpReqConnect& from);
  CtpReqConnect(CtpReqConnect&& from) noexcept
    : CtpReqConnect() {
    *this = ::std::move(from);
  }

  inline CtpReqConnect& operator=(const CtpReqConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpReqConnect& operator=(CtpReqConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpReqConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpReqConnect* internal_default_instance() {
    return reinterpret_cast<const CtpReqConnect*>(
               &_CtpReqConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(CtpReqConnect* other);
  friend void swap(CtpReqConnect& a, CtpReqConnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpReqConnect* New() const final {
    return CreateMaybeMessage<CtpReqConnect>(nullptr);
  }

  CtpReqConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpReqConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpReqConnect& from);
  void MergeFrom(const CtpReqConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpReqConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpReqConnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string directory = 3;
  void clear_directory();
  static const int kDirectoryFieldNumber = 3;
  const std::string& directory() const;
  void set_directory(const std::string& value);
  void set_directory(std::string&& value);
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  std::string* mutable_directory();
  std::string* release_directory();
  void set_allocated_directory(std::string* directory);

  // @@protoc_insertion_point(class_scope:pb.CtpReqConnect)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpOnFrontConnected :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpOnFrontConnected) */ {
 public:
  CtpOnFrontConnected();
  virtual ~CtpOnFrontConnected();

  CtpOnFrontConnected(const CtpOnFrontConnected& from);
  CtpOnFrontConnected(CtpOnFrontConnected&& from) noexcept
    : CtpOnFrontConnected() {
    *this = ::std::move(from);
  }

  inline CtpOnFrontConnected& operator=(const CtpOnFrontConnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpOnFrontConnected& operator=(CtpOnFrontConnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpOnFrontConnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpOnFrontConnected* internal_default_instance() {
    return reinterpret_cast<const CtpOnFrontConnected*>(
               &_CtpOnFrontConnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(CtpOnFrontConnected* other);
  friend void swap(CtpOnFrontConnected& a, CtpOnFrontConnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpOnFrontConnected* New() const final {
    return CreateMaybeMessage<CtpOnFrontConnected>(nullptr);
  }

  CtpOnFrontConnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpOnFrontConnected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpOnFrontConnected& from);
  void MergeFrom(const CtpOnFrontConnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpOnFrontConnected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpOnFrontConnected";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.CtpOnFrontConnected)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpOnFrontDisconnected :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpOnFrontDisconnected) */ {
 public:
  CtpOnFrontDisconnected();
  virtual ~CtpOnFrontDisconnected();

  CtpOnFrontDisconnected(const CtpOnFrontDisconnected& from);
  CtpOnFrontDisconnected(CtpOnFrontDisconnected&& from) noexcept
    : CtpOnFrontDisconnected() {
    *this = ::std::move(from);
  }

  inline CtpOnFrontDisconnected& operator=(const CtpOnFrontDisconnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpOnFrontDisconnected& operator=(CtpOnFrontDisconnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpOnFrontDisconnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpOnFrontDisconnected* internal_default_instance() {
    return reinterpret_cast<const CtpOnFrontDisconnected*>(
               &_CtpOnFrontDisconnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(CtpOnFrontDisconnected* other);
  friend void swap(CtpOnFrontDisconnected& a, CtpOnFrontDisconnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpOnFrontDisconnected* New() const final {
    return CreateMaybeMessage<CtpOnFrontDisconnected>(nullptr);
  }

  CtpOnFrontDisconnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpOnFrontDisconnected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpOnFrontDisconnected& from);
  void MergeFrom(const CtpOnFrontDisconnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpOnFrontDisconnected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpOnFrontDisconnected";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.CtpOnFrontDisconnected)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpReqSettlementInfoConfirm :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpReqSettlementInfoConfirm) */ {
 public:
  CtpReqSettlementInfoConfirm();
  virtual ~CtpReqSettlementInfoConfirm();

  CtpReqSettlementInfoConfirm(const CtpReqSettlementInfoConfirm& from);
  CtpReqSettlementInfoConfirm(CtpReqSettlementInfoConfirm&& from) noexcept
    : CtpReqSettlementInfoConfirm() {
    *this = ::std::move(from);
  }

  inline CtpReqSettlementInfoConfirm& operator=(const CtpReqSettlementInfoConfirm& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpReqSettlementInfoConfirm& operator=(CtpReqSettlementInfoConfirm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpReqSettlementInfoConfirm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpReqSettlementInfoConfirm* internal_default_instance() {
    return reinterpret_cast<const CtpReqSettlementInfoConfirm*>(
               &_CtpReqSettlementInfoConfirm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(CtpReqSettlementInfoConfirm* other);
  friend void swap(CtpReqSettlementInfoConfirm& a, CtpReqSettlementInfoConfirm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpReqSettlementInfoConfirm* New() const final {
    return CreateMaybeMessage<CtpReqSettlementInfoConfirm>(nullptr);
  }

  CtpReqSettlementInfoConfirm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpReqSettlementInfoConfirm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpReqSettlementInfoConfirm& from);
  void MergeFrom(const CtpReqSettlementInfoConfirm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpReqSettlementInfoConfirm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpReqSettlementInfoConfirm";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string broker_id = 1;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 1;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string investor_id = 2;
  void clear_investor_id();
  static const int kInvestorIdFieldNumber = 2;
  const std::string& investor_id() const;
  void set_investor_id(const std::string& value);
  void set_investor_id(std::string&& value);
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  std::string* mutable_investor_id();
  std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);

  // @@protoc_insertion_point(class_scope:pb.CtpReqSettlementInfoConfirm)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpOnRspSettlementInfoConfirm :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpOnRspSettlementInfoConfirm) */ {
 public:
  CtpOnRspSettlementInfoConfirm();
  virtual ~CtpOnRspSettlementInfoConfirm();

  CtpOnRspSettlementInfoConfirm(const CtpOnRspSettlementInfoConfirm& from);
  CtpOnRspSettlementInfoConfirm(CtpOnRspSettlementInfoConfirm&& from) noexcept
    : CtpOnRspSettlementInfoConfirm() {
    *this = ::std::move(from);
  }

  inline CtpOnRspSettlementInfoConfirm& operator=(const CtpOnRspSettlementInfoConfirm& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpOnRspSettlementInfoConfirm& operator=(CtpOnRspSettlementInfoConfirm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpOnRspSettlementInfoConfirm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpOnRspSettlementInfoConfirm* internal_default_instance() {
    return reinterpret_cast<const CtpOnRspSettlementInfoConfirm*>(
               &_CtpOnRspSettlementInfoConfirm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(CtpOnRspSettlementInfoConfirm* other);
  friend void swap(CtpOnRspSettlementInfoConfirm& a, CtpOnRspSettlementInfoConfirm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpOnRspSettlementInfoConfirm* New() const final {
    return CreateMaybeMessage<CtpOnRspSettlementInfoConfirm>(nullptr);
  }

  CtpOnRspSettlementInfoConfirm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpOnRspSettlementInfoConfirm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpOnRspSettlementInfoConfirm& from);
  void MergeFrom(const CtpOnRspSettlementInfoConfirm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpOnRspSettlementInfoConfirm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpOnRspSettlementInfoConfirm";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);

  // string broker_id = 5;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 5;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string investor_id = 6;
  void clear_investor_id();
  static const int kInvestorIdFieldNumber = 6;
  const std::string& investor_id() const;
  void set_investor_id(const std::string& value);
  void set_investor_id(std::string&& value);
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  std::string* mutable_investor_id();
  std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);

  // string confirm_date = 7;
  void clear_confirm_date();
  static const int kConfirmDateFieldNumber = 7;
  const std::string& confirm_date() const;
  void set_confirm_date(const std::string& value);
  void set_confirm_date(std::string&& value);
  void set_confirm_date(const char* value);
  void set_confirm_date(const char* value, size_t size);
  std::string* mutable_confirm_date();
  std::string* release_confirm_date();
  void set_allocated_confirm_date(std::string* confirm_date);

  // string confirm_time = 8;
  void clear_confirm_time();
  static const int kConfirmTimeFieldNumber = 8;
  const std::string& confirm_time() const;
  void set_confirm_time(const std::string& value);
  void set_confirm_time(std::string&& value);
  void set_confirm_time(const char* value);
  void set_confirm_time(const char* value, size_t size);
  std::string* mutable_confirm_time();
  std::string* release_confirm_time();
  void set_allocated_confirm_time(std::string* confirm_time);

  // string account_id = 10;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 10;
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // string currency_id = 11;
  void clear_currency_id();
  static const int kCurrencyIdFieldNumber = 11;
  const std::string& currency_id() const;
  void set_currency_id(const std::string& value);
  void set_currency_id(std::string&& value);
  void set_currency_id(const char* value);
  void set_currency_id(const char* value, size_t size);
  std::string* mutable_currency_id();
  std::string* release_currency_id();
  void set_allocated_currency_id(std::string* currency_id);

  // int32 error_id = 1;
  void clear_error_id();
  static const int kErrorIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id() const;
  void set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_last = 4;
  void clear_is_last();
  static const int kIsLastFieldNumber = 4;
  bool is_last() const;
  void set_is_last(bool value);

  // int32 settlement_id = 9;
  void clear_settlement_id();
  static const int kSettlementIdFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_id() const;
  void set_settlement_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CtpOnRspSettlementInfoConfirm)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confirm_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confirm_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  bool is_last_;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpReqQryInvestor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpReqQryInvestor) */ {
 public:
  CtpReqQryInvestor();
  virtual ~CtpReqQryInvestor();

  CtpReqQryInvestor(const CtpReqQryInvestor& from);
  CtpReqQryInvestor(CtpReqQryInvestor&& from) noexcept
    : CtpReqQryInvestor() {
    *this = ::std::move(from);
  }

  inline CtpReqQryInvestor& operator=(const CtpReqQryInvestor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpReqQryInvestor& operator=(CtpReqQryInvestor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpReqQryInvestor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpReqQryInvestor* internal_default_instance() {
    return reinterpret_cast<const CtpReqQryInvestor*>(
               &_CtpReqQryInvestor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(CtpReqQryInvestor* other);
  friend void swap(CtpReqQryInvestor& a, CtpReqQryInvestor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpReqQryInvestor* New() const final {
    return CreateMaybeMessage<CtpReqQryInvestor>(nullptr);
  }

  CtpReqQryInvestor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpReqQryInvestor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpReqQryInvestor& from);
  void MergeFrom(const CtpReqQryInvestor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpReqQryInvestor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpReqQryInvestor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.CtpReqQryInvestor)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpRspQryInvestor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpRspQryInvestor) */ {
 public:
  CtpRspQryInvestor();
  virtual ~CtpRspQryInvestor();

  CtpRspQryInvestor(const CtpRspQryInvestor& from);
  CtpRspQryInvestor(CtpRspQryInvestor&& from) noexcept
    : CtpRspQryInvestor() {
    *this = ::std::move(from);
  }

  inline CtpRspQryInvestor& operator=(const CtpRspQryInvestor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpRspQryInvestor& operator=(CtpRspQryInvestor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpRspQryInvestor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpRspQryInvestor* internal_default_instance() {
    return reinterpret_cast<const CtpRspQryInvestor*>(
               &_CtpRspQryInvestor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(CtpRspQryInvestor* other);
  friend void swap(CtpRspQryInvestor& a, CtpRspQryInvestor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpRspQryInvestor* New() const final {
    return CreateMaybeMessage<CtpRspQryInvestor>(nullptr);
  }

  CtpRspQryInvestor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpRspQryInvestor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpRspQryInvestor& from);
  void MergeFrom(const CtpRspQryInvestor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpRspQryInvestor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpRspQryInvestor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);

  // string investor_id = 5;
  void clear_investor_id();
  static const int kInvestorIdFieldNumber = 5;
  const std::string& investor_id() const;
  void set_investor_id(const std::string& value);
  void set_investor_id(std::string&& value);
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  std::string* mutable_investor_id();
  std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);

  // string broker_id = 6;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 6;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string investor_group_id = 7;
  void clear_investor_group_id();
  static const int kInvestorGroupIdFieldNumber = 7;
  const std::string& investor_group_id() const;
  void set_investor_group_id(const std::string& value);
  void set_investor_group_id(std::string&& value);
  void set_investor_group_id(const char* value);
  void set_investor_group_id(const char* value, size_t size);
  std::string* mutable_investor_group_id();
  std::string* release_investor_group_id();
  void set_allocated_investor_group_id(std::string* investor_group_id);

  // string investor_name = 8;
  void clear_investor_name();
  static const int kInvestorNameFieldNumber = 8;
  const std::string& investor_name() const;
  void set_investor_name(const std::string& value);
  void set_investor_name(std::string&& value);
  void set_investor_name(const char* value);
  void set_investor_name(const char* value, size_t size);
  std::string* mutable_investor_name();
  std::string* release_investor_name();
  void set_allocated_investor_name(std::string* investor_name);

  // string identified_card_no = 10;
  void clear_identified_card_no();
  static const int kIdentifiedCardNoFieldNumber = 10;
  const std::string& identified_card_no() const;
  void set_identified_card_no(const std::string& value);
  void set_identified_card_no(std::string&& value);
  void set_identified_card_no(const char* value);
  void set_identified_card_no(const char* value, size_t size);
  std::string* mutable_identified_card_no();
  std::string* release_identified_card_no();
  void set_allocated_identified_card_no(std::string* identified_card_no);

  // string telphone = 12;
  void clear_telphone();
  static const int kTelphoneFieldNumber = 12;
  const std::string& telphone() const;
  void set_telphone(const std::string& value);
  void set_telphone(std::string&& value);
  void set_telphone(const char* value);
  void set_telphone(const char* value, size_t size);
  std::string* mutable_telphone();
  std::string* release_telphone();
  void set_allocated_telphone(std::string* telphone);

  // string address = 13;
  void clear_address();
  static const int kAddressFieldNumber = 13;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // string open_date = 14;
  void clear_open_date();
  static const int kOpenDateFieldNumber = 14;
  const std::string& open_date() const;
  void set_open_date(const std::string& value);
  void set_open_date(std::string&& value);
  void set_open_date(const char* value);
  void set_open_date(const char* value, size_t size);
  std::string* mutable_open_date();
  std::string* release_open_date();
  void set_allocated_open_date(std::string* open_date);

  // string mobile = 15;
  void clear_mobile();
  static const int kMobileFieldNumber = 15;
  const std::string& mobile() const;
  void set_mobile(const std::string& value);
  void set_mobile(std::string&& value);
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  std::string* mutable_mobile();
  std::string* release_mobile();
  void set_allocated_mobile(std::string* mobile);

  // int32 error_id = 1;
  void clear_error_id();
  static const int kErrorIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id() const;
  void set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_last = 4;
  void clear_is_last();
  static const int kIsLastFieldNumber = 4;
  bool is_last() const;
  void set_is_last(bool value);

  // bool is_active = 11;
  void clear_is_active();
  static const int kIsActiveFieldNumber = 11;
  bool is_active() const;
  void set_is_active(bool value);

  // int32 identified_card_type = 9;
  void clear_identified_card_type();
  static const int kIdentifiedCardTypeFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 identified_card_type() const;
  void set_identified_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CtpRspQryInvestor)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identified_card_no_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telphone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  bool is_last_;
  bool is_active_;
  ::PROTOBUF_NAMESPACE_ID::int32 identified_card_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpReqQryTransferBank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpReqQryTransferBank) */ {
 public:
  CtpReqQryTransferBank();
  virtual ~CtpReqQryTransferBank();

  CtpReqQryTransferBank(const CtpReqQryTransferBank& from);
  CtpReqQryTransferBank(CtpReqQryTransferBank&& from) noexcept
    : CtpReqQryTransferBank() {
    *this = ::std::move(from);
  }

  inline CtpReqQryTransferBank& operator=(const CtpReqQryTransferBank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpReqQryTransferBank& operator=(CtpReqQryTransferBank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpReqQryTransferBank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpReqQryTransferBank* internal_default_instance() {
    return reinterpret_cast<const CtpReqQryTransferBank*>(
               &_CtpReqQryTransferBank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(CtpReqQryTransferBank* other);
  friend void swap(CtpReqQryTransferBank& a, CtpReqQryTransferBank& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpReqQryTransferBank* New() const final {
    return CreateMaybeMessage<CtpReqQryTransferBank>(nullptr);
  }

  CtpReqQryTransferBank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpReqQryTransferBank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpReqQryTransferBank& from);
  void MergeFrom(const CtpReqQryTransferBank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpReqQryTransferBank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpReqQryTransferBank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string broker_id = 1;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 1;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string investor_id = 2;
  void clear_investor_id();
  static const int kInvestorIdFieldNumber = 2;
  const std::string& investor_id() const;
  void set_investor_id(const std::string& value);
  void set_investor_id(std::string&& value);
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  std::string* mutable_investor_id();
  std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);

  // @@protoc_insertion_point(class_scope:pb.CtpReqQryTransferBank)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpRspQryTransferBank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpRspQryTransferBank) */ {
 public:
  CtpRspQryTransferBank();
  virtual ~CtpRspQryTransferBank();

  CtpRspQryTransferBank(const CtpRspQryTransferBank& from);
  CtpRspQryTransferBank(CtpRspQryTransferBank&& from) noexcept
    : CtpRspQryTransferBank() {
    *this = ::std::move(from);
  }

  inline CtpRspQryTransferBank& operator=(const CtpRspQryTransferBank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpRspQryTransferBank& operator=(CtpRspQryTransferBank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpRspQryTransferBank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpRspQryTransferBank* internal_default_instance() {
    return reinterpret_cast<const CtpRspQryTransferBank*>(
               &_CtpRspQryTransferBank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(CtpRspQryTransferBank* other);
  friend void swap(CtpRspQryTransferBank& a, CtpRspQryTransferBank& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpRspQryTransferBank* New() const final {
    return CreateMaybeMessage<CtpRspQryTransferBank>(nullptr);
  }

  CtpRspQryTransferBank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpRspQryTransferBank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpRspQryTransferBank& from);
  void MergeFrom(const CtpRspQryTransferBank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpRspQryTransferBank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpRspQryTransferBank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);

  // string broker_id = 5;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 5;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string bank_id = 6;
  void clear_bank_id();
  static const int kBankIdFieldNumber = 6;
  const std::string& bank_id() const;
  void set_bank_id(const std::string& value);
  void set_bank_id(std::string&& value);
  void set_bank_id(const char* value);
  void set_bank_id(const char* value, size_t size);
  std::string* mutable_bank_id();
  std::string* release_bank_id();
  void set_allocated_bank_id(std::string* bank_id);

  // string bank_branch_id = 7;
  void clear_bank_branch_id();
  static const int kBankBranchIdFieldNumber = 7;
  const std::string& bank_branch_id() const;
  void set_bank_branch_id(const std::string& value);
  void set_bank_branch_id(std::string&& value);
  void set_bank_branch_id(const char* value);
  void set_bank_branch_id(const char* value, size_t size);
  std::string* mutable_bank_branch_id();
  std::string* release_bank_branch_id();
  void set_allocated_bank_branch_id(std::string* bank_branch_id);

  // string bank_name = 8;
  void clear_bank_name();
  static const int kBankNameFieldNumber = 8;
  const std::string& bank_name() const;
  void set_bank_name(const std::string& value);
  void set_bank_name(std::string&& value);
  void set_bank_name(const char* value);
  void set_bank_name(const char* value, size_t size);
  std::string* mutable_bank_name();
  std::string* release_bank_name();
  void set_allocated_bank_name(std::string* bank_name);

  // int32 error_id = 1;
  void clear_error_id();
  static const int kErrorIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id() const;
  void set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_last = 4;
  void clear_is_last();
  static const int kIsLastFieldNumber = 4;
  bool is_last() const;
  void set_is_last(bool value);

  // @@protoc_insertion_point(class_scope:pb.CtpRspQryTransferBank)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_branch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  bool is_last_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpReqTransfer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpReqTransfer) */ {
 public:
  CtpReqTransfer();
  virtual ~CtpReqTransfer();

  CtpReqTransfer(const CtpReqTransfer& from);
  CtpReqTransfer(CtpReqTransfer&& from) noexcept
    : CtpReqTransfer() {
    *this = ::std::move(from);
  }

  inline CtpReqTransfer& operator=(const CtpReqTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpReqTransfer& operator=(CtpReqTransfer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpReqTransfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpReqTransfer* internal_default_instance() {
    return reinterpret_cast<const CtpReqTransfer*>(
               &_CtpReqTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(CtpReqTransfer* other);
  friend void swap(CtpReqTransfer& a, CtpReqTransfer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpReqTransfer* New() const final {
    return CreateMaybeMessage<CtpReqTransfer>(nullptr);
  }

  CtpReqTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpReqTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpReqTransfer& from);
  void MergeFrom(const CtpReqTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpReqTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpReqTransfer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string trade_code = 1;
  void clear_trade_code();
  static const int kTradeCodeFieldNumber = 1;
  const std::string& trade_code() const;
  void set_trade_code(const std::string& value);
  void set_trade_code(std::string&& value);
  void set_trade_code(const char* value);
  void set_trade_code(const char* value, size_t size);
  std::string* mutable_trade_code();
  std::string* release_trade_code();
  void set_allocated_trade_code(std::string* trade_code);

  // string bank_id = 2;
  void clear_bank_id();
  static const int kBankIdFieldNumber = 2;
  const std::string& bank_id() const;
  void set_bank_id(const std::string& value);
  void set_bank_id(std::string&& value);
  void set_bank_id(const char* value);
  void set_bank_id(const char* value, size_t size);
  std::string* mutable_bank_id();
  std::string* release_bank_id();
  void set_allocated_bank_id(std::string* bank_id);

  // string bank_branch_id = 3;
  void clear_bank_branch_id();
  static const int kBankBranchIdFieldNumber = 3;
  const std::string& bank_branch_id() const;
  void set_bank_branch_id(const std::string& value);
  void set_bank_branch_id(std::string&& value);
  void set_bank_branch_id(const char* value);
  void set_bank_branch_id(const char* value, size_t size);
  std::string* mutable_bank_branch_id();
  std::string* release_bank_branch_id();
  void set_allocated_bank_branch_id(std::string* bank_branch_id);

  // string broker_id = 4;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 4;
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);

  // string broker_branch_id = 5;
  void clear_broker_branch_id();
  static const int kBrokerBranchIdFieldNumber = 5;
  const std::string& broker_branch_id() const;
  void set_broker_branch_id(const std::string& value);
  void set_broker_branch_id(std::string&& value);
  void set_broker_branch_id(const char* value);
  void set_broker_branch_id(const char* value, size_t size);
  std::string* mutable_broker_branch_id();
  std::string* release_broker_branch_id();
  void set_allocated_broker_branch_id(std::string* broker_branch_id);

  // string trade_date = 6;
  void clear_trade_date();
  static const int kTradeDateFieldNumber = 6;
  const std::string& trade_date() const;
  void set_trade_date(const std::string& value);
  void set_trade_date(std::string&& value);
  void set_trade_date(const char* value);
  void set_trade_date(const char* value, size_t size);
  std::string* mutable_trade_date();
  std::string* release_trade_date();
  void set_allocated_trade_date(std::string* trade_date);

  // string trade_time = 7;
  void clear_trade_time();
  static const int kTradeTimeFieldNumber = 7;
  const std::string& trade_time() const;
  void set_trade_time(const std::string& value);
  void set_trade_time(std::string&& value);
  void set_trade_time(const char* value);
  void set_trade_time(const char* value, size_t size);
  std::string* mutable_trade_time();
  std::string* release_trade_time();
  void set_allocated_trade_time(std::string* trade_time);

  // string bank_serial = 8;
  void clear_bank_serial();
  static const int kBankSerialFieldNumber = 8;
  const std::string& bank_serial() const;
  void set_bank_serial(const std::string& value);
  void set_bank_serial(std::string&& value);
  void set_bank_serial(const char* value);
  void set_bank_serial(const char* value, size_t size);
  std::string* mutable_bank_serial();
  std::string* release_bank_serial();
  void set_allocated_bank_serial(std::string* bank_serial);

  // string trading_day = 9;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 9;
  const std::string& trading_day() const;
  void set_trading_day(const std::string& value);
  void set_trading_day(std::string&& value);
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  std::string* mutable_trading_day();
  std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);

  // string last_fragment = 11;
  void clear_last_fragment();
  static const int kLastFragmentFieldNumber = 11;
  const std::string& last_fragment() const;
  void set_last_fragment(const std::string& value);
  void set_last_fragment(std::string&& value);
  void set_last_fragment(const char* value);
  void set_last_fragment(const char* value, size_t size);
  std::string* mutable_last_fragment();
  std::string* release_last_fragment();
  void set_allocated_last_fragment(std::string* last_fragment);

  // string customer_name = 13;
  void clear_customer_name();
  static const int kCustomerNameFieldNumber = 13;
  const std::string& customer_name() const;
  void set_customer_name(const std::string& value);
  void set_customer_name(std::string&& value);
  void set_customer_name(const char* value);
  void set_customer_name(const char* value, size_t size);
  std::string* mutable_customer_name();
  std::string* release_customer_name();
  void set_allocated_customer_name(std::string* customer_name);

  // string identified_card_no = 15;
  void clear_identified_card_no();
  static const int kIdentifiedCardNoFieldNumber = 15;
  const std::string& identified_card_no() const;
  void set_identified_card_no(const std::string& value);
  void set_identified_card_no(std::string&& value);
  void set_identified_card_no(const char* value);
  void set_identified_card_no(const char* value, size_t size);
  std::string* mutable_identified_card_no();
  std::string* release_identified_card_no();
  void set_allocated_identified_card_no(std::string* identified_card_no);

  // string cust_type = 16;
  void clear_cust_type();
  static const int kCustTypeFieldNumber = 16;
  const std::string& cust_type() const;
  void set_cust_type(const std::string& value);
  void set_cust_type(std::string&& value);
  void set_cust_type(const char* value);
  void set_cust_type(const char* value, size_t size);
  std::string* mutable_cust_type();
  std::string* release_cust_type();
  void set_allocated_cust_type(std::string* cust_type);

  // string bank_account = 17;
  void clear_bank_account();
  static const int kBankAccountFieldNumber = 17;
  const std::string& bank_account() const;
  void set_bank_account(const std::string& value);
  void set_bank_account(std::string&& value);
  void set_bank_account(const char* value);
  void set_bank_account(const char* value, size_t size);
  std::string* mutable_bank_account();
  std::string* release_bank_account();
  void set_allocated_bank_account(std::string* bank_account);

  // string bank_password = 18;
  void clear_bank_password();
  static const int kBankPasswordFieldNumber = 18;
  const std::string& bank_password() const;
  void set_bank_password(const std::string& value);
  void set_bank_password(std::string&& value);
  void set_bank_password(const char* value);
  void set_bank_password(const char* value, size_t size);
  std::string* mutable_bank_password();
  std::string* release_bank_password();
  void set_allocated_bank_password(std::string* bank_password);

  // string account_id = 19;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 19;
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // string password = 20;
  void clear_password();
  static const int kPasswordFieldNumber = 20;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // string user_id = 23;
  void clear_user_id();
  static const int kUserIdFieldNumber = 23;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // string verify_cert_no_flag = 24;
  void clear_verify_cert_no_flag();
  static const int kVerifyCertNoFlagFieldNumber = 24;
  const std::string& verify_cert_no_flag() const;
  void set_verify_cert_no_flag(const std::string& value);
  void set_verify_cert_no_flag(std::string&& value);
  void set_verify_cert_no_flag(const char* value);
  void set_verify_cert_no_flag(const char* value, size_t size);
  std::string* mutable_verify_cert_no_flag();
  std::string* release_verify_cert_no_flag();
  void set_allocated_verify_cert_no_flag(std::string* verify_cert_no_flag);

  // string currency_id = 25;
  void clear_currency_id();
  static const int kCurrencyIdFieldNumber = 25;
  const std::string& currency_id() const;
  void set_currency_id(const std::string& value);
  void set_currency_id(std::string&& value);
  void set_currency_id(const char* value);
  void set_currency_id(const char* value, size_t size);
  std::string* mutable_currency_id();
  std::string* release_currency_id();
  void set_allocated_currency_id(std::string* currency_id);

  // string message = 31;
  void clear_message();
  static const int kMessageFieldNumber = 31;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // string digest = 32;
  void clear_digest();
  static const int kDigestFieldNumber = 32;
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const char* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);

  // string device_id = 34;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 34;
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);

  // string bank_secu_acc = 35;
  void clear_bank_secu_acc();
  static const int kBankSecuAccFieldNumber = 35;
  const std::string& bank_secu_acc() const;
  void set_bank_secu_acc(const std::string& value);
  void set_bank_secu_acc(std::string&& value);
  void set_bank_secu_acc(const char* value);
  void set_bank_secu_acc(const char* value, size_t size);
  std::string* mutable_bank_secu_acc();
  std::string* release_bank_secu_acc();
  void set_allocated_bank_secu_acc(std::string* bank_secu_acc);

  // string bank_pwd_flag = 36;
  void clear_bank_pwd_flag();
  static const int kBankPwdFlagFieldNumber = 36;
  const std::string& bank_pwd_flag() const;
  void set_bank_pwd_flag(const std::string& value);
  void set_bank_pwd_flag(std::string&& value);
  void set_bank_pwd_flag(const char* value);
  void set_bank_pwd_flag(const char* value, size_t size);
  std::string* mutable_bank_pwd_flag();
  std::string* release_bank_pwd_flag();
  void set_allocated_bank_pwd_flag(std::string* bank_pwd_flag);

  // string secu_pwd_flag = 37;
  void clear_secu_pwd_flag();
  static const int kSecuPwdFlagFieldNumber = 37;
  const std::string& secu_pwd_flag() const;
  void set_secu_pwd_flag(const std::string& value);
  void set_secu_pwd_flag(std::string&& value);
  void set_secu_pwd_flag(const char* value);
  void set_secu_pwd_flag(const char* value, size_t size);
  std::string* mutable_secu_pwd_flag();
  std::string* release_secu_pwd_flag();
  void set_allocated_secu_pwd_flag(std::string* secu_pwd_flag);

  // string oper_no = 38;
  void clear_oper_no();
  static const int kOperNoFieldNumber = 38;
  const std::string& oper_no() const;
  void set_oper_no(const std::string& value);
  void set_oper_no(std::string&& value);
  void set_oper_no(const char* value);
  void set_oper_no(const char* value, size_t size);
  std::string* mutable_oper_no();
  std::string* release_oper_no();
  void set_allocated_oper_no(std::string* oper_no);

  // string transfer_status = 41;
  void clear_transfer_status();
  static const int kTransferStatusFieldNumber = 41;
  const std::string& transfer_status() const;
  void set_transfer_status(const std::string& value);
  void set_transfer_status(std::string&& value);
  void set_transfer_status(const char* value);
  void set_transfer_status(const char* value, size_t size);
  std::string* mutable_transfer_status();
  std::string* release_transfer_status();
  void set_allocated_transfer_status(std::string* transfer_status);

  // string long_customer_name = 42;
  void clear_long_customer_name();
  static const int kLongCustomerNameFieldNumber = 42;
  const std::string& long_customer_name() const;
  void set_long_customer_name(const std::string& value);
  void set_long_customer_name(std::string&& value);
  void set_long_customer_name(const char* value);
  void set_long_customer_name(const char* value, size_t size);
  std::string* mutable_long_customer_name();
  std::string* release_long_customer_name();
  void set_allocated_long_customer_name(std::string* long_customer_name);

  // int32 plate_serieal = 10;
  void clear_plate_serieal();
  static const int kPlateSeriealFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 plate_serieal() const;
  void set_plate_serieal(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 session_id = 12;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 id_card_type = 14;
  void clear_id_card_type();
  static const int kIdCardTypeFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 id_card_type() const;
  void set_id_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 install_id = 21;
  void clear_install_id();
  static const int kInstallIdFieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::int32 install_id() const;
  void set_install_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 future_serial = 22;
  void clear_future_serial();
  static const int kFutureSerialFieldNumber = 22;
  ::PROTOBUF_NAMESPACE_ID::int32 future_serial() const;
  void set_future_serial(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 fee_pay_flag = 28;
  void clear_fee_pay_flag();
  static const int kFeePayFlagFieldNumber = 28;
  ::PROTOBUF_NAMESPACE_ID::int32 fee_pay_flag() const;
  void set_fee_pay_flag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double trade_amount = 26;
  void clear_trade_amount();
  static const int kTradeAmountFieldNumber = 26;
  double trade_amount() const;
  void set_trade_amount(double value);

  // double future_fetch_amount = 27;
  void clear_future_fetch_amount();
  static const int kFutureFetchAmountFieldNumber = 27;
  double future_fetch_amount() const;
  void set_future_fetch_amount(double value);

  // double cust_fee = 29;
  void clear_cust_fee();
  static const int kCustFeeFieldNumber = 29;
  double cust_fee() const;
  void set_cust_fee(double value);

  // double broker_fee = 30;
  void clear_broker_fee();
  static const int kBrokerFeeFieldNumber = 30;
  double broker_fee() const;
  void set_broker_fee(double value);

  // int32 bank_acc_type = 33;
  void clear_bank_acc_type();
  static const int kBankAccTypeFieldNumber = 33;
  ::PROTOBUF_NAMESPACE_ID::int32 bank_acc_type() const;
  void set_bank_acc_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 request_id = 39;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 39;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 tid = 40;
  void clear_tid();
  static const int kTidFieldNumber = 40;
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CtpReqTransfer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_branch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_branch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_serial_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_fragment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identified_card_no_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cust_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_cert_no_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_secu_acc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_pwd_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_pwd_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oper_no_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transfer_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_customer_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 plate_serieal_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_card_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 install_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 future_serial_;
  ::PROTOBUF_NAMESPACE_ID::int32 fee_pay_flag_;
  double trade_amount_;
  double future_fetch_amount_;
  double cust_fee_;
  double broker_fee_;
  ::PROTOBUF_NAMESPACE_ID::int32 bank_acc_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CtpRspTransfer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CtpRspTransfer) */ {
 public:
  CtpRspTransfer();
  virtual ~CtpRspTransfer();

  CtpRspTransfer(const CtpRspTransfer& from);
  CtpRspTransfer(CtpRspTransfer&& from) noexcept
    : CtpRspTransfer() {
    *this = ::std::move(from);
  }

  inline CtpRspTransfer& operator=(const CtpRspTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtpRspTransfer& operator=(CtpRspTransfer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtpRspTransfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpRspTransfer* internal_default_instance() {
    return reinterpret_cast<const CtpRspTransfer*>(
               &_CtpRspTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(CtpRspTransfer* other);
  friend void swap(CtpRspTransfer& a, CtpRspTransfer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpRspTransfer* New() const final {
    return CreateMaybeMessage<CtpRspTransfer>(nullptr);
  }

  CtpRspTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtpRspTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtpRspTransfer& from);
  void MergeFrom(const CtpRspTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpRspTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CtpRspTransfer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);

  // .pb.CtpReqTransfer req = 5;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 5;
  const ::pb::CtpReqTransfer& req() const;
  ::pb::CtpReqTransfer* release_req();
  ::pb::CtpReqTransfer* mutable_req();
  void set_allocated_req(::pb::CtpReqTransfer* req);

  // int32 error_id = 1;
  void clear_error_id();
  static const int kErrorIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id() const;
  void set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_last = 4;
  void clear_is_last();
  static const int kIsLastFieldNumber = 4;
  bool is_last() const;
  void set_is_last(bool value);

  // @@protoc_insertion_point(class_scope:pb.CtpRspTransfer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::pb::CtpReqTransfer* req_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  bool is_last_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPReqSubscribeMarketData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPReqSubscribeMarketData) */ {
 public:
  CTPReqSubscribeMarketData();
  virtual ~CTPReqSubscribeMarketData();

  CTPReqSubscribeMarketData(const CTPReqSubscribeMarketData& from);
  CTPReqSubscribeMarketData(CTPReqSubscribeMarketData&& from) noexcept
    : CTPReqSubscribeMarketData() {
    *this = ::std::move(from);
  }

  inline CTPReqSubscribeMarketData& operator=(const CTPReqSubscribeMarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPReqSubscribeMarketData& operator=(CTPReqSubscribeMarketData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPReqSubscribeMarketData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPReqSubscribeMarketData* internal_default_instance() {
    return reinterpret_cast<const CTPReqSubscribeMarketData*>(
               &_CTPReqSubscribeMarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(CTPReqSubscribeMarketData* other);
  friend void swap(CTPReqSubscribeMarketData& a, CTPReqSubscribeMarketData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPReqSubscribeMarketData* New() const final {
    return CreateMaybeMessage<CTPReqSubscribeMarketData>(nullptr);
  }

  CTPReqSubscribeMarketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPReqSubscribeMarketData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPReqSubscribeMarketData& from);
  void MergeFrom(const CTPReqSubscribeMarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPReqSubscribeMarketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPReqSubscribeMarketData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const std::string& list(int index) const;
  std::string* mutable_list(int index);
  void set_list(int index, const std::string& value);
  void set_list(int index, std::string&& value);
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  std::string* add_list();
  void add_list(const std::string& value);
  void add_list(std::string&& value);
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_list();

  // @@protoc_insertion_point(class_scope:pb.CTPReqSubscribeMarketData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPRspSusbcribeMarketData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPRspSusbcribeMarketData) */ {
 public:
  CTPRspSusbcribeMarketData();
  virtual ~CTPRspSusbcribeMarketData();

  CTPRspSusbcribeMarketData(const CTPRspSusbcribeMarketData& from);
  CTPRspSusbcribeMarketData(CTPRspSusbcribeMarketData&& from) noexcept
    : CTPRspSusbcribeMarketData() {
    *this = ::std::move(from);
  }

  inline CTPRspSusbcribeMarketData& operator=(const CTPRspSusbcribeMarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPRspSusbcribeMarketData& operator=(CTPRspSusbcribeMarketData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPRspSusbcribeMarketData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPRspSusbcribeMarketData* internal_default_instance() {
    return reinterpret_cast<const CTPRspSusbcribeMarketData*>(
               &_CTPRspSusbcribeMarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(CTPRspSusbcribeMarketData* other);
  friend void swap(CTPRspSusbcribeMarketData& a, CTPRspSusbcribeMarketData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPRspSusbcribeMarketData* New() const final {
    return CreateMaybeMessage<CTPRspSusbcribeMarketData>(nullptr);
  }

  CTPRspSusbcribeMarketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPRspSusbcribeMarketData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPRspSusbcribeMarketData& from);
  void MergeFrom(const CTPRspSusbcribeMarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPRspSusbcribeMarketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPRspSusbcribeMarketData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.CTPRspSusbcribeMarketData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPReqUnSusbibeMarketData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPReqUnSusbibeMarketData) */ {
 public:
  CTPReqUnSusbibeMarketData();
  virtual ~CTPReqUnSusbibeMarketData();

  CTPReqUnSusbibeMarketData(const CTPReqUnSusbibeMarketData& from);
  CTPReqUnSusbibeMarketData(CTPReqUnSusbibeMarketData&& from) noexcept
    : CTPReqUnSusbibeMarketData() {
    *this = ::std::move(from);
  }

  inline CTPReqUnSusbibeMarketData& operator=(const CTPReqUnSusbibeMarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPReqUnSusbibeMarketData& operator=(CTPReqUnSusbibeMarketData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPReqUnSusbibeMarketData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPReqUnSusbibeMarketData* internal_default_instance() {
    return reinterpret_cast<const CTPReqUnSusbibeMarketData*>(
               &_CTPReqUnSusbibeMarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(CTPReqUnSusbibeMarketData* other);
  friend void swap(CTPReqUnSusbibeMarketData& a, CTPReqUnSusbibeMarketData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPReqUnSusbibeMarketData* New() const final {
    return CreateMaybeMessage<CTPReqUnSusbibeMarketData>(nullptr);
  }

  CTPReqUnSusbibeMarketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPReqUnSusbibeMarketData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPReqUnSusbibeMarketData& from);
  void MergeFrom(const CTPReqUnSusbibeMarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPReqUnSusbibeMarketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPReqUnSusbibeMarketData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const std::string& list(int index) const;
  std::string* mutable_list(int index);
  void set_list(int index, const std::string& value);
  void set_list(int index, std::string&& value);
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  std::string* add_list();
  void add_list(const std::string& value);
  void add_list(std::string&& value);
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_list();

  // @@protoc_insertion_point(class_scope:pb.CTPReqUnSusbibeMarketData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPRspUnSusbibeMarketData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPRspUnSusbibeMarketData) */ {
 public:
  CTPRspUnSusbibeMarketData();
  virtual ~CTPRspUnSusbibeMarketData();

  CTPRspUnSusbibeMarketData(const CTPRspUnSusbibeMarketData& from);
  CTPRspUnSusbibeMarketData(CTPRspUnSusbibeMarketData&& from) noexcept
    : CTPRspUnSusbibeMarketData() {
    *this = ::std::move(from);
  }

  inline CTPRspUnSusbibeMarketData& operator=(const CTPRspUnSusbibeMarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPRspUnSusbibeMarketData& operator=(CTPRspUnSusbibeMarketData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPRspUnSusbibeMarketData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPRspUnSusbibeMarketData* internal_default_instance() {
    return reinterpret_cast<const CTPRspUnSusbibeMarketData*>(
               &_CTPRspUnSusbibeMarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(CTPRspUnSusbibeMarketData* other);
  friend void swap(CTPRspUnSusbibeMarketData& a, CTPRspUnSusbibeMarketData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPRspUnSusbibeMarketData* New() const final {
    return CreateMaybeMessage<CTPRspUnSusbibeMarketData>(nullptr);
  }

  CTPRspUnSusbibeMarketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPRspUnSusbibeMarketData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPRspUnSusbibeMarketData& from);
  void MergeFrom(const CTPRspUnSusbibeMarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPRspUnSusbibeMarketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPRspUnSusbibeMarketData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.CTPRspUnSusbibeMarketData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPOnRspOrderInsert :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPOnRspOrderInsert) */ {
 public:
  CTPOnRspOrderInsert();
  virtual ~CTPOnRspOrderInsert();

  CTPOnRspOrderInsert(const CTPOnRspOrderInsert& from);
  CTPOnRspOrderInsert(CTPOnRspOrderInsert&& from) noexcept
    : CTPOnRspOrderInsert() {
    *this = ::std::move(from);
  }

  inline CTPOnRspOrderInsert& operator=(const CTPOnRspOrderInsert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPOnRspOrderInsert& operator=(CTPOnRspOrderInsert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPOnRspOrderInsert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPOnRspOrderInsert* internal_default_instance() {
    return reinterpret_cast<const CTPOnRspOrderInsert*>(
               &_CTPOnRspOrderInsert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(CTPOnRspOrderInsert* other);
  friend void swap(CTPOnRspOrderInsert& a, CTPOnRspOrderInsert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPOnRspOrderInsert* New() const final {
    return CreateMaybeMessage<CTPOnRspOrderInsert>(nullptr);
  }

  CTPOnRspOrderInsert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPOnRspOrderInsert>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPOnRspOrderInsert& from);
  void MergeFrom(const CTPOnRspOrderInsert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPOnRspOrderInsert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPOnRspOrderInsert";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const void* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);

  // string order_ref = 3;
  void clear_order_ref();
  static const int kOrderRefFieldNumber = 3;
  const std::string& order_ref() const;
  void set_order_ref(const std::string& value);
  void set_order_ref(std::string&& value);
  void set_order_ref(const char* value);
  void set_order_ref(const char* value, size_t size);
  std::string* mutable_order_ref();
  std::string* release_order_ref();
  void set_allocated_order_ref(std::string* order_ref);

  // int32 error_id = 1;
  void clear_error_id();
  static const int kErrorIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id() const;
  void set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPOnRspOrderInsert)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_ref_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPInstrumentField :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPInstrumentField) */ {
 public:
  CTPInstrumentField();
  virtual ~CTPInstrumentField();

  CTPInstrumentField(const CTPInstrumentField& from);
  CTPInstrumentField(CTPInstrumentField&& from) noexcept
    : CTPInstrumentField() {
    *this = ::std::move(from);
  }

  inline CTPInstrumentField& operator=(const CTPInstrumentField& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPInstrumentField& operator=(CTPInstrumentField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPInstrumentField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPInstrumentField* internal_default_instance() {
    return reinterpret_cast<const CTPInstrumentField*>(
               &_CTPInstrumentField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(CTPInstrumentField* other);
  friend void swap(CTPInstrumentField& a, CTPInstrumentField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPInstrumentField* New() const final {
    return CreateMaybeMessage<CTPInstrumentField>(nullptr);
  }

  CTPInstrumentField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPInstrumentField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPInstrumentField& from);
  void MergeFrom(const CTPInstrumentField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPInstrumentField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPInstrumentField";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrument_id = 1;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 1;
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);

  // string exchange_id = 2;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 2;
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);

  // bytes instrument_name = 3;
  void clear_instrument_name();
  static const int kInstrumentNameFieldNumber = 3;
  const std::string& instrument_name() const;
  void set_instrument_name(const std::string& value);
  void set_instrument_name(std::string&& value);
  void set_instrument_name(const char* value);
  void set_instrument_name(const void* value, size_t size);
  std::string* mutable_instrument_name();
  std::string* release_instrument_name();
  void set_allocated_instrument_name(std::string* instrument_name);

  // string exchange_inst_id = 4;
  void clear_exchange_inst_id();
  static const int kExchangeInstIdFieldNumber = 4;
  const std::string& exchange_inst_id() const;
  void set_exchange_inst_id(const std::string& value);
  void set_exchange_inst_id(std::string&& value);
  void set_exchange_inst_id(const char* value);
  void set_exchange_inst_id(const char* value, size_t size);
  std::string* mutable_exchange_inst_id();
  std::string* release_exchange_inst_id();
  void set_allocated_exchange_inst_id(std::string* exchange_inst_id);

  // string product_id = 5;
  void clear_product_id();
  static const int kProductIdFieldNumber = 5;
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);

  // string create_date = 15;
  void clear_create_date();
  static const int kCreateDateFieldNumber = 15;
  const std::string& create_date() const;
  void set_create_date(const std::string& value);
  void set_create_date(std::string&& value);
  void set_create_date(const char* value);
  void set_create_date(const char* value, size_t size);
  std::string* mutable_create_date();
  std::string* release_create_date();
  void set_allocated_create_date(std::string* create_date);

  // string open_date = 16;
  void clear_open_date();
  static const int kOpenDateFieldNumber = 16;
  const std::string& open_date() const;
  void set_open_date(const std::string& value);
  void set_open_date(std::string&& value);
  void set_open_date(const char* value);
  void set_open_date(const char* value, size_t size);
  std::string* mutable_open_date();
  std::string* release_open_date();
  void set_allocated_open_date(std::string* open_date);

  // string expire_date = 17;
  void clear_expire_date();
  static const int kExpireDateFieldNumber = 17;
  const std::string& expire_date() const;
  void set_expire_date(const std::string& value);
  void set_expire_date(std::string&& value);
  void set_expire_date(const char* value);
  void set_expire_date(const char* value, size_t size);
  std::string* mutable_expire_date();
  std::string* release_expire_date();
  void set_allocated_expire_date(std::string* expire_date);

  // string start_deliv_date = 18;
  void clear_start_deliv_date();
  static const int kStartDelivDateFieldNumber = 18;
  const std::string& start_deliv_date() const;
  void set_start_deliv_date(const std::string& value);
  void set_start_deliv_date(std::string&& value);
  void set_start_deliv_date(const char* value);
  void set_start_deliv_date(const char* value, size_t size);
  std::string* mutable_start_deliv_date();
  std::string* release_start_deliv_date();
  void set_allocated_start_deliv_date(std::string* start_deliv_date);

  // string end_deliv_date = 19;
  void clear_end_deliv_date();
  static const int kEndDelivDateFieldNumber = 19;
  const std::string& end_deliv_date() const;
  void set_end_deliv_date(const std::string& value);
  void set_end_deliv_date(std::string&& value);
  void set_end_deliv_date(const char* value);
  void set_end_deliv_date(const char* value, size_t size);
  std::string* mutable_end_deliv_date();
  std::string* release_end_deliv_date();
  void set_allocated_end_deliv_date(std::string* end_deliv_date);

  // string underlying_inst_id = 36;
  void clear_underlying_inst_id();
  static const int kUnderlyingInstIdFieldNumber = 36;
  const std::string& underlying_inst_id() const;
  void set_underlying_inst_id(const std::string& value);
  void set_underlying_inst_id(std::string&& value);
  void set_underlying_inst_id(const char* value);
  void set_underlying_inst_id(const char* value, size_t size);
  std::string* mutable_underlying_inst_id();
  std::string* release_underlying_inst_id();
  void set_allocated_underlying_inst_id(std::string* underlying_inst_id);

  // int32 product_class = 6;
  void clear_product_class();
  static const int kProductClassFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 product_class() const;
  void set_product_class(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 delivery_year = 7;
  void clear_delivery_year();
  static const int kDeliveryYearFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_year() const;
  void set_delivery_year(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 delivery_month = 8;
  void clear_delivery_month();
  static const int kDeliveryMonthFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_month() const;
  void set_delivery_month(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_market_order_volume = 9;
  void clear_max_market_order_volume();
  static const int kMaxMarketOrderVolumeFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 max_market_order_volume() const;
  void set_max_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_market_order_volume = 10;
  void clear_min_market_order_volume();
  static const int kMinMarketOrderVolumeFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 min_market_order_volume() const;
  void set_min_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_limit_order_volume = 11;
  void clear_max_limit_order_volume();
  static const int kMaxLimitOrderVolumeFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 max_limit_order_volume() const;
  void set_max_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_limit_order_volume = 12;
  void clear_min_limit_order_volume();
  static const int kMinLimitOrderVolumeFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 min_limit_order_volume() const;
  void set_min_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 volume_multiple = 13;
  void clear_volume_multiple();
  static const int kVolumeMultipleFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple() const;
  void set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double price_tick = 14;
  void clear_price_tick();
  static const int kPriceTickFieldNumber = 14;
  double price_tick() const;
  void set_price_tick(double value);

  // int32 inst_life_phase = 20;
  void clear_inst_life_phase();
  static const int kInstLifePhaseFieldNumber = 20;
  ::PROTOBUF_NAMESPACE_ID::int32 inst_life_phase() const;
  void set_inst_life_phase(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 position_type = 31;
  void clear_position_type();
  static const int kPositionTypeFieldNumber = 31;
  ::PROTOBUF_NAMESPACE_ID::int32 position_type() const;
  void set_position_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 combination_type = 40;
  void clear_combination_type();
  static const int kCombinationTypeFieldNumber = 40;
  ::PROTOBUF_NAMESPACE_ID::int32 combination_type() const;
  void set_combination_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 position_date_type = 32;
  void clear_position_date_type();
  static const int kPositionDateTypeFieldNumber = 32;
  ::PROTOBUF_NAMESPACE_ID::int32 position_date_type() const;
  void set_position_date_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_trading = 30;
  void clear_is_trading();
  static const int kIsTradingFieldNumber = 30;
  bool is_trading() const;
  void set_is_trading(bool value);

  // bool max_margin_side_algorithm = 35;
  void clear_max_margin_side_algorithm();
  static const int kMaxMarginSideAlgorithmFieldNumber = 35;
  bool max_margin_side_algorithm() const;
  void set_max_margin_side_algorithm(bool value);

  // double long_margin_ratio = 33;
  void clear_long_margin_ratio();
  static const int kLongMarginRatioFieldNumber = 33;
  double long_margin_ratio() const;
  void set_long_margin_ratio(double value);

  // double short_margin_ratio = 34;
  void clear_short_margin_ratio();
  static const int kShortMarginRatioFieldNumber = 34;
  double short_margin_ratio() const;
  void set_short_margin_ratio(double value);

  // double strike_price = 37;
  void clear_strike_price();
  static const int kStrikePriceFieldNumber = 37;
  double strike_price() const;
  void set_strike_price(double value);

  // int32 options_type = 38;
  void clear_options_type();
  static const int kOptionsTypeFieldNumber = 38;
  ::PROTOBUF_NAMESPACE_ID::int32 options_type() const;
  void set_options_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 underlying_multiple = 39;
  void clear_underlying_multiple();
  static const int kUnderlyingMultipleFieldNumber = 39;
  ::PROTOBUF_NAMESPACE_ID::int32 underlying_multiple() const;
  void set_underlying_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CTPInstrumentField)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expire_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_deliv_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_deliv_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlying_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 product_class_;
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_year_;
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_month_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_market_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_market_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_limit_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_limit_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple_;
  double price_tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 inst_life_phase_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 combination_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_date_type_;
  bool is_trading_;
  bool max_margin_side_algorithm_;
  double long_margin_ratio_;
  double short_margin_ratio_;
  double strike_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 options_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 underlying_multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// -------------------------------------------------------------------

class CTPOnRspQryInstrument :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CTPOnRspQryInstrument) */ {
 public:
  CTPOnRspQryInstrument();
  virtual ~CTPOnRspQryInstrument();

  CTPOnRspQryInstrument(const CTPOnRspQryInstrument& from);
  CTPOnRspQryInstrument(CTPOnRspQryInstrument&& from) noexcept
    : CTPOnRspQryInstrument() {
    *this = ::std::move(from);
  }

  inline CTPOnRspQryInstrument& operator=(const CTPOnRspQryInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTPOnRspQryInstrument& operator=(CTPOnRspQryInstrument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTPOnRspQryInstrument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTPOnRspQryInstrument* internal_default_instance() {
    return reinterpret_cast<const CTPOnRspQryInstrument*>(
               &_CTPOnRspQryInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(CTPOnRspQryInstrument* other);
  friend void swap(CTPOnRspQryInstrument& a, CTPOnRspQryInstrument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTPOnRspQryInstrument* New() const final {
    return CreateMaybeMessage<CTPOnRspQryInstrument>(nullptr);
  }

  CTPOnRspQryInstrument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTPOnRspQryInstrument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTPOnRspQryInstrument& from);
  void MergeFrom(const CTPOnRspQryInstrument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTPOnRspQryInstrument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CTPOnRspQryInstrument";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctp_2eproto);
    return ::descriptor_table_ctp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.CTPInstrumentField inst = 1;
  bool has_inst() const;
  void clear_inst();
  static const int kInstFieldNumber = 1;
  const ::pb::CTPInstrumentField& inst() const;
  ::pb::CTPInstrumentField* release_inst();
  ::pb::CTPInstrumentField* mutable_inst();
  void set_allocated_inst(::pb::CTPInstrumentField* inst);

  // .pb.CTPRspInfo response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::pb::CTPRspInfo& response() const;
  ::pb::CTPRspInfo* release_response();
  ::pb::CTPRspInfo* mutable_response();
  void set_allocated_response(::pb::CTPRspInfo* response);

  // @@protoc_insertion_point(class_scope:pb.CTPOnRspQryInstrument)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::CTPInstrumentField* inst_;
  ::pb::CTPRspInfo* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CTPOrderID

// int64 front_id = 1;
inline void CTPOrderID::clear_front_id() {
  front_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPOrderID::front_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderID.front_id)
  return front_id_;
}
inline void CTPOrderID::set_front_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  front_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderID.front_id)
}

// int64 session_id = 2;
inline void CTPOrderID::clear_session_id() {
  session_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPOrderID::session_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderID.session_id)
  return session_id_;
}
inline void CTPOrderID::set_session_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderID.session_id)
}

// int64 order_ref = 3;
inline void CTPOrderID::clear_order_ref() {
  order_ref_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPOrderID::order_ref() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderID.order_ref)
  return order_ref_;
}
inline void CTPOrderID::set_order_ref(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  order_ref_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderID.order_ref)
}

// string string_id = 4;
inline void CTPOrderID::clear_string_id() {
  string_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderID::string_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderID.string_id)
  return string_id_.GetNoArena();
}
inline void CTPOrderID::set_string_id(const std::string& value) {
  
  string_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderID.string_id)
}
inline void CTPOrderID::set_string_id(std::string&& value) {
  
  string_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderID.string_id)
}
inline void CTPOrderID::set_string_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  string_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderID.string_id)
}
inline void CTPOrderID::set_string_id(const char* value, size_t size) {
  
  string_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderID.string_id)
}
inline std::string* CTPOrderID::mutable_string_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderID.string_id)
  return string_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderID::release_string_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderID.string_id)
  
  return string_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderID::set_allocated_string_id(std::string* string_id) {
  if (string_id != nullptr) {
    
  } else {
    
  }
  string_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderID.string_id)
}

// -------------------------------------------------------------------

// CTPOrderField

// string broker_id = 1;
inline void CTPOrderField::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.broker_id)
  return broker_id_.GetNoArena();
}
inline void CTPOrderField::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.broker_id)
}
inline void CTPOrderField::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.broker_id)
}
inline void CTPOrderField::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.broker_id)
}
inline void CTPOrderField::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.broker_id)
}
inline std::string* CTPOrderField::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.broker_id)
}

// string investor_id = 2;
inline void CTPOrderField::clear_investor_id() {
  investor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::investor_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.investor_id)
  return investor_id_.GetNoArena();
}
inline void CTPOrderField::set_investor_id(const std::string& value) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.investor_id)
}
inline void CTPOrderField::set_investor_id(std::string&& value) {
  
  investor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.investor_id)
}
inline void CTPOrderField::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.investor_id)
}
inline void CTPOrderField::set_investor_id(const char* value, size_t size) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.investor_id)
}
inline std::string* CTPOrderField::mutable_investor_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.investor_id)
  return investor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_investor_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.investor_id)
  
  return investor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.investor_id)
}

// string instrument_id = 3;
inline void CTPOrderField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::instrument_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void CTPOrderField::set_instrument_id(const std::string& value) {
  
  instrument_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.instrument_id)
}
inline void CTPOrderField::set_instrument_id(std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.instrument_id)
}
inline void CTPOrderField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.instrument_id)
}
inline void CTPOrderField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.instrument_id)
}
inline std::string* CTPOrderField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.instrument_id)
  return instrument_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.instrument_id)
}

// string order_ref = 4;
inline void CTPOrderField::clear_order_ref() {
  order_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::order_ref() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.order_ref)
  return order_ref_.GetNoArena();
}
inline void CTPOrderField::set_order_ref(const std::string& value) {
  
  order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.order_ref)
}
inline void CTPOrderField::set_order_ref(std::string&& value) {
  
  order_ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.order_ref)
}
inline void CTPOrderField::set_order_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.order_ref)
}
inline void CTPOrderField::set_order_ref(const char* value, size_t size) {
  
  order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.order_ref)
}
inline std::string* CTPOrderField::mutable_order_ref() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.order_ref)
  return order_ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_order_ref() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.order_ref)
  
  return order_ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_order_ref(std::string* order_ref) {
  if (order_ref != nullptr) {
    
  } else {
    
  }
  order_ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_ref);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.order_ref)
}

// string user_id = 5;
inline void CTPOrderField::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::user_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.user_id)
  return user_id_.GetNoArena();
}
inline void CTPOrderField::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.user_id)
}
inline void CTPOrderField::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.user_id)
}
inline void CTPOrderField::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.user_id)
}
inline void CTPOrderField::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.user_id)
}
inline std::string* CTPOrderField::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.user_id)
}

// int32 order_price_type = 6;
inline void CTPOrderField::clear_order_price_type() {
  order_price_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::order_price_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.order_price_type)
  return order_price_type_;
}
inline void CTPOrderField::set_order_price_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_price_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.order_price_type)
}

// int32 direction = 7;
inline void CTPOrderField::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::direction() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.direction)
  return direction_;
}
inline void CTPOrderField::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.direction)
}

// int32 comb_offset_flag = 8;
inline void CTPOrderField::clear_comb_offset_flag() {
  comb_offset_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::comb_offset_flag() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.comb_offset_flag)
  return comb_offset_flag_;
}
inline void CTPOrderField::set_comb_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  comb_offset_flag_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.comb_offset_flag)
}

// int32 comb_hedge_flag = 9;
inline void CTPOrderField::clear_comb_hedge_flag() {
  comb_hedge_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::comb_hedge_flag() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.comb_hedge_flag)
  return comb_hedge_flag_;
}
inline void CTPOrderField::set_comb_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  comb_hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.comb_hedge_flag)
}

// double limit_price = 10;
inline void CTPOrderField::clear_limit_price() {
  limit_price_ = 0;
}
inline double CTPOrderField::limit_price() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.limit_price)
  return limit_price_;
}
inline void CTPOrderField::set_limit_price(double value) {
  
  limit_price_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.limit_price)
}

// int32 volume_total_original = 11;
inline void CTPOrderField::clear_volume_total_original() {
  volume_total_original_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::volume_total_original() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.volume_total_original)
  return volume_total_original_;
}
inline void CTPOrderField::set_volume_total_original(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_total_original_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.volume_total_original)
}

// int32 time_condition = 12;
inline void CTPOrderField::clear_time_condition() {
  time_condition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::time_condition() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.time_condition)
  return time_condition_;
}
inline void CTPOrderField::set_time_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_condition_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.time_condition)
}

// string GTD_date = 13;
inline void CTPOrderField::clear_gtd_date() {
  gtd_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::gtd_date() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.GTD_date)
  return gtd_date_.GetNoArena();
}
inline void CTPOrderField::set_gtd_date(const std::string& value) {
  
  gtd_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.GTD_date)
}
inline void CTPOrderField::set_gtd_date(std::string&& value) {
  
  gtd_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.GTD_date)
}
inline void CTPOrderField::set_gtd_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gtd_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.GTD_date)
}
inline void CTPOrderField::set_gtd_date(const char* value, size_t size) {
  
  gtd_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.GTD_date)
}
inline std::string* CTPOrderField::mutable_gtd_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.GTD_date)
  return gtd_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_gtd_date() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.GTD_date)
  
  return gtd_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_gtd_date(std::string* gtd_date) {
  if (gtd_date != nullptr) {
    
  } else {
    
  }
  gtd_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gtd_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.GTD_date)
}

// int32 volume_condition = 14;
inline void CTPOrderField::clear_volume_condition() {
  volume_condition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::volume_condition() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.volume_condition)
  return volume_condition_;
}
inline void CTPOrderField::set_volume_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_condition_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.volume_condition)
}

// int32 min_volume = 15;
inline void CTPOrderField::clear_min_volume() {
  min_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::min_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.min_volume)
  return min_volume_;
}
inline void CTPOrderField::set_min_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.min_volume)
}

// int32 contingent_condition = 16;
inline void CTPOrderField::clear_contingent_condition() {
  contingent_condition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::contingent_condition() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.contingent_condition)
  return contingent_condition_;
}
inline void CTPOrderField::set_contingent_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contingent_condition_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.contingent_condition)
}

// double stop_price = 17;
inline void CTPOrderField::clear_stop_price() {
  stop_price_ = 0;
}
inline double CTPOrderField::stop_price() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.stop_price)
  return stop_price_;
}
inline void CTPOrderField::set_stop_price(double value) {
  
  stop_price_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.stop_price)
}

// int32 force_close_reason = 18;
inline void CTPOrderField::clear_force_close_reason() {
  force_close_reason_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::force_close_reason() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.force_close_reason)
  return force_close_reason_;
}
inline void CTPOrderField::set_force_close_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  force_close_reason_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.force_close_reason)
}

// bool is_auto_suspend = 19;
inline void CTPOrderField::clear_is_auto_suspend() {
  is_auto_suspend_ = false;
}
inline bool CTPOrderField::is_auto_suspend() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.is_auto_suspend)
  return is_auto_suspend_;
}
inline void CTPOrderField::set_is_auto_suspend(bool value) {
  
  is_auto_suspend_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.is_auto_suspend)
}

// string business_unit = 20;
inline void CTPOrderField::clear_business_unit() {
  business_unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::business_unit() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.business_unit)
  return business_unit_.GetNoArena();
}
inline void CTPOrderField::set_business_unit(const std::string& value) {
  
  business_unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.business_unit)
}
inline void CTPOrderField::set_business_unit(std::string&& value) {
  
  business_unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.business_unit)
}
inline void CTPOrderField::set_business_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  business_unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.business_unit)
}
inline void CTPOrderField::set_business_unit(const char* value, size_t size) {
  
  business_unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.business_unit)
}
inline std::string* CTPOrderField::mutable_business_unit() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.business_unit)
  return business_unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_business_unit() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.business_unit)
  
  return business_unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_business_unit(std::string* business_unit) {
  if (business_unit != nullptr) {
    
  } else {
    
  }
  business_unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), business_unit);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.business_unit)
}

// int32 request_id = 21;
inline void CTPOrderField::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.request_id)
  return request_id_;
}
inline void CTPOrderField::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.request_id)
}

// string order_local_id = 22;
inline void CTPOrderField::clear_order_local_id() {
  order_local_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::order_local_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.order_local_id)
  return order_local_id_.GetNoArena();
}
inline void CTPOrderField::set_order_local_id(const std::string& value) {
  
  order_local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.order_local_id)
}
inline void CTPOrderField::set_order_local_id(std::string&& value) {
  
  order_local_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.order_local_id)
}
inline void CTPOrderField::set_order_local_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.order_local_id)
}
inline void CTPOrderField::set_order_local_id(const char* value, size_t size) {
  
  order_local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.order_local_id)
}
inline std::string* CTPOrderField::mutable_order_local_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.order_local_id)
  return order_local_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_order_local_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.order_local_id)
  
  return order_local_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_order_local_id(std::string* order_local_id) {
  if (order_local_id != nullptr) {
    
  } else {
    
  }
  order_local_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_local_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.order_local_id)
}

// string exchange_id = 23;
inline void CTPOrderField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::exchange_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void CTPOrderField::set_exchange_id(const std::string& value) {
  
  exchange_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.exchange_id)
}
inline void CTPOrderField::set_exchange_id(std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.exchange_id)
}
inline void CTPOrderField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.exchange_id)
}
inline void CTPOrderField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.exchange_id)
}
inline std::string* CTPOrderField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.exchange_id)
  return exchange_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.exchange_id)
}

// string participant_id = 24;
inline void CTPOrderField::clear_participant_id() {
  participant_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::participant_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.participant_id)
  return participant_id_.GetNoArena();
}
inline void CTPOrderField::set_participant_id(const std::string& value) {
  
  participant_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.participant_id)
}
inline void CTPOrderField::set_participant_id(std::string&& value) {
  
  participant_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.participant_id)
}
inline void CTPOrderField::set_participant_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  participant_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.participant_id)
}
inline void CTPOrderField::set_participant_id(const char* value, size_t size) {
  
  participant_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.participant_id)
}
inline std::string* CTPOrderField::mutable_participant_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.participant_id)
  return participant_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_participant_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.participant_id)
  
  return participant_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_participant_id(std::string* participant_id) {
  if (participant_id != nullptr) {
    
  } else {
    
  }
  participant_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participant_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.participant_id)
}

// string client_id = 25;
inline void CTPOrderField::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::client_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.client_id)
  return client_id_.GetNoArena();
}
inline void CTPOrderField::set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.client_id)
}
inline void CTPOrderField::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.client_id)
}
inline void CTPOrderField::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.client_id)
}
inline void CTPOrderField::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.client_id)
}
inline std::string* CTPOrderField::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.client_id)
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_client_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.client_id)
}

// string exchange_inst_id = 26;
inline void CTPOrderField::clear_exchange_inst_id() {
  exchange_inst_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::exchange_inst_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.exchange_inst_id)
  return exchange_inst_id_.GetNoArena();
}
inline void CTPOrderField::set_exchange_inst_id(const std::string& value) {
  
  exchange_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.exchange_inst_id)
}
inline void CTPOrderField::set_exchange_inst_id(std::string&& value) {
  
  exchange_inst_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.exchange_inst_id)
}
inline void CTPOrderField::set_exchange_inst_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.exchange_inst_id)
}
inline void CTPOrderField::set_exchange_inst_id(const char* value, size_t size) {
  
  exchange_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.exchange_inst_id)
}
inline std::string* CTPOrderField::mutable_exchange_inst_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.exchange_inst_id)
  return exchange_inst_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_exchange_inst_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.exchange_inst_id)
  
  return exchange_inst_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_exchange_inst_id(std::string* exchange_inst_id) {
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_inst_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.exchange_inst_id)
}

// string trader_id = 27;
inline void CTPOrderField::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::trader_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.trader_id)
  return trader_id_.GetNoArena();
}
inline void CTPOrderField::set_trader_id(const std::string& value) {
  
  trader_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.trader_id)
}
inline void CTPOrderField::set_trader_id(std::string&& value) {
  
  trader_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.trader_id)
}
inline void CTPOrderField::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trader_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.trader_id)
}
inline void CTPOrderField::set_trader_id(const char* value, size_t size) {
  
  trader_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.trader_id)
}
inline std::string* CTPOrderField::mutable_trader_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.trader_id)
  return trader_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_trader_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.trader_id)
  
  return trader_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_trader_id(std::string* trader_id) {
  if (trader_id != nullptr) {
    
  } else {
    
  }
  trader_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.trader_id)
}

// int32 install_id = 28;
inline void CTPOrderField::clear_install_id() {
  install_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::install_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.install_id)
  return install_id_;
}
inline void CTPOrderField::set_install_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  install_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.install_id)
}

// int32 order_submit_status = 29;
inline void CTPOrderField::clear_order_submit_status() {
  order_submit_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::order_submit_status() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.order_submit_status)
  return order_submit_status_;
}
inline void CTPOrderField::set_order_submit_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_submit_status_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.order_submit_status)
}

// int32 notify_sequence = 30;
inline void CTPOrderField::clear_notify_sequence() {
  notify_sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::notify_sequence() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.notify_sequence)
  return notify_sequence_;
}
inline void CTPOrderField::set_notify_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  notify_sequence_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.notify_sequence)
}

// int32 trading_day = 31;
inline void CTPOrderField::clear_trading_day() {
  trading_day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.trading_day)
  return trading_day_;
}
inline void CTPOrderField::set_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.trading_day)
}

// int32 settlement_id = 32;
inline void CTPOrderField::clear_settlement_id() {
  settlement_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::settlement_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.settlement_id)
  return settlement_id_;
}
inline void CTPOrderField::set_settlement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settlement_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.settlement_id)
}

// string order_sys_id = 33;
inline void CTPOrderField::clear_order_sys_id() {
  order_sys_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::order_sys_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.order_sys_id)
  return order_sys_id_.GetNoArena();
}
inline void CTPOrderField::set_order_sys_id(const std::string& value) {
  
  order_sys_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.order_sys_id)
}
inline void CTPOrderField::set_order_sys_id(std::string&& value) {
  
  order_sys_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.order_sys_id)
}
inline void CTPOrderField::set_order_sys_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_sys_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.order_sys_id)
}
inline void CTPOrderField::set_order_sys_id(const char* value, size_t size) {
  
  order_sys_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.order_sys_id)
}
inline std::string* CTPOrderField::mutable_order_sys_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.order_sys_id)
  return order_sys_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.order_sys_id)
  
  return order_sys_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_sys_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.order_sys_id)
}

// int32 order_source = 34;
inline void CTPOrderField::clear_order_source() {
  order_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::order_source() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.order_source)
  return order_source_;
}
inline void CTPOrderField::set_order_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_source_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.order_source)
}

// int32 order_status = 35;
inline void CTPOrderField::clear_order_status() {
  order_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::order_status() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.order_status)
  return order_status_;
}
inline void CTPOrderField::set_order_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_status_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.order_status)
}

// int32 order_type = 36;
inline void CTPOrderField::clear_order_type() {
  order_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::order_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.order_type)
  return order_type_;
}
inline void CTPOrderField::set_order_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.order_type)
}

// int32 volume_traded = 37;
inline void CTPOrderField::clear_volume_traded() {
  volume_traded_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::volume_traded() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.volume_traded)
  return volume_traded_;
}
inline void CTPOrderField::set_volume_traded(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_traded_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.volume_traded)
}

// int32 volume_total = 38;
inline void CTPOrderField::clear_volume_total() {
  volume_total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::volume_total() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.volume_total)
  return volume_total_;
}
inline void CTPOrderField::set_volume_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_total_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.volume_total)
}

// string insert_date = 39;
inline void CTPOrderField::clear_insert_date() {
  insert_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::insert_date() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.insert_date)
  return insert_date_.GetNoArena();
}
inline void CTPOrderField::set_insert_date(const std::string& value) {
  
  insert_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.insert_date)
}
inline void CTPOrderField::set_insert_date(std::string&& value) {
  
  insert_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.insert_date)
}
inline void CTPOrderField::set_insert_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  insert_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.insert_date)
}
inline void CTPOrderField::set_insert_date(const char* value, size_t size) {
  
  insert_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.insert_date)
}
inline std::string* CTPOrderField::mutable_insert_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.insert_date)
  return insert_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_insert_date() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.insert_date)
  
  return insert_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_insert_date(std::string* insert_date) {
  if (insert_date != nullptr) {
    
  } else {
    
  }
  insert_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insert_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.insert_date)
}

// string insert_time = 40;
inline void CTPOrderField::clear_insert_time() {
  insert_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::insert_time() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.insert_time)
  return insert_time_.GetNoArena();
}
inline void CTPOrderField::set_insert_time(const std::string& value) {
  
  insert_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.insert_time)
}
inline void CTPOrderField::set_insert_time(std::string&& value) {
  
  insert_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.insert_time)
}
inline void CTPOrderField::set_insert_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  insert_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.insert_time)
}
inline void CTPOrderField::set_insert_time(const char* value, size_t size) {
  
  insert_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.insert_time)
}
inline std::string* CTPOrderField::mutable_insert_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.insert_time)
  return insert_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_insert_time() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.insert_time)
  
  return insert_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_insert_time(std::string* insert_time) {
  if (insert_time != nullptr) {
    
  } else {
    
  }
  insert_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insert_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.insert_time)
}

// string active_time = 41;
inline void CTPOrderField::clear_active_time() {
  active_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::active_time() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.active_time)
  return active_time_.GetNoArena();
}
inline void CTPOrderField::set_active_time(const std::string& value) {
  
  active_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.active_time)
}
inline void CTPOrderField::set_active_time(std::string&& value) {
  
  active_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.active_time)
}
inline void CTPOrderField::set_active_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  active_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.active_time)
}
inline void CTPOrderField::set_active_time(const char* value, size_t size) {
  
  active_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.active_time)
}
inline std::string* CTPOrderField::mutable_active_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.active_time)
  return active_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_active_time() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.active_time)
  
  return active_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_active_time(std::string* active_time) {
  if (active_time != nullptr) {
    
  } else {
    
  }
  active_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.active_time)
}

// string suspend_time = 42;
inline void CTPOrderField::clear_suspend_time() {
  suspend_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::suspend_time() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.suspend_time)
  return suspend_time_.GetNoArena();
}
inline void CTPOrderField::set_suspend_time(const std::string& value) {
  
  suspend_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.suspend_time)
}
inline void CTPOrderField::set_suspend_time(std::string&& value) {
  
  suspend_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.suspend_time)
}
inline void CTPOrderField::set_suspend_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suspend_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.suspend_time)
}
inline void CTPOrderField::set_suspend_time(const char* value, size_t size) {
  
  suspend_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.suspend_time)
}
inline std::string* CTPOrderField::mutable_suspend_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.suspend_time)
  return suspend_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_suspend_time() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.suspend_time)
  
  return suspend_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_suspend_time(std::string* suspend_time) {
  if (suspend_time != nullptr) {
    
  } else {
    
  }
  suspend_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suspend_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.suspend_time)
}

// string update_time = 43;
inline void CTPOrderField::clear_update_time() {
  update_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::update_time() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.update_time)
  return update_time_.GetNoArena();
}
inline void CTPOrderField::set_update_time(const std::string& value) {
  
  update_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.update_time)
}
inline void CTPOrderField::set_update_time(std::string&& value) {
  
  update_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.update_time)
}
inline void CTPOrderField::set_update_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.update_time)
}
inline void CTPOrderField::set_update_time(const char* value, size_t size) {
  
  update_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.update_time)
}
inline std::string* CTPOrderField::mutable_update_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.update_time)
  return update_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_update_time() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.update_time)
  
  return update_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.update_time)
}

// string cancel_time = 44;
inline void CTPOrderField::clear_cancel_time() {
  cancel_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::cancel_time() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.cancel_time)
  return cancel_time_.GetNoArena();
}
inline void CTPOrderField::set_cancel_time(const std::string& value) {
  
  cancel_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.cancel_time)
}
inline void CTPOrderField::set_cancel_time(std::string&& value) {
  
  cancel_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.cancel_time)
}
inline void CTPOrderField::set_cancel_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cancel_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.cancel_time)
}
inline void CTPOrderField::set_cancel_time(const char* value, size_t size) {
  
  cancel_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.cancel_time)
}
inline std::string* CTPOrderField::mutable_cancel_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.cancel_time)
  return cancel_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_cancel_time() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.cancel_time)
  
  return cancel_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_cancel_time(std::string* cancel_time) {
  if (cancel_time != nullptr) {
    
  } else {
    
  }
  cancel_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cancel_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.cancel_time)
}

// string active_trader_id = 45;
inline void CTPOrderField::clear_active_trader_id() {
  active_trader_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::active_trader_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.active_trader_id)
  return active_trader_id_.GetNoArena();
}
inline void CTPOrderField::set_active_trader_id(const std::string& value) {
  
  active_trader_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.active_trader_id)
}
inline void CTPOrderField::set_active_trader_id(std::string&& value) {
  
  active_trader_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.active_trader_id)
}
inline void CTPOrderField::set_active_trader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  active_trader_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.active_trader_id)
}
inline void CTPOrderField::set_active_trader_id(const char* value, size_t size) {
  
  active_trader_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.active_trader_id)
}
inline std::string* CTPOrderField::mutable_active_trader_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.active_trader_id)
  return active_trader_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_active_trader_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.active_trader_id)
  
  return active_trader_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_active_trader_id(std::string* active_trader_id) {
  if (active_trader_id != nullptr) {
    
  } else {
    
  }
  active_trader_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_trader_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.active_trader_id)
}

// string clearing_part_id = 46;
inline void CTPOrderField::clear_clearing_part_id() {
  clearing_part_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::clearing_part_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.clearing_part_id)
  return clearing_part_id_.GetNoArena();
}
inline void CTPOrderField::set_clearing_part_id(const std::string& value) {
  
  clearing_part_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.clearing_part_id)
}
inline void CTPOrderField::set_clearing_part_id(std::string&& value) {
  
  clearing_part_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.clearing_part_id)
}
inline void CTPOrderField::set_clearing_part_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clearing_part_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.clearing_part_id)
}
inline void CTPOrderField::set_clearing_part_id(const char* value, size_t size) {
  
  clearing_part_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.clearing_part_id)
}
inline std::string* CTPOrderField::mutable_clearing_part_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.clearing_part_id)
  return clearing_part_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_clearing_part_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.clearing_part_id)
  
  return clearing_part_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_clearing_part_id(std::string* clearing_part_id) {
  if (clearing_part_id != nullptr) {
    
  } else {
    
  }
  clearing_part_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clearing_part_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.clearing_part_id)
}

// int32 sequence_no = 47;
inline void CTPOrderField::clear_sequence_no() {
  sequence_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::sequence_no() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.sequence_no)
  return sequence_no_;
}
inline void CTPOrderField::set_sequence_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.sequence_no)
}

// int32 front_id = 48;
inline void CTPOrderField::clear_front_id() {
  front_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::front_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.front_id)
  return front_id_;
}
inline void CTPOrderField::set_front_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  front_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.front_id)
}

// int32 session_id = 49;
inline void CTPOrderField::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::session_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.session_id)
  return session_id_;
}
inline void CTPOrderField::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.session_id)
}

// string user_product_info = 50;
inline void CTPOrderField::clear_user_product_info() {
  user_product_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::user_product_info() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.user_product_info)
  return user_product_info_.GetNoArena();
}
inline void CTPOrderField::set_user_product_info(const std::string& value) {
  
  user_product_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.user_product_info)
}
inline void CTPOrderField::set_user_product_info(std::string&& value) {
  
  user_product_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.user_product_info)
}
inline void CTPOrderField::set_user_product_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_product_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.user_product_info)
}
inline void CTPOrderField::set_user_product_info(const char* value, size_t size) {
  
  user_product_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.user_product_info)
}
inline std::string* CTPOrderField::mutable_user_product_info() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.user_product_info)
  return user_product_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_user_product_info() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.user_product_info)
  
  return user_product_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_user_product_info(std::string* user_product_info) {
  if (user_product_info != nullptr) {
    
  } else {
    
  }
  user_product_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_product_info);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.user_product_info)
}

// bytes status_msg = 51;
inline void CTPOrderField::clear_status_msg() {
  status_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::status_msg() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.status_msg)
  return status_msg_.GetNoArena();
}
inline void CTPOrderField::set_status_msg(const std::string& value) {
  
  status_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.status_msg)
}
inline void CTPOrderField::set_status_msg(std::string&& value) {
  
  status_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.status_msg)
}
inline void CTPOrderField::set_status_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.status_msg)
}
inline void CTPOrderField::set_status_msg(const void* value, size_t size) {
  
  status_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.status_msg)
}
inline std::string* CTPOrderField::mutable_status_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.status_msg)
  return status_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_status_msg() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.status_msg)
  
  return status_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_status_msg(std::string* status_msg) {
  if (status_msg != nullptr) {
    
  } else {
    
  }
  status_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.status_msg)
}

// bool user_force_close = 52;
inline void CTPOrderField::clear_user_force_close() {
  user_force_close_ = false;
}
inline bool CTPOrderField::user_force_close() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.user_force_close)
  return user_force_close_;
}
inline void CTPOrderField::set_user_force_close(bool value) {
  
  user_force_close_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.user_force_close)
}

// string active_user_id = 53;
inline void CTPOrderField::clear_active_user_id() {
  active_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::active_user_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.active_user_id)
  return active_user_id_.GetNoArena();
}
inline void CTPOrderField::set_active_user_id(const std::string& value) {
  
  active_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.active_user_id)
}
inline void CTPOrderField::set_active_user_id(std::string&& value) {
  
  active_user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.active_user_id)
}
inline void CTPOrderField::set_active_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  active_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.active_user_id)
}
inline void CTPOrderField::set_active_user_id(const char* value, size_t size) {
  
  active_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.active_user_id)
}
inline std::string* CTPOrderField::mutable_active_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.active_user_id)
  return active_user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_active_user_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.active_user_id)
  
  return active_user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_active_user_id(std::string* active_user_id) {
  if (active_user_id != nullptr) {
    
  } else {
    
  }
  active_user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.active_user_id)
}

// int32 broker_order_seq = 54;
inline void CTPOrderField::clear_broker_order_seq() {
  broker_order_seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::broker_order_seq() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.broker_order_seq)
  return broker_order_seq_;
}
inline void CTPOrderField::set_broker_order_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  broker_order_seq_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.broker_order_seq)
}

// string relative_order_sys_id = 55;
inline void CTPOrderField::clear_relative_order_sys_id() {
  relative_order_sys_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::relative_order_sys_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.relative_order_sys_id)
  return relative_order_sys_id_.GetNoArena();
}
inline void CTPOrderField::set_relative_order_sys_id(const std::string& value) {
  
  relative_order_sys_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.relative_order_sys_id)
}
inline void CTPOrderField::set_relative_order_sys_id(std::string&& value) {
  
  relative_order_sys_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.relative_order_sys_id)
}
inline void CTPOrderField::set_relative_order_sys_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  relative_order_sys_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.relative_order_sys_id)
}
inline void CTPOrderField::set_relative_order_sys_id(const char* value, size_t size) {
  
  relative_order_sys_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.relative_order_sys_id)
}
inline std::string* CTPOrderField::mutable_relative_order_sys_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.relative_order_sys_id)
  return relative_order_sys_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_relative_order_sys_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.relative_order_sys_id)
  
  return relative_order_sys_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_relative_order_sys_id(std::string* relative_order_sys_id) {
  if (relative_order_sys_id != nullptr) {
    
  } else {
    
  }
  relative_order_sys_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relative_order_sys_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.relative_order_sys_id)
}

// int32 ZCE_total_traded_volume = 56;
inline void CTPOrderField::clear_zce_total_traded_volume() {
  zce_total_traded_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOrderField::zce_total_traded_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.ZCE_total_traded_volume)
  return zce_total_traded_volume_;
}
inline void CTPOrderField::set_zce_total_traded_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zce_total_traded_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.ZCE_total_traded_volume)
}

// bool is_swap_order = 57;
inline void CTPOrderField::clear_is_swap_order() {
  is_swap_order_ = false;
}
inline bool CTPOrderField::is_swap_order() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.is_swap_order)
  return is_swap_order_;
}
inline void CTPOrderField::set_is_swap_order(bool value) {
  
  is_swap_order_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.is_swap_order)
}

// string branch_id = 58;
inline void CTPOrderField::clear_branch_id() {
  branch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::branch_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.branch_id)
  return branch_id_.GetNoArena();
}
inline void CTPOrderField::set_branch_id(const std::string& value) {
  
  branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.branch_id)
}
inline void CTPOrderField::set_branch_id(std::string&& value) {
  
  branch_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.branch_id)
}
inline void CTPOrderField::set_branch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.branch_id)
}
inline void CTPOrderField::set_branch_id(const char* value, size_t size) {
  
  branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.branch_id)
}
inline std::string* CTPOrderField::mutable_branch_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.branch_id)
  return branch_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_branch_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.branch_id)
  
  return branch_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_branch_id(std::string* branch_id) {
  if (branch_id != nullptr) {
    
  } else {
    
  }
  branch_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.branch_id)
}

// string invest_unit_id = 59;
inline void CTPOrderField::clear_invest_unit_id() {
  invest_unit_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::invest_unit_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.invest_unit_id)
  return invest_unit_id_.GetNoArena();
}
inline void CTPOrderField::set_invest_unit_id(const std::string& value) {
  
  invest_unit_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.invest_unit_id)
}
inline void CTPOrderField::set_invest_unit_id(std::string&& value) {
  
  invest_unit_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.invest_unit_id)
}
inline void CTPOrderField::set_invest_unit_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invest_unit_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.invest_unit_id)
}
inline void CTPOrderField::set_invest_unit_id(const char* value, size_t size) {
  
  invest_unit_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.invest_unit_id)
}
inline std::string* CTPOrderField::mutable_invest_unit_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.invest_unit_id)
  return invest_unit_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_invest_unit_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.invest_unit_id)
  
  return invest_unit_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_invest_unit_id(std::string* invest_unit_id) {
  if (invest_unit_id != nullptr) {
    
  } else {
    
  }
  invest_unit_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invest_unit_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.invest_unit_id)
}

// string account_id = 60;
inline void CTPOrderField::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::account_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.account_id)
  return account_id_.GetNoArena();
}
inline void CTPOrderField::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.account_id)
}
inline void CTPOrderField::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.account_id)
}
inline void CTPOrderField::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.account_id)
}
inline void CTPOrderField::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.account_id)
}
inline std::string* CTPOrderField::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_account_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.account_id)
}

// string currency_id = 61;
inline void CTPOrderField::clear_currency_id() {
  currency_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::currency_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.currency_id)
  return currency_id_.GetNoArena();
}
inline void CTPOrderField::set_currency_id(const std::string& value) {
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.currency_id)
}
inline void CTPOrderField::set_currency_id(std::string&& value) {
  
  currency_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.currency_id)
}
inline void CTPOrderField::set_currency_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.currency_id)
}
inline void CTPOrderField::set_currency_id(const char* value, size_t size) {
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.currency_id)
}
inline std::string* CTPOrderField::mutable_currency_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.currency_id)
  return currency_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_currency_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.currency_id)
  
  return currency_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_currency_id(std::string* currency_id) {
  if (currency_id != nullptr) {
    
  } else {
    
  }
  currency_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.currency_id)
}

// string IP_address = 62;
inline void CTPOrderField::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::ip_address() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.IP_address)
  return ip_address_.GetNoArena();
}
inline void CTPOrderField::set_ip_address(const std::string& value) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.IP_address)
}
inline void CTPOrderField::set_ip_address(std::string&& value) {
  
  ip_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.IP_address)
}
inline void CTPOrderField::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.IP_address)
}
inline void CTPOrderField::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.IP_address)
}
inline std::string* CTPOrderField::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.IP_address)
  return ip_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_ip_address() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.IP_address)
  
  return ip_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.IP_address)
}

// string Mac_address = 63;
inline void CTPOrderField::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOrderField::mac_address() const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderField.Mac_address)
  return mac_address_.GetNoArena();
}
inline void CTPOrderField::set_mac_address(const std::string& value) {
  
  mac_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOrderField.Mac_address)
}
inline void CTPOrderField::set_mac_address(std::string&& value) {
  
  mac_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOrderField.Mac_address)
}
inline void CTPOrderField::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOrderField.Mac_address)
}
inline void CTPOrderField::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOrderField.Mac_address)
}
inline std::string* CTPOrderField::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderField.Mac_address)
  return mac_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOrderField::release_mac_address() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderField.Mac_address)
  
  return mac_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOrderField::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderField.Mac_address)
}

// -------------------------------------------------------------------

// CTPOrderList

// repeated .pb.CTPOrderField list = 1;
inline int CTPOrderList::list_size() const {
  return list_.size();
}
inline void CTPOrderList::clear_list() {
  list_.Clear();
}
inline ::pb::CTPOrderField* CTPOrderList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >*
CTPOrderList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPOrderList.list)
  return &list_;
}
inline const ::pb::CTPOrderField& CTPOrderList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderList.list)
  return list_.Get(index);
}
inline ::pb::CTPOrderField* CTPOrderList::add_list() {
  // @@protoc_insertion_point(field_add:pb.CTPOrderList.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >&
CTPOrderList::list() const {
  // @@protoc_insertion_point(field_list:pb.CTPOrderList.list)
  return list_;
}

// -------------------------------------------------------------------

// CTPOrderLink

// .pb.CTPOrderField parent = 1;
inline bool CTPOrderLink::has_parent() const {
  return this != internal_default_instance() && parent_ != nullptr;
}
inline void CTPOrderLink::clear_parent() {
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
}
inline const ::pb::CTPOrderField& CTPOrderLink::parent() const {
  const ::pb::CTPOrderField* p = parent_;
  // @@protoc_insertion_point(field_get:pb.CTPOrderLink.parent)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPOrderField*>(
      &::pb::_CTPOrderField_default_instance_);
}
inline ::pb::CTPOrderField* CTPOrderLink::release_parent() {
  // @@protoc_insertion_point(field_release:pb.CTPOrderLink.parent)
  
  ::pb::CTPOrderField* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::pb::CTPOrderField* CTPOrderLink::mutable_parent() {
  
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPOrderField>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderLink.parent)
  return parent_;
}
inline void CTPOrderLink::set_allocated_parent(::pb::CTPOrderField* parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_;
  }
  if (parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    
  } else {
    
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOrderLink.parent)
}

// repeated .pb.CTPOrderField children = 2;
inline int CTPOrderLink::children_size() const {
  return children_.size();
}
inline void CTPOrderLink::clear_children() {
  children_.Clear();
}
inline ::pb::CTPOrderField* CTPOrderLink::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPOrderLink.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >*
CTPOrderLink::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPOrderLink.children)
  return &children_;
}
inline const ::pb::CTPOrderField& CTPOrderLink::children(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPOrderLink.children)
  return children_.Get(index);
}
inline ::pb::CTPOrderField* CTPOrderLink::add_children() {
  // @@protoc_insertion_point(field_add:pb.CTPOrderLink.children)
  return children_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >&
CTPOrderLink::children() const {
  // @@protoc_insertion_point(field_list:pb.CTPOrderLink.children)
  return children_;
}

// -------------------------------------------------------------------

// CTPCancelOrderRequest

// string account_id = 1;
inline void CTPCancelOrderRequest::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCancelOrderRequest::account_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCancelOrderRequest.account_id)
  return account_id_.GetNoArena();
}
inline void CTPCancelOrderRequest::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCancelOrderRequest.account_id)
}
inline void CTPCancelOrderRequest::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCancelOrderRequest.account_id)
}
inline void CTPCancelOrderRequest::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCancelOrderRequest.account_id)
}
inline void CTPCancelOrderRequest::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCancelOrderRequest.account_id)
}
inline std::string* CTPCancelOrderRequest::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCancelOrderRequest.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCancelOrderRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:pb.CTPCancelOrderRequest.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCancelOrderRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCancelOrderRequest.account_id)
}

// .pb.CTPOrderID CTPOrderID = 2;
inline bool CTPCancelOrderRequest::has_ctporderid() const {
  return this != internal_default_instance() && ctporderid_ != nullptr;
}
inline void CTPCancelOrderRequest::clear_ctporderid() {
  if (GetArenaNoVirtual() == nullptr && ctporderid_ != nullptr) {
    delete ctporderid_;
  }
  ctporderid_ = nullptr;
}
inline const ::pb::CTPOrderID& CTPCancelOrderRequest::ctporderid() const {
  const ::pb::CTPOrderID* p = ctporderid_;
  // @@protoc_insertion_point(field_get:pb.CTPCancelOrderRequest.CTPOrderID)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPOrderID*>(
      &::pb::_CTPOrderID_default_instance_);
}
inline ::pb::CTPOrderID* CTPCancelOrderRequest::release_ctporderid() {
  // @@protoc_insertion_point(field_release:pb.CTPCancelOrderRequest.CTPOrderID)
  
  ::pb::CTPOrderID* temp = ctporderid_;
  ctporderid_ = nullptr;
  return temp;
}
inline ::pb::CTPOrderID* CTPCancelOrderRequest::mutable_ctporderid() {
  
  if (ctporderid_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPOrderID>(GetArenaNoVirtual());
    ctporderid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPCancelOrderRequest.CTPOrderID)
  return ctporderid_;
}
inline void CTPCancelOrderRequest::set_allocated_ctporderid(::pb::CTPOrderID* ctporderid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctporderid_;
  }
  if (ctporderid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctporderid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctporderid, submessage_arena);
    }
    
  } else {
    
  }
  ctporderid_ = ctporderid;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCancelOrderRequest.CTPOrderID)
}

// .pb.Symbol symbol = 3;
inline bool CTPCancelOrderRequest::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& CTPCancelOrderRequest::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.CTPCancelOrderRequest.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* CTPCancelOrderRequest::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.CTPCancelOrderRequest.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* CTPCancelOrderRequest::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPCancelOrderRequest.symbol)
  return symbol_;
}
inline void CTPCancelOrderRequest::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCancelOrderRequest.symbol)
}

// int32 request_id = 4;
inline void CTPCancelOrderRequest::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCancelOrderRequest::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCancelOrderRequest.request_id)
  return request_id_;
}
inline void CTPCancelOrderRequest::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCancelOrderRequest.request_id)
}

// int32 front_id = 5;
inline void CTPCancelOrderRequest::clear_front_id() {
  front_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCancelOrderRequest::front_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCancelOrderRequest.front_id)
  return front_id_;
}
inline void CTPCancelOrderRequest::set_front_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  front_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCancelOrderRequest.front_id)
}

// int32 session_id = 6;
inline void CTPCancelOrderRequest::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCancelOrderRequest::session_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCancelOrderRequest.session_id)
  return session_id_;
}
inline void CTPCancelOrderRequest::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCancelOrderRequest.session_id)
}

// string exchange_order_id = 7;
inline void CTPCancelOrderRequest::clear_exchange_order_id() {
  exchange_order_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCancelOrderRequest::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCancelOrderRequest.exchange_order_id)
  return exchange_order_id_.GetNoArena();
}
inline void CTPCancelOrderRequest::set_exchange_order_id(const std::string& value) {
  
  exchange_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCancelOrderRequest.exchange_order_id)
}
inline void CTPCancelOrderRequest::set_exchange_order_id(std::string&& value) {
  
  exchange_order_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCancelOrderRequest.exchange_order_id)
}
inline void CTPCancelOrderRequest::set_exchange_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCancelOrderRequest.exchange_order_id)
}
inline void CTPCancelOrderRequest::set_exchange_order_id(const char* value, size_t size) {
  
  exchange_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCancelOrderRequest.exchange_order_id)
}
inline std::string* CTPCancelOrderRequest::mutable_exchange_order_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCancelOrderRequest.exchange_order_id)
  return exchange_order_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCancelOrderRequest::release_exchange_order_id() {
  // @@protoc_insertion_point(field_release:pb.CTPCancelOrderRequest.exchange_order_id)
  
  return exchange_order_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCancelOrderRequest::set_allocated_exchange_order_id(std::string* exchange_order_id) {
  if (exchange_order_id != nullptr) {
    
  } else {
    
  }
  exchange_order_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_order_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCancelOrderRequest.exchange_order_id)
}

// string token = 8;
inline void CTPCancelOrderRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCancelOrderRequest::token() const {
  // @@protoc_insertion_point(field_get:pb.CTPCancelOrderRequest.token)
  return token_.GetNoArena();
}
inline void CTPCancelOrderRequest::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCancelOrderRequest.token)
}
inline void CTPCancelOrderRequest::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCancelOrderRequest.token)
}
inline void CTPCancelOrderRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCancelOrderRequest.token)
}
inline void CTPCancelOrderRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCancelOrderRequest.token)
}
inline std::string* CTPCancelOrderRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCancelOrderRequest.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCancelOrderRequest::release_token() {
  // @@protoc_insertion_point(field_release:pb.CTPCancelOrderRequest.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCancelOrderRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCancelOrderRequest.token)
}

// string route_account_id = 9;
inline void CTPCancelOrderRequest::clear_route_account_id() {
  route_account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCancelOrderRequest::route_account_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCancelOrderRequest.route_account_id)
  return route_account_id_.GetNoArena();
}
inline void CTPCancelOrderRequest::set_route_account_id(const std::string& value) {
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCancelOrderRequest.route_account_id)
}
inline void CTPCancelOrderRequest::set_route_account_id(std::string&& value) {
  
  route_account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCancelOrderRequest.route_account_id)
}
inline void CTPCancelOrderRequest::set_route_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCancelOrderRequest.route_account_id)
}
inline void CTPCancelOrderRequest::set_route_account_id(const char* value, size_t size) {
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCancelOrderRequest.route_account_id)
}
inline std::string* CTPCancelOrderRequest::mutable_route_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCancelOrderRequest.route_account_id)
  return route_account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCancelOrderRequest::release_route_account_id() {
  // @@protoc_insertion_point(field_release:pb.CTPCancelOrderRequest.route_account_id)
  
  return route_account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCancelOrderRequest::set_allocated_route_account_id(std::string* route_account_id) {
  if (route_account_id != nullptr) {
    
  } else {
    
  }
  route_account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route_account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCancelOrderRequest.route_account_id)
}

// -------------------------------------------------------------------

// CTPOnRtnCancelOrder

// string account_id = 1;
inline void CTPOnRtnCancelOrder::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOnRtnCancelOrder::account_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOnRtnCancelOrder.account_id)
  return account_id_.GetNoArena();
}
inline void CTPOnRtnCancelOrder::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOnRtnCancelOrder.account_id)
}
inline void CTPOnRtnCancelOrder::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOnRtnCancelOrder.account_id)
}
inline void CTPOnRtnCancelOrder::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOnRtnCancelOrder.account_id)
}
inline void CTPOnRtnCancelOrder::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOnRtnCancelOrder.account_id)
}
inline std::string* CTPOnRtnCancelOrder::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOnRtnCancelOrder.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOnRtnCancelOrder::release_account_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOnRtnCancelOrder.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOnRtnCancelOrder::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOnRtnCancelOrder.account_id)
}

// .pb.CTPOrderID order_id = 2;
inline bool CTPOnRtnCancelOrder::has_order_id() const {
  return this != internal_default_instance() && order_id_ != nullptr;
}
inline void CTPOnRtnCancelOrder::clear_order_id() {
  if (GetArenaNoVirtual() == nullptr && order_id_ != nullptr) {
    delete order_id_;
  }
  order_id_ = nullptr;
}
inline const ::pb::CTPOrderID& CTPOnRtnCancelOrder::order_id() const {
  const ::pb::CTPOrderID* p = order_id_;
  // @@protoc_insertion_point(field_get:pb.CTPOnRtnCancelOrder.order_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPOrderID*>(
      &::pb::_CTPOrderID_default_instance_);
}
inline ::pb::CTPOrderID* CTPOnRtnCancelOrder::release_order_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOnRtnCancelOrder.order_id)
  
  ::pb::CTPOrderID* temp = order_id_;
  order_id_ = nullptr;
  return temp;
}
inline ::pb::CTPOrderID* CTPOnRtnCancelOrder::mutable_order_id() {
  
  if (order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPOrderID>(GetArenaNoVirtual());
    order_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPOnRtnCancelOrder.order_id)
  return order_id_;
}
inline void CTPOnRtnCancelOrder::set_allocated_order_id(::pb::CTPOrderID* order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete order_id_;
  }
  if (order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_id, submessage_arena);
    }
    
  } else {
    
  }
  order_id_ = order_id;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOnRtnCancelOrder.order_id)
}

// string exchange_order_id = 3;
inline void CTPOnRtnCancelOrder::clear_exchange_order_id() {
  exchange_order_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOnRtnCancelOrder::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOnRtnCancelOrder.exchange_order_id)
  return exchange_order_id_.GetNoArena();
}
inline void CTPOnRtnCancelOrder::set_exchange_order_id(const std::string& value) {
  
  exchange_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOnRtnCancelOrder.exchange_order_id)
}
inline void CTPOnRtnCancelOrder::set_exchange_order_id(std::string&& value) {
  
  exchange_order_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOnRtnCancelOrder.exchange_order_id)
}
inline void CTPOnRtnCancelOrder::set_exchange_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOnRtnCancelOrder.exchange_order_id)
}
inline void CTPOnRtnCancelOrder::set_exchange_order_id(const char* value, size_t size) {
  
  exchange_order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOnRtnCancelOrder.exchange_order_id)
}
inline std::string* CTPOnRtnCancelOrder::mutable_exchange_order_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOnRtnCancelOrder.exchange_order_id)
  return exchange_order_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOnRtnCancelOrder::release_exchange_order_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOnRtnCancelOrder.exchange_order_id)
  
  return exchange_order_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOnRtnCancelOrder::set_allocated_exchange_order_id(std::string* exchange_order_id) {
  if (exchange_order_id != nullptr) {
    
  } else {
    
  }
  exchange_order_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_order_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOnRtnCancelOrder.exchange_order_id)
}

// .pb.Symbol symbol = 4;
inline bool CTPOnRtnCancelOrder::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& CTPOnRtnCancelOrder::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.CTPOnRtnCancelOrder.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* CTPOnRtnCancelOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.CTPOnRtnCancelOrder.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* CTPOnRtnCancelOrder::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPOnRtnCancelOrder.symbol)
  return symbol_;
}
inline void CTPOnRtnCancelOrder::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOnRtnCancelOrder.symbol)
}

// int32 request_id = 5;
inline void CTPOnRtnCancelOrder::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOnRtnCancelOrder::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOnRtnCancelOrder.request_id)
  return request_id_;
}
inline void CTPOnRtnCancelOrder::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOnRtnCancelOrder.request_id)
}

// int32 error_type = 6;
inline void CTPOnRtnCancelOrder::clear_error_type() {
  error_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOnRtnCancelOrder::error_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPOnRtnCancelOrder.error_type)
  return error_type_;
}
inline void CTPOnRtnCancelOrder::set_error_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOnRtnCancelOrder.error_type)
}

// int32 error = 7;
inline void CTPOnRtnCancelOrder::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOnRtnCancelOrder::error() const {
  // @@protoc_insertion_point(field_get:pb.CTPOnRtnCancelOrder.error)
  return error_;
}
inline void CTPOnRtnCancelOrder::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOnRtnCancelOrder.error)
}

// string msg = 8;
inline void CTPOnRtnCancelOrder::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOnRtnCancelOrder::msg() const {
  // @@protoc_insertion_point(field_get:pb.CTPOnRtnCancelOrder.msg)
  return msg_.GetNoArena();
}
inline void CTPOnRtnCancelOrder::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOnRtnCancelOrder.msg)
}
inline void CTPOnRtnCancelOrder::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOnRtnCancelOrder.msg)
}
inline void CTPOnRtnCancelOrder::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOnRtnCancelOrder.msg)
}
inline void CTPOnRtnCancelOrder::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOnRtnCancelOrder.msg)
}
inline std::string* CTPOnRtnCancelOrder::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOnRtnCancelOrder.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOnRtnCancelOrder::release_msg() {
  // @@protoc_insertion_point(field_release:pb.CTPOnRtnCancelOrder.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOnRtnCancelOrder::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOnRtnCancelOrder.msg)
}

// string route_account_id = 9;
inline void CTPOnRtnCancelOrder::clear_route_account_id() {
  route_account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOnRtnCancelOrder::route_account_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOnRtnCancelOrder.route_account_id)
  return route_account_id_.GetNoArena();
}
inline void CTPOnRtnCancelOrder::set_route_account_id(const std::string& value) {
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOnRtnCancelOrder.route_account_id)
}
inline void CTPOnRtnCancelOrder::set_route_account_id(std::string&& value) {
  
  route_account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOnRtnCancelOrder.route_account_id)
}
inline void CTPOnRtnCancelOrder::set_route_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOnRtnCancelOrder.route_account_id)
}
inline void CTPOnRtnCancelOrder::set_route_account_id(const char* value, size_t size) {
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOnRtnCancelOrder.route_account_id)
}
inline std::string* CTPOnRtnCancelOrder::mutable_route_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOnRtnCancelOrder.route_account_id)
  return route_account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOnRtnCancelOrder::release_route_account_id() {
  // @@protoc_insertion_point(field_release:pb.CTPOnRtnCancelOrder.route_account_id)
  
  return route_account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOnRtnCancelOrder::set_allocated_route_account_id(std::string* route_account_id) {
  if (route_account_id != nullptr) {
    
  } else {
    
  }
  route_account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route_account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOnRtnCancelOrder.route_account_id)
}

// -------------------------------------------------------------------

// CTPTradeField

// string broker_id = 1;
inline void CTPTradeField::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.broker_id)
  return broker_id_.GetNoArena();
}
inline void CTPTradeField::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.broker_id)
}
inline void CTPTradeField::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.broker_id)
}
inline void CTPTradeField::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.broker_id)
}
inline void CTPTradeField::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.broker_id)
}
inline std::string* CTPTradeField::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.broker_id)
}

// string investor_id = 2;
inline void CTPTradeField::clear_investor_id() {
  investor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::investor_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.investor_id)
  return investor_id_.GetNoArena();
}
inline void CTPTradeField::set_investor_id(const std::string& value) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.investor_id)
}
inline void CTPTradeField::set_investor_id(std::string&& value) {
  
  investor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.investor_id)
}
inline void CTPTradeField::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.investor_id)
}
inline void CTPTradeField::set_investor_id(const char* value, size_t size) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.investor_id)
}
inline std::string* CTPTradeField::mutable_investor_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.investor_id)
  return investor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_investor_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.investor_id)
  
  return investor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.investor_id)
}

// string instrument_id = 3;
inline void CTPTradeField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::instrument_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void CTPTradeField::set_instrument_id(const std::string& value) {
  
  instrument_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.instrument_id)
}
inline void CTPTradeField::set_instrument_id(std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.instrument_id)
}
inline void CTPTradeField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.instrument_id)
}
inline void CTPTradeField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.instrument_id)
}
inline std::string* CTPTradeField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.instrument_id)
  return instrument_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.instrument_id)
}

// string order_ref = 4;
inline void CTPTradeField::clear_order_ref() {
  order_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::order_ref() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.order_ref)
  return order_ref_.GetNoArena();
}
inline void CTPTradeField::set_order_ref(const std::string& value) {
  
  order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.order_ref)
}
inline void CTPTradeField::set_order_ref(std::string&& value) {
  
  order_ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.order_ref)
}
inline void CTPTradeField::set_order_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.order_ref)
}
inline void CTPTradeField::set_order_ref(const char* value, size_t size) {
  
  order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.order_ref)
}
inline std::string* CTPTradeField::mutable_order_ref() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.order_ref)
  return order_ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_order_ref() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.order_ref)
  
  return order_ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_order_ref(std::string* order_ref) {
  if (order_ref != nullptr) {
    
  } else {
    
  }
  order_ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_ref);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.order_ref)
}

// string user_id = 5;
inline void CTPTradeField::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::user_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.user_id)
  return user_id_.GetNoArena();
}
inline void CTPTradeField::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.user_id)
}
inline void CTPTradeField::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.user_id)
}
inline void CTPTradeField::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.user_id)
}
inline void CTPTradeField::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.user_id)
}
inline std::string* CTPTradeField::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.user_id)
}

// string exchange_id = 6;
inline void CTPTradeField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::exchange_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void CTPTradeField::set_exchange_id(const std::string& value) {
  
  exchange_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.exchange_id)
}
inline void CTPTradeField::set_exchange_id(std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.exchange_id)
}
inline void CTPTradeField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.exchange_id)
}
inline void CTPTradeField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.exchange_id)
}
inline std::string* CTPTradeField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.exchange_id)
  return exchange_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.exchange_id)
}

// string trade_id = 7;
inline void CTPTradeField::clear_trade_id() {
  trade_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::trade_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.trade_id)
  return trade_id_.GetNoArena();
}
inline void CTPTradeField::set_trade_id(const std::string& value) {
  
  trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.trade_id)
}
inline void CTPTradeField::set_trade_id(std::string&& value) {
  
  trade_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.trade_id)
}
inline void CTPTradeField::set_trade_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.trade_id)
}
inline void CTPTradeField::set_trade_id(const char* value, size_t size) {
  
  trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.trade_id)
}
inline std::string* CTPTradeField::mutable_trade_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.trade_id)
  return trade_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_trade_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.trade_id)
  
  return trade_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.trade_id)
}

// int32 direction = 8;
inline void CTPTradeField::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::direction() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.direction)
  return direction_;
}
inline void CTPTradeField::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.direction)
}

// string order_sys_id = 9;
inline void CTPTradeField::clear_order_sys_id() {
  order_sys_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::order_sys_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.order_sys_id)
  return order_sys_id_.GetNoArena();
}
inline void CTPTradeField::set_order_sys_id(const std::string& value) {
  
  order_sys_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.order_sys_id)
}
inline void CTPTradeField::set_order_sys_id(std::string&& value) {
  
  order_sys_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.order_sys_id)
}
inline void CTPTradeField::set_order_sys_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_sys_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.order_sys_id)
}
inline void CTPTradeField::set_order_sys_id(const char* value, size_t size) {
  
  order_sys_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.order_sys_id)
}
inline std::string* CTPTradeField::mutable_order_sys_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.order_sys_id)
  return order_sys_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.order_sys_id)
  
  return order_sys_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_sys_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.order_sys_id)
}

// string participant_id = 10;
inline void CTPTradeField::clear_participant_id() {
  participant_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::participant_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.participant_id)
  return participant_id_.GetNoArena();
}
inline void CTPTradeField::set_participant_id(const std::string& value) {
  
  participant_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.participant_id)
}
inline void CTPTradeField::set_participant_id(std::string&& value) {
  
  participant_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.participant_id)
}
inline void CTPTradeField::set_participant_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  participant_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.participant_id)
}
inline void CTPTradeField::set_participant_id(const char* value, size_t size) {
  
  participant_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.participant_id)
}
inline std::string* CTPTradeField::mutable_participant_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.participant_id)
  return participant_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_participant_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.participant_id)
  
  return participant_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_participant_id(std::string* participant_id) {
  if (participant_id != nullptr) {
    
  } else {
    
  }
  participant_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participant_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.participant_id)
}

// string client_id = 11;
inline void CTPTradeField::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::client_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.client_id)
  return client_id_.GetNoArena();
}
inline void CTPTradeField::set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.client_id)
}
inline void CTPTradeField::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.client_id)
}
inline void CTPTradeField::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.client_id)
}
inline void CTPTradeField::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.client_id)
}
inline std::string* CTPTradeField::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.client_id)
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_client_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.client_id)
}

// int32 trading_role = 12;
inline void CTPTradeField::clear_trading_role() {
  trading_role_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::trading_role() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.trading_role)
  return trading_role_;
}
inline void CTPTradeField::set_trading_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trading_role_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.trading_role)
}

// string exchange_inst_id = 13;
inline void CTPTradeField::clear_exchange_inst_id() {
  exchange_inst_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::exchange_inst_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.exchange_inst_id)
  return exchange_inst_id_.GetNoArena();
}
inline void CTPTradeField::set_exchange_inst_id(const std::string& value) {
  
  exchange_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.exchange_inst_id)
}
inline void CTPTradeField::set_exchange_inst_id(std::string&& value) {
  
  exchange_inst_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.exchange_inst_id)
}
inline void CTPTradeField::set_exchange_inst_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.exchange_inst_id)
}
inline void CTPTradeField::set_exchange_inst_id(const char* value, size_t size) {
  
  exchange_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.exchange_inst_id)
}
inline std::string* CTPTradeField::mutable_exchange_inst_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.exchange_inst_id)
  return exchange_inst_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_exchange_inst_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.exchange_inst_id)
  
  return exchange_inst_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_exchange_inst_id(std::string* exchange_inst_id) {
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_inst_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.exchange_inst_id)
}

// int32 offset_flag = 14;
inline void CTPTradeField::clear_offset_flag() {
  offset_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::offset_flag() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.offset_flag)
  return offset_flag_;
}
inline void CTPTradeField::set_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_flag_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.offset_flag)
}

// int32 hedge_flag = 15;
inline void CTPTradeField::clear_hedge_flag() {
  hedge_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::hedge_flag() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.hedge_flag)
  return hedge_flag_;
}
inline void CTPTradeField::set_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.hedge_flag)
}

// double price = 16;
inline void CTPTradeField::clear_price() {
  price_ = 0;
}
inline double CTPTradeField::price() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.price)
  return price_;
}
inline void CTPTradeField::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.price)
}

// int32 volume = 17;
inline void CTPTradeField::clear_volume() {
  volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.volume)
  return volume_;
}
inline void CTPTradeField::set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.volume)
}

// string trade_date = 18;
inline void CTPTradeField::clear_trade_date() {
  trade_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::trade_date() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.trade_date)
  return trade_date_.GetNoArena();
}
inline void CTPTradeField::set_trade_date(const std::string& value) {
  
  trade_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.trade_date)
}
inline void CTPTradeField::set_trade_date(std::string&& value) {
  
  trade_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.trade_date)
}
inline void CTPTradeField::set_trade_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.trade_date)
}
inline void CTPTradeField::set_trade_date(const char* value, size_t size) {
  
  trade_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.trade_date)
}
inline std::string* CTPTradeField::mutable_trade_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.trade_date)
  return trade_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_trade_date() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.trade_date)
  
  return trade_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_trade_date(std::string* trade_date) {
  if (trade_date != nullptr) {
    
  } else {
    
  }
  trade_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.trade_date)
}

// string trade_time = 19;
inline void CTPTradeField::clear_trade_time() {
  trade_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::trade_time() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.trade_time)
  return trade_time_.GetNoArena();
}
inline void CTPTradeField::set_trade_time(const std::string& value) {
  
  trade_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.trade_time)
}
inline void CTPTradeField::set_trade_time(std::string&& value) {
  
  trade_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.trade_time)
}
inline void CTPTradeField::set_trade_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.trade_time)
}
inline void CTPTradeField::set_trade_time(const char* value, size_t size) {
  
  trade_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.trade_time)
}
inline std::string* CTPTradeField::mutable_trade_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.trade_time)
  return trade_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_trade_time() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.trade_time)
  
  return trade_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_trade_time(std::string* trade_time) {
  if (trade_time != nullptr) {
    
  } else {
    
  }
  trade_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.trade_time)
}

// int32 trade_type = 20;
inline void CTPTradeField::clear_trade_type() {
  trade_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::trade_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.trade_type)
  return trade_type_;
}
inline void CTPTradeField::set_trade_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.trade_type)
}

// int32 price_source = 21;
inline void CTPTradeField::clear_price_source() {
  price_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::price_source() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.price_source)
  return price_source_;
}
inline void CTPTradeField::set_price_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_source_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.price_source)
}

// string trader_id = 22;
inline void CTPTradeField::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::trader_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.trader_id)
  return trader_id_.GetNoArena();
}
inline void CTPTradeField::set_trader_id(const std::string& value) {
  
  trader_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.trader_id)
}
inline void CTPTradeField::set_trader_id(std::string&& value) {
  
  trader_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.trader_id)
}
inline void CTPTradeField::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trader_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.trader_id)
}
inline void CTPTradeField::set_trader_id(const char* value, size_t size) {
  
  trader_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.trader_id)
}
inline std::string* CTPTradeField::mutable_trader_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.trader_id)
  return trader_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_trader_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.trader_id)
  
  return trader_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_trader_id(std::string* trader_id) {
  if (trader_id != nullptr) {
    
  } else {
    
  }
  trader_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.trader_id)
}

// string order_local_id = 23;
inline void CTPTradeField::clear_order_local_id() {
  order_local_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::order_local_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.order_local_id)
  return order_local_id_.GetNoArena();
}
inline void CTPTradeField::set_order_local_id(const std::string& value) {
  
  order_local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.order_local_id)
}
inline void CTPTradeField::set_order_local_id(std::string&& value) {
  
  order_local_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.order_local_id)
}
inline void CTPTradeField::set_order_local_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.order_local_id)
}
inline void CTPTradeField::set_order_local_id(const char* value, size_t size) {
  
  order_local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.order_local_id)
}
inline std::string* CTPTradeField::mutable_order_local_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.order_local_id)
  return order_local_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_order_local_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.order_local_id)
  
  return order_local_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_order_local_id(std::string* order_local_id) {
  if (order_local_id != nullptr) {
    
  } else {
    
  }
  order_local_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_local_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.order_local_id)
}

// string clearing_part_id = 24;
inline void CTPTradeField::clear_clearing_part_id() {
  clearing_part_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::clearing_part_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.clearing_part_id)
  return clearing_part_id_.GetNoArena();
}
inline void CTPTradeField::set_clearing_part_id(const std::string& value) {
  
  clearing_part_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.clearing_part_id)
}
inline void CTPTradeField::set_clearing_part_id(std::string&& value) {
  
  clearing_part_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.clearing_part_id)
}
inline void CTPTradeField::set_clearing_part_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clearing_part_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.clearing_part_id)
}
inline void CTPTradeField::set_clearing_part_id(const char* value, size_t size) {
  
  clearing_part_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.clearing_part_id)
}
inline std::string* CTPTradeField::mutable_clearing_part_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.clearing_part_id)
  return clearing_part_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_clearing_part_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.clearing_part_id)
  
  return clearing_part_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_clearing_part_id(std::string* clearing_part_id) {
  if (clearing_part_id != nullptr) {
    
  } else {
    
  }
  clearing_part_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clearing_part_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.clearing_part_id)
}

// string business_unit = 25;
inline void CTPTradeField::clear_business_unit() {
  business_unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::business_unit() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.business_unit)
  return business_unit_.GetNoArena();
}
inline void CTPTradeField::set_business_unit(const std::string& value) {
  
  business_unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.business_unit)
}
inline void CTPTradeField::set_business_unit(std::string&& value) {
  
  business_unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.business_unit)
}
inline void CTPTradeField::set_business_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  business_unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.business_unit)
}
inline void CTPTradeField::set_business_unit(const char* value, size_t size) {
  
  business_unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.business_unit)
}
inline std::string* CTPTradeField::mutable_business_unit() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.business_unit)
  return business_unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_business_unit() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.business_unit)
  
  return business_unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_business_unit(std::string* business_unit) {
  if (business_unit != nullptr) {
    
  } else {
    
  }
  business_unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), business_unit);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.business_unit)
}

// int32 sequence_no = 26;
inline void CTPTradeField::clear_sequence_no() {
  sequence_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::sequence_no() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.sequence_no)
  return sequence_no_;
}
inline void CTPTradeField::set_sequence_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.sequence_no)
}

// int32 trading_day = 27;
inline void CTPTradeField::clear_trading_day() {
  trading_day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.trading_day)
  return trading_day_;
}
inline void CTPTradeField::set_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.trading_day)
}

// int32 settlement_id = 28;
inline void CTPTradeField::clear_settlement_id() {
  settlement_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::settlement_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.settlement_id)
  return settlement_id_;
}
inline void CTPTradeField::set_settlement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settlement_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.settlement_id)
}

// int32 broker_order_seq = 29;
inline void CTPTradeField::clear_broker_order_seq() {
  broker_order_seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::broker_order_seq() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.broker_order_seq)
  return broker_order_seq_;
}
inline void CTPTradeField::set_broker_order_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  broker_order_seq_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.broker_order_seq)
}

// int32 trade_source = 30;
inline void CTPTradeField::clear_trade_source() {
  trade_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradeField::trade_source() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.trade_source)
  return trade_source_;
}
inline void CTPTradeField::set_trade_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_source_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.trade_source)
}

// string invest_unit_id = 31;
inline void CTPTradeField::clear_invest_unit_id() {
  invest_unit_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradeField::invest_unit_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeField.invest_unit_id)
  return invest_unit_id_.GetNoArena();
}
inline void CTPTradeField::set_invest_unit_id(const std::string& value) {
  
  invest_unit_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradeField.invest_unit_id)
}
inline void CTPTradeField::set_invest_unit_id(std::string&& value) {
  
  invest_unit_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradeField.invest_unit_id)
}
inline void CTPTradeField::set_invest_unit_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invest_unit_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradeField.invest_unit_id)
}
inline void CTPTradeField::set_invest_unit_id(const char* value, size_t size) {
  
  invest_unit_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradeField.invest_unit_id)
}
inline std::string* CTPTradeField::mutable_invest_unit_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeField.invest_unit_id)
  return invest_unit_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradeField::release_invest_unit_id() {
  // @@protoc_insertion_point(field_release:pb.CTPTradeField.invest_unit_id)
  
  return invest_unit_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradeField::set_allocated_invest_unit_id(std::string* invest_unit_id) {
  if (invest_unit_id != nullptr) {
    
  } else {
    
  }
  invest_unit_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invest_unit_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradeField.invest_unit_id)
}

// -------------------------------------------------------------------

// CTPTradeReportList

// repeated .pb.CTPTradeField list = 1;
inline int CTPTradeReportList::list_size() const {
  return list_.size();
}
inline void CTPTradeReportList::clear_list() {
  list_.Clear();
}
inline ::pb::CTPTradeField* CTPTradeReportList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradeReportList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradeField >*
CTPTradeReportList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradeReportList.list)
  return &list_;
}
inline const ::pb::CTPTradeField& CTPTradeReportList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradeReportList.list)
  return list_.Get(index);
}
inline ::pb::CTPTradeField* CTPTradeReportList::add_list() {
  // @@protoc_insertion_point(field_add:pb.CTPTradeReportList.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradeField >&
CTPTradeReportList::list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradeReportList.list)
  return list_;
}

// -------------------------------------------------------------------

// CTPPositionSummation

// .pb.CTPDirection direction = 1;
inline void CTPPositionSummation::clear_direction() {
  direction_ = 0;
}
inline ::pb::CTPDirection CTPPositionSummation::direction() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.direction)
  return static_cast< ::pb::CTPDirection >(direction_);
}
inline void CTPPositionSummation::set_direction(::pb::CTPDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.direction)
}

// int32 type = 2;
inline void CTPPositionSummation::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPPositionSummation::type() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.type)
  return type_;
}
inline void CTPPositionSummation::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.type)
}

// string route_account_id = 3;
inline void CTPPositionSummation::clear_route_account_id() {
  route_account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPPositionSummation::route_account_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.route_account_id)
  return route_account_id_.GetNoArena();
}
inline void CTPPositionSummation::set_route_account_id(const std::string& value) {
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.route_account_id)
}
inline void CTPPositionSummation::set_route_account_id(std::string&& value) {
  
  route_account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPPositionSummation.route_account_id)
}
inline void CTPPositionSummation::set_route_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPPositionSummation.route_account_id)
}
inline void CTPPositionSummation::set_route_account_id(const char* value, size_t size) {
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPPositionSummation.route_account_id)
}
inline std::string* CTPPositionSummation::mutable_route_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPPositionSummation.route_account_id)
  return route_account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPPositionSummation::release_route_account_id() {
  // @@protoc_insertion_point(field_release:pb.CTPPositionSummation.route_account_id)
  
  return route_account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPPositionSummation::set_allocated_route_account_id(std::string* route_account_id) {
  if (route_account_id != nullptr) {
    
  } else {
    
  }
  route_account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route_account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPPositionSummation.route_account_id)
}

// int32 position = 4;
inline void CTPPositionSummation::clear_position() {
  position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPPositionSummation::position() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.position)
  return position_;
}
inline void CTPPositionSummation::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.position)
}

// double amount = 5;
inline void CTPPositionSummation::clear_amount() {
  amount_ = 0;
}
inline double CTPPositionSummation::amount() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.amount)
  return amount_;
}
inline void CTPPositionSummation::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.amount)
}

// double cost = 6;
inline void CTPPositionSummation::clear_cost() {
  cost_ = 0;
}
inline double CTPPositionSummation::cost() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.cost)
  return cost_;
}
inline void CTPPositionSummation::set_cost(double value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.cost)
}

// int32 frozen = 7;
inline void CTPPositionSummation::clear_frozen() {
  frozen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPPositionSummation::frozen() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.frozen)
  return frozen_;
}
inline void CTPPositionSummation::set_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frozen_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.frozen)
}

// int32 available = 8;
inline void CTPPositionSummation::clear_available() {
  available_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPPositionSummation::available() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.available)
  return available_;
}
inline void CTPPositionSummation::set_available(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.available)
}

// double position_profit = 9;
inline void CTPPositionSummation::clear_position_profit() {
  position_profit_ = 0;
}
inline double CTPPositionSummation::position_profit() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.position_profit)
  return position_profit_;
}
inline void CTPPositionSummation::set_position_profit(double value) {
  
  position_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.position_profit)
}

// double closed_profit = 10;
inline void CTPPositionSummation::clear_closed_profit() {
  closed_profit_ = 0;
}
inline double CTPPositionSummation::closed_profit() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.closed_profit)
  return closed_profit_;
}
inline void CTPPositionSummation::set_closed_profit(double value) {
  
  closed_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.closed_profit)
}

// double margin = 11;
inline void CTPPositionSummation::clear_margin() {
  margin_ = 0;
}
inline double CTPPositionSummation::margin() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.margin)
  return margin_;
}
inline void CTPPositionSummation::set_margin(double value) {
  
  margin_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.margin)
}

// double frozen_margin = 12;
inline void CTPPositionSummation::clear_frozen_margin() {
  frozen_margin_ = 0;
}
inline double CTPPositionSummation::frozen_margin() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.frozen_margin)
  return frozen_margin_;
}
inline void CTPPositionSummation::set_frozen_margin(double value) {
  
  frozen_margin_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.frozen_margin)
}

// double commission = 13;
inline void CTPPositionSummation::clear_commission() {
  commission_ = 0;
}
inline double CTPPositionSummation::commission() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.commission)
  return commission_;
}
inline void CTPPositionSummation::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.commission)
}

// double frozen_commission = 14;
inline void CTPPositionSummation::clear_frozen_commission() {
  frozen_commission_ = 0;
}
inline double CTPPositionSummation::frozen_commission() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.frozen_commission)
  return frozen_commission_;
}
inline void CTPPositionSummation::set_frozen_commission(double value) {
  
  frozen_commission_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.frozen_commission)
}

// double interest = 15;
inline void CTPPositionSummation::clear_interest() {
  interest_ = 0;
}
inline double CTPPositionSummation::interest() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.interest)
  return interest_;
}
inline void CTPPositionSummation::set_interest(double value) {
  
  interest_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.interest)
}

// double frozen_interest = 16;
inline void CTPPositionSummation::clear_frozen_interest() {
  frozen_interest_ = 0;
}
inline double CTPPositionSummation::frozen_interest() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.frozen_interest)
  return frozen_interest_;
}
inline void CTPPositionSummation::set_frozen_interest(double value) {
  
  frozen_interest_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.frozen_interest)
}

// double mtm_profit = 17;
inline void CTPPositionSummation::clear_mtm_profit() {
  mtm_profit_ = 0;
}
inline double CTPPositionSummation::mtm_profit() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.mtm_profit)
  return mtm_profit_;
}
inline void CTPPositionSummation::set_mtm_profit(double value) {
  
  mtm_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.mtm_profit)
}

// double cleared_closed_profit = 18;
inline void CTPPositionSummation::clear_cleared_closed_profit() {
  cleared_closed_profit_ = 0;
}
inline double CTPPositionSummation::cleared_closed_profit() const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionSummation.cleared_closed_profit)
  return cleared_closed_profit_;
}
inline void CTPPositionSummation::set_cleared_closed_profit(double value) {
  
  cleared_closed_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPositionSummation.cleared_closed_profit)
}

// -------------------------------------------------------------------

// CTPPosition

// .pb.Symbol symbol = 1;
inline bool CTPPosition::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& CTPPosition::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.CTPPosition.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* CTPPosition::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.CTPPosition.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* CTPPosition::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPPosition.symbol)
  return symbol_;
}
inline void CTPPosition::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPPosition.symbol)
}

// .pb.CTPPositionSummation summation = 2;
inline bool CTPPosition::has_summation() const {
  return this != internal_default_instance() && summation_ != nullptr;
}
inline void CTPPosition::clear_summation() {
  if (GetArenaNoVirtual() == nullptr && summation_ != nullptr) {
    delete summation_;
  }
  summation_ = nullptr;
}
inline const ::pb::CTPPositionSummation& CTPPosition::summation() const {
  const ::pb::CTPPositionSummation* p = summation_;
  // @@protoc_insertion_point(field_get:pb.CTPPosition.summation)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPPositionSummation*>(
      &::pb::_CTPPositionSummation_default_instance_);
}
inline ::pb::CTPPositionSummation* CTPPosition::release_summation() {
  // @@protoc_insertion_point(field_release:pb.CTPPosition.summation)
  
  ::pb::CTPPositionSummation* temp = summation_;
  summation_ = nullptr;
  return temp;
}
inline ::pb::CTPPositionSummation* CTPPosition::mutable_summation() {
  
  if (summation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPPositionSummation>(GetArenaNoVirtual());
    summation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPPosition.summation)
  return summation_;
}
inline void CTPPosition::set_allocated_summation(::pb::CTPPositionSummation* summation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete summation_;
  }
  if (summation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      summation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summation, submessage_arena);
    }
    
  } else {
    
  }
  summation_ = summation;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPPosition.summation)
}

// .pb.CTPPositionSummation today_summation = 3;
inline bool CTPPosition::has_today_summation() const {
  return this != internal_default_instance() && today_summation_ != nullptr;
}
inline void CTPPosition::clear_today_summation() {
  if (GetArenaNoVirtual() == nullptr && today_summation_ != nullptr) {
    delete today_summation_;
  }
  today_summation_ = nullptr;
}
inline const ::pb::CTPPositionSummation& CTPPosition::today_summation() const {
  const ::pb::CTPPositionSummation* p = today_summation_;
  // @@protoc_insertion_point(field_get:pb.CTPPosition.today_summation)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPPositionSummation*>(
      &::pb::_CTPPositionSummation_default_instance_);
}
inline ::pb::CTPPositionSummation* CTPPosition::release_today_summation() {
  // @@protoc_insertion_point(field_release:pb.CTPPosition.today_summation)
  
  ::pb::CTPPositionSummation* temp = today_summation_;
  today_summation_ = nullptr;
  return temp;
}
inline ::pb::CTPPositionSummation* CTPPosition::mutable_today_summation() {
  
  if (today_summation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPPositionSummation>(GetArenaNoVirtual());
    today_summation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPPosition.today_summation)
  return today_summation_;
}
inline void CTPPosition::set_allocated_today_summation(::pb::CTPPositionSummation* today_summation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete today_summation_;
  }
  if (today_summation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      today_summation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, today_summation, submessage_arena);
    }
    
  } else {
    
  }
  today_summation_ = today_summation;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPPosition.today_summation)
}

// .pb.CTPPositionSummation yesterday_summation = 4;
inline bool CTPPosition::has_yesterday_summation() const {
  return this != internal_default_instance() && yesterday_summation_ != nullptr;
}
inline void CTPPosition::clear_yesterday_summation() {
  if (GetArenaNoVirtual() == nullptr && yesterday_summation_ != nullptr) {
    delete yesterday_summation_;
  }
  yesterday_summation_ = nullptr;
}
inline const ::pb::CTPPositionSummation& CTPPosition::yesterday_summation() const {
  const ::pb::CTPPositionSummation* p = yesterday_summation_;
  // @@protoc_insertion_point(field_get:pb.CTPPosition.yesterday_summation)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPPositionSummation*>(
      &::pb::_CTPPositionSummation_default_instance_);
}
inline ::pb::CTPPositionSummation* CTPPosition::release_yesterday_summation() {
  // @@protoc_insertion_point(field_release:pb.CTPPosition.yesterday_summation)
  
  ::pb::CTPPositionSummation* temp = yesterday_summation_;
  yesterday_summation_ = nullptr;
  return temp;
}
inline ::pb::CTPPositionSummation* CTPPosition::mutable_yesterday_summation() {
  
  if (yesterday_summation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPPositionSummation>(GetArenaNoVirtual());
    yesterday_summation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPPosition.yesterday_summation)
  return yesterday_summation_;
}
inline void CTPPosition::set_allocated_yesterday_summation(::pb::CTPPositionSummation* yesterday_summation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete yesterday_summation_;
  }
  if (yesterday_summation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      yesterday_summation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yesterday_summation, submessage_arena);
    }
    
  } else {
    
  }
  yesterday_summation_ = yesterday_summation;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPPosition.yesterday_summation)
}

// double pre_settlement_price = 5;
inline void CTPPosition::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double CTPPosition::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:pb.CTPPosition.pre_settlement_price)
  return pre_settlement_price_;
}
inline void CTPPosition::set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPosition.pre_settlement_price)
}

// double settlement_price = 6;
inline void CTPPosition::clear_settlement_price() {
  settlement_price_ = 0;
}
inline double CTPPosition::settlement_price() const {
  // @@protoc_insertion_point(field_get:pb.CTPPosition.settlement_price)
  return settlement_price_;
}
inline void CTPPosition::set_settlement_price(double value) {
  
  settlement_price_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPosition.settlement_price)
}

// double last_price = 7;
inline void CTPPosition::clear_last_price() {
  last_price_ = 0;
}
inline double CTPPosition::last_price() const {
  // @@protoc_insertion_point(field_get:pb.CTPPosition.last_price)
  return last_price_;
}
inline void CTPPosition::set_last_price(double value) {
  
  last_price_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPosition.last_price)
}

// int32 trading_day = 8;
inline void CTPPosition::clear_trading_day() {
  trading_day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPPosition::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.CTPPosition.trading_day)
  return trading_day_;
}
inline void CTPPosition::set_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPosition.trading_day)
}

// int32 product_type = 9;
inline void CTPPosition::clear_product_type() {
  product_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPPosition::product_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPPosition.product_type)
  return product_type_;
}
inline void CTPPosition::set_product_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  product_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPosition.product_type)
}

// int32 volume_multiple = 11;
inline void CTPPosition::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPPosition::volume_multiple() const {
  // @@protoc_insertion_point(field_get:pb.CTPPosition.volume_multiple)
  return volume_multiple_;
}
inline void CTPPosition::set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPosition.volume_multiple)
}

// .pb.ProductID product_id = 12;
inline bool CTPPosition::has_product_id() const {
  return this != internal_default_instance() && product_id_ != nullptr;
}
inline const ::pb::ProductID& CTPPosition::product_id() const {
  const ::pb::ProductID* p = product_id_;
  // @@protoc_insertion_point(field_get:pb.CTPPosition.product_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ProductID*>(
      &::pb::_ProductID_default_instance_);
}
inline ::pb::ProductID* CTPPosition::release_product_id() {
  // @@protoc_insertion_point(field_release:pb.CTPPosition.product_id)
  
  ::pb::ProductID* temp = product_id_;
  product_id_ = nullptr;
  return temp;
}
inline ::pb::ProductID* CTPPosition::mutable_product_id() {
  
  if (product_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ProductID>(GetArenaNoVirtual());
    product_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPPosition.product_id)
  return product_id_;
}
inline void CTPPosition::set_allocated_product_id(::pb::ProductID* product_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_id_);
  }
  if (product_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      product_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product_id, submessage_arena);
    }
    
  } else {
    
  }
  product_id_ = product_id;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPPosition.product_id)
}

// double price_tick = 13;
inline void CTPPosition::clear_price_tick() {
  price_tick_ = 0;
}
inline double CTPPosition::price_tick() const {
  // @@protoc_insertion_point(field_get:pb.CTPPosition.price_tick)
  return price_tick_;
}
inline void CTPPosition::set_price_tick(double value) {
  
  price_tick_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPPosition.price_tick)
}

// string symbol_name = 14;
inline void CTPPosition::clear_symbol_name() {
  symbol_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPPosition::symbol_name() const {
  // @@protoc_insertion_point(field_get:pb.CTPPosition.symbol_name)
  return symbol_name_.GetNoArena();
}
inline void CTPPosition::set_symbol_name(const std::string& value) {
  
  symbol_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPPosition.symbol_name)
}
inline void CTPPosition::set_symbol_name(std::string&& value) {
  
  symbol_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPPosition.symbol_name)
}
inline void CTPPosition::set_symbol_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPPosition.symbol_name)
}
inline void CTPPosition::set_symbol_name(const char* value, size_t size) {
  
  symbol_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPPosition.symbol_name)
}
inline std::string* CTPPosition::mutable_symbol_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPPosition.symbol_name)
  return symbol_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPPosition::release_symbol_name() {
  // @@protoc_insertion_point(field_release:pb.CTPPosition.symbol_name)
  
  return symbol_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPPosition::set_allocated_symbol_name(std::string* symbol_name) {
  if (symbol_name != nullptr) {
    
  } else {
    
  }
  symbol_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol_name);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPPosition.symbol_name)
}

// string account_id = 15;
inline void CTPPosition::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPPosition::account_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPPosition.account_id)
  return account_id_.GetNoArena();
}
inline void CTPPosition::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPPosition.account_id)
}
inline void CTPPosition::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPPosition.account_id)
}
inline void CTPPosition::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPPosition.account_id)
}
inline void CTPPosition::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPPosition.account_id)
}
inline std::string* CTPPosition::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPPosition.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPPosition::release_account_id() {
  // @@protoc_insertion_point(field_release:pb.CTPPosition.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPPosition::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPPosition.account_id)
}

// -------------------------------------------------------------------

// CTPPositionList

// repeated .pb.CTPPosition list = 1;
inline int CTPPositionList::list_size() const {
  return list_.size();
}
inline void CTPPositionList::clear_list() {
  list_.Clear();
}
inline ::pb::CTPPosition* CTPPositionList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPPositionList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPPosition >*
CTPPositionList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPPositionList.list)
  return &list_;
}
inline const ::pb::CTPPosition& CTPPositionList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPPositionList.list)
  return list_.Get(index);
}
inline ::pb::CTPPosition* CTPPositionList::add_list() {
  // @@protoc_insertion_point(field_add:pb.CTPPositionList.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPPosition >&
CTPPositionList::list() const {
  // @@protoc_insertion_point(field_list:pb.CTPPositionList.list)
  return list_;
}

// -------------------------------------------------------------------

// CTPCloseTradeRecord

// string account_id = 1;
inline void CTPCloseTradeRecord::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCloseTradeRecord::account_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.account_id)
  return account_id_.GetNoArena();
}
inline void CTPCloseTradeRecord::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.account_id)
}
inline void CTPCloseTradeRecord::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCloseTradeRecord.account_id)
}
inline void CTPCloseTradeRecord::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCloseTradeRecord.account_id)
}
inline void CTPCloseTradeRecord::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCloseTradeRecord.account_id)
}
inline std::string* CTPCloseTradeRecord::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCloseTradeRecord.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCloseTradeRecord::release_account_id() {
  // @@protoc_insertion_point(field_release:pb.CTPCloseTradeRecord.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCloseTradeRecord::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCloseTradeRecord.account_id)
}

// .pb.Symbol symbol = 2;
inline bool CTPCloseTradeRecord::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& CTPCloseTradeRecord::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* CTPCloseTradeRecord::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.CTPCloseTradeRecord.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* CTPCloseTradeRecord::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPCloseTradeRecord.symbol)
  return symbol_;
}
inline void CTPCloseTradeRecord::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCloseTradeRecord.symbol)
}

// .pb.CTPDirection direction = 3;
inline void CTPCloseTradeRecord::clear_direction() {
  direction_ = 0;
}
inline ::pb::CTPDirection CTPCloseTradeRecord::direction() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.direction)
  return static_cast< ::pb::CTPDirection >(direction_);
}
inline void CTPCloseTradeRecord::set_direction(::pb::CTPDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.direction)
}

// int32 open_volume = 4;
inline void CTPCloseTradeRecord::clear_open_volume() {
  open_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCloseTradeRecord::open_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.open_volume)
  return open_volume_;
}
inline void CTPCloseTradeRecord::set_open_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.open_volume)
}

// double open_amount = 5;
inline void CTPCloseTradeRecord::clear_open_amount() {
  open_amount_ = 0;
}
inline double CTPCloseTradeRecord::open_amount() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.open_amount)
  return open_amount_;
}
inline void CTPCloseTradeRecord::set_open_amount(double value) {
  
  open_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.open_amount)
}

// int32 closed_volume = 6;
inline void CTPCloseTradeRecord::clear_closed_volume() {
  closed_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCloseTradeRecord::closed_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.closed_volume)
  return closed_volume_;
}
inline void CTPCloseTradeRecord::set_closed_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  closed_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.closed_volume)
}

// double closed_amount = 7;
inline void CTPCloseTradeRecord::clear_closed_amount() {
  closed_amount_ = 0;
}
inline double CTPCloseTradeRecord::closed_amount() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.closed_amount)
  return closed_amount_;
}
inline void CTPCloseTradeRecord::set_closed_amount(double value) {
  
  closed_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.closed_amount)
}

// int64 open_time = 8;
inline void CTPCloseTradeRecord::clear_open_time() {
  open_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPCloseTradeRecord::open_time() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.open_time)
  return open_time_;
}
inline void CTPCloseTradeRecord::set_open_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  open_time_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.open_time)
}

// int32 open_trading_day = 9;
inline void CTPCloseTradeRecord::clear_open_trading_day() {
  open_trading_day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCloseTradeRecord::open_trading_day() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.open_trading_day)
  return open_trading_day_;
}
inline void CTPCloseTradeRecord::set_open_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.open_trading_day)
}

// .pb.CTPOrderID open_order_id = 10;
inline bool CTPCloseTradeRecord::has_open_order_id() const {
  return this != internal_default_instance() && open_order_id_ != nullptr;
}
inline void CTPCloseTradeRecord::clear_open_order_id() {
  if (GetArenaNoVirtual() == nullptr && open_order_id_ != nullptr) {
    delete open_order_id_;
  }
  open_order_id_ = nullptr;
}
inline const ::pb::CTPOrderID& CTPCloseTradeRecord::open_order_id() const {
  const ::pb::CTPOrderID* p = open_order_id_;
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.open_order_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPOrderID*>(
      &::pb::_CTPOrderID_default_instance_);
}
inline ::pb::CTPOrderID* CTPCloseTradeRecord::release_open_order_id() {
  // @@protoc_insertion_point(field_release:pb.CTPCloseTradeRecord.open_order_id)
  
  ::pb::CTPOrderID* temp = open_order_id_;
  open_order_id_ = nullptr;
  return temp;
}
inline ::pb::CTPOrderID* CTPCloseTradeRecord::mutable_open_order_id() {
  
  if (open_order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPOrderID>(GetArenaNoVirtual());
    open_order_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPCloseTradeRecord.open_order_id)
  return open_order_id_;
}
inline void CTPCloseTradeRecord::set_allocated_open_order_id(::pb::CTPOrderID* open_order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete open_order_id_;
  }
  if (open_order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_order_id, submessage_arena);
    }
    
  } else {
    
  }
  open_order_id_ = open_order_id;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCloseTradeRecord.open_order_id)
}

// string open_trade_id = 11;
inline void CTPCloseTradeRecord::clear_open_trade_id() {
  open_trade_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCloseTradeRecord::open_trade_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.open_trade_id)
  return open_trade_id_.GetNoArena();
}
inline void CTPCloseTradeRecord::set_open_trade_id(const std::string& value) {
  
  open_trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.open_trade_id)
}
inline void CTPCloseTradeRecord::set_open_trade_id(std::string&& value) {
  
  open_trade_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCloseTradeRecord.open_trade_id)
}
inline void CTPCloseTradeRecord::set_open_trade_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  open_trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCloseTradeRecord.open_trade_id)
}
inline void CTPCloseTradeRecord::set_open_trade_id(const char* value, size_t size) {
  
  open_trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCloseTradeRecord.open_trade_id)
}
inline std::string* CTPCloseTradeRecord::mutable_open_trade_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCloseTradeRecord.open_trade_id)
  return open_trade_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCloseTradeRecord::release_open_trade_id() {
  // @@protoc_insertion_point(field_release:pb.CTPCloseTradeRecord.open_trade_id)
  
  return open_trade_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCloseTradeRecord::set_allocated_open_trade_id(std::string* open_trade_id) {
  if (open_trade_id != nullptr) {
    
  } else {
    
  }
  open_trade_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open_trade_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCloseTradeRecord.open_trade_id)
}

// int32 open_trade_type = 12;
inline void CTPCloseTradeRecord::clear_open_trade_type() {
  open_trade_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCloseTradeRecord::open_trade_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.open_trade_type)
  return open_trade_type_;
}
inline void CTPCloseTradeRecord::set_open_trade_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_trade_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.open_trade_type)
}

// int32 open_hedge_type = 13;
inline void CTPCloseTradeRecord::clear_open_hedge_type() {
  open_hedge_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCloseTradeRecord::open_hedge_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.open_hedge_type)
  return open_hedge_type_;
}
inline void CTPCloseTradeRecord::set_open_hedge_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_hedge_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.open_hedge_type)
}

// int64 close_time = 14;
inline void CTPCloseTradeRecord::clear_close_time() {
  close_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPCloseTradeRecord::close_time() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.close_time)
  return close_time_;
}
inline void CTPCloseTradeRecord::set_close_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  close_time_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.close_time)
}

// int32 close_trading_day = 15;
inline void CTPCloseTradeRecord::clear_close_trading_day() {
  close_trading_day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCloseTradeRecord::close_trading_day() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.close_trading_day)
  return close_trading_day_;
}
inline void CTPCloseTradeRecord::set_close_trading_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  close_trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.close_trading_day)
}

// .pb.CTPOrderID close_order_id = 16;
inline bool CTPCloseTradeRecord::has_close_order_id() const {
  return this != internal_default_instance() && close_order_id_ != nullptr;
}
inline void CTPCloseTradeRecord::clear_close_order_id() {
  if (GetArenaNoVirtual() == nullptr && close_order_id_ != nullptr) {
    delete close_order_id_;
  }
  close_order_id_ = nullptr;
}
inline const ::pb::CTPOrderID& CTPCloseTradeRecord::close_order_id() const {
  const ::pb::CTPOrderID* p = close_order_id_;
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.close_order_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPOrderID*>(
      &::pb::_CTPOrderID_default_instance_);
}
inline ::pb::CTPOrderID* CTPCloseTradeRecord::release_close_order_id() {
  // @@protoc_insertion_point(field_release:pb.CTPCloseTradeRecord.close_order_id)
  
  ::pb::CTPOrderID* temp = close_order_id_;
  close_order_id_ = nullptr;
  return temp;
}
inline ::pb::CTPOrderID* CTPCloseTradeRecord::mutable_close_order_id() {
  
  if (close_order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPOrderID>(GetArenaNoVirtual());
    close_order_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPCloseTradeRecord.close_order_id)
  return close_order_id_;
}
inline void CTPCloseTradeRecord::set_allocated_close_order_id(::pb::CTPOrderID* close_order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete close_order_id_;
  }
  if (close_order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      close_order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_order_id, submessage_arena);
    }
    
  } else {
    
  }
  close_order_id_ = close_order_id;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCloseTradeRecord.close_order_id)
}

// string close_trade_id = 17;
inline void CTPCloseTradeRecord::clear_close_trade_id() {
  close_trade_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCloseTradeRecord::close_trade_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.close_trade_id)
  return close_trade_id_.GetNoArena();
}
inline void CTPCloseTradeRecord::set_close_trade_id(const std::string& value) {
  
  close_trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.close_trade_id)
}
inline void CTPCloseTradeRecord::set_close_trade_id(std::string&& value) {
  
  close_trade_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCloseTradeRecord.close_trade_id)
}
inline void CTPCloseTradeRecord::set_close_trade_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  close_trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCloseTradeRecord.close_trade_id)
}
inline void CTPCloseTradeRecord::set_close_trade_id(const char* value, size_t size) {
  
  close_trade_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCloseTradeRecord.close_trade_id)
}
inline std::string* CTPCloseTradeRecord::mutable_close_trade_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCloseTradeRecord.close_trade_id)
  return close_trade_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCloseTradeRecord::release_close_trade_id() {
  // @@protoc_insertion_point(field_release:pb.CTPCloseTradeRecord.close_trade_id)
  
  return close_trade_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCloseTradeRecord::set_allocated_close_trade_id(std::string* close_trade_id) {
  if (close_trade_id != nullptr) {
    
  } else {
    
  }
  close_trade_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), close_trade_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCloseTradeRecord.close_trade_id)
}

// int32 close_trade_type = 18;
inline void CTPCloseTradeRecord::clear_close_trade_type() {
  close_trade_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCloseTradeRecord::close_trade_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.close_trade_type)
  return close_trade_type_;
}
inline void CTPCloseTradeRecord::set_close_trade_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  close_trade_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.close_trade_type)
}

// int32 close_hedge_type = 19;
inline void CTPCloseTradeRecord::clear_close_hedge_type() {
  close_hedge_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCloseTradeRecord::close_hedge_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.close_hedge_type)
  return close_hedge_type_;
}
inline void CTPCloseTradeRecord::set_close_hedge_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  close_hedge_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.close_hedge_type)
}

// double close_profit = 20;
inline void CTPCloseTradeRecord::clear_close_profit() {
  close_profit_ = 0;
}
inline double CTPCloseTradeRecord::close_profit() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.close_profit)
  return close_profit_;
}
inline void CTPCloseTradeRecord::set_close_profit(double value) {
  
  close_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.close_profit)
}

// double pre_settlement_price = 21;
inline void CTPCloseTradeRecord::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double CTPCloseTradeRecord::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.pre_settlement_price)
  return pre_settlement_price_;
}
inline void CTPCloseTradeRecord::set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.pre_settlement_price)
}

// .pb.CurrencyType currency_type = 22;
inline void CTPCloseTradeRecord::clear_currency_type() {
  currency_type_ = 0;
}
inline ::pb::CurrencyType CTPCloseTradeRecord::currency_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.currency_type)
  return static_cast< ::pb::CurrencyType >(currency_type_);
}
inline void CTPCloseTradeRecord::set_currency_type(::pb::CurrencyType value) {
  
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.currency_type)
}

// double open_commission = 23;
inline void CTPCloseTradeRecord::clear_open_commission() {
  open_commission_ = 0;
}
inline double CTPCloseTradeRecord::open_commission() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.open_commission)
  return open_commission_;
}
inline void CTPCloseTradeRecord::set_open_commission(double value) {
  
  open_commission_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.open_commission)
}

// double close_commission = 24;
inline void CTPCloseTradeRecord::clear_close_commission() {
  close_commission_ = 0;
}
inline double CTPCloseTradeRecord::close_commission() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.close_commission)
  return close_commission_;
}
inline void CTPCloseTradeRecord::set_close_commission(double value) {
  
  close_commission_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.close_commission)
}

// double margin = 25;
inline void CTPCloseTradeRecord::clear_margin() {
  margin_ = 0;
}
inline double CTPCloseTradeRecord::margin() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.margin)
  return margin_;
}
inline void CTPCloseTradeRecord::set_margin(double value) {
  
  margin_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.margin)
}

// double initial_open_amount = 26;
inline void CTPCloseTradeRecord::clear_initial_open_amount() {
  initial_open_amount_ = 0;
}
inline double CTPCloseTradeRecord::initial_open_amount() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.initial_open_amount)
  return initial_open_amount_;
}
inline void CTPCloseTradeRecord::set_initial_open_amount(double value) {
  
  initial_open_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.initial_open_amount)
}

// int32 volume_multiple = 27;
inline void CTPCloseTradeRecord::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPCloseTradeRecord::volume_multiple() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.volume_multiple)
  return volume_multiple_;
}
inline void CTPCloseTradeRecord::set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.volume_multiple)
}

// double frozen_interest = 28;
inline void CTPCloseTradeRecord::clear_frozen_interest() {
  frozen_interest_ = 0;
}
inline double CTPCloseTradeRecord::frozen_interest() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.frozen_interest)
  return frozen_interest_;
}
inline void CTPCloseTradeRecord::set_frozen_interest(double value) {
  
  frozen_interest_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.frozen_interest)
}

// string route_account_id = 29;
inline void CTPCloseTradeRecord::clear_route_account_id() {
  route_account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCloseTradeRecord::route_account_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.route_account_id)
  return route_account_id_.GetNoArena();
}
inline void CTPCloseTradeRecord::set_route_account_id(const std::string& value) {
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.route_account_id)
}
inline void CTPCloseTradeRecord::set_route_account_id(std::string&& value) {
  
  route_account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCloseTradeRecord.route_account_id)
}
inline void CTPCloseTradeRecord::set_route_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCloseTradeRecord.route_account_id)
}
inline void CTPCloseTradeRecord::set_route_account_id(const char* value, size_t size) {
  
  route_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCloseTradeRecord.route_account_id)
}
inline std::string* CTPCloseTradeRecord::mutable_route_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCloseTradeRecord.route_account_id)
  return route_account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCloseTradeRecord::release_route_account_id() {
  // @@protoc_insertion_point(field_release:pb.CTPCloseTradeRecord.route_account_id)
  
  return route_account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCloseTradeRecord::set_allocated_route_account_id(std::string* route_account_id) {
  if (route_account_id != nullptr) {
    
  } else {
    
  }
  route_account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route_account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCloseTradeRecord.route_account_id)
}

// double position_profit = 30;
inline void CTPCloseTradeRecord::clear_position_profit() {
  position_profit_ = 0;
}
inline double CTPCloseTradeRecord::position_profit() const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecord.position_profit)
  return position_profit_;
}
inline void CTPCloseTradeRecord::set_position_profit(double value) {
  
  position_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCloseTradeRecord.position_profit)
}

// -------------------------------------------------------------------

// CTPCloseTradeRecordList

// repeated .pb.CTPCloseTradeRecord list = 1;
inline int CTPCloseTradeRecordList::list_size() const {
  return list_.size();
}
inline void CTPCloseTradeRecordList::clear_list() {
  list_.Clear();
}
inline ::pb::CTPCloseTradeRecord* CTPCloseTradeRecordList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPCloseTradeRecordList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >*
CTPCloseTradeRecordList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPCloseTradeRecordList.list)
  return &list_;
}
inline const ::pb::CTPCloseTradeRecord& CTPCloseTradeRecordList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPCloseTradeRecordList.list)
  return list_.Get(index);
}
inline ::pb::CTPCloseTradeRecord* CTPCloseTradeRecordList::add_list() {
  // @@protoc_insertion_point(field_add:pb.CTPCloseTradeRecordList.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >&
CTPCloseTradeRecordList::list() const {
  // @@protoc_insertion_point(field_list:pb.CTPCloseTradeRecordList.list)
  return list_;
}

// -------------------------------------------------------------------

// CTPMarginRate

// .pb.ExchangeType exchange = 1;
inline void CTPMarginRate::clear_exchange() {
  exchange_ = 0;
}
inline ::pb::ExchangeType CTPMarginRate::exchange() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginRate.exchange)
  return static_cast< ::pb::ExchangeType >(exchange_);
}
inline void CTPMarginRate::set_exchange(::pb::ExchangeType value) {
  
  exchange_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPMarginRate.exchange)
}

// string symbol = 2;
inline void CTPMarginRate::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPMarginRate::symbol() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginRate.symbol)
  return symbol_.GetNoArena();
}
inline void CTPMarginRate::set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPMarginRate.symbol)
}
inline void CTPMarginRate::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPMarginRate.symbol)
}
inline void CTPMarginRate::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPMarginRate.symbol)
}
inline void CTPMarginRate::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPMarginRate.symbol)
}
inline std::string* CTPMarginRate::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPMarginRate.symbol)
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPMarginRate::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.CTPMarginRate.symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPMarginRate::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPMarginRate.symbol)
}

// string product = 3;
inline void CTPMarginRate::clear_product() {
  product_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPMarginRate::product() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginRate.product)
  return product_.GetNoArena();
}
inline void CTPMarginRate::set_product(const std::string& value) {
  
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPMarginRate.product)
}
inline void CTPMarginRate::set_product(std::string&& value) {
  
  product_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPMarginRate.product)
}
inline void CTPMarginRate::set_product(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPMarginRate.product)
}
inline void CTPMarginRate::set_product(const char* value, size_t size) {
  
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPMarginRate.product)
}
inline std::string* CTPMarginRate::mutable_product() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPMarginRate.product)
  return product_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPMarginRate::release_product() {
  // @@protoc_insertion_point(field_release:pb.CTPMarginRate.product)
  
  return product_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPMarginRate::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    
  } else {
    
  }
  product_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPMarginRate.product)
}

// double long_by_volume = 4;
inline void CTPMarginRate::clear_long_by_volume() {
  long_by_volume_ = 0;
}
inline double CTPMarginRate::long_by_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginRate.long_by_volume)
  return long_by_volume_;
}
inline void CTPMarginRate::set_long_by_volume(double value) {
  
  long_by_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPMarginRate.long_by_volume)
}

// double long_by_amount = 5;
inline void CTPMarginRate::clear_long_by_amount() {
  long_by_amount_ = 0;
}
inline double CTPMarginRate::long_by_amount() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginRate.long_by_amount)
  return long_by_amount_;
}
inline void CTPMarginRate::set_long_by_amount(double value) {
  
  long_by_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPMarginRate.long_by_amount)
}

// double short_by_volume = 6;
inline void CTPMarginRate::clear_short_by_volume() {
  short_by_volume_ = 0;
}
inline double CTPMarginRate::short_by_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginRate.short_by_volume)
  return short_by_volume_;
}
inline void CTPMarginRate::set_short_by_volume(double value) {
  
  short_by_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPMarginRate.short_by_volume)
}

// double short_by_amount = 7;
inline void CTPMarginRate::clear_short_by_amount() {
  short_by_amount_ = 0;
}
inline double CTPMarginRate::short_by_amount() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginRate.short_by_amount)
  return short_by_amount_;
}
inline void CTPMarginRate::set_short_by_amount(double value) {
  
  short_by_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPMarginRate.short_by_amount)
}

// int64 id = 10;
inline void CTPMarginRate::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPMarginRate::id() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginRate.id)
  return id_;
}
inline void CTPMarginRate::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPMarginRate.id)
}

// -------------------------------------------------------------------

// CTPMarginItem

// double long_by_volume = 1;
inline void CTPMarginItem::clear_long_by_volume() {
  long_by_volume_ = 0;
}
inline double CTPMarginItem::long_by_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginItem.long_by_volume)
  return long_by_volume_;
}
inline void CTPMarginItem::set_long_by_volume(double value) {
  
  long_by_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPMarginItem.long_by_volume)
}

// double long_by_amount = 2;
inline void CTPMarginItem::clear_long_by_amount() {
  long_by_amount_ = 0;
}
inline double CTPMarginItem::long_by_amount() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginItem.long_by_amount)
  return long_by_amount_;
}
inline void CTPMarginItem::set_long_by_amount(double value) {
  
  long_by_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPMarginItem.long_by_amount)
}

// double short_by_volume = 3;
inline void CTPMarginItem::clear_short_by_volume() {
  short_by_volume_ = 0;
}
inline double CTPMarginItem::short_by_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginItem.short_by_volume)
  return short_by_volume_;
}
inline void CTPMarginItem::set_short_by_volume(double value) {
  
  short_by_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPMarginItem.short_by_volume)
}

// double short_by_amount = 4;
inline void CTPMarginItem::clear_short_by_amount() {
  short_by_amount_ = 0;
}
inline double CTPMarginItem::short_by_amount() const {
  // @@protoc_insertion_point(field_get:pb.CTPMarginItem.short_by_amount)
  return short_by_amount_;
}
inline void CTPMarginItem::set_short_by_amount(double value) {
  
  short_by_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPMarginItem.short_by_amount)
}

// -------------------------------------------------------------------

// CTPCommissionRateItem

// double by_amount = 1;
inline void CTPCommissionRateItem::clear_by_amount() {
  by_amount_ = 0;
}
inline double CTPCommissionRateItem::by_amount() const {
  // @@protoc_insertion_point(field_get:pb.CTPCommissionRateItem.by_amount)
  return by_amount_;
}
inline void CTPCommissionRateItem::set_by_amount(double value) {
  
  by_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCommissionRateItem.by_amount)
}

// double by_volume = 2;
inline void CTPCommissionRateItem::clear_by_volume() {
  by_volume_ = 0;
}
inline double CTPCommissionRateItem::by_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPCommissionRateItem.by_volume)
  return by_volume_;
}
inline void CTPCommissionRateItem::set_by_volume(double value) {
  
  by_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCommissionRateItem.by_volume)
}

// double minimum = 3;
inline void CTPCommissionRateItem::clear_minimum() {
  minimum_ = 0;
}
inline double CTPCommissionRateItem::minimum() const {
  // @@protoc_insertion_point(field_get:pb.CTPCommissionRateItem.minimum)
  return minimum_;
}
inline void CTPCommissionRateItem::set_minimum(double value) {
  
  minimum_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCommissionRateItem.minimum)
}

// .pb.CTPOffsetFlag offset_flag = 4;
inline void CTPCommissionRateItem::clear_offset_flag() {
  offset_flag_ = 0;
}
inline ::pb::CTPOffsetFlag CTPCommissionRateItem::offset_flag() const {
  // @@protoc_insertion_point(field_get:pb.CTPCommissionRateItem.offset_flag)
  return static_cast< ::pb::CTPOffsetFlag >(offset_flag_);
}
inline void CTPCommissionRateItem::set_offset_flag(::pb::CTPOffsetFlag value) {
  
  offset_flag_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCommissionRateItem.offset_flag)
}

// string tag = 5;
inline void CTPCommissionRateItem::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCommissionRateItem::tag() const {
  // @@protoc_insertion_point(field_get:pb.CTPCommissionRateItem.tag)
  return tag_.GetNoArena();
}
inline void CTPCommissionRateItem::set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCommissionRateItem.tag)
}
inline void CTPCommissionRateItem::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCommissionRateItem.tag)
}
inline void CTPCommissionRateItem::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCommissionRateItem.tag)
}
inline void CTPCommissionRateItem::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCommissionRateItem.tag)
}
inline std::string* CTPCommissionRateItem::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCommissionRateItem.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCommissionRateItem::release_tag() {
  // @@protoc_insertion_point(field_release:pb.CTPCommissionRateItem.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCommissionRateItem::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCommissionRateItem.tag)
}

// -------------------------------------------------------------------

// CTPCommissionRate

// .pb.ExchangeType exchange = 1;
inline void CTPCommissionRate::clear_exchange() {
  exchange_ = 0;
}
inline ::pb::ExchangeType CTPCommissionRate::exchange() const {
  // @@protoc_insertion_point(field_get:pb.CTPCommissionRate.exchange)
  return static_cast< ::pb::ExchangeType >(exchange_);
}
inline void CTPCommissionRate::set_exchange(::pb::ExchangeType value) {
  
  exchange_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCommissionRate.exchange)
}

// string symbol = 2;
inline void CTPCommissionRate::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCommissionRate::symbol() const {
  // @@protoc_insertion_point(field_get:pb.CTPCommissionRate.symbol)
  return symbol_.GetNoArena();
}
inline void CTPCommissionRate::set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCommissionRate.symbol)
}
inline void CTPCommissionRate::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCommissionRate.symbol)
}
inline void CTPCommissionRate::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCommissionRate.symbol)
}
inline void CTPCommissionRate::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCommissionRate.symbol)
}
inline std::string* CTPCommissionRate::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCommissionRate.symbol)
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCommissionRate::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.CTPCommissionRate.symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCommissionRate::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCommissionRate.symbol)
}

// string product = 3;
inline void CTPCommissionRate::clear_product() {
  product_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPCommissionRate::product() const {
  // @@protoc_insertion_point(field_get:pb.CTPCommissionRate.product)
  return product_.GetNoArena();
}
inline void CTPCommissionRate::set_product(const std::string& value) {
  
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPCommissionRate.product)
}
inline void CTPCommissionRate::set_product(std::string&& value) {
  
  product_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPCommissionRate.product)
}
inline void CTPCommissionRate::set_product(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPCommissionRate.product)
}
inline void CTPCommissionRate::set_product(const char* value, size_t size) {
  
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPCommissionRate.product)
}
inline std::string* CTPCommissionRate::mutable_product() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPCommissionRate.product)
  return product_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPCommissionRate::release_product() {
  // @@protoc_insertion_point(field_release:pb.CTPCommissionRate.product)
  
  return product_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPCommissionRate::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    
  } else {
    
  }
  product_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPCommissionRate.product)
}

// repeated .pb.CTPCommissionRateItem settings = 4;
inline int CTPCommissionRate::settings_size() const {
  return settings_.size();
}
inline void CTPCommissionRate::clear_settings() {
  settings_.Clear();
}
inline ::pb::CTPCommissionRateItem* CTPCommissionRate::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPCommissionRate.settings)
  return settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCommissionRateItem >*
CTPCommissionRate::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPCommissionRate.settings)
  return &settings_;
}
inline const ::pb::CTPCommissionRateItem& CTPCommissionRate::settings(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPCommissionRate.settings)
  return settings_.Get(index);
}
inline ::pb::CTPCommissionRateItem* CTPCommissionRate::add_settings() {
  // @@protoc_insertion_point(field_add:pb.CTPCommissionRate.settings)
  return settings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCommissionRateItem >&
CTPCommissionRate::settings() const {
  // @@protoc_insertion_point(field_list:pb.CTPCommissionRate.settings)
  return settings_;
}

// int64 id = 5;
inline void CTPCommissionRate::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPCommissionRate::id() const {
  // @@protoc_insertion_point(field_get:pb.CTPCommissionRate.id)
  return id_;
}
inline void CTPCommissionRate::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPCommissionRate.id)
}

// -------------------------------------------------------------------

// CTPTradingUnit

// .pb.Symbol symbol = 1;
inline bool CTPTradingUnit::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& CTPTradingUnit::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* CTPTradingUnit::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.CTPTradingUnit.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* CTPTradingUnit::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnit.symbol)
  return symbol_;
}
inline void CTPTradingUnit::set_allocated_symbol(::pb::Symbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradingUnit.symbol)
}

// repeated .pb.CTPPosition position = 2;
inline int CTPTradingUnit::position_size() const {
  return position_.size();
}
inline void CTPTradingUnit::clear_position() {
  position_.Clear();
}
inline ::pb::CTPPosition* CTPTradingUnit::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnit.position)
  return position_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPPosition >*
CTPTradingUnit::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnit.position)
  return &position_;
}
inline const ::pb::CTPPosition& CTPTradingUnit::position(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.position)
  return position_.Get(index);
}
inline ::pb::CTPPosition* CTPTradingUnit::add_position() {
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnit.position)
  return position_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPPosition >&
CTPTradingUnit::position() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnit.position)
  return position_;
}

// repeated .pb.CTPOrderLink order_link_list = 3;
inline int CTPTradingUnit::order_link_list_size() const {
  return order_link_list_.size();
}
inline void CTPTradingUnit::clear_order_link_list() {
  order_link_list_.Clear();
}
inline ::pb::CTPOrderLink* CTPTradingUnit::mutable_order_link_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnit.order_link_list)
  return order_link_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderLink >*
CTPTradingUnit::mutable_order_link_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnit.order_link_list)
  return &order_link_list_;
}
inline const ::pb::CTPOrderLink& CTPTradingUnit::order_link_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.order_link_list)
  return order_link_list_.Get(index);
}
inline ::pb::CTPOrderLink* CTPTradingUnit::add_order_link_list() {
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnit.order_link_list)
  return order_link_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderLink >&
CTPTradingUnit::order_link_list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnit.order_link_list)
  return order_link_list_;
}

// repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
inline int CTPTradingUnit::position_detail_list_size() const {
  return position_detail_list_.size();
}
inline void CTPTradingUnit::clear_position_detail_list() {
  position_detail_list_.Clear();
}
inline ::pb::CTPCloseTradeRecord* CTPTradingUnit::mutable_position_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnit.position_detail_list)
  return position_detail_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >*
CTPTradingUnit::mutable_position_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnit.position_detail_list)
  return &position_detail_list_;
}
inline const ::pb::CTPCloseTradeRecord& CTPTradingUnit::position_detail_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.position_detail_list)
  return position_detail_list_.Get(index);
}
inline ::pb::CTPCloseTradeRecord* CTPTradingUnit::add_position_detail_list() {
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnit.position_detail_list)
  return position_detail_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >&
CTPTradingUnit::position_detail_list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnit.position_detail_list)
  return position_detail_list_;
}

// repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
inline int CTPTradingUnit::history_ctr_list_size() const {
  return history_ctr_list_.size();
}
inline void CTPTradingUnit::clear_history_ctr_list() {
  history_ctr_list_.Clear();
}
inline ::pb::CTPCloseTradeRecord* CTPTradingUnit::mutable_history_ctr_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnit.history_ctr_list)
  return history_ctr_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >*
CTPTradingUnit::mutable_history_ctr_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnit.history_ctr_list)
  return &history_ctr_list_;
}
inline const ::pb::CTPCloseTradeRecord& CTPTradingUnit::history_ctr_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.history_ctr_list)
  return history_ctr_list_.Get(index);
}
inline ::pb::CTPCloseTradeRecord* CTPTradingUnit::add_history_ctr_list() {
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnit.history_ctr_list)
  return history_ctr_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCloseTradeRecord >&
CTPTradingUnit::history_ctr_list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnit.history_ctr_list)
  return history_ctr_list_;
}

// repeated .pb.CTPOrderField history_order_list = 6;
inline int CTPTradingUnit::history_order_list_size() const {
  return history_order_list_.size();
}
inline void CTPTradingUnit::clear_history_order_list() {
  history_order_list_.Clear();
}
inline ::pb::CTPOrderField* CTPTradingUnit::mutable_history_order_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnit.history_order_list)
  return history_order_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >*
CTPTradingUnit::mutable_history_order_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnit.history_order_list)
  return &history_order_list_;
}
inline const ::pb::CTPOrderField& CTPTradingUnit::history_order_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.history_order_list)
  return history_order_list_.Get(index);
}
inline ::pb::CTPOrderField* CTPTradingUnit::add_history_order_list() {
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnit.history_order_list)
  return history_order_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPOrderField >&
CTPTradingUnit::history_order_list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnit.history_order_list)
  return history_order_list_;
}

// repeated .pb.CTPTradeField history_trade_list = 7;
inline int CTPTradingUnit::history_trade_list_size() const {
  return history_trade_list_.size();
}
inline void CTPTradingUnit::clear_history_trade_list() {
  history_trade_list_.Clear();
}
inline ::pb::CTPTradeField* CTPTradingUnit::mutable_history_trade_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnit.history_trade_list)
  return history_trade_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradeField >*
CTPTradingUnit::mutable_history_trade_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnit.history_trade_list)
  return &history_trade_list_;
}
inline const ::pb::CTPTradeField& CTPTradingUnit::history_trade_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.history_trade_list)
  return history_trade_list_.Get(index);
}
inline ::pb::CTPTradeField* CTPTradingUnit::add_history_trade_list() {
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnit.history_trade_list)
  return history_trade_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradeField >&
CTPTradingUnit::history_trade_list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnit.history_trade_list)
  return history_trade_list_;
}

// double last_price = 10;
inline void CTPTradingUnit::clear_last_price() {
  last_price_ = 0;
}
inline double CTPTradingUnit::last_price() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.last_price)
  return last_price_;
}
inline void CTPTradingUnit::set_last_price(double value) {
  
  last_price_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnit.last_price)
}

// int64 last_mds_update_time = 11;
inline void CTPTradingUnit::clear_last_mds_update_time() {
  last_mds_update_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPTradingUnit::last_mds_update_time() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.last_mds_update_time)
  return last_mds_update_time_;
}
inline void CTPTradingUnit::set_last_mds_update_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_mds_update_time_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnit.last_mds_update_time)
}

// double price_tick = 12;
inline void CTPTradingUnit::clear_price_tick() {
  price_tick_ = 0;
}
inline double CTPTradingUnit::price_tick() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.price_tick)
  return price_tick_;
}
inline void CTPTradingUnit::set_price_tick(double value) {
  
  price_tick_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnit.price_tick)
}

// int32 volume_multiple = 13;
inline void CTPTradingUnit::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradingUnit::volume_multiple() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.volume_multiple)
  return volume_multiple_;
}
inline void CTPTradingUnit::set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnit.volume_multiple)
}

// .pb.CTPCommissionRate cr = 14;
inline bool CTPTradingUnit::has_cr() const {
  return this != internal_default_instance() && cr_ != nullptr;
}
inline void CTPTradingUnit::clear_cr() {
  if (GetArenaNoVirtual() == nullptr && cr_ != nullptr) {
    delete cr_;
  }
  cr_ = nullptr;
}
inline const ::pb::CTPCommissionRate& CTPTradingUnit::cr() const {
  const ::pb::CTPCommissionRate* p = cr_;
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.cr)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPCommissionRate*>(
      &::pb::_CTPCommissionRate_default_instance_);
}
inline ::pb::CTPCommissionRate* CTPTradingUnit::release_cr() {
  // @@protoc_insertion_point(field_release:pb.CTPTradingUnit.cr)
  
  ::pb::CTPCommissionRate* temp = cr_;
  cr_ = nullptr;
  return temp;
}
inline ::pb::CTPCommissionRate* CTPTradingUnit::mutable_cr() {
  
  if (cr_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPCommissionRate>(GetArenaNoVirtual());
    cr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnit.cr)
  return cr_;
}
inline void CTPTradingUnit::set_allocated_cr(::pb::CTPCommissionRate* cr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cr_;
  }
  if (cr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cr, submessage_arena);
    }
    
  } else {
    
  }
  cr_ = cr;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradingUnit.cr)
}

// .pb.CTPMarginRate mr = 15;
inline bool CTPTradingUnit::has_mr() const {
  return this != internal_default_instance() && mr_ != nullptr;
}
inline void CTPTradingUnit::clear_mr() {
  if (GetArenaNoVirtual() == nullptr && mr_ != nullptr) {
    delete mr_;
  }
  mr_ = nullptr;
}
inline const ::pb::CTPMarginRate& CTPTradingUnit::mr() const {
  const ::pb::CTPMarginRate* p = mr_;
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnit.mr)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPMarginRate*>(
      &::pb::_CTPMarginRate_default_instance_);
}
inline ::pb::CTPMarginRate* CTPTradingUnit::release_mr() {
  // @@protoc_insertion_point(field_release:pb.CTPTradingUnit.mr)
  
  ::pb::CTPMarginRate* temp = mr_;
  mr_ = nullptr;
  return temp;
}
inline ::pb::CTPMarginRate* CTPTradingUnit::mutable_mr() {
  
  if (mr_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPMarginRate>(GetArenaNoVirtual());
    mr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnit.mr)
  return mr_;
}
inline void CTPTradingUnit::set_allocated_mr(::pb::CTPMarginRate* mr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mr_;
  }
  if (mr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mr, submessage_arena);
    }
    
  } else {
    
  }
  mr_ = mr;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradingUnit.mr)
}

// -------------------------------------------------------------------

// CTPForceCloseTimeRule

// int64 start = 1;
inline void CTPForceCloseTimeRule::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPForceCloseTimeRule::start() const {
  // @@protoc_insertion_point(field_get:pb.CTPForceCloseTimeRule.start)
  return start_;
}
inline void CTPForceCloseTimeRule::set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPForceCloseTimeRule.start)
}

// int64 end = 2;
inline void CTPForceCloseTimeRule::clear_end() {
  end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPForceCloseTimeRule::end() const {
  // @@protoc_insertion_point(field_get:pb.CTPForceCloseTimeRule.end)
  return end_;
}
inline void CTPForceCloseTimeRule::set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPForceCloseTimeRule.end)
}

// int64 disable_open_start = 3;
inline void CTPForceCloseTimeRule::clear_disable_open_start() {
  disable_open_start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPForceCloseTimeRule::disable_open_start() const {
  // @@protoc_insertion_point(field_get:pb.CTPForceCloseTimeRule.disable_open_start)
  return disable_open_start_;
}
inline void CTPForceCloseTimeRule::set_disable_open_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  disable_open_start_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPForceCloseTimeRule.disable_open_start)
}

// -------------------------------------------------------------------

// CTPTradingUnitOption

// int32 limit_price_disable_open = 1;
inline void CTPTradingUnitOption::clear_limit_price_disable_open() {
  limit_price_disable_open_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradingUnitOption::limit_price_disable_open() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.limit_price_disable_open)
  return limit_price_disable_open_;
}
inline void CTPTradingUnitOption::set_limit_price_disable_open(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_price_disable_open_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.limit_price_disable_open)
}

// int32 limit_price_force_close = 2;
inline void CTPTradingUnitOption::clear_limit_price_force_close() {
  limit_price_force_close_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradingUnitOption::limit_price_force_close() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.limit_price_force_close)
  return limit_price_force_close_;
}
inline void CTPTradingUnitOption::set_limit_price_force_close(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_price_force_close_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.limit_price_force_close)
}

// double pre_position_percentage_threshold = 3;
inline void CTPTradingUnitOption::clear_pre_position_percentage_threshold() {
  pre_position_percentage_threshold_ = 0;
}
inline double CTPTradingUnitOption::pre_position_percentage_threshold() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.pre_position_percentage_threshold)
  return pre_position_percentage_threshold_;
}
inline void CTPTradingUnitOption::set_pre_position_percentage_threshold(double value) {
  
  pre_position_percentage_threshold_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.pre_position_percentage_threshold)
}

// double pre_position_threshold = 4;
inline void CTPTradingUnitOption::clear_pre_position_threshold() {
  pre_position_threshold_ = 0;
}
inline double CTPTradingUnitOption::pre_position_threshold() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.pre_position_threshold)
  return pre_position_threshold_;
}
inline void CTPTradingUnitOption::set_pre_position_threshold(double value) {
  
  pre_position_threshold_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.pre_position_threshold)
}

// double pre_volume_percentage_threshold = 5;
inline void CTPTradingUnitOption::clear_pre_volume_percentage_threshold() {
  pre_volume_percentage_threshold_ = 0;
}
inline double CTPTradingUnitOption::pre_volume_percentage_threshold() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.pre_volume_percentage_threshold)
  return pre_volume_percentage_threshold_;
}
inline void CTPTradingUnitOption::set_pre_volume_percentage_threshold(double value) {
  
  pre_volume_percentage_threshold_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.pre_volume_percentage_threshold)
}

// double pre_volume_threshold = 6;
inline void CTPTradingUnitOption::clear_pre_volume_threshold() {
  pre_volume_threshold_ = 0;
}
inline double CTPTradingUnitOption::pre_volume_threshold() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.pre_volume_threshold)
  return pre_volume_threshold_;
}
inline void CTPTradingUnitOption::set_pre_volume_threshold(double value) {
  
  pre_volume_threshold_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.pre_volume_threshold)
}

// double single_product_margin_weight_limit = 7;
inline void CTPTradingUnitOption::clear_single_product_margin_weight_limit() {
  single_product_margin_weight_limit_ = 0;
}
inline double CTPTradingUnitOption::single_product_margin_weight_limit() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.single_product_margin_weight_limit)
  return single_product_margin_weight_limit_;
}
inline void CTPTradingUnitOption::set_single_product_margin_weight_limit(double value) {
  
  single_product_margin_weight_limit_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.single_product_margin_weight_limit)
}

// repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
inline int CTPTradingUnitOption::fcr_list_size() const {
  return fcr_list_.size();
}
inline void CTPTradingUnitOption::clear_fcr_list() {
  fcr_list_.Clear();
}
inline ::pb::CTPForceCloseTimeRule* CTPTradingUnitOption::mutable_fcr_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnitOption.fcr_list)
  return fcr_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPForceCloseTimeRule >*
CTPTradingUnitOption::mutable_fcr_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnitOption.fcr_list)
  return &fcr_list_;
}
inline const ::pb::CTPForceCloseTimeRule& CTPTradingUnitOption::fcr_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.fcr_list)
  return fcr_list_.Get(index);
}
inline ::pb::CTPForceCloseTimeRule* CTPTradingUnitOption::add_fcr_list() {
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnitOption.fcr_list)
  return fcr_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPForceCloseTimeRule >&
CTPTradingUnitOption::fcr_list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnitOption.fcr_list)
  return fcr_list_;
}

// bool disable_open = 9;
inline void CTPTradingUnitOption::clear_disable_open() {
  disable_open_ = false;
}
inline bool CTPTradingUnitOption::disable_open() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.disable_open)
  return disable_open_;
}
inline void CTPTradingUnitOption::set_disable_open(bool value) {
  
  disable_open_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.disable_open)
}

// repeated .pb.CTPCommissionRateItem cr_settings = 10;
inline int CTPTradingUnitOption::cr_settings_size() const {
  return cr_settings_.size();
}
inline void CTPTradingUnitOption::clear_cr_settings() {
  cr_settings_.Clear();
}
inline ::pb::CTPCommissionRateItem* CTPTradingUnitOption::mutable_cr_settings(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnitOption.cr_settings)
  return cr_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCommissionRateItem >*
CTPTradingUnitOption::mutable_cr_settings() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnitOption.cr_settings)
  return &cr_settings_;
}
inline const ::pb::CTPCommissionRateItem& CTPTradingUnitOption::cr_settings(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.cr_settings)
  return cr_settings_.Get(index);
}
inline ::pb::CTPCommissionRateItem* CTPTradingUnitOption::add_cr_settings() {
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnitOption.cr_settings)
  return cr_settings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPCommissionRateItem >&
CTPTradingUnitOption::cr_settings() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnitOption.cr_settings)
  return cr_settings_;
}

// .pb.CTPMarginItem margin_rate = 11;
inline bool CTPTradingUnitOption::has_margin_rate() const {
  return this != internal_default_instance() && margin_rate_ != nullptr;
}
inline void CTPTradingUnitOption::clear_margin_rate() {
  if (GetArenaNoVirtual() == nullptr && margin_rate_ != nullptr) {
    delete margin_rate_;
  }
  margin_rate_ = nullptr;
}
inline const ::pb::CTPMarginItem& CTPTradingUnitOption::margin_rate() const {
  const ::pb::CTPMarginItem* p = margin_rate_;
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.margin_rate)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPMarginItem*>(
      &::pb::_CTPMarginItem_default_instance_);
}
inline ::pb::CTPMarginItem* CTPTradingUnitOption::release_margin_rate() {
  // @@protoc_insertion_point(field_release:pb.CTPTradingUnitOption.margin_rate)
  
  ::pb::CTPMarginItem* temp = margin_rate_;
  margin_rate_ = nullptr;
  return temp;
}
inline ::pb::CTPMarginItem* CTPTradingUnitOption::mutable_margin_rate() {
  
  if (margin_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPMarginItem>(GetArenaNoVirtual());
    margin_rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnitOption.margin_rate)
  return margin_rate_;
}
inline void CTPTradingUnitOption::set_allocated_margin_rate(::pb::CTPMarginItem* margin_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete margin_rate_;
  }
  if (margin_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      margin_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, margin_rate, submessage_arena);
    }
    
  } else {
    
  }
  margin_rate_ = margin_rate;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradingUnitOption.margin_rate)
}

// repeated int32 stoploss_candidates = 12;
inline int CTPTradingUnitOption::stoploss_candidates_size() const {
  return stoploss_candidates_.size();
}
inline void CTPTradingUnitOption::clear_stoploss_candidates() {
  stoploss_candidates_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradingUnitOption::stoploss_candidates(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.stoploss_candidates)
  return stoploss_candidates_.Get(index);
}
inline void CTPTradingUnitOption::set_stoploss_candidates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  stoploss_candidates_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.stoploss_candidates)
}
inline void CTPTradingUnitOption::add_stoploss_candidates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  stoploss_candidates_.Add(value);
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnitOption.stoploss_candidates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CTPTradingUnitOption::stoploss_candidates() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnitOption.stoploss_candidates)
  return stoploss_candidates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CTPTradingUnitOption::mutable_stoploss_candidates() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnitOption.stoploss_candidates)
  return &stoploss_candidates_;
}

// repeated int32 take_profit_candidates = 13;
inline int CTPTradingUnitOption::take_profit_candidates_size() const {
  return take_profit_candidates_.size();
}
inline void CTPTradingUnitOption::clear_take_profit_candidates() {
  take_profit_candidates_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradingUnitOption::take_profit_candidates(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.take_profit_candidates)
  return take_profit_candidates_.Get(index);
}
inline void CTPTradingUnitOption::set_take_profit_candidates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  take_profit_candidates_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.take_profit_candidates)
}
inline void CTPTradingUnitOption::add_take_profit_candidates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  take_profit_candidates_.Add(value);
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnitOption.take_profit_candidates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CTPTradingUnitOption::take_profit_candidates() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnitOption.take_profit_candidates)
  return take_profit_candidates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CTPTradingUnitOption::mutable_take_profit_candidates() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnitOption.take_profit_candidates)
  return &take_profit_candidates_;
}

// repeated int32 volume_candidates = 14;
inline int CTPTradingUnitOption::volume_candidates_size() const {
  return volume_candidates_.size();
}
inline void CTPTradingUnitOption::clear_volume_candidates() {
  volume_candidates_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradingUnitOption::volume_candidates(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.volume_candidates)
  return volume_candidates_.Get(index);
}
inline void CTPTradingUnitOption::set_volume_candidates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_candidates_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.volume_candidates)
}
inline void CTPTradingUnitOption::add_volume_candidates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_candidates_.Add(value);
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnitOption.volume_candidates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CTPTradingUnitOption::volume_candidates() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnitOption.volume_candidates)
  return volume_candidates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CTPTradingUnitOption::mutable_volume_candidates() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnitOption.volume_candidates)
  return &volume_candidates_;
}

// repeated string disable_open_symbol_list = 15;
inline int CTPTradingUnitOption::disable_open_symbol_list_size() const {
  return disable_open_symbol_list_.size();
}
inline void CTPTradingUnitOption::clear_disable_open_symbol_list() {
  disable_open_symbol_list_.Clear();
}
inline const std::string& CTPTradingUnitOption::disable_open_symbol_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.disable_open_symbol_list)
  return disable_open_symbol_list_.Get(index);
}
inline std::string* CTPTradingUnitOption::mutable_disable_open_symbol_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnitOption.disable_open_symbol_list)
  return disable_open_symbol_list_.Mutable(index);
}
inline void CTPTradingUnitOption::set_disable_open_symbol_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.disable_open_symbol_list)
  disable_open_symbol_list_.Mutable(index)->assign(value);
}
inline void CTPTradingUnitOption::set_disable_open_symbol_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.disable_open_symbol_list)
  disable_open_symbol_list_.Mutable(index)->assign(std::move(value));
}
inline void CTPTradingUnitOption::set_disable_open_symbol_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disable_open_symbol_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.CTPTradingUnitOption.disable_open_symbol_list)
}
inline void CTPTradingUnitOption::set_disable_open_symbol_list(int index, const char* value, size_t size) {
  disable_open_symbol_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradingUnitOption.disable_open_symbol_list)
}
inline std::string* CTPTradingUnitOption::add_disable_open_symbol_list() {
  // @@protoc_insertion_point(field_add_mutable:pb.CTPTradingUnitOption.disable_open_symbol_list)
  return disable_open_symbol_list_.Add();
}
inline void CTPTradingUnitOption::add_disable_open_symbol_list(const std::string& value) {
  disable_open_symbol_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnitOption.disable_open_symbol_list)
}
inline void CTPTradingUnitOption::add_disable_open_symbol_list(std::string&& value) {
  disable_open_symbol_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnitOption.disable_open_symbol_list)
}
inline void CTPTradingUnitOption::add_disable_open_symbol_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disable_open_symbol_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.CTPTradingUnitOption.disable_open_symbol_list)
}
inline void CTPTradingUnitOption::add_disable_open_symbol_list(const char* value, size_t size) {
  disable_open_symbol_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.CTPTradingUnitOption.disable_open_symbol_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CTPTradingUnitOption::disable_open_symbol_list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnitOption.disable_open_symbol_list)
  return disable_open_symbol_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CTPTradingUnitOption::mutable_disable_open_symbol_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnitOption.disable_open_symbol_list)
  return &disable_open_symbol_list_;
}

// repeated string disable_open_class_list = 16;
inline int CTPTradingUnitOption::disable_open_class_list_size() const {
  return disable_open_class_list_.size();
}
inline void CTPTradingUnitOption::clear_disable_open_class_list() {
  disable_open_class_list_.Clear();
}
inline const std::string& CTPTradingUnitOption::disable_open_class_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.disable_open_class_list)
  return disable_open_class_list_.Get(index);
}
inline std::string* CTPTradingUnitOption::mutable_disable_open_class_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingUnitOption.disable_open_class_list)
  return disable_open_class_list_.Mutable(index);
}
inline void CTPTradingUnitOption::set_disable_open_class_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.disable_open_class_list)
  disable_open_class_list_.Mutable(index)->assign(value);
}
inline void CTPTradingUnitOption::set_disable_open_class_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.disable_open_class_list)
  disable_open_class_list_.Mutable(index)->assign(std::move(value));
}
inline void CTPTradingUnitOption::set_disable_open_class_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disable_open_class_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.CTPTradingUnitOption.disable_open_class_list)
}
inline void CTPTradingUnitOption::set_disable_open_class_list(int index, const char* value, size_t size) {
  disable_open_class_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradingUnitOption.disable_open_class_list)
}
inline std::string* CTPTradingUnitOption::add_disable_open_class_list() {
  // @@protoc_insertion_point(field_add_mutable:pb.CTPTradingUnitOption.disable_open_class_list)
  return disable_open_class_list_.Add();
}
inline void CTPTradingUnitOption::add_disable_open_class_list(const std::string& value) {
  disable_open_class_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnitOption.disable_open_class_list)
}
inline void CTPTradingUnitOption::add_disable_open_class_list(std::string&& value) {
  disable_open_class_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.CTPTradingUnitOption.disable_open_class_list)
}
inline void CTPTradingUnitOption::add_disable_open_class_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disable_open_class_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.CTPTradingUnitOption.disable_open_class_list)
}
inline void CTPTradingUnitOption::add_disable_open_class_list(const char* value, size_t size) {
  disable_open_class_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.CTPTradingUnitOption.disable_open_class_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CTPTradingUnitOption::disable_open_class_list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingUnitOption.disable_open_class_list)
  return disable_open_class_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CTPTradingUnitOption::mutable_disable_open_class_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingUnitOption.disable_open_class_list)
  return &disable_open_class_list_;
}

// int32 open_days_limit = 17;
inline void CTPTradingUnitOption::clear_open_days_limit() {
  open_days_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradingUnitOption::open_days_limit() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingUnitOption.open_days_limit)
  return open_days_limit_;
}
inline void CTPTradingUnitOption::set_open_days_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_days_limit_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingUnitOption.open_days_limit)
}

// -------------------------------------------------------------------

// MarginCheckRule

// int64 start = 1;
inline void MarginCheckRule::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarginCheckRule::start() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.start)
  return start_;
}
inline void MarginCheckRule::set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.start)
}

// int64 end = 2;
inline void MarginCheckRule::clear_end() {
  end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarginCheckRule::end() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.end)
  return end_;
}
inline void MarginCheckRule::set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.end)
}

// int32 force_close_order = 3;
inline void MarginCheckRule::clear_force_close_order() {
  force_close_order_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarginCheckRule::force_close_order() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.force_close_order)
  return force_close_order_;
}
inline void MarginCheckRule::set_force_close_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  force_close_order_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.force_close_order)
}

// double warning_level = 4;
inline void MarginCheckRule::clear_warning_level() {
  warning_level_ = 0;
}
inline double MarginCheckRule::warning_level() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.warning_level)
  return warning_level_;
}
inline void MarginCheckRule::set_warning_level(double value) {
  
  warning_level_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.warning_level)
}

// double force_close_level = 5;
inline void MarginCheckRule::clear_force_close_level() {
  force_close_level_ = 0;
}
inline double MarginCheckRule::force_close_level() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.force_close_level)
  return force_close_level_;
}
inline void MarginCheckRule::set_force_close_level(double value) {
  
  force_close_level_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.force_close_level)
}

// double common_balance_multiple = 6;
inline void MarginCheckRule::clear_common_balance_multiple() {
  common_balance_multiple_ = 0;
}
inline double MarginCheckRule::common_balance_multiple() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.common_balance_multiple)
  return common_balance_multiple_;
}
inline void MarginCheckRule::set_common_balance_multiple(double value) {
  
  common_balance_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.common_balance_multiple)
}

// bool disable_open_under_warning_level = 7;
inline void MarginCheckRule::clear_disable_open_under_warning_level() {
  disable_open_under_warning_level_ = false;
}
inline bool MarginCheckRule::disable_open_under_warning_level() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.disable_open_under_warning_level)
  return disable_open_under_warning_level_;
}
inline void MarginCheckRule::set_disable_open_under_warning_level(bool value) {
  
  disable_open_under_warning_level_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.disable_open_under_warning_level)
}

// double warning_level_by_prefer_ratio = 8;
inline void MarginCheckRule::clear_warning_level_by_prefer_ratio() {
  warning_level_by_prefer_ratio_ = 0;
}
inline double MarginCheckRule::warning_level_by_prefer_ratio() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.warning_level_by_prefer_ratio)
  return warning_level_by_prefer_ratio_;
}
inline void MarginCheckRule::set_warning_level_by_prefer_ratio(double value) {
  
  warning_level_by_prefer_ratio_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.warning_level_by_prefer_ratio)
}

// double force_close_level_by_prefer_ratio = 9;
inline void MarginCheckRule::clear_force_close_level_by_prefer_ratio() {
  force_close_level_by_prefer_ratio_ = 0;
}
inline double MarginCheckRule::force_close_level_by_prefer_ratio() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.force_close_level_by_prefer_ratio)
  return force_close_level_by_prefer_ratio_;
}
inline void MarginCheckRule::set_force_close_level_by_prefer_ratio(double value) {
  
  force_close_level_by_prefer_ratio_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.force_close_level_by_prefer_ratio)
}

// double warning_level_by_margin = 10;
inline void MarginCheckRule::clear_warning_level_by_margin() {
  warning_level_by_margin_ = 0;
}
inline double MarginCheckRule::warning_level_by_margin() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.warning_level_by_margin)
  return warning_level_by_margin_;
}
inline void MarginCheckRule::set_warning_level_by_margin(double value) {
  
  warning_level_by_margin_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.warning_level_by_margin)
}

// double force_close_level_by_margin = 11;
inline void MarginCheckRule::clear_force_close_level_by_margin() {
  force_close_level_by_margin_ = 0;
}
inline double MarginCheckRule::force_close_level_by_margin() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.force_close_level_by_margin)
  return force_close_level_by_margin_;
}
inline void MarginCheckRule::set_force_close_level_by_margin(double value) {
  
  force_close_level_by_margin_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.force_close_level_by_margin)
}

// double margin_ceiling = 12;
inline void MarginCheckRule::clear_margin_ceiling() {
  margin_ceiling_ = 0;
}
inline double MarginCheckRule::margin_ceiling() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.margin_ceiling)
  return margin_ceiling_;
}
inline void MarginCheckRule::set_margin_ceiling(double value) {
  
  margin_ceiling_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.margin_ceiling)
}

// double position_amount_ceiling = 13;
inline void MarginCheckRule::clear_position_amount_ceiling() {
  position_amount_ceiling_ = 0;
}
inline double MarginCheckRule::position_amount_ceiling() const {
  // @@protoc_insertion_point(field_get:pb.MarginCheckRule.position_amount_ceiling)
  return position_amount_ceiling_;
}
inline void MarginCheckRule::set_position_amount_ceiling(double value) {
  
  position_amount_ceiling_ = value;
  // @@protoc_insertion_point(field_set:pb.MarginCheckRule.position_amount_ceiling)
}

// -------------------------------------------------------------------

// SettlementUnitOption

// int64 id = 1;
inline void SettlementUnitOption::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SettlementUnitOption::id() const {
  // @@protoc_insertion_point(field_get:pb.SettlementUnitOption.id)
  return id_;
}
inline void SettlementUnitOption::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.SettlementUnitOption.id)
}

// string comment = 2;
inline void SettlementUnitOption::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SettlementUnitOption::comment() const {
  // @@protoc_insertion_point(field_get:pb.SettlementUnitOption.comment)
  return comment_.GetNoArena();
}
inline void SettlementUnitOption::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SettlementUnitOption.comment)
}
inline void SettlementUnitOption::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SettlementUnitOption.comment)
}
inline void SettlementUnitOption::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SettlementUnitOption.comment)
}
inline void SettlementUnitOption::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SettlementUnitOption.comment)
}
inline std::string* SettlementUnitOption::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:pb.SettlementUnitOption.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettlementUnitOption::release_comment() {
  // @@protoc_insertion_point(field_release:pb.SettlementUnitOption.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettlementUnitOption::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pb.SettlementUnitOption.comment)
}

// int32 settlement_group = 3;
inline void SettlementUnitOption::clear_settlement_group() {
  settlement_group_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettlementUnitOption::settlement_group() const {
  // @@protoc_insertion_point(field_get:pb.SettlementUnitOption.settlement_group)
  return settlement_group_;
}
inline void SettlementUnitOption::set_settlement_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settlement_group_ = value;
  // @@protoc_insertion_point(field_set:pb.SettlementUnitOption.settlement_group)
}

// int32 available_check_level = 4;
inline void SettlementUnitOption::clear_available_check_level() {
  available_check_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettlementUnitOption::available_check_level() const {
  // @@protoc_insertion_point(field_get:pb.SettlementUnitOption.available_check_level)
  return available_check_level_;
}
inline void SettlementUnitOption::set_available_check_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  available_check_level_ = value;
  // @@protoc_insertion_point(field_set:pb.SettlementUnitOption.available_check_level)
}

// bool force_close_on = 5;
inline void SettlementUnitOption::clear_force_close_on() {
  force_close_on_ = false;
}
inline bool SettlementUnitOption::force_close_on() const {
  // @@protoc_insertion_point(field_get:pb.SettlementUnitOption.force_close_on)
  return force_close_on_;
}
inline void SettlementUnitOption::set_force_close_on(bool value) {
  
  force_close_on_ = value;
  // @@protoc_insertion_point(field_set:pb.SettlementUnitOption.force_close_on)
}

// repeated .pb.MarginCheckRule mcr_list = 6;
inline int SettlementUnitOption::mcr_list_size() const {
  return mcr_list_.size();
}
inline void SettlementUnitOption::clear_mcr_list() {
  mcr_list_.Clear();
}
inline ::pb::MarginCheckRule* SettlementUnitOption::mutable_mcr_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SettlementUnitOption.mcr_list)
  return mcr_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MarginCheckRule >*
SettlementUnitOption::mutable_mcr_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.SettlementUnitOption.mcr_list)
  return &mcr_list_;
}
inline const ::pb::MarginCheckRule& SettlementUnitOption::mcr_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.SettlementUnitOption.mcr_list)
  return mcr_list_.Get(index);
}
inline ::pb::MarginCheckRule* SettlementUnitOption::add_mcr_list() {
  // @@protoc_insertion_point(field_add:pb.SettlementUnitOption.mcr_list)
  return mcr_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MarginCheckRule >&
SettlementUnitOption::mcr_list() const {
  // @@protoc_insertion_point(field_list:pb.SettlementUnitOption.mcr_list)
  return mcr_list_;
}

// bool disable_open = 7;
inline void SettlementUnitOption::clear_disable_open() {
  disable_open_ = false;
}
inline bool SettlementUnitOption::disable_open() const {
  // @@protoc_insertion_point(field_get:pb.SettlementUnitOption.disable_open)
  return disable_open_;
}
inline void SettlementUnitOption::set_disable_open(bool value) {
  
  disable_open_ = value;
  // @@protoc_insertion_point(field_set:pb.SettlementUnitOption.disable_open)
}

// -------------------------------------------------------------------

// CTPTradingAccount

// .pb.AccountMoneySummary summary = 1;
inline bool CTPTradingAccount::has_summary() const {
  return this != internal_default_instance() && summary_ != nullptr;
}
inline const ::pb::AccountMoneySummary& CTPTradingAccount::summary() const {
  const ::pb::AccountMoneySummary* p = summary_;
  // @@protoc_insertion_point(field_get:pb.CTPTradingAccount.summary)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::AccountMoneySummary*>(
      &::pb::_AccountMoneySummary_default_instance_);
}
inline ::pb::AccountMoneySummary* CTPTradingAccount::release_summary() {
  // @@protoc_insertion_point(field_release:pb.CTPTradingAccount.summary)
  
  ::pb::AccountMoneySummary* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::pb::AccountMoneySummary* CTPTradingAccount::mutable_summary() {
  
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::AccountMoneySummary>(GetArenaNoVirtual());
    summary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingAccount.summary)
  return summary_;
}
inline void CTPTradingAccount::set_allocated_summary(::pb::AccountMoneySummary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    
  } else {
    
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradingAccount.summary)
}

// repeated .pb.MoneyTransferRecord mtr_list = 2;
inline int CTPTradingAccount::mtr_list_size() const {
  return mtr_list_.size();
}
inline ::pb::MoneyTransferRecord* CTPTradingAccount::mutable_mtr_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingAccount.mtr_list)
  return mtr_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MoneyTransferRecord >*
CTPTradingAccount::mutable_mtr_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingAccount.mtr_list)
  return &mtr_list_;
}
inline const ::pb::MoneyTransferRecord& CTPTradingAccount::mtr_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingAccount.mtr_list)
  return mtr_list_.Get(index);
}
inline ::pb::MoneyTransferRecord* CTPTradingAccount::add_mtr_list() {
  // @@protoc_insertion_point(field_add:pb.CTPTradingAccount.mtr_list)
  return mtr_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MoneyTransferRecord >&
CTPTradingAccount::mtr_list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingAccount.mtr_list)
  return mtr_list_;
}

// repeated .pb.CTPTradingUnit tu_list = 3;
inline int CTPTradingAccount::tu_list_size() const {
  return tu_list_.size();
}
inline void CTPTradingAccount::clear_tu_list() {
  tu_list_.Clear();
}
inline ::pb::CTPTradingUnit* CTPTradingAccount::mutable_tu_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingAccount.tu_list)
  return tu_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradingUnit >*
CTPTradingAccount::mutable_tu_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPTradingAccount.tu_list)
  return &tu_list_;
}
inline const ::pb::CTPTradingUnit& CTPTradingAccount::tu_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingAccount.tu_list)
  return tu_list_.Get(index);
}
inline ::pb::CTPTradingUnit* CTPTradingAccount::add_tu_list() {
  // @@protoc_insertion_point(field_add:pb.CTPTradingAccount.tu_list)
  return tu_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CTPTradingUnit >&
CTPTradingAccount::tu_list() const {
  // @@protoc_insertion_point(field_list:pb.CTPTradingAccount.tu_list)
  return tu_list_;
}

// int32 last_settle_date = 4;
inline void CTPTradingAccount::clear_last_settle_date() {
  last_settle_date_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPTradingAccount::last_settle_date() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingAccount.last_settle_date)
  return last_settle_date_;
}
inline void CTPTradingAccount::set_last_settle_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_settle_date_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingAccount.last_settle_date)
}

// .pb.SettlementUnitOption options = 5;
inline bool CTPTradingAccount::has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline void CTPTradingAccount::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::pb::SettlementUnitOption& CTPTradingAccount::options() const {
  const ::pb::SettlementUnitOption* p = options_;
  // @@protoc_insertion_point(field_get:pb.CTPTradingAccount.options)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SettlementUnitOption*>(
      &::pb::_SettlementUnitOption_default_instance_);
}
inline ::pb::SettlementUnitOption* CTPTradingAccount::release_options() {
  // @@protoc_insertion_point(field_release:pb.CTPTradingAccount.options)
  
  ::pb::SettlementUnitOption* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::pb::SettlementUnitOption* CTPTradingAccount::mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SettlementUnitOption>(GetArenaNoVirtual());
    options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingAccount.options)
  return options_;
}
inline void CTPTradingAccount::set_allocated_options(::pb::SettlementUnitOption* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradingAccount.options)
}

// -------------------------------------------------------------------

// CTPTradingAccountSnapshot

// .pb.CTPTradingAccount account = 1;
inline bool CTPTradingAccountSnapshot::has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline void CTPTradingAccountSnapshot::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::pb::CTPTradingAccount& CTPTradingAccountSnapshot::account() const {
  const ::pb::CTPTradingAccount* p = account_;
  // @@protoc_insertion_point(field_get:pb.CTPTradingAccountSnapshot.account)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPTradingAccount*>(
      &::pb::_CTPTradingAccount_default_instance_);
}
inline ::pb::CTPTradingAccount* CTPTradingAccountSnapshot::release_account() {
  // @@protoc_insertion_point(field_release:pb.CTPTradingAccountSnapshot.account)
  
  ::pb::CTPTradingAccount* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::pb::CTPTradingAccount* CTPTradingAccountSnapshot::mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPTradingAccount>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingAccountSnapshot.account)
  return account_;
}
inline void CTPTradingAccountSnapshot::set_allocated_account(::pb::CTPTradingAccount* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradingAccountSnapshot.account)
}

// int64 time = 2;
inline void CTPTradingAccountSnapshot::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTPTradingAccountSnapshot::time() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingAccountSnapshot.time)
  return time_;
}
inline void CTPTradingAccountSnapshot::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPTradingAccountSnapshot.time)
}

// string comment = 3;
inline void CTPTradingAccountSnapshot::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPTradingAccountSnapshot::comment() const {
  // @@protoc_insertion_point(field_get:pb.CTPTradingAccountSnapshot.comment)
  return comment_.GetNoArena();
}
inline void CTPTradingAccountSnapshot::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPTradingAccountSnapshot.comment)
}
inline void CTPTradingAccountSnapshot::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPTradingAccountSnapshot.comment)
}
inline void CTPTradingAccountSnapshot::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPTradingAccountSnapshot.comment)
}
inline void CTPTradingAccountSnapshot::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPTradingAccountSnapshot.comment)
}
inline std::string* CTPTradingAccountSnapshot::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPTradingAccountSnapshot.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPTradingAccountSnapshot::release_comment() {
  // @@protoc_insertion_point(field_release:pb.CTPTradingAccountSnapshot.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPTradingAccountSnapshot::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPTradingAccountSnapshot.comment)
}

// -------------------------------------------------------------------

// CTPRspInfo

// int32 error_id = 1;
inline void CTPRspInfo::clear_error_id() {
  error_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPRspInfo::error_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPRspInfo.error_id)
  return error_id_;
}
inline void CTPRspInfo::set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPRspInfo.error_id)
}

// bytes error_msg = 2;
inline void CTPRspInfo::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPRspInfo::error_msg() const {
  // @@protoc_insertion_point(field_get:pb.CTPRspInfo.error_msg)
  return error_msg_.GetNoArena();
}
inline void CTPRspInfo::set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPRspInfo.error_msg)
}
inline void CTPRspInfo::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPRspInfo.error_msg)
}
inline void CTPRspInfo::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPRspInfo.error_msg)
}
inline void CTPRspInfo::set_error_msg(const void* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPRspInfo.error_msg)
}
inline std::string* CTPRspInfo::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPRspInfo.error_msg)
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPRspInfo::release_error_msg() {
  // @@protoc_insertion_point(field_release:pb.CTPRspInfo.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPRspInfo::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPRspInfo.error_msg)
}

// int32 request_id = 3;
inline void CTPRspInfo::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPRspInfo::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPRspInfo.request_id)
  return request_id_;
}
inline void CTPRspInfo::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPRspInfo.request_id)
}

// bool is_last = 4;
inline void CTPRspInfo::clear_is_last() {
  is_last_ = false;
}
inline bool CTPRspInfo::is_last() const {
  // @@protoc_insertion_point(field_get:pb.CTPRspInfo.is_last)
  return is_last_;
}
inline void CTPRspInfo::set_is_last(bool value) {
  
  is_last_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPRspInfo.is_last)
}

// -------------------------------------------------------------------

// CtpReqQryAccountRegister

// string broker_id = 1;
inline void CtpReqQryAccountRegister::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqQryAccountRegister::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqQryAccountRegister.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpReqQryAccountRegister::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqQryAccountRegister.broker_id)
}
inline void CtpReqQryAccountRegister::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqQryAccountRegister.broker_id)
}
inline void CtpReqQryAccountRegister::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqQryAccountRegister.broker_id)
}
inline void CtpReqQryAccountRegister::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqQryAccountRegister.broker_id)
}
inline std::string* CtpReqQryAccountRegister::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqQryAccountRegister.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqQryAccountRegister::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqQryAccountRegister.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqQryAccountRegister::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqQryAccountRegister.broker_id)
}

// string account_id = 2;
inline void CtpReqQryAccountRegister::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqQryAccountRegister::account_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqQryAccountRegister.account_id)
  return account_id_.GetNoArena();
}
inline void CtpReqQryAccountRegister::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqQryAccountRegister.account_id)
}
inline void CtpReqQryAccountRegister::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqQryAccountRegister.account_id)
}
inline void CtpReqQryAccountRegister::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqQryAccountRegister.account_id)
}
inline void CtpReqQryAccountRegister::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqQryAccountRegister.account_id)
}
inline std::string* CtpReqQryAccountRegister::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqQryAccountRegister.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqQryAccountRegister::release_account_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqQryAccountRegister.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqQryAccountRegister::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqQryAccountRegister.account_id)
}

// string bank_id = 3;
inline void CtpReqQryAccountRegister::clear_bank_id() {
  bank_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqQryAccountRegister::bank_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqQryAccountRegister.bank_id)
  return bank_id_.GetNoArena();
}
inline void CtpReqQryAccountRegister::set_bank_id(const std::string& value) {
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqQryAccountRegister.bank_id)
}
inline void CtpReqQryAccountRegister::set_bank_id(std::string&& value) {
  
  bank_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqQryAccountRegister.bank_id)
}
inline void CtpReqQryAccountRegister::set_bank_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqQryAccountRegister.bank_id)
}
inline void CtpReqQryAccountRegister::set_bank_id(const char* value, size_t size) {
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqQryAccountRegister.bank_id)
}
inline std::string* CtpReqQryAccountRegister::mutable_bank_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqQryAccountRegister.bank_id)
  return bank_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqQryAccountRegister::release_bank_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqQryAccountRegister.bank_id)
  
  return bank_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqQryAccountRegister::set_allocated_bank_id(std::string* bank_id) {
  if (bank_id != nullptr) {
    
  } else {
    
  }
  bank_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqQryAccountRegister.bank_id)
}

// string bank_branch_id = 4;
inline void CtpReqQryAccountRegister::clear_bank_branch_id() {
  bank_branch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqQryAccountRegister::bank_branch_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqQryAccountRegister.bank_branch_id)
  return bank_branch_id_.GetNoArena();
}
inline void CtpReqQryAccountRegister::set_bank_branch_id(const std::string& value) {
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqQryAccountRegister.bank_branch_id)
}
inline void CtpReqQryAccountRegister::set_bank_branch_id(std::string&& value) {
  
  bank_branch_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqQryAccountRegister.bank_branch_id)
}
inline void CtpReqQryAccountRegister::set_bank_branch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqQryAccountRegister.bank_branch_id)
}
inline void CtpReqQryAccountRegister::set_bank_branch_id(const char* value, size_t size) {
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqQryAccountRegister.bank_branch_id)
}
inline std::string* CtpReqQryAccountRegister::mutable_bank_branch_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqQryAccountRegister.bank_branch_id)
  return bank_branch_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqQryAccountRegister::release_bank_branch_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqQryAccountRegister.bank_branch_id)
  
  return bank_branch_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqQryAccountRegister::set_allocated_bank_branch_id(std::string* bank_branch_id) {
  if (bank_branch_id != nullptr) {
    
  } else {
    
  }
  bank_branch_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_branch_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqQryAccountRegister.bank_branch_id)
}

// string currency_id = 5;
inline void CtpReqQryAccountRegister::clear_currency_id() {
  currency_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqQryAccountRegister::currency_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqQryAccountRegister.currency_id)
  return currency_id_.GetNoArena();
}
inline void CtpReqQryAccountRegister::set_currency_id(const std::string& value) {
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqQryAccountRegister.currency_id)
}
inline void CtpReqQryAccountRegister::set_currency_id(std::string&& value) {
  
  currency_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqQryAccountRegister.currency_id)
}
inline void CtpReqQryAccountRegister::set_currency_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqQryAccountRegister.currency_id)
}
inline void CtpReqQryAccountRegister::set_currency_id(const char* value, size_t size) {
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqQryAccountRegister.currency_id)
}
inline std::string* CtpReqQryAccountRegister::mutable_currency_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqQryAccountRegister.currency_id)
  return currency_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqQryAccountRegister::release_currency_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqQryAccountRegister.currency_id)
  
  return currency_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqQryAccountRegister::set_allocated_currency_id(std::string* currency_id) {
  if (currency_id != nullptr) {
    
  } else {
    
  }
  currency_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqQryAccountRegister.currency_id)
}

// -------------------------------------------------------------------

// CtpRspQryAccountRegister

// int32 error_id = 1;
inline void CtpRspQryAccountRegister::clear_error_id() {
  error_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryAccountRegister::error_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.error_id)
  return error_id_;
}
inline void CtpRspQryAccountRegister::set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.error_id)
}

// string error_msg = 2;
inline void CtpRspQryAccountRegister::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::error_msg() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.error_msg)
  return error_msg_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.error_msg)
}
inline void CtpRspQryAccountRegister::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.error_msg)
}
inline void CtpRspQryAccountRegister::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.error_msg)
}
inline void CtpRspQryAccountRegister::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.error_msg)
}
inline std::string* CtpRspQryAccountRegister::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.error_msg)
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_error_msg() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.error_msg)
}

// int32 request_id = 3;
inline void CtpRspQryAccountRegister::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryAccountRegister::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.request_id)
  return request_id_;
}
inline void CtpRspQryAccountRegister::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.request_id)
}

// bool is_last = 4;
inline void CtpRspQryAccountRegister::clear_is_last() {
  is_last_ = false;
}
inline bool CtpRspQryAccountRegister::is_last() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.is_last)
  return is_last_;
}
inline void CtpRspQryAccountRegister::set_is_last(bool value) {
  
  is_last_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.is_last)
}

// string trading_day = 5;
inline void CtpRspQryAccountRegister::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.trading_day)
  return trading_day_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_trading_day(const std::string& value) {
  
  trading_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.trading_day)
}
inline void CtpRspQryAccountRegister::set_trading_day(std::string&& value) {
  
  trading_day_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.trading_day)
}
inline void CtpRspQryAccountRegister::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trading_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.trading_day)
}
inline void CtpRspQryAccountRegister::set_trading_day(const char* value, size_t size) {
  
  trading_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.trading_day)
}
inline std::string* CtpRspQryAccountRegister::mutable_trading_day() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.trading_day)
  return trading_day_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_trading_day() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.trading_day)
  
  return trading_day_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.trading_day)
}

// string bank_id = 6;
inline void CtpRspQryAccountRegister::clear_bank_id() {
  bank_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::bank_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.bank_id)
  return bank_id_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_bank_id(const std::string& value) {
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.bank_id)
}
inline void CtpRspQryAccountRegister::set_bank_id(std::string&& value) {
  
  bank_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.bank_id)
}
inline void CtpRspQryAccountRegister::set_bank_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.bank_id)
}
inline void CtpRspQryAccountRegister::set_bank_id(const char* value, size_t size) {
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.bank_id)
}
inline std::string* CtpRspQryAccountRegister::mutable_bank_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.bank_id)
  return bank_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_bank_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.bank_id)
  
  return bank_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_bank_id(std::string* bank_id) {
  if (bank_id != nullptr) {
    
  } else {
    
  }
  bank_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.bank_id)
}

// string bank_branch_id = 7;
inline void CtpRspQryAccountRegister::clear_bank_branch_id() {
  bank_branch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::bank_branch_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.bank_branch_id)
  return bank_branch_id_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_bank_branch_id(const std::string& value) {
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.bank_branch_id)
}
inline void CtpRspQryAccountRegister::set_bank_branch_id(std::string&& value) {
  
  bank_branch_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.bank_branch_id)
}
inline void CtpRspQryAccountRegister::set_bank_branch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.bank_branch_id)
}
inline void CtpRspQryAccountRegister::set_bank_branch_id(const char* value, size_t size) {
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.bank_branch_id)
}
inline std::string* CtpRspQryAccountRegister::mutable_bank_branch_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.bank_branch_id)
  return bank_branch_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_bank_branch_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.bank_branch_id)
  
  return bank_branch_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_bank_branch_id(std::string* bank_branch_id) {
  if (bank_branch_id != nullptr) {
    
  } else {
    
  }
  bank_branch_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_branch_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.bank_branch_id)
}

// string bank_account = 8;
inline void CtpRspQryAccountRegister::clear_bank_account() {
  bank_account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::bank_account() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.bank_account)
  return bank_account_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_bank_account(const std::string& value) {
  
  bank_account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.bank_account)
}
inline void CtpRspQryAccountRegister::set_bank_account(std::string&& value) {
  
  bank_account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.bank_account)
}
inline void CtpRspQryAccountRegister::set_bank_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.bank_account)
}
inline void CtpRspQryAccountRegister::set_bank_account(const char* value, size_t size) {
  
  bank_account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.bank_account)
}
inline std::string* CtpRspQryAccountRegister::mutable_bank_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.bank_account)
  return bank_account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_bank_account() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.bank_account)
  
  return bank_account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_bank_account(std::string* bank_account) {
  if (bank_account != nullptr) {
    
  } else {
    
  }
  bank_account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_account);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.bank_account)
}

// string broker_id = 9;
inline void CtpRspQryAccountRegister::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.broker_id)
}
inline void CtpRspQryAccountRegister::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.broker_id)
}
inline void CtpRspQryAccountRegister::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.broker_id)
}
inline void CtpRspQryAccountRegister::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.broker_id)
}
inline std::string* CtpRspQryAccountRegister::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.broker_id)
}

// string broker_branch_id = 10;
inline void CtpRspQryAccountRegister::clear_broker_branch_id() {
  broker_branch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::broker_branch_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.broker_branch_id)
  return broker_branch_id_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_broker_branch_id(const std::string& value) {
  
  broker_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.broker_branch_id)
}
inline void CtpRspQryAccountRegister::set_broker_branch_id(std::string&& value) {
  
  broker_branch_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.broker_branch_id)
}
inline void CtpRspQryAccountRegister::set_broker_branch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.broker_branch_id)
}
inline void CtpRspQryAccountRegister::set_broker_branch_id(const char* value, size_t size) {
  
  broker_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.broker_branch_id)
}
inline std::string* CtpRspQryAccountRegister::mutable_broker_branch_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.broker_branch_id)
  return broker_branch_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_broker_branch_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.broker_branch_id)
  
  return broker_branch_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_broker_branch_id(std::string* broker_branch_id) {
  if (broker_branch_id != nullptr) {
    
  } else {
    
  }
  broker_branch_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_branch_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.broker_branch_id)
}

// string account_id = 11;
inline void CtpRspQryAccountRegister::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::account_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.account_id)
  return account_id_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.account_id)
}
inline void CtpRspQryAccountRegister::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.account_id)
}
inline void CtpRspQryAccountRegister::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.account_id)
}
inline void CtpRspQryAccountRegister::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.account_id)
}
inline std::string* CtpRspQryAccountRegister::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_account_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.account_id)
}

// int32 id_card_type = 12;
inline void CtpRspQryAccountRegister::clear_id_card_type() {
  id_card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryAccountRegister::id_card_type() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.id_card_type)
  return id_card_type_;
}
inline void CtpRspQryAccountRegister::set_id_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_card_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.id_card_type)
}

// string identified_card_no = 13;
inline void CtpRspQryAccountRegister::clear_identified_card_no() {
  identified_card_no_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::identified_card_no() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.identified_card_no)
  return identified_card_no_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_identified_card_no(const std::string& value) {
  
  identified_card_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.identified_card_no)
}
inline void CtpRspQryAccountRegister::set_identified_card_no(std::string&& value) {
  
  identified_card_no_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.identified_card_no)
}
inline void CtpRspQryAccountRegister::set_identified_card_no(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identified_card_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.identified_card_no)
}
inline void CtpRspQryAccountRegister::set_identified_card_no(const char* value, size_t size) {
  
  identified_card_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.identified_card_no)
}
inline std::string* CtpRspQryAccountRegister::mutable_identified_card_no() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.identified_card_no)
  return identified_card_no_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_identified_card_no() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.identified_card_no)
  
  return identified_card_no_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_identified_card_no(std::string* identified_card_no) {
  if (identified_card_no != nullptr) {
    
  } else {
    
  }
  identified_card_no_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identified_card_no);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.identified_card_no)
}

// string customer_name = 14;
inline void CtpRspQryAccountRegister::clear_customer_name() {
  customer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::customer_name() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.customer_name)
  return customer_name_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_customer_name(const std::string& value) {
  
  customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.customer_name)
}
inline void CtpRspQryAccountRegister::set_customer_name(std::string&& value) {
  
  customer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.customer_name)
}
inline void CtpRspQryAccountRegister::set_customer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.customer_name)
}
inline void CtpRspQryAccountRegister::set_customer_name(const char* value, size_t size) {
  
  customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.customer_name)
}
inline std::string* CtpRspQryAccountRegister::mutable_customer_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.customer_name)
  return customer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_customer_name() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.customer_name)
  
  return customer_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_customer_name(std::string* customer_name) {
  if (customer_name != nullptr) {
    
  } else {
    
  }
  customer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_name);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.customer_name)
}

// string currency_id = 15;
inline void CtpRspQryAccountRegister::clear_currency_id() {
  currency_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::currency_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.currency_id)
  return currency_id_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_currency_id(const std::string& value) {
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.currency_id)
}
inline void CtpRspQryAccountRegister::set_currency_id(std::string&& value) {
  
  currency_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.currency_id)
}
inline void CtpRspQryAccountRegister::set_currency_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.currency_id)
}
inline void CtpRspQryAccountRegister::set_currency_id(const char* value, size_t size) {
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.currency_id)
}
inline std::string* CtpRspQryAccountRegister::mutable_currency_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.currency_id)
  return currency_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_currency_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.currency_id)
  
  return currency_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_currency_id(std::string* currency_id) {
  if (currency_id != nullptr) {
    
  } else {
    
  }
  currency_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.currency_id)
}

// int32 open_or_destory = 16;
inline void CtpRspQryAccountRegister::clear_open_or_destory() {
  open_or_destory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryAccountRegister::open_or_destory() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.open_or_destory)
  return open_or_destory_;
}
inline void CtpRspQryAccountRegister::set_open_or_destory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_or_destory_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.open_or_destory)
}

// string reg_date = 17;
inline void CtpRspQryAccountRegister::clear_reg_date() {
  reg_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::reg_date() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.reg_date)
  return reg_date_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_reg_date(const std::string& value) {
  
  reg_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.reg_date)
}
inline void CtpRspQryAccountRegister::set_reg_date(std::string&& value) {
  
  reg_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.reg_date)
}
inline void CtpRspQryAccountRegister::set_reg_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reg_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.reg_date)
}
inline void CtpRspQryAccountRegister::set_reg_date(const char* value, size_t size) {
  
  reg_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.reg_date)
}
inline std::string* CtpRspQryAccountRegister::mutable_reg_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.reg_date)
  return reg_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_reg_date() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.reg_date)
  
  return reg_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_reg_date(std::string* reg_date) {
  if (reg_date != nullptr) {
    
  } else {
    
  }
  reg_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reg_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.reg_date)
}

// string out_date = 18;
inline void CtpRspQryAccountRegister::clear_out_date() {
  out_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::out_date() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.out_date)
  return out_date_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_out_date(const std::string& value) {
  
  out_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.out_date)
}
inline void CtpRspQryAccountRegister::set_out_date(std::string&& value) {
  
  out_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.out_date)
}
inline void CtpRspQryAccountRegister::set_out_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.out_date)
}
inline void CtpRspQryAccountRegister::set_out_date(const char* value, size_t size) {
  
  out_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.out_date)
}
inline std::string* CtpRspQryAccountRegister::mutable_out_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.out_date)
  return out_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_out_date() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.out_date)
  
  return out_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_out_date(std::string* out_date) {
  if (out_date != nullptr) {
    
  } else {
    
  }
  out_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.out_date)
}

// int32 tid = 19;
inline void CtpRspQryAccountRegister::clear_tid() {
  tid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryAccountRegister::tid() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.tid)
  return tid_;
}
inline void CtpRspQryAccountRegister::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.tid)
}

// int32 cust_type = 20;
inline void CtpRspQryAccountRegister::clear_cust_type() {
  cust_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryAccountRegister::cust_type() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.cust_type)
  return cust_type_;
}
inline void CtpRspQryAccountRegister::set_cust_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cust_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.cust_type)
}

// int32 bank_acc_type = 21;
inline void CtpRspQryAccountRegister::clear_bank_acc_type() {
  bank_acc_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryAccountRegister::bank_acc_type() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.bank_acc_type)
  return bank_acc_type_;
}
inline void CtpRspQryAccountRegister::set_bank_acc_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bank_acc_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.bank_acc_type)
}

// string long_customer_name = 22;
inline void CtpRspQryAccountRegister::clear_long_customer_name() {
  long_customer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryAccountRegister::long_customer_name() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryAccountRegister.long_customer_name)
  return long_customer_name_.GetNoArena();
}
inline void CtpRspQryAccountRegister::set_long_customer_name(const std::string& value) {
  
  long_customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryAccountRegister.long_customer_name)
}
inline void CtpRspQryAccountRegister::set_long_customer_name(std::string&& value) {
  
  long_customer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryAccountRegister.long_customer_name)
}
inline void CtpRspQryAccountRegister::set_long_customer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  long_customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryAccountRegister.long_customer_name)
}
inline void CtpRspQryAccountRegister::set_long_customer_name(const char* value, size_t size) {
  
  long_customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryAccountRegister.long_customer_name)
}
inline std::string* CtpRspQryAccountRegister::mutable_long_customer_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryAccountRegister.long_customer_name)
  return long_customer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryAccountRegister::release_long_customer_name() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryAccountRegister.long_customer_name)
  
  return long_customer_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryAccountRegister::set_allocated_long_customer_name(std::string* long_customer_name) {
  if (long_customer_name != nullptr) {
    
  } else {
    
  }
  long_customer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), long_customer_name);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryAccountRegister.long_customer_name)
}

// -------------------------------------------------------------------

// CtpReqAuthencate

// string auth_code = 1;
inline void CtpReqAuthencate::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqAuthencate::auth_code() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqAuthencate.auth_code)
  return auth_code_.GetNoArena();
}
inline void CtpReqAuthencate::set_auth_code(const std::string& value) {
  
  auth_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqAuthencate.auth_code)
}
inline void CtpReqAuthencate::set_auth_code(std::string&& value) {
  
  auth_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqAuthencate.auth_code)
}
inline void CtpReqAuthencate::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqAuthencate.auth_code)
}
inline void CtpReqAuthencate::set_auth_code(const char* value, size_t size) {
  
  auth_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqAuthencate.auth_code)
}
inline std::string* CtpReqAuthencate::mutable_auth_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqAuthencate.auth_code)
  return auth_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqAuthencate::release_auth_code() {
  // @@protoc_insertion_point(field_release:pb.CtpReqAuthencate.auth_code)
  
  return auth_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqAuthencate::set_allocated_auth_code(std::string* auth_code) {
  if (auth_code != nullptr) {
    
  } else {
    
  }
  auth_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqAuthencate.auth_code)
}

// string product = 2;
inline void CtpReqAuthencate::clear_product() {
  product_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqAuthencate::product() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqAuthencate.product)
  return product_.GetNoArena();
}
inline void CtpReqAuthencate::set_product(const std::string& value) {
  
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqAuthencate.product)
}
inline void CtpReqAuthencate::set_product(std::string&& value) {
  
  product_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqAuthencate.product)
}
inline void CtpReqAuthencate::set_product(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqAuthencate.product)
}
inline void CtpReqAuthencate::set_product(const char* value, size_t size) {
  
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqAuthencate.product)
}
inline std::string* CtpReqAuthencate::mutable_product() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqAuthencate.product)
  return product_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqAuthencate::release_product() {
  // @@protoc_insertion_point(field_release:pb.CtpReqAuthencate.product)
  
  return product_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqAuthencate::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    
  } else {
    
  }
  product_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqAuthencate.product)
}

// -------------------------------------------------------------------

// CtpRspAuthencate

// int32 error_id = 1;
inline void CtpRspAuthencate::clear_error_id() {
  error_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspAuthencate::error_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspAuthencate.error_id)
  return error_id_;
}
inline void CtpRspAuthencate::set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspAuthencate.error_id)
}

// string error_msg = 2;
inline void CtpRspAuthencate::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspAuthencate::error_msg() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspAuthencate.error_msg)
  return error_msg_.GetNoArena();
}
inline void CtpRspAuthencate::set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspAuthencate.error_msg)
}
inline void CtpRspAuthencate::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspAuthencate.error_msg)
}
inline void CtpRspAuthencate::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspAuthencate.error_msg)
}
inline void CtpRspAuthencate::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspAuthencate.error_msg)
}
inline std::string* CtpRspAuthencate::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspAuthencate.error_msg)
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspAuthencate::release_error_msg() {
  // @@protoc_insertion_point(field_release:pb.CtpRspAuthencate.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspAuthencate::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspAuthencate.error_msg)
}

// int32 request_id = 3;
inline void CtpRspAuthencate::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspAuthencate::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspAuthencate.request_id)
  return request_id_;
}
inline void CtpRspAuthencate::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspAuthencate.request_id)
}

// bool is_last = 4;
inline void CtpRspAuthencate::clear_is_last() {
  is_last_ = false;
}
inline bool CtpRspAuthencate::is_last() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspAuthencate.is_last)
  return is_last_;
}
inline void CtpRspAuthencate::set_is_last(bool value) {
  
  is_last_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspAuthencate.is_last)
}

// string broker_id = 5;
inline void CtpRspAuthencate::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspAuthencate::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspAuthencate.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpRspAuthencate::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspAuthencate.broker_id)
}
inline void CtpRspAuthencate::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspAuthencate.broker_id)
}
inline void CtpRspAuthencate::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspAuthencate.broker_id)
}
inline void CtpRspAuthencate::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspAuthencate.broker_id)
}
inline std::string* CtpRspAuthencate::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspAuthencate.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspAuthencate::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspAuthencate.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspAuthencate::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspAuthencate.broker_id)
}

// string user_id = 6;
inline void CtpRspAuthencate::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspAuthencate::user_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspAuthencate.user_id)
  return user_id_.GetNoArena();
}
inline void CtpRspAuthencate::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspAuthencate.user_id)
}
inline void CtpRspAuthencate::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspAuthencate.user_id)
}
inline void CtpRspAuthencate::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspAuthencate.user_id)
}
inline void CtpRspAuthencate::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspAuthencate.user_id)
}
inline std::string* CtpRspAuthencate::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspAuthencate.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspAuthencate::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspAuthencate.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspAuthencate::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspAuthencate.user_id)
}

// string user_product_info = 7;
inline void CtpRspAuthencate::clear_user_product_info() {
  user_product_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspAuthencate::user_product_info() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspAuthencate.user_product_info)
  return user_product_info_.GetNoArena();
}
inline void CtpRspAuthencate::set_user_product_info(const std::string& value) {
  
  user_product_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspAuthencate.user_product_info)
}
inline void CtpRspAuthencate::set_user_product_info(std::string&& value) {
  
  user_product_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspAuthencate.user_product_info)
}
inline void CtpRspAuthencate::set_user_product_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_product_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspAuthencate.user_product_info)
}
inline void CtpRspAuthencate::set_user_product_info(const char* value, size_t size) {
  
  user_product_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspAuthencate.user_product_info)
}
inline std::string* CtpRspAuthencate::mutable_user_product_info() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspAuthencate.user_product_info)
  return user_product_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspAuthencate::release_user_product_info() {
  // @@protoc_insertion_point(field_release:pb.CtpRspAuthencate.user_product_info)
  
  return user_product_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspAuthencate::set_allocated_user_product_info(std::string* user_product_info) {
  if (user_product_info != nullptr) {
    
  } else {
    
  }
  user_product_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_product_info);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspAuthencate.user_product_info)
}

// -------------------------------------------------------------------

// CtpReqUserLogin

// string broker_id = 1;
inline void CtpReqUserLogin::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqUserLogin::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqUserLogin.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpReqUserLogin::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqUserLogin.broker_id)
}
inline void CtpReqUserLogin::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqUserLogin.broker_id)
}
inline void CtpReqUserLogin::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqUserLogin.broker_id)
}
inline void CtpReqUserLogin::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqUserLogin.broker_id)
}
inline std::string* CtpReqUserLogin::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqUserLogin.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqUserLogin::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqUserLogin.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqUserLogin::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqUserLogin.broker_id)
}

// string account = 2;
inline void CtpReqUserLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqUserLogin::account() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqUserLogin.account)
  return account_.GetNoArena();
}
inline void CtpReqUserLogin::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqUserLogin.account)
}
inline void CtpReqUserLogin::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqUserLogin.account)
}
inline void CtpReqUserLogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqUserLogin.account)
}
inline void CtpReqUserLogin::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqUserLogin.account)
}
inline std::string* CtpReqUserLogin::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqUserLogin.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqUserLogin::release_account() {
  // @@protoc_insertion_point(field_release:pb.CtpReqUserLogin.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqUserLogin::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqUserLogin.account)
}

// string password = 3;
inline void CtpReqUserLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqUserLogin::password() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqUserLogin.password)
  return password_.GetNoArena();
}
inline void CtpReqUserLogin::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqUserLogin.password)
}
inline void CtpReqUserLogin::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqUserLogin.password)
}
inline void CtpReqUserLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqUserLogin.password)
}
inline void CtpReqUserLogin::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqUserLogin.password)
}
inline std::string* CtpReqUserLogin::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqUserLogin.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqUserLogin::release_password() {
  // @@protoc_insertion_point(field_release:pb.CtpReqUserLogin.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqUserLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqUserLogin.password)
}

// -------------------------------------------------------------------

// CtpRspUserLogin

// int32 error_id = 1;
inline void CtpRspUserLogin::clear_error_id() {
  error_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspUserLogin::error_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.error_id)
  return error_id_;
}
inline void CtpRspUserLogin::set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.error_id)
}

// string error_msg = 2;
inline void CtpRspUserLogin::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::error_msg() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.error_msg)
  return error_msg_.GetNoArena();
}
inline void CtpRspUserLogin::set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.error_msg)
}
inline void CtpRspUserLogin::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.error_msg)
}
inline void CtpRspUserLogin::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.error_msg)
}
inline void CtpRspUserLogin::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.error_msg)
}
inline std::string* CtpRspUserLogin::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.error_msg)
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_error_msg() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.error_msg)
}

// int32 request_id = 3;
inline void CtpRspUserLogin::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspUserLogin::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.request_id)
  return request_id_;
}
inline void CtpRspUserLogin::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.request_id)
}

// bool is_last = 4;
inline void CtpRspUserLogin::clear_is_last() {
  is_last_ = false;
}
inline bool CtpRspUserLogin::is_last() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.is_last)
  return is_last_;
}
inline void CtpRspUserLogin::set_is_last(bool value) {
  
  is_last_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.is_last)
}

// string trading_day = 5;
inline void CtpRspUserLogin::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.trading_day)
  return trading_day_.GetNoArena();
}
inline void CtpRspUserLogin::set_trading_day(const std::string& value) {
  
  trading_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.trading_day)
}
inline void CtpRspUserLogin::set_trading_day(std::string&& value) {
  
  trading_day_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.trading_day)
}
inline void CtpRspUserLogin::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trading_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.trading_day)
}
inline void CtpRspUserLogin::set_trading_day(const char* value, size_t size) {
  
  trading_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.trading_day)
}
inline std::string* CtpRspUserLogin::mutable_trading_day() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.trading_day)
  return trading_day_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_trading_day() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.trading_day)
  
  return trading_day_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.trading_day)
}

// string login_time = 6;
inline void CtpRspUserLogin::clear_login_time() {
  login_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::login_time() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.login_time)
  return login_time_.GetNoArena();
}
inline void CtpRspUserLogin::set_login_time(const std::string& value) {
  
  login_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.login_time)
}
inline void CtpRspUserLogin::set_login_time(std::string&& value) {
  
  login_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.login_time)
}
inline void CtpRspUserLogin::set_login_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.login_time)
}
inline void CtpRspUserLogin::set_login_time(const char* value, size_t size) {
  
  login_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.login_time)
}
inline std::string* CtpRspUserLogin::mutable_login_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.login_time)
  return login_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_login_time() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.login_time)
  
  return login_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_login_time(std::string* login_time) {
  if (login_time != nullptr) {
    
  } else {
    
  }
  login_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.login_time)
}

// string broker_id = 7;
inline void CtpRspUserLogin::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpRspUserLogin::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.broker_id)
}
inline void CtpRspUserLogin::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.broker_id)
}
inline void CtpRspUserLogin::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.broker_id)
}
inline void CtpRspUserLogin::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.broker_id)
}
inline std::string* CtpRspUserLogin::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.broker_id)
}

// string user_id = 8;
inline void CtpRspUserLogin::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::user_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.user_id)
  return user_id_.GetNoArena();
}
inline void CtpRspUserLogin::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.user_id)
}
inline void CtpRspUserLogin::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.user_id)
}
inline void CtpRspUserLogin::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.user_id)
}
inline void CtpRspUserLogin::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.user_id)
}
inline std::string* CtpRspUserLogin::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.user_id)
}

// string system_name = 9;
inline void CtpRspUserLogin::clear_system_name() {
  system_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::system_name() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.system_name)
  return system_name_.GetNoArena();
}
inline void CtpRspUserLogin::set_system_name(const std::string& value) {
  
  system_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.system_name)
}
inline void CtpRspUserLogin::set_system_name(std::string&& value) {
  
  system_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.system_name)
}
inline void CtpRspUserLogin::set_system_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.system_name)
}
inline void CtpRspUserLogin::set_system_name(const char* value, size_t size) {
  
  system_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.system_name)
}
inline std::string* CtpRspUserLogin::mutable_system_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.system_name)
  return system_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_system_name() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.system_name)
  
  return system_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_system_name(std::string* system_name) {
  if (system_name != nullptr) {
    
  } else {
    
  }
  system_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system_name);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.system_name)
}

// int32 front_id = 10;
inline void CtpRspUserLogin::clear_front_id() {
  front_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspUserLogin::front_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.front_id)
  return front_id_;
}
inline void CtpRspUserLogin::set_front_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  front_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.front_id)
}

// int32 session_id = 11;
inline void CtpRspUserLogin::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspUserLogin::session_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.session_id)
  return session_id_;
}
inline void CtpRspUserLogin::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.session_id)
}

// string max_order_ref = 12;
inline void CtpRspUserLogin::clear_max_order_ref() {
  max_order_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::max_order_ref() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.max_order_ref)
  return max_order_ref_.GetNoArena();
}
inline void CtpRspUserLogin::set_max_order_ref(const std::string& value) {
  
  max_order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.max_order_ref)
}
inline void CtpRspUserLogin::set_max_order_ref(std::string&& value) {
  
  max_order_ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.max_order_ref)
}
inline void CtpRspUserLogin::set_max_order_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  max_order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.max_order_ref)
}
inline void CtpRspUserLogin::set_max_order_ref(const char* value, size_t size) {
  
  max_order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.max_order_ref)
}
inline std::string* CtpRspUserLogin::mutable_max_order_ref() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.max_order_ref)
  return max_order_ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_max_order_ref() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.max_order_ref)
  
  return max_order_ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_max_order_ref(std::string* max_order_ref) {
  if (max_order_ref != nullptr) {
    
  } else {
    
  }
  max_order_ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_order_ref);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.max_order_ref)
}

// string shfe_time = 13;
inline void CtpRspUserLogin::clear_shfe_time() {
  shfe_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::shfe_time() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.shfe_time)
  return shfe_time_.GetNoArena();
}
inline void CtpRspUserLogin::set_shfe_time(const std::string& value) {
  
  shfe_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.shfe_time)
}
inline void CtpRspUserLogin::set_shfe_time(std::string&& value) {
  
  shfe_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.shfe_time)
}
inline void CtpRspUserLogin::set_shfe_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shfe_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.shfe_time)
}
inline void CtpRspUserLogin::set_shfe_time(const char* value, size_t size) {
  
  shfe_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.shfe_time)
}
inline std::string* CtpRspUserLogin::mutable_shfe_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.shfe_time)
  return shfe_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_shfe_time() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.shfe_time)
  
  return shfe_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_shfe_time(std::string* shfe_time) {
  if (shfe_time != nullptr) {
    
  } else {
    
  }
  shfe_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shfe_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.shfe_time)
}

// string dce_time = 14;
inline void CtpRspUserLogin::clear_dce_time() {
  dce_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::dce_time() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.dce_time)
  return dce_time_.GetNoArena();
}
inline void CtpRspUserLogin::set_dce_time(const std::string& value) {
  
  dce_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.dce_time)
}
inline void CtpRspUserLogin::set_dce_time(std::string&& value) {
  
  dce_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.dce_time)
}
inline void CtpRspUserLogin::set_dce_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dce_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.dce_time)
}
inline void CtpRspUserLogin::set_dce_time(const char* value, size_t size) {
  
  dce_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.dce_time)
}
inline std::string* CtpRspUserLogin::mutable_dce_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.dce_time)
  return dce_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_dce_time() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.dce_time)
  
  return dce_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_dce_time(std::string* dce_time) {
  if (dce_time != nullptr) {
    
  } else {
    
  }
  dce_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dce_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.dce_time)
}

// string czce_time = 15;
inline void CtpRspUserLogin::clear_czce_time() {
  czce_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::czce_time() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.czce_time)
  return czce_time_.GetNoArena();
}
inline void CtpRspUserLogin::set_czce_time(const std::string& value) {
  
  czce_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.czce_time)
}
inline void CtpRspUserLogin::set_czce_time(std::string&& value) {
  
  czce_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.czce_time)
}
inline void CtpRspUserLogin::set_czce_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  czce_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.czce_time)
}
inline void CtpRspUserLogin::set_czce_time(const char* value, size_t size) {
  
  czce_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.czce_time)
}
inline std::string* CtpRspUserLogin::mutable_czce_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.czce_time)
  return czce_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_czce_time() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.czce_time)
  
  return czce_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_czce_time(std::string* czce_time) {
  if (czce_time != nullptr) {
    
  } else {
    
  }
  czce_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), czce_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.czce_time)
}

// string cffex_time = 16;
inline void CtpRspUserLogin::clear_cffex_time() {
  cffex_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::cffex_time() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.cffex_time)
  return cffex_time_.GetNoArena();
}
inline void CtpRspUserLogin::set_cffex_time(const std::string& value) {
  
  cffex_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.cffex_time)
}
inline void CtpRspUserLogin::set_cffex_time(std::string&& value) {
  
  cffex_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.cffex_time)
}
inline void CtpRspUserLogin::set_cffex_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cffex_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.cffex_time)
}
inline void CtpRspUserLogin::set_cffex_time(const char* value, size_t size) {
  
  cffex_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.cffex_time)
}
inline std::string* CtpRspUserLogin::mutable_cffex_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.cffex_time)
  return cffex_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_cffex_time() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.cffex_time)
  
  return cffex_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_cffex_time(std::string* cffex_time) {
  if (cffex_time != nullptr) {
    
  } else {
    
  }
  cffex_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cffex_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.cffex_time)
}

// string ine_time = 17;
inline void CtpRspUserLogin::clear_ine_time() {
  ine_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspUserLogin::ine_time() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspUserLogin.ine_time)
  return ine_time_.GetNoArena();
}
inline void CtpRspUserLogin::set_ine_time(const std::string& value) {
  
  ine_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspUserLogin.ine_time)
}
inline void CtpRspUserLogin::set_ine_time(std::string&& value) {
  
  ine_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspUserLogin.ine_time)
}
inline void CtpRspUserLogin::set_ine_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ine_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspUserLogin.ine_time)
}
inline void CtpRspUserLogin::set_ine_time(const char* value, size_t size) {
  
  ine_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspUserLogin.ine_time)
}
inline std::string* CtpRspUserLogin::mutable_ine_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspUserLogin.ine_time)
  return ine_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspUserLogin::release_ine_time() {
  // @@protoc_insertion_point(field_release:pb.CtpRspUserLogin.ine_time)
  
  return ine_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspUserLogin::set_allocated_ine_time(std::string* ine_time) {
  if (ine_time != nullptr) {
    
  } else {
    
  }
  ine_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ine_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspUserLogin.ine_time)
}

// -------------------------------------------------------------------

// CtpReqConnect

// string address = 1;
inline void CtpReqConnect::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqConnect::address() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqConnect.address)
  return address_.GetNoArena();
}
inline void CtpReqConnect::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqConnect.address)
}
inline void CtpReqConnect::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqConnect.address)
}
inline void CtpReqConnect::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqConnect.address)
}
inline void CtpReqConnect::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqConnect.address)
}
inline std::string* CtpReqConnect::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqConnect.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqConnect::release_address() {
  // @@protoc_insertion_point(field_release:pb.CtpReqConnect.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqConnect::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqConnect.address)
}

// string account = 2;
inline void CtpReqConnect::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqConnect::account() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqConnect.account)
  return account_.GetNoArena();
}
inline void CtpReqConnect::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqConnect.account)
}
inline void CtpReqConnect::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqConnect.account)
}
inline void CtpReqConnect::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqConnect.account)
}
inline void CtpReqConnect::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqConnect.account)
}
inline std::string* CtpReqConnect::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqConnect.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqConnect::release_account() {
  // @@protoc_insertion_point(field_release:pb.CtpReqConnect.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqConnect::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqConnect.account)
}

// string directory = 3;
inline void CtpReqConnect::clear_directory() {
  directory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqConnect::directory() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqConnect.directory)
  return directory_.GetNoArena();
}
inline void CtpReqConnect::set_directory(const std::string& value) {
  
  directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqConnect.directory)
}
inline void CtpReqConnect::set_directory(std::string&& value) {
  
  directory_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqConnect.directory)
}
inline void CtpReqConnect::set_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqConnect.directory)
}
inline void CtpReqConnect::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqConnect.directory)
}
inline std::string* CtpReqConnect::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqConnect.directory)
  return directory_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqConnect::release_directory() {
  // @@protoc_insertion_point(field_release:pb.CtpReqConnect.directory)
  
  return directory_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqConnect::set_allocated_directory(std::string* directory) {
  if (directory != nullptr) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqConnect.directory)
}

// -------------------------------------------------------------------

// CtpOnFrontConnected

// -------------------------------------------------------------------

// CtpOnFrontDisconnected

// -------------------------------------------------------------------

// CtpReqSettlementInfoConfirm

// string broker_id = 1;
inline void CtpReqSettlementInfoConfirm::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqSettlementInfoConfirm::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqSettlementInfoConfirm.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpReqSettlementInfoConfirm::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqSettlementInfoConfirm.broker_id)
}
inline void CtpReqSettlementInfoConfirm::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqSettlementInfoConfirm.broker_id)
}
inline void CtpReqSettlementInfoConfirm::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqSettlementInfoConfirm.broker_id)
}
inline void CtpReqSettlementInfoConfirm::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqSettlementInfoConfirm.broker_id)
}
inline std::string* CtpReqSettlementInfoConfirm::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqSettlementInfoConfirm.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqSettlementInfoConfirm::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqSettlementInfoConfirm.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqSettlementInfoConfirm::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqSettlementInfoConfirm.broker_id)
}

// string investor_id = 2;
inline void CtpReqSettlementInfoConfirm::clear_investor_id() {
  investor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqSettlementInfoConfirm::investor_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqSettlementInfoConfirm.investor_id)
  return investor_id_.GetNoArena();
}
inline void CtpReqSettlementInfoConfirm::set_investor_id(const std::string& value) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqSettlementInfoConfirm.investor_id)
}
inline void CtpReqSettlementInfoConfirm::set_investor_id(std::string&& value) {
  
  investor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqSettlementInfoConfirm.investor_id)
}
inline void CtpReqSettlementInfoConfirm::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqSettlementInfoConfirm.investor_id)
}
inline void CtpReqSettlementInfoConfirm::set_investor_id(const char* value, size_t size) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqSettlementInfoConfirm.investor_id)
}
inline std::string* CtpReqSettlementInfoConfirm::mutable_investor_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqSettlementInfoConfirm.investor_id)
  return investor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqSettlementInfoConfirm::release_investor_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqSettlementInfoConfirm.investor_id)
  
  return investor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqSettlementInfoConfirm::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqSettlementInfoConfirm.investor_id)
}

// -------------------------------------------------------------------

// CtpOnRspSettlementInfoConfirm

// int32 error_id = 1;
inline void CtpOnRspSettlementInfoConfirm::clear_error_id() {
  error_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpOnRspSettlementInfoConfirm::error_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.error_id)
  return error_id_;
}
inline void CtpOnRspSettlementInfoConfirm::set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.error_id)
}

// string error_msg = 2;
inline void CtpOnRspSettlementInfoConfirm::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpOnRspSettlementInfoConfirm::error_msg() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.error_msg)
  return error_msg_.GetNoArena();
}
inline void CtpOnRspSettlementInfoConfirm::set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.error_msg)
}
inline void CtpOnRspSettlementInfoConfirm::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpOnRspSettlementInfoConfirm.error_msg)
}
inline void CtpOnRspSettlementInfoConfirm::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpOnRspSettlementInfoConfirm.error_msg)
}
inline void CtpOnRspSettlementInfoConfirm::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpOnRspSettlementInfoConfirm.error_msg)
}
inline std::string* CtpOnRspSettlementInfoConfirm::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpOnRspSettlementInfoConfirm.error_msg)
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpOnRspSettlementInfoConfirm::release_error_msg() {
  // @@protoc_insertion_point(field_release:pb.CtpOnRspSettlementInfoConfirm.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpOnRspSettlementInfoConfirm::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpOnRspSettlementInfoConfirm.error_msg)
}

// int32 request_id = 3;
inline void CtpOnRspSettlementInfoConfirm::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpOnRspSettlementInfoConfirm::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.request_id)
  return request_id_;
}
inline void CtpOnRspSettlementInfoConfirm::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.request_id)
}

// bool is_last = 4;
inline void CtpOnRspSettlementInfoConfirm::clear_is_last() {
  is_last_ = false;
}
inline bool CtpOnRspSettlementInfoConfirm::is_last() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.is_last)
  return is_last_;
}
inline void CtpOnRspSettlementInfoConfirm::set_is_last(bool value) {
  
  is_last_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.is_last)
}

// string broker_id = 5;
inline void CtpOnRspSettlementInfoConfirm::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpOnRspSettlementInfoConfirm::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpOnRspSettlementInfoConfirm::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.broker_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpOnRspSettlementInfoConfirm.broker_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpOnRspSettlementInfoConfirm.broker_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpOnRspSettlementInfoConfirm.broker_id)
}
inline std::string* CtpOnRspSettlementInfoConfirm::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpOnRspSettlementInfoConfirm.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpOnRspSettlementInfoConfirm::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpOnRspSettlementInfoConfirm.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpOnRspSettlementInfoConfirm::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpOnRspSettlementInfoConfirm.broker_id)
}

// string investor_id = 6;
inline void CtpOnRspSettlementInfoConfirm::clear_investor_id() {
  investor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpOnRspSettlementInfoConfirm::investor_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.investor_id)
  return investor_id_.GetNoArena();
}
inline void CtpOnRspSettlementInfoConfirm::set_investor_id(const std::string& value) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.investor_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_investor_id(std::string&& value) {
  
  investor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpOnRspSettlementInfoConfirm.investor_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpOnRspSettlementInfoConfirm.investor_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_investor_id(const char* value, size_t size) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpOnRspSettlementInfoConfirm.investor_id)
}
inline std::string* CtpOnRspSettlementInfoConfirm::mutable_investor_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpOnRspSettlementInfoConfirm.investor_id)
  return investor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpOnRspSettlementInfoConfirm::release_investor_id() {
  // @@protoc_insertion_point(field_release:pb.CtpOnRspSettlementInfoConfirm.investor_id)
  
  return investor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpOnRspSettlementInfoConfirm::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpOnRspSettlementInfoConfirm.investor_id)
}

// string confirm_date = 7;
inline void CtpOnRspSettlementInfoConfirm::clear_confirm_date() {
  confirm_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpOnRspSettlementInfoConfirm::confirm_date() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.confirm_date)
  return confirm_date_.GetNoArena();
}
inline void CtpOnRspSettlementInfoConfirm::set_confirm_date(const std::string& value) {
  
  confirm_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.confirm_date)
}
inline void CtpOnRspSettlementInfoConfirm::set_confirm_date(std::string&& value) {
  
  confirm_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpOnRspSettlementInfoConfirm.confirm_date)
}
inline void CtpOnRspSettlementInfoConfirm::set_confirm_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  confirm_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpOnRspSettlementInfoConfirm.confirm_date)
}
inline void CtpOnRspSettlementInfoConfirm::set_confirm_date(const char* value, size_t size) {
  
  confirm_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpOnRspSettlementInfoConfirm.confirm_date)
}
inline std::string* CtpOnRspSettlementInfoConfirm::mutable_confirm_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpOnRspSettlementInfoConfirm.confirm_date)
  return confirm_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpOnRspSettlementInfoConfirm::release_confirm_date() {
  // @@protoc_insertion_point(field_release:pb.CtpOnRspSettlementInfoConfirm.confirm_date)
  
  return confirm_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpOnRspSettlementInfoConfirm::set_allocated_confirm_date(std::string* confirm_date) {
  if (confirm_date != nullptr) {
    
  } else {
    
  }
  confirm_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), confirm_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpOnRspSettlementInfoConfirm.confirm_date)
}

// string confirm_time = 8;
inline void CtpOnRspSettlementInfoConfirm::clear_confirm_time() {
  confirm_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpOnRspSettlementInfoConfirm::confirm_time() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.confirm_time)
  return confirm_time_.GetNoArena();
}
inline void CtpOnRspSettlementInfoConfirm::set_confirm_time(const std::string& value) {
  
  confirm_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.confirm_time)
}
inline void CtpOnRspSettlementInfoConfirm::set_confirm_time(std::string&& value) {
  
  confirm_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpOnRspSettlementInfoConfirm.confirm_time)
}
inline void CtpOnRspSettlementInfoConfirm::set_confirm_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  confirm_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpOnRspSettlementInfoConfirm.confirm_time)
}
inline void CtpOnRspSettlementInfoConfirm::set_confirm_time(const char* value, size_t size) {
  
  confirm_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpOnRspSettlementInfoConfirm.confirm_time)
}
inline std::string* CtpOnRspSettlementInfoConfirm::mutable_confirm_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpOnRspSettlementInfoConfirm.confirm_time)
  return confirm_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpOnRspSettlementInfoConfirm::release_confirm_time() {
  // @@protoc_insertion_point(field_release:pb.CtpOnRspSettlementInfoConfirm.confirm_time)
  
  return confirm_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpOnRspSettlementInfoConfirm::set_allocated_confirm_time(std::string* confirm_time) {
  if (confirm_time != nullptr) {
    
  } else {
    
  }
  confirm_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), confirm_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpOnRspSettlementInfoConfirm.confirm_time)
}

// int32 settlement_id = 9;
inline void CtpOnRspSettlementInfoConfirm::clear_settlement_id() {
  settlement_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpOnRspSettlementInfoConfirm::settlement_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.settlement_id)
  return settlement_id_;
}
inline void CtpOnRspSettlementInfoConfirm::set_settlement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settlement_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.settlement_id)
}

// string account_id = 10;
inline void CtpOnRspSettlementInfoConfirm::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpOnRspSettlementInfoConfirm::account_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.account_id)
  return account_id_.GetNoArena();
}
inline void CtpOnRspSettlementInfoConfirm::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.account_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpOnRspSettlementInfoConfirm.account_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpOnRspSettlementInfoConfirm.account_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpOnRspSettlementInfoConfirm.account_id)
}
inline std::string* CtpOnRspSettlementInfoConfirm::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpOnRspSettlementInfoConfirm.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpOnRspSettlementInfoConfirm::release_account_id() {
  // @@protoc_insertion_point(field_release:pb.CtpOnRspSettlementInfoConfirm.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpOnRspSettlementInfoConfirm::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpOnRspSettlementInfoConfirm.account_id)
}

// string currency_id = 11;
inline void CtpOnRspSettlementInfoConfirm::clear_currency_id() {
  currency_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpOnRspSettlementInfoConfirm::currency_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpOnRspSettlementInfoConfirm.currency_id)
  return currency_id_.GetNoArena();
}
inline void CtpOnRspSettlementInfoConfirm::set_currency_id(const std::string& value) {
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpOnRspSettlementInfoConfirm.currency_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_currency_id(std::string&& value) {
  
  currency_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpOnRspSettlementInfoConfirm.currency_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_currency_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpOnRspSettlementInfoConfirm.currency_id)
}
inline void CtpOnRspSettlementInfoConfirm::set_currency_id(const char* value, size_t size) {
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpOnRspSettlementInfoConfirm.currency_id)
}
inline std::string* CtpOnRspSettlementInfoConfirm::mutable_currency_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpOnRspSettlementInfoConfirm.currency_id)
  return currency_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpOnRspSettlementInfoConfirm::release_currency_id() {
  // @@protoc_insertion_point(field_release:pb.CtpOnRspSettlementInfoConfirm.currency_id)
  
  return currency_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpOnRspSettlementInfoConfirm::set_allocated_currency_id(std::string* currency_id) {
  if (currency_id != nullptr) {
    
  } else {
    
  }
  currency_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpOnRspSettlementInfoConfirm.currency_id)
}

// -------------------------------------------------------------------

// CtpReqQryInvestor

// -------------------------------------------------------------------

// CtpRspQryInvestor

// int32 error_id = 1;
inline void CtpRspQryInvestor::clear_error_id() {
  error_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryInvestor::error_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.error_id)
  return error_id_;
}
inline void CtpRspQryInvestor::set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.error_id)
}

// string error_msg = 2;
inline void CtpRspQryInvestor::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryInvestor::error_msg() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.error_msg)
  return error_msg_.GetNoArena();
}
inline void CtpRspQryInvestor::set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.error_msg)
}
inline void CtpRspQryInvestor::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryInvestor.error_msg)
}
inline void CtpRspQryInvestor::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryInvestor.error_msg)
}
inline void CtpRspQryInvestor::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryInvestor.error_msg)
}
inline std::string* CtpRspQryInvestor::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryInvestor.error_msg)
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryInvestor::release_error_msg() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryInvestor.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryInvestor::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryInvestor.error_msg)
}

// int32 request_id = 3;
inline void CtpRspQryInvestor::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryInvestor::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.request_id)
  return request_id_;
}
inline void CtpRspQryInvestor::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.request_id)
}

// bool is_last = 4;
inline void CtpRspQryInvestor::clear_is_last() {
  is_last_ = false;
}
inline bool CtpRspQryInvestor::is_last() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.is_last)
  return is_last_;
}
inline void CtpRspQryInvestor::set_is_last(bool value) {
  
  is_last_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.is_last)
}

// string investor_id = 5;
inline void CtpRspQryInvestor::clear_investor_id() {
  investor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryInvestor::investor_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.investor_id)
  return investor_id_.GetNoArena();
}
inline void CtpRspQryInvestor::set_investor_id(const std::string& value) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.investor_id)
}
inline void CtpRspQryInvestor::set_investor_id(std::string&& value) {
  
  investor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryInvestor.investor_id)
}
inline void CtpRspQryInvestor::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryInvestor.investor_id)
}
inline void CtpRspQryInvestor::set_investor_id(const char* value, size_t size) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryInvestor.investor_id)
}
inline std::string* CtpRspQryInvestor::mutable_investor_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryInvestor.investor_id)
  return investor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryInvestor::release_investor_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryInvestor.investor_id)
  
  return investor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryInvestor::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryInvestor.investor_id)
}

// string broker_id = 6;
inline void CtpRspQryInvestor::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryInvestor::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpRspQryInvestor::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.broker_id)
}
inline void CtpRspQryInvestor::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryInvestor.broker_id)
}
inline void CtpRspQryInvestor::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryInvestor.broker_id)
}
inline void CtpRspQryInvestor::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryInvestor.broker_id)
}
inline std::string* CtpRspQryInvestor::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryInvestor.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryInvestor::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryInvestor.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryInvestor::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryInvestor.broker_id)
}

// string investor_group_id = 7;
inline void CtpRspQryInvestor::clear_investor_group_id() {
  investor_group_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryInvestor::investor_group_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.investor_group_id)
  return investor_group_id_.GetNoArena();
}
inline void CtpRspQryInvestor::set_investor_group_id(const std::string& value) {
  
  investor_group_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.investor_group_id)
}
inline void CtpRspQryInvestor::set_investor_group_id(std::string&& value) {
  
  investor_group_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryInvestor.investor_group_id)
}
inline void CtpRspQryInvestor::set_investor_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_group_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryInvestor.investor_group_id)
}
inline void CtpRspQryInvestor::set_investor_group_id(const char* value, size_t size) {
  
  investor_group_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryInvestor.investor_group_id)
}
inline std::string* CtpRspQryInvestor::mutable_investor_group_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryInvestor.investor_group_id)
  return investor_group_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryInvestor::release_investor_group_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryInvestor.investor_group_id)
  
  return investor_group_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryInvestor::set_allocated_investor_group_id(std::string* investor_group_id) {
  if (investor_group_id != nullptr) {
    
  } else {
    
  }
  investor_group_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_group_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryInvestor.investor_group_id)
}

// string investor_name = 8;
inline void CtpRspQryInvestor::clear_investor_name() {
  investor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryInvestor::investor_name() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.investor_name)
  return investor_name_.GetNoArena();
}
inline void CtpRspQryInvestor::set_investor_name(const std::string& value) {
  
  investor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.investor_name)
}
inline void CtpRspQryInvestor::set_investor_name(std::string&& value) {
  
  investor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryInvestor.investor_name)
}
inline void CtpRspQryInvestor::set_investor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryInvestor.investor_name)
}
inline void CtpRspQryInvestor::set_investor_name(const char* value, size_t size) {
  
  investor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryInvestor.investor_name)
}
inline std::string* CtpRspQryInvestor::mutable_investor_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryInvestor.investor_name)
  return investor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryInvestor::release_investor_name() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryInvestor.investor_name)
  
  return investor_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryInvestor::set_allocated_investor_name(std::string* investor_name) {
  if (investor_name != nullptr) {
    
  } else {
    
  }
  investor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_name);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryInvestor.investor_name)
}

// int32 identified_card_type = 9;
inline void CtpRspQryInvestor::clear_identified_card_type() {
  identified_card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryInvestor::identified_card_type() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.identified_card_type)
  return identified_card_type_;
}
inline void CtpRspQryInvestor::set_identified_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  identified_card_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.identified_card_type)
}

// string identified_card_no = 10;
inline void CtpRspQryInvestor::clear_identified_card_no() {
  identified_card_no_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryInvestor::identified_card_no() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.identified_card_no)
  return identified_card_no_.GetNoArena();
}
inline void CtpRspQryInvestor::set_identified_card_no(const std::string& value) {
  
  identified_card_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.identified_card_no)
}
inline void CtpRspQryInvestor::set_identified_card_no(std::string&& value) {
  
  identified_card_no_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryInvestor.identified_card_no)
}
inline void CtpRspQryInvestor::set_identified_card_no(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identified_card_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryInvestor.identified_card_no)
}
inline void CtpRspQryInvestor::set_identified_card_no(const char* value, size_t size) {
  
  identified_card_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryInvestor.identified_card_no)
}
inline std::string* CtpRspQryInvestor::mutable_identified_card_no() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryInvestor.identified_card_no)
  return identified_card_no_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryInvestor::release_identified_card_no() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryInvestor.identified_card_no)
  
  return identified_card_no_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryInvestor::set_allocated_identified_card_no(std::string* identified_card_no) {
  if (identified_card_no != nullptr) {
    
  } else {
    
  }
  identified_card_no_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identified_card_no);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryInvestor.identified_card_no)
}

// bool is_active = 11;
inline void CtpRspQryInvestor::clear_is_active() {
  is_active_ = false;
}
inline bool CtpRspQryInvestor::is_active() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.is_active)
  return is_active_;
}
inline void CtpRspQryInvestor::set_is_active(bool value) {
  
  is_active_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.is_active)
}

// string telphone = 12;
inline void CtpRspQryInvestor::clear_telphone() {
  telphone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryInvestor::telphone() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.telphone)
  return telphone_.GetNoArena();
}
inline void CtpRspQryInvestor::set_telphone(const std::string& value) {
  
  telphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.telphone)
}
inline void CtpRspQryInvestor::set_telphone(std::string&& value) {
  
  telphone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryInvestor.telphone)
}
inline void CtpRspQryInvestor::set_telphone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  telphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryInvestor.telphone)
}
inline void CtpRspQryInvestor::set_telphone(const char* value, size_t size) {
  
  telphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryInvestor.telphone)
}
inline std::string* CtpRspQryInvestor::mutable_telphone() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryInvestor.telphone)
  return telphone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryInvestor::release_telphone() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryInvestor.telphone)
  
  return telphone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryInvestor::set_allocated_telphone(std::string* telphone) {
  if (telphone != nullptr) {
    
  } else {
    
  }
  telphone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telphone);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryInvestor.telphone)
}

// string address = 13;
inline void CtpRspQryInvestor::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryInvestor::address() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.address)
  return address_.GetNoArena();
}
inline void CtpRspQryInvestor::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.address)
}
inline void CtpRspQryInvestor::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryInvestor.address)
}
inline void CtpRspQryInvestor::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryInvestor.address)
}
inline void CtpRspQryInvestor::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryInvestor.address)
}
inline std::string* CtpRspQryInvestor::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryInvestor.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryInvestor::release_address() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryInvestor.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryInvestor::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryInvestor.address)
}

// string open_date = 14;
inline void CtpRspQryInvestor::clear_open_date() {
  open_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryInvestor::open_date() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.open_date)
  return open_date_.GetNoArena();
}
inline void CtpRspQryInvestor::set_open_date(const std::string& value) {
  
  open_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.open_date)
}
inline void CtpRspQryInvestor::set_open_date(std::string&& value) {
  
  open_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryInvestor.open_date)
}
inline void CtpRspQryInvestor::set_open_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  open_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryInvestor.open_date)
}
inline void CtpRspQryInvestor::set_open_date(const char* value, size_t size) {
  
  open_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryInvestor.open_date)
}
inline std::string* CtpRspQryInvestor::mutable_open_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryInvestor.open_date)
  return open_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryInvestor::release_open_date() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryInvestor.open_date)
  
  return open_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryInvestor::set_allocated_open_date(std::string* open_date) {
  if (open_date != nullptr) {
    
  } else {
    
  }
  open_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryInvestor.open_date)
}

// string mobile = 15;
inline void CtpRspQryInvestor::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryInvestor::mobile() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryInvestor.mobile)
  return mobile_.GetNoArena();
}
inline void CtpRspQryInvestor::set_mobile(const std::string& value) {
  
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryInvestor.mobile)
}
inline void CtpRspQryInvestor::set_mobile(std::string&& value) {
  
  mobile_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryInvestor.mobile)
}
inline void CtpRspQryInvestor::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryInvestor.mobile)
}
inline void CtpRspQryInvestor::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryInvestor.mobile)
}
inline std::string* CtpRspQryInvestor::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryInvestor.mobile)
  return mobile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryInvestor::release_mobile() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryInvestor.mobile)
  
  return mobile_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryInvestor::set_allocated_mobile(std::string* mobile) {
  if (mobile != nullptr) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryInvestor.mobile)
}

// -------------------------------------------------------------------

// CtpReqQryTransferBank

// string broker_id = 1;
inline void CtpReqQryTransferBank::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqQryTransferBank::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqQryTransferBank.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpReqQryTransferBank::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqQryTransferBank.broker_id)
}
inline void CtpReqQryTransferBank::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqQryTransferBank.broker_id)
}
inline void CtpReqQryTransferBank::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqQryTransferBank.broker_id)
}
inline void CtpReqQryTransferBank::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqQryTransferBank.broker_id)
}
inline std::string* CtpReqQryTransferBank::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqQryTransferBank.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqQryTransferBank::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqQryTransferBank.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqQryTransferBank::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqQryTransferBank.broker_id)
}

// string investor_id = 2;
inline void CtpReqQryTransferBank::clear_investor_id() {
  investor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqQryTransferBank::investor_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqQryTransferBank.investor_id)
  return investor_id_.GetNoArena();
}
inline void CtpReqQryTransferBank::set_investor_id(const std::string& value) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqQryTransferBank.investor_id)
}
inline void CtpReqQryTransferBank::set_investor_id(std::string&& value) {
  
  investor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqQryTransferBank.investor_id)
}
inline void CtpReqQryTransferBank::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqQryTransferBank.investor_id)
}
inline void CtpReqQryTransferBank::set_investor_id(const char* value, size_t size) {
  
  investor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqQryTransferBank.investor_id)
}
inline std::string* CtpReqQryTransferBank::mutable_investor_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqQryTransferBank.investor_id)
  return investor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqQryTransferBank::release_investor_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqQryTransferBank.investor_id)
  
  return investor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqQryTransferBank::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqQryTransferBank.investor_id)
}

// -------------------------------------------------------------------

// CtpRspQryTransferBank

// int32 error_id = 1;
inline void CtpRspQryTransferBank::clear_error_id() {
  error_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryTransferBank::error_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryTransferBank.error_id)
  return error_id_;
}
inline void CtpRspQryTransferBank::set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryTransferBank.error_id)
}

// string error_msg = 2;
inline void CtpRspQryTransferBank::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryTransferBank::error_msg() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryTransferBank.error_msg)
  return error_msg_.GetNoArena();
}
inline void CtpRspQryTransferBank::set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryTransferBank.error_msg)
}
inline void CtpRspQryTransferBank::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryTransferBank.error_msg)
}
inline void CtpRspQryTransferBank::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryTransferBank.error_msg)
}
inline void CtpRspQryTransferBank::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryTransferBank.error_msg)
}
inline std::string* CtpRspQryTransferBank::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryTransferBank.error_msg)
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryTransferBank::release_error_msg() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryTransferBank.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryTransferBank::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryTransferBank.error_msg)
}

// int32 request_id = 3;
inline void CtpRspQryTransferBank::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspQryTransferBank::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryTransferBank.request_id)
  return request_id_;
}
inline void CtpRspQryTransferBank::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryTransferBank.request_id)
}

// bool is_last = 4;
inline void CtpRspQryTransferBank::clear_is_last() {
  is_last_ = false;
}
inline bool CtpRspQryTransferBank::is_last() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryTransferBank.is_last)
  return is_last_;
}
inline void CtpRspQryTransferBank::set_is_last(bool value) {
  
  is_last_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspQryTransferBank.is_last)
}

// string broker_id = 5;
inline void CtpRspQryTransferBank::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryTransferBank::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryTransferBank.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpRspQryTransferBank::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryTransferBank.broker_id)
}
inline void CtpRspQryTransferBank::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryTransferBank.broker_id)
}
inline void CtpRspQryTransferBank::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryTransferBank.broker_id)
}
inline void CtpRspQryTransferBank::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryTransferBank.broker_id)
}
inline std::string* CtpRspQryTransferBank::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryTransferBank.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryTransferBank::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryTransferBank.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryTransferBank::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryTransferBank.broker_id)
}

// string bank_id = 6;
inline void CtpRspQryTransferBank::clear_bank_id() {
  bank_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryTransferBank::bank_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryTransferBank.bank_id)
  return bank_id_.GetNoArena();
}
inline void CtpRspQryTransferBank::set_bank_id(const std::string& value) {
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryTransferBank.bank_id)
}
inline void CtpRspQryTransferBank::set_bank_id(std::string&& value) {
  
  bank_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryTransferBank.bank_id)
}
inline void CtpRspQryTransferBank::set_bank_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryTransferBank.bank_id)
}
inline void CtpRspQryTransferBank::set_bank_id(const char* value, size_t size) {
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryTransferBank.bank_id)
}
inline std::string* CtpRspQryTransferBank::mutable_bank_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryTransferBank.bank_id)
  return bank_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryTransferBank::release_bank_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryTransferBank.bank_id)
  
  return bank_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryTransferBank::set_allocated_bank_id(std::string* bank_id) {
  if (bank_id != nullptr) {
    
  } else {
    
  }
  bank_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryTransferBank.bank_id)
}

// string bank_branch_id = 7;
inline void CtpRspQryTransferBank::clear_bank_branch_id() {
  bank_branch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryTransferBank::bank_branch_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryTransferBank.bank_branch_id)
  return bank_branch_id_.GetNoArena();
}
inline void CtpRspQryTransferBank::set_bank_branch_id(const std::string& value) {
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryTransferBank.bank_branch_id)
}
inline void CtpRspQryTransferBank::set_bank_branch_id(std::string&& value) {
  
  bank_branch_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryTransferBank.bank_branch_id)
}
inline void CtpRspQryTransferBank::set_bank_branch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryTransferBank.bank_branch_id)
}
inline void CtpRspQryTransferBank::set_bank_branch_id(const char* value, size_t size) {
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryTransferBank.bank_branch_id)
}
inline std::string* CtpRspQryTransferBank::mutable_bank_branch_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryTransferBank.bank_branch_id)
  return bank_branch_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryTransferBank::release_bank_branch_id() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryTransferBank.bank_branch_id)
  
  return bank_branch_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryTransferBank::set_allocated_bank_branch_id(std::string* bank_branch_id) {
  if (bank_branch_id != nullptr) {
    
  } else {
    
  }
  bank_branch_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_branch_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryTransferBank.bank_branch_id)
}

// string bank_name = 8;
inline void CtpRspQryTransferBank::clear_bank_name() {
  bank_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspQryTransferBank::bank_name() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspQryTransferBank.bank_name)
  return bank_name_.GetNoArena();
}
inline void CtpRspQryTransferBank::set_bank_name(const std::string& value) {
  
  bank_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspQryTransferBank.bank_name)
}
inline void CtpRspQryTransferBank::set_bank_name(std::string&& value) {
  
  bank_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspQryTransferBank.bank_name)
}
inline void CtpRspQryTransferBank::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspQryTransferBank.bank_name)
}
inline void CtpRspQryTransferBank::set_bank_name(const char* value, size_t size) {
  
  bank_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspQryTransferBank.bank_name)
}
inline std::string* CtpRspQryTransferBank::mutable_bank_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspQryTransferBank.bank_name)
  return bank_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspQryTransferBank::release_bank_name() {
  // @@protoc_insertion_point(field_release:pb.CtpRspQryTransferBank.bank_name)
  
  return bank_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspQryTransferBank::set_allocated_bank_name(std::string* bank_name) {
  if (bank_name != nullptr) {
    
  } else {
    
  }
  bank_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_name);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspQryTransferBank.bank_name)
}

// -------------------------------------------------------------------

// CtpReqTransfer

// string trade_code = 1;
inline void CtpReqTransfer::clear_trade_code() {
  trade_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::trade_code() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.trade_code)
  return trade_code_.GetNoArena();
}
inline void CtpReqTransfer::set_trade_code(const std::string& value) {
  
  trade_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.trade_code)
}
inline void CtpReqTransfer::set_trade_code(std::string&& value) {
  
  trade_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.trade_code)
}
inline void CtpReqTransfer::set_trade_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.trade_code)
}
inline void CtpReqTransfer::set_trade_code(const char* value, size_t size) {
  
  trade_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.trade_code)
}
inline std::string* CtpReqTransfer::mutable_trade_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.trade_code)
  return trade_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_trade_code() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.trade_code)
  
  return trade_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_trade_code(std::string* trade_code) {
  if (trade_code != nullptr) {
    
  } else {
    
  }
  trade_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_code);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.trade_code)
}

// string bank_id = 2;
inline void CtpReqTransfer::clear_bank_id() {
  bank_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::bank_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.bank_id)
  return bank_id_.GetNoArena();
}
inline void CtpReqTransfer::set_bank_id(const std::string& value) {
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.bank_id)
}
inline void CtpReqTransfer::set_bank_id(std::string&& value) {
  
  bank_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.bank_id)
}
inline void CtpReqTransfer::set_bank_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.bank_id)
}
inline void CtpReqTransfer::set_bank_id(const char* value, size_t size) {
  
  bank_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.bank_id)
}
inline std::string* CtpReqTransfer::mutable_bank_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.bank_id)
  return bank_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_bank_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.bank_id)
  
  return bank_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_bank_id(std::string* bank_id) {
  if (bank_id != nullptr) {
    
  } else {
    
  }
  bank_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.bank_id)
}

// string bank_branch_id = 3;
inline void CtpReqTransfer::clear_bank_branch_id() {
  bank_branch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::bank_branch_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.bank_branch_id)
  return bank_branch_id_.GetNoArena();
}
inline void CtpReqTransfer::set_bank_branch_id(const std::string& value) {
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.bank_branch_id)
}
inline void CtpReqTransfer::set_bank_branch_id(std::string&& value) {
  
  bank_branch_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.bank_branch_id)
}
inline void CtpReqTransfer::set_bank_branch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.bank_branch_id)
}
inline void CtpReqTransfer::set_bank_branch_id(const char* value, size_t size) {
  
  bank_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.bank_branch_id)
}
inline std::string* CtpReqTransfer::mutable_bank_branch_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.bank_branch_id)
  return bank_branch_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_bank_branch_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.bank_branch_id)
  
  return bank_branch_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_bank_branch_id(std::string* bank_branch_id) {
  if (bank_branch_id != nullptr) {
    
  } else {
    
  }
  bank_branch_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_branch_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.bank_branch_id)
}

// string broker_id = 4;
inline void CtpReqTransfer::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.broker_id)
  return broker_id_.GetNoArena();
}
inline void CtpReqTransfer::set_broker_id(const std::string& value) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.broker_id)
}
inline void CtpReqTransfer::set_broker_id(std::string&& value) {
  
  broker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.broker_id)
}
inline void CtpReqTransfer::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.broker_id)
}
inline void CtpReqTransfer::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.broker_id)
}
inline std::string* CtpReqTransfer::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.broker_id)
  return broker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.broker_id)
  
  return broker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.broker_id)
}

// string broker_branch_id = 5;
inline void CtpReqTransfer::clear_broker_branch_id() {
  broker_branch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::broker_branch_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.broker_branch_id)
  return broker_branch_id_.GetNoArena();
}
inline void CtpReqTransfer::set_broker_branch_id(const std::string& value) {
  
  broker_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.broker_branch_id)
}
inline void CtpReqTransfer::set_broker_branch_id(std::string&& value) {
  
  broker_branch_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.broker_branch_id)
}
inline void CtpReqTransfer::set_broker_branch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.broker_branch_id)
}
inline void CtpReqTransfer::set_broker_branch_id(const char* value, size_t size) {
  
  broker_branch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.broker_branch_id)
}
inline std::string* CtpReqTransfer::mutable_broker_branch_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.broker_branch_id)
  return broker_branch_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_broker_branch_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.broker_branch_id)
  
  return broker_branch_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_broker_branch_id(std::string* broker_branch_id) {
  if (broker_branch_id != nullptr) {
    
  } else {
    
  }
  broker_branch_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_branch_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.broker_branch_id)
}

// string trade_date = 6;
inline void CtpReqTransfer::clear_trade_date() {
  trade_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::trade_date() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.trade_date)
  return trade_date_.GetNoArena();
}
inline void CtpReqTransfer::set_trade_date(const std::string& value) {
  
  trade_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.trade_date)
}
inline void CtpReqTransfer::set_trade_date(std::string&& value) {
  
  trade_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.trade_date)
}
inline void CtpReqTransfer::set_trade_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.trade_date)
}
inline void CtpReqTransfer::set_trade_date(const char* value, size_t size) {
  
  trade_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.trade_date)
}
inline std::string* CtpReqTransfer::mutable_trade_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.trade_date)
  return trade_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_trade_date() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.trade_date)
  
  return trade_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_trade_date(std::string* trade_date) {
  if (trade_date != nullptr) {
    
  } else {
    
  }
  trade_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.trade_date)
}

// string trade_time = 7;
inline void CtpReqTransfer::clear_trade_time() {
  trade_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::trade_time() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.trade_time)
  return trade_time_.GetNoArena();
}
inline void CtpReqTransfer::set_trade_time(const std::string& value) {
  
  trade_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.trade_time)
}
inline void CtpReqTransfer::set_trade_time(std::string&& value) {
  
  trade_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.trade_time)
}
inline void CtpReqTransfer::set_trade_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.trade_time)
}
inline void CtpReqTransfer::set_trade_time(const char* value, size_t size) {
  
  trade_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.trade_time)
}
inline std::string* CtpReqTransfer::mutable_trade_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.trade_time)
  return trade_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_trade_time() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.trade_time)
  
  return trade_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_trade_time(std::string* trade_time) {
  if (trade_time != nullptr) {
    
  } else {
    
  }
  trade_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_time);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.trade_time)
}

// string bank_serial = 8;
inline void CtpReqTransfer::clear_bank_serial() {
  bank_serial_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::bank_serial() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.bank_serial)
  return bank_serial_.GetNoArena();
}
inline void CtpReqTransfer::set_bank_serial(const std::string& value) {
  
  bank_serial_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.bank_serial)
}
inline void CtpReqTransfer::set_bank_serial(std::string&& value) {
  
  bank_serial_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.bank_serial)
}
inline void CtpReqTransfer::set_bank_serial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_serial_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.bank_serial)
}
inline void CtpReqTransfer::set_bank_serial(const char* value, size_t size) {
  
  bank_serial_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.bank_serial)
}
inline std::string* CtpReqTransfer::mutable_bank_serial() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.bank_serial)
  return bank_serial_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_bank_serial() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.bank_serial)
  
  return bank_serial_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_bank_serial(std::string* bank_serial) {
  if (bank_serial != nullptr) {
    
  } else {
    
  }
  bank_serial_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_serial);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.bank_serial)
}

// string trading_day = 9;
inline void CtpReqTransfer::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.trading_day)
  return trading_day_.GetNoArena();
}
inline void CtpReqTransfer::set_trading_day(const std::string& value) {
  
  trading_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.trading_day)
}
inline void CtpReqTransfer::set_trading_day(std::string&& value) {
  
  trading_day_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.trading_day)
}
inline void CtpReqTransfer::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trading_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.trading_day)
}
inline void CtpReqTransfer::set_trading_day(const char* value, size_t size) {
  
  trading_day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.trading_day)
}
inline std::string* CtpReqTransfer::mutable_trading_day() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.trading_day)
  return trading_day_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_trading_day() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.trading_day)
  
  return trading_day_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.trading_day)
}

// int32 plate_serieal = 10;
inline void CtpReqTransfer::clear_plate_serieal() {
  plate_serieal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpReqTransfer::plate_serieal() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.plate_serieal)
  return plate_serieal_;
}
inline void CtpReqTransfer::set_plate_serieal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  plate_serieal_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.plate_serieal)
}

// string last_fragment = 11;
inline void CtpReqTransfer::clear_last_fragment() {
  last_fragment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::last_fragment() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.last_fragment)
  return last_fragment_.GetNoArena();
}
inline void CtpReqTransfer::set_last_fragment(const std::string& value) {
  
  last_fragment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.last_fragment)
}
inline void CtpReqTransfer::set_last_fragment(std::string&& value) {
  
  last_fragment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.last_fragment)
}
inline void CtpReqTransfer::set_last_fragment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_fragment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.last_fragment)
}
inline void CtpReqTransfer::set_last_fragment(const char* value, size_t size) {
  
  last_fragment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.last_fragment)
}
inline std::string* CtpReqTransfer::mutable_last_fragment() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.last_fragment)
  return last_fragment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_last_fragment() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.last_fragment)
  
  return last_fragment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_last_fragment(std::string* last_fragment) {
  if (last_fragment != nullptr) {
    
  } else {
    
  }
  last_fragment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_fragment);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.last_fragment)
}

// int32 session_id = 12;
inline void CtpReqTransfer::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpReqTransfer::session_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.session_id)
  return session_id_;
}
inline void CtpReqTransfer::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.session_id)
}

// string customer_name = 13;
inline void CtpReqTransfer::clear_customer_name() {
  customer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::customer_name() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.customer_name)
  return customer_name_.GetNoArena();
}
inline void CtpReqTransfer::set_customer_name(const std::string& value) {
  
  customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.customer_name)
}
inline void CtpReqTransfer::set_customer_name(std::string&& value) {
  
  customer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.customer_name)
}
inline void CtpReqTransfer::set_customer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.customer_name)
}
inline void CtpReqTransfer::set_customer_name(const char* value, size_t size) {
  
  customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.customer_name)
}
inline std::string* CtpReqTransfer::mutable_customer_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.customer_name)
  return customer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_customer_name() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.customer_name)
  
  return customer_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_customer_name(std::string* customer_name) {
  if (customer_name != nullptr) {
    
  } else {
    
  }
  customer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_name);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.customer_name)
}

// int32 id_card_type = 14;
inline void CtpReqTransfer::clear_id_card_type() {
  id_card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpReqTransfer::id_card_type() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.id_card_type)
  return id_card_type_;
}
inline void CtpReqTransfer::set_id_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_card_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.id_card_type)
}

// string identified_card_no = 15;
inline void CtpReqTransfer::clear_identified_card_no() {
  identified_card_no_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::identified_card_no() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.identified_card_no)
  return identified_card_no_.GetNoArena();
}
inline void CtpReqTransfer::set_identified_card_no(const std::string& value) {
  
  identified_card_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.identified_card_no)
}
inline void CtpReqTransfer::set_identified_card_no(std::string&& value) {
  
  identified_card_no_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.identified_card_no)
}
inline void CtpReqTransfer::set_identified_card_no(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identified_card_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.identified_card_no)
}
inline void CtpReqTransfer::set_identified_card_no(const char* value, size_t size) {
  
  identified_card_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.identified_card_no)
}
inline std::string* CtpReqTransfer::mutable_identified_card_no() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.identified_card_no)
  return identified_card_no_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_identified_card_no() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.identified_card_no)
  
  return identified_card_no_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_identified_card_no(std::string* identified_card_no) {
  if (identified_card_no != nullptr) {
    
  } else {
    
  }
  identified_card_no_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identified_card_no);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.identified_card_no)
}

// string cust_type = 16;
inline void CtpReqTransfer::clear_cust_type() {
  cust_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::cust_type() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.cust_type)
  return cust_type_.GetNoArena();
}
inline void CtpReqTransfer::set_cust_type(const std::string& value) {
  
  cust_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.cust_type)
}
inline void CtpReqTransfer::set_cust_type(std::string&& value) {
  
  cust_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.cust_type)
}
inline void CtpReqTransfer::set_cust_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cust_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.cust_type)
}
inline void CtpReqTransfer::set_cust_type(const char* value, size_t size) {
  
  cust_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.cust_type)
}
inline std::string* CtpReqTransfer::mutable_cust_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.cust_type)
  return cust_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_cust_type() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.cust_type)
  
  return cust_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_cust_type(std::string* cust_type) {
  if (cust_type != nullptr) {
    
  } else {
    
  }
  cust_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cust_type);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.cust_type)
}

// string bank_account = 17;
inline void CtpReqTransfer::clear_bank_account() {
  bank_account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::bank_account() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.bank_account)
  return bank_account_.GetNoArena();
}
inline void CtpReqTransfer::set_bank_account(const std::string& value) {
  
  bank_account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.bank_account)
}
inline void CtpReqTransfer::set_bank_account(std::string&& value) {
  
  bank_account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.bank_account)
}
inline void CtpReqTransfer::set_bank_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.bank_account)
}
inline void CtpReqTransfer::set_bank_account(const char* value, size_t size) {
  
  bank_account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.bank_account)
}
inline std::string* CtpReqTransfer::mutable_bank_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.bank_account)
  return bank_account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_bank_account() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.bank_account)
  
  return bank_account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_bank_account(std::string* bank_account) {
  if (bank_account != nullptr) {
    
  } else {
    
  }
  bank_account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_account);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.bank_account)
}

// string bank_password = 18;
inline void CtpReqTransfer::clear_bank_password() {
  bank_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::bank_password() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.bank_password)
  return bank_password_.GetNoArena();
}
inline void CtpReqTransfer::set_bank_password(const std::string& value) {
  
  bank_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.bank_password)
}
inline void CtpReqTransfer::set_bank_password(std::string&& value) {
  
  bank_password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.bank_password)
}
inline void CtpReqTransfer::set_bank_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.bank_password)
}
inline void CtpReqTransfer::set_bank_password(const char* value, size_t size) {
  
  bank_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.bank_password)
}
inline std::string* CtpReqTransfer::mutable_bank_password() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.bank_password)
  return bank_password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_bank_password() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.bank_password)
  
  return bank_password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_bank_password(std::string* bank_password) {
  if (bank_password != nullptr) {
    
  } else {
    
  }
  bank_password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_password);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.bank_password)
}

// string account_id = 19;
inline void CtpReqTransfer::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::account_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.account_id)
  return account_id_.GetNoArena();
}
inline void CtpReqTransfer::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.account_id)
}
inline void CtpReqTransfer::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.account_id)
}
inline void CtpReqTransfer::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.account_id)
}
inline void CtpReqTransfer::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.account_id)
}
inline std::string* CtpReqTransfer::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_account_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.account_id)
}

// string password = 20;
inline void CtpReqTransfer::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::password() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.password)
  return password_.GetNoArena();
}
inline void CtpReqTransfer::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.password)
}
inline void CtpReqTransfer::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.password)
}
inline void CtpReqTransfer::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.password)
}
inline void CtpReqTransfer::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.password)
}
inline std::string* CtpReqTransfer::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_password() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.password)
}

// int32 install_id = 21;
inline void CtpReqTransfer::clear_install_id() {
  install_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpReqTransfer::install_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.install_id)
  return install_id_;
}
inline void CtpReqTransfer::set_install_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  install_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.install_id)
}

// int32 future_serial = 22;
inline void CtpReqTransfer::clear_future_serial() {
  future_serial_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpReqTransfer::future_serial() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.future_serial)
  return future_serial_;
}
inline void CtpReqTransfer::set_future_serial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  future_serial_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.future_serial)
}

// string user_id = 23;
inline void CtpReqTransfer::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::user_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.user_id)
  return user_id_.GetNoArena();
}
inline void CtpReqTransfer::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.user_id)
}
inline void CtpReqTransfer::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.user_id)
}
inline void CtpReqTransfer::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.user_id)
}
inline void CtpReqTransfer::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.user_id)
}
inline std::string* CtpReqTransfer::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.user_id)
}

// string verify_cert_no_flag = 24;
inline void CtpReqTransfer::clear_verify_cert_no_flag() {
  verify_cert_no_flag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::verify_cert_no_flag() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.verify_cert_no_flag)
  return verify_cert_no_flag_.GetNoArena();
}
inline void CtpReqTransfer::set_verify_cert_no_flag(const std::string& value) {
  
  verify_cert_no_flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.verify_cert_no_flag)
}
inline void CtpReqTransfer::set_verify_cert_no_flag(std::string&& value) {
  
  verify_cert_no_flag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.verify_cert_no_flag)
}
inline void CtpReqTransfer::set_verify_cert_no_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  verify_cert_no_flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.verify_cert_no_flag)
}
inline void CtpReqTransfer::set_verify_cert_no_flag(const char* value, size_t size) {
  
  verify_cert_no_flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.verify_cert_no_flag)
}
inline std::string* CtpReqTransfer::mutable_verify_cert_no_flag() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.verify_cert_no_flag)
  return verify_cert_no_flag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_verify_cert_no_flag() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.verify_cert_no_flag)
  
  return verify_cert_no_flag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_verify_cert_no_flag(std::string* verify_cert_no_flag) {
  if (verify_cert_no_flag != nullptr) {
    
  } else {
    
  }
  verify_cert_no_flag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_cert_no_flag);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.verify_cert_no_flag)
}

// string currency_id = 25;
inline void CtpReqTransfer::clear_currency_id() {
  currency_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::currency_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.currency_id)
  return currency_id_.GetNoArena();
}
inline void CtpReqTransfer::set_currency_id(const std::string& value) {
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.currency_id)
}
inline void CtpReqTransfer::set_currency_id(std::string&& value) {
  
  currency_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.currency_id)
}
inline void CtpReqTransfer::set_currency_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.currency_id)
}
inline void CtpReqTransfer::set_currency_id(const char* value, size_t size) {
  
  currency_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.currency_id)
}
inline std::string* CtpReqTransfer::mutable_currency_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.currency_id)
  return currency_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_currency_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.currency_id)
  
  return currency_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_currency_id(std::string* currency_id) {
  if (currency_id != nullptr) {
    
  } else {
    
  }
  currency_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.currency_id)
}

// double trade_amount = 26;
inline void CtpReqTransfer::clear_trade_amount() {
  trade_amount_ = 0;
}
inline double CtpReqTransfer::trade_amount() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.trade_amount)
  return trade_amount_;
}
inline void CtpReqTransfer::set_trade_amount(double value) {
  
  trade_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.trade_amount)
}

// double future_fetch_amount = 27;
inline void CtpReqTransfer::clear_future_fetch_amount() {
  future_fetch_amount_ = 0;
}
inline double CtpReqTransfer::future_fetch_amount() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.future_fetch_amount)
  return future_fetch_amount_;
}
inline void CtpReqTransfer::set_future_fetch_amount(double value) {
  
  future_fetch_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.future_fetch_amount)
}

// int32 fee_pay_flag = 28;
inline void CtpReqTransfer::clear_fee_pay_flag() {
  fee_pay_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpReqTransfer::fee_pay_flag() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.fee_pay_flag)
  return fee_pay_flag_;
}
inline void CtpReqTransfer::set_fee_pay_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fee_pay_flag_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.fee_pay_flag)
}

// double cust_fee = 29;
inline void CtpReqTransfer::clear_cust_fee() {
  cust_fee_ = 0;
}
inline double CtpReqTransfer::cust_fee() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.cust_fee)
  return cust_fee_;
}
inline void CtpReqTransfer::set_cust_fee(double value) {
  
  cust_fee_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.cust_fee)
}

// double broker_fee = 30;
inline void CtpReqTransfer::clear_broker_fee() {
  broker_fee_ = 0;
}
inline double CtpReqTransfer::broker_fee() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.broker_fee)
  return broker_fee_;
}
inline void CtpReqTransfer::set_broker_fee(double value) {
  
  broker_fee_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.broker_fee)
}

// string message = 31;
inline void CtpReqTransfer::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::message() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.message)
  return message_.GetNoArena();
}
inline void CtpReqTransfer::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.message)
}
inline void CtpReqTransfer::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.message)
}
inline void CtpReqTransfer::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.message)
}
inline void CtpReqTransfer::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.message)
}
inline std::string* CtpReqTransfer::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_message() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.message)
}

// string digest = 32;
inline void CtpReqTransfer::clear_digest() {
  digest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::digest() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.digest)
  return digest_.GetNoArena();
}
inline void CtpReqTransfer::set_digest(const std::string& value) {
  
  digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.digest)
}
inline void CtpReqTransfer::set_digest(std::string&& value) {
  
  digest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.digest)
}
inline void CtpReqTransfer::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.digest)
}
inline void CtpReqTransfer::set_digest(const char* value, size_t size) {
  
  digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.digest)
}
inline std::string* CtpReqTransfer::mutable_digest() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.digest)
  return digest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_digest() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.digest)
  
  return digest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.digest)
}

// int32 bank_acc_type = 33;
inline void CtpReqTransfer::clear_bank_acc_type() {
  bank_acc_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpReqTransfer::bank_acc_type() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.bank_acc_type)
  return bank_acc_type_;
}
inline void CtpReqTransfer::set_bank_acc_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bank_acc_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.bank_acc_type)
}

// string device_id = 34;
inline void CtpReqTransfer::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::device_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.device_id)
  return device_id_.GetNoArena();
}
inline void CtpReqTransfer::set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.device_id)
}
inline void CtpReqTransfer::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.device_id)
}
inline void CtpReqTransfer::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.device_id)
}
inline void CtpReqTransfer::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.device_id)
}
inline std::string* CtpReqTransfer::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.device_id)
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_device_id() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.device_id)
}

// string bank_secu_acc = 35;
inline void CtpReqTransfer::clear_bank_secu_acc() {
  bank_secu_acc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::bank_secu_acc() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.bank_secu_acc)
  return bank_secu_acc_.GetNoArena();
}
inline void CtpReqTransfer::set_bank_secu_acc(const std::string& value) {
  
  bank_secu_acc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.bank_secu_acc)
}
inline void CtpReqTransfer::set_bank_secu_acc(std::string&& value) {
  
  bank_secu_acc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.bank_secu_acc)
}
inline void CtpReqTransfer::set_bank_secu_acc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_secu_acc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.bank_secu_acc)
}
inline void CtpReqTransfer::set_bank_secu_acc(const char* value, size_t size) {
  
  bank_secu_acc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.bank_secu_acc)
}
inline std::string* CtpReqTransfer::mutable_bank_secu_acc() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.bank_secu_acc)
  return bank_secu_acc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_bank_secu_acc() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.bank_secu_acc)
  
  return bank_secu_acc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_bank_secu_acc(std::string* bank_secu_acc) {
  if (bank_secu_acc != nullptr) {
    
  } else {
    
  }
  bank_secu_acc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_secu_acc);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.bank_secu_acc)
}

// string bank_pwd_flag = 36;
inline void CtpReqTransfer::clear_bank_pwd_flag() {
  bank_pwd_flag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::bank_pwd_flag() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.bank_pwd_flag)
  return bank_pwd_flag_.GetNoArena();
}
inline void CtpReqTransfer::set_bank_pwd_flag(const std::string& value) {
  
  bank_pwd_flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.bank_pwd_flag)
}
inline void CtpReqTransfer::set_bank_pwd_flag(std::string&& value) {
  
  bank_pwd_flag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.bank_pwd_flag)
}
inline void CtpReqTransfer::set_bank_pwd_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_pwd_flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.bank_pwd_flag)
}
inline void CtpReqTransfer::set_bank_pwd_flag(const char* value, size_t size) {
  
  bank_pwd_flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.bank_pwd_flag)
}
inline std::string* CtpReqTransfer::mutable_bank_pwd_flag() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.bank_pwd_flag)
  return bank_pwd_flag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_bank_pwd_flag() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.bank_pwd_flag)
  
  return bank_pwd_flag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_bank_pwd_flag(std::string* bank_pwd_flag) {
  if (bank_pwd_flag != nullptr) {
    
  } else {
    
  }
  bank_pwd_flag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_pwd_flag);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.bank_pwd_flag)
}

// string secu_pwd_flag = 37;
inline void CtpReqTransfer::clear_secu_pwd_flag() {
  secu_pwd_flag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::secu_pwd_flag() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.secu_pwd_flag)
  return secu_pwd_flag_.GetNoArena();
}
inline void CtpReqTransfer::set_secu_pwd_flag(const std::string& value) {
  
  secu_pwd_flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.secu_pwd_flag)
}
inline void CtpReqTransfer::set_secu_pwd_flag(std::string&& value) {
  
  secu_pwd_flag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.secu_pwd_flag)
}
inline void CtpReqTransfer::set_secu_pwd_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secu_pwd_flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.secu_pwd_flag)
}
inline void CtpReqTransfer::set_secu_pwd_flag(const char* value, size_t size) {
  
  secu_pwd_flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.secu_pwd_flag)
}
inline std::string* CtpReqTransfer::mutable_secu_pwd_flag() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.secu_pwd_flag)
  return secu_pwd_flag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_secu_pwd_flag() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.secu_pwd_flag)
  
  return secu_pwd_flag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_secu_pwd_flag(std::string* secu_pwd_flag) {
  if (secu_pwd_flag != nullptr) {
    
  } else {
    
  }
  secu_pwd_flag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secu_pwd_flag);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.secu_pwd_flag)
}

// string oper_no = 38;
inline void CtpReqTransfer::clear_oper_no() {
  oper_no_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::oper_no() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.oper_no)
  return oper_no_.GetNoArena();
}
inline void CtpReqTransfer::set_oper_no(const std::string& value) {
  
  oper_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.oper_no)
}
inline void CtpReqTransfer::set_oper_no(std::string&& value) {
  
  oper_no_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.oper_no)
}
inline void CtpReqTransfer::set_oper_no(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oper_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.oper_no)
}
inline void CtpReqTransfer::set_oper_no(const char* value, size_t size) {
  
  oper_no_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.oper_no)
}
inline std::string* CtpReqTransfer::mutable_oper_no() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.oper_no)
  return oper_no_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_oper_no() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.oper_no)
  
  return oper_no_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_oper_no(std::string* oper_no) {
  if (oper_no != nullptr) {
    
  } else {
    
  }
  oper_no_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oper_no);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.oper_no)
}

// int32 request_id = 39;
inline void CtpReqTransfer::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpReqTransfer::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.request_id)
  return request_id_;
}
inline void CtpReqTransfer::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.request_id)
}

// int32 tid = 40;
inline void CtpReqTransfer::clear_tid() {
  tid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpReqTransfer::tid() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.tid)
  return tid_;
}
inline void CtpReqTransfer::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.tid)
}

// string transfer_status = 41;
inline void CtpReqTransfer::clear_transfer_status() {
  transfer_status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::transfer_status() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.transfer_status)
  return transfer_status_.GetNoArena();
}
inline void CtpReqTransfer::set_transfer_status(const std::string& value) {
  
  transfer_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.transfer_status)
}
inline void CtpReqTransfer::set_transfer_status(std::string&& value) {
  
  transfer_status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.transfer_status)
}
inline void CtpReqTransfer::set_transfer_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transfer_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.transfer_status)
}
inline void CtpReqTransfer::set_transfer_status(const char* value, size_t size) {
  
  transfer_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.transfer_status)
}
inline std::string* CtpReqTransfer::mutable_transfer_status() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.transfer_status)
  return transfer_status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_transfer_status() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.transfer_status)
  
  return transfer_status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_transfer_status(std::string* transfer_status) {
  if (transfer_status != nullptr) {
    
  } else {
    
  }
  transfer_status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transfer_status);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.transfer_status)
}

// string long_customer_name = 42;
inline void CtpReqTransfer::clear_long_customer_name() {
  long_customer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpReqTransfer::long_customer_name() const {
  // @@protoc_insertion_point(field_get:pb.CtpReqTransfer.long_customer_name)
  return long_customer_name_.GetNoArena();
}
inline void CtpReqTransfer::set_long_customer_name(const std::string& value) {
  
  long_customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpReqTransfer.long_customer_name)
}
inline void CtpReqTransfer::set_long_customer_name(std::string&& value) {
  
  long_customer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpReqTransfer.long_customer_name)
}
inline void CtpReqTransfer::set_long_customer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  long_customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpReqTransfer.long_customer_name)
}
inline void CtpReqTransfer::set_long_customer_name(const char* value, size_t size) {
  
  long_customer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpReqTransfer.long_customer_name)
}
inline std::string* CtpReqTransfer::mutable_long_customer_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpReqTransfer.long_customer_name)
  return long_customer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpReqTransfer::release_long_customer_name() {
  // @@protoc_insertion_point(field_release:pb.CtpReqTransfer.long_customer_name)
  
  return long_customer_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpReqTransfer::set_allocated_long_customer_name(std::string* long_customer_name) {
  if (long_customer_name != nullptr) {
    
  } else {
    
  }
  long_customer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), long_customer_name);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpReqTransfer.long_customer_name)
}

// -------------------------------------------------------------------

// CtpRspTransfer

// int32 error_id = 1;
inline void CtpRspTransfer::clear_error_id() {
  error_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspTransfer::error_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspTransfer.error_id)
  return error_id_;
}
inline void CtpRspTransfer::set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspTransfer.error_id)
}

// string error_msg = 2;
inline void CtpRspTransfer::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtpRspTransfer::error_msg() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspTransfer.error_msg)
  return error_msg_.GetNoArena();
}
inline void CtpRspTransfer::set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CtpRspTransfer.error_msg)
}
inline void CtpRspTransfer::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CtpRspTransfer.error_msg)
}
inline void CtpRspTransfer::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CtpRspTransfer.error_msg)
}
inline void CtpRspTransfer::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CtpRspTransfer.error_msg)
}
inline std::string* CtpRspTransfer::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CtpRspTransfer.error_msg)
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtpRspTransfer::release_error_msg() {
  // @@protoc_insertion_point(field_release:pb.CtpRspTransfer.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtpRspTransfer::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspTransfer.error_msg)
}

// int32 request_id = 3;
inline void CtpRspTransfer::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtpRspTransfer::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspTransfer.request_id)
  return request_id_;
}
inline void CtpRspTransfer::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspTransfer.request_id)
}

// bool is_last = 4;
inline void CtpRspTransfer::clear_is_last() {
  is_last_ = false;
}
inline bool CtpRspTransfer::is_last() const {
  // @@protoc_insertion_point(field_get:pb.CtpRspTransfer.is_last)
  return is_last_;
}
inline void CtpRspTransfer::set_is_last(bool value) {
  
  is_last_ = value;
  // @@protoc_insertion_point(field_set:pb.CtpRspTransfer.is_last)
}

// .pb.CtpReqTransfer req = 5;
inline bool CtpRspTransfer::has_req() const {
  return this != internal_default_instance() && req_ != nullptr;
}
inline void CtpRspTransfer::clear_req() {
  if (GetArenaNoVirtual() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
}
inline const ::pb::CtpReqTransfer& CtpRspTransfer::req() const {
  const ::pb::CtpReqTransfer* p = req_;
  // @@protoc_insertion_point(field_get:pb.CtpRspTransfer.req)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CtpReqTransfer*>(
      &::pb::_CtpReqTransfer_default_instance_);
}
inline ::pb::CtpReqTransfer* CtpRspTransfer::release_req() {
  // @@protoc_insertion_point(field_release:pb.CtpRspTransfer.req)
  
  ::pb::CtpReqTransfer* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::pb::CtpReqTransfer* CtpRspTransfer::mutable_req() {
  
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CtpReqTransfer>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CtpRspTransfer.req)
  return req_;
}
inline void CtpRspTransfer::set_allocated_req(::pb::CtpReqTransfer* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:pb.CtpRspTransfer.req)
}

// -------------------------------------------------------------------

// CTPReqSubscribeMarketData

// repeated string list = 1;
inline int CTPReqSubscribeMarketData::list_size() const {
  return list_.size();
}
inline void CTPReqSubscribeMarketData::clear_list() {
  list_.Clear();
}
inline const std::string& CTPReqSubscribeMarketData::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPReqSubscribeMarketData.list)
  return list_.Get(index);
}
inline std::string* CTPReqSubscribeMarketData::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPReqSubscribeMarketData.list)
  return list_.Mutable(index);
}
inline void CTPReqSubscribeMarketData::set_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.CTPReqSubscribeMarketData.list)
  list_.Mutable(index)->assign(value);
}
inline void CTPReqSubscribeMarketData::set_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.CTPReqSubscribeMarketData.list)
  list_.Mutable(index)->assign(std::move(value));
}
inline void CTPReqSubscribeMarketData::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.CTPReqSubscribeMarketData.list)
}
inline void CTPReqSubscribeMarketData::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.CTPReqSubscribeMarketData.list)
}
inline std::string* CTPReqSubscribeMarketData::add_list() {
  // @@protoc_insertion_point(field_add_mutable:pb.CTPReqSubscribeMarketData.list)
  return list_.Add();
}
inline void CTPReqSubscribeMarketData::add_list(const std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.CTPReqSubscribeMarketData.list)
}
inline void CTPReqSubscribeMarketData::add_list(std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.CTPReqSubscribeMarketData.list)
}
inline void CTPReqSubscribeMarketData::add_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.CTPReqSubscribeMarketData.list)
}
inline void CTPReqSubscribeMarketData::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.CTPReqSubscribeMarketData.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CTPReqSubscribeMarketData::list() const {
  // @@protoc_insertion_point(field_list:pb.CTPReqSubscribeMarketData.list)
  return list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CTPReqSubscribeMarketData::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPReqSubscribeMarketData.list)
  return &list_;
}

// -------------------------------------------------------------------

// CTPRspSusbcribeMarketData

// -------------------------------------------------------------------

// CTPReqUnSusbibeMarketData

// repeated string list = 1;
inline int CTPReqUnSusbibeMarketData::list_size() const {
  return list_.size();
}
inline void CTPReqUnSusbibeMarketData::clear_list() {
  list_.Clear();
}
inline const std::string& CTPReqUnSusbibeMarketData::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CTPReqUnSusbibeMarketData.list)
  return list_.Get(index);
}
inline std::string* CTPReqUnSusbibeMarketData::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CTPReqUnSusbibeMarketData.list)
  return list_.Mutable(index);
}
inline void CTPReqUnSusbibeMarketData::set_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.CTPReqUnSusbibeMarketData.list)
  list_.Mutable(index)->assign(value);
}
inline void CTPReqUnSusbibeMarketData::set_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.CTPReqUnSusbibeMarketData.list)
  list_.Mutable(index)->assign(std::move(value));
}
inline void CTPReqUnSusbibeMarketData::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.CTPReqUnSusbibeMarketData.list)
}
inline void CTPReqUnSusbibeMarketData::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.CTPReqUnSusbibeMarketData.list)
}
inline std::string* CTPReqUnSusbibeMarketData::add_list() {
  // @@protoc_insertion_point(field_add_mutable:pb.CTPReqUnSusbibeMarketData.list)
  return list_.Add();
}
inline void CTPReqUnSusbibeMarketData::add_list(const std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.CTPReqUnSusbibeMarketData.list)
}
inline void CTPReqUnSusbibeMarketData::add_list(std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.CTPReqUnSusbibeMarketData.list)
}
inline void CTPReqUnSusbibeMarketData::add_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.CTPReqUnSusbibeMarketData.list)
}
inline void CTPReqUnSusbibeMarketData::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.CTPReqUnSusbibeMarketData.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CTPReqUnSusbibeMarketData::list() const {
  // @@protoc_insertion_point(field_list:pb.CTPReqUnSusbibeMarketData.list)
  return list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CTPReqUnSusbibeMarketData::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CTPReqUnSusbibeMarketData.list)
  return &list_;
}

// -------------------------------------------------------------------

// CTPRspUnSusbibeMarketData

// -------------------------------------------------------------------

// CTPOnRspOrderInsert

// int32 error_id = 1;
inline void CTPOnRspOrderInsert::clear_error_id() {
  error_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPOnRspOrderInsert::error_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPOnRspOrderInsert.error_id)
  return error_id_;
}
inline void CTPOnRspOrderInsert::set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPOnRspOrderInsert.error_id)
}

// bytes error_msg = 2;
inline void CTPOnRspOrderInsert::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOnRspOrderInsert::error_msg() const {
  // @@protoc_insertion_point(field_get:pb.CTPOnRspOrderInsert.error_msg)
  return error_msg_.GetNoArena();
}
inline void CTPOnRspOrderInsert::set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOnRspOrderInsert.error_msg)
}
inline void CTPOnRspOrderInsert::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOnRspOrderInsert.error_msg)
}
inline void CTPOnRspOrderInsert::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOnRspOrderInsert.error_msg)
}
inline void CTPOnRspOrderInsert::set_error_msg(const void* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOnRspOrderInsert.error_msg)
}
inline std::string* CTPOnRspOrderInsert::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOnRspOrderInsert.error_msg)
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOnRspOrderInsert::release_error_msg() {
  // @@protoc_insertion_point(field_release:pb.CTPOnRspOrderInsert.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOnRspOrderInsert::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOnRspOrderInsert.error_msg)
}

// string order_ref = 3;
inline void CTPOnRspOrderInsert::clear_order_ref() {
  order_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPOnRspOrderInsert::order_ref() const {
  // @@protoc_insertion_point(field_get:pb.CTPOnRspOrderInsert.order_ref)
  return order_ref_.GetNoArena();
}
inline void CTPOnRspOrderInsert::set_order_ref(const std::string& value) {
  
  order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPOnRspOrderInsert.order_ref)
}
inline void CTPOnRspOrderInsert::set_order_ref(std::string&& value) {
  
  order_ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPOnRspOrderInsert.order_ref)
}
inline void CTPOnRspOrderInsert::set_order_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPOnRspOrderInsert.order_ref)
}
inline void CTPOnRspOrderInsert::set_order_ref(const char* value, size_t size) {
  
  order_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPOnRspOrderInsert.order_ref)
}
inline std::string* CTPOnRspOrderInsert::mutable_order_ref() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPOnRspOrderInsert.order_ref)
  return order_ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPOnRspOrderInsert::release_order_ref() {
  // @@protoc_insertion_point(field_release:pb.CTPOnRspOrderInsert.order_ref)
  
  return order_ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPOnRspOrderInsert::set_allocated_order_ref(std::string* order_ref) {
  if (order_ref != nullptr) {
    
  } else {
    
  }
  order_ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_ref);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOnRspOrderInsert.order_ref)
}

// -------------------------------------------------------------------

// CTPInstrumentField

// string instrument_id = 1;
inline void CTPInstrumentField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::instrument_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void CTPInstrumentField::set_instrument_id(const std::string& value) {
  
  instrument_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.instrument_id)
}
inline void CTPInstrumentField::set_instrument_id(std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.instrument_id)
}
inline void CTPInstrumentField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.instrument_id)
}
inline void CTPInstrumentField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.instrument_id)
}
inline std::string* CTPInstrumentField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.instrument_id)
  return instrument_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.instrument_id)
}

// string exchange_id = 2;
inline void CTPInstrumentField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::exchange_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void CTPInstrumentField::set_exchange_id(const std::string& value) {
  
  exchange_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.exchange_id)
}
inline void CTPInstrumentField::set_exchange_id(std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.exchange_id)
}
inline void CTPInstrumentField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.exchange_id)
}
inline void CTPInstrumentField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.exchange_id)
}
inline std::string* CTPInstrumentField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.exchange_id)
  return exchange_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.exchange_id)
}

// bytes instrument_name = 3;
inline void CTPInstrumentField::clear_instrument_name() {
  instrument_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::instrument_name() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.instrument_name)
  return instrument_name_.GetNoArena();
}
inline void CTPInstrumentField::set_instrument_name(const std::string& value) {
  
  instrument_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.instrument_name)
}
inline void CTPInstrumentField::set_instrument_name(std::string&& value) {
  
  instrument_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.instrument_name)
}
inline void CTPInstrumentField::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.instrument_name)
}
inline void CTPInstrumentField::set_instrument_name(const void* value, size_t size) {
  
  instrument_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.instrument_name)
}
inline std::string* CTPInstrumentField::mutable_instrument_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.instrument_name)
  return instrument_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_instrument_name() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.instrument_name)
  
  return instrument_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_instrument_name(std::string* instrument_name) {
  if (instrument_name != nullptr) {
    
  } else {
    
  }
  instrument_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_name);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.instrument_name)
}

// string exchange_inst_id = 4;
inline void CTPInstrumentField::clear_exchange_inst_id() {
  exchange_inst_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::exchange_inst_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.exchange_inst_id)
  return exchange_inst_id_.GetNoArena();
}
inline void CTPInstrumentField::set_exchange_inst_id(const std::string& value) {
  
  exchange_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.exchange_inst_id)
}
inline void CTPInstrumentField::set_exchange_inst_id(std::string&& value) {
  
  exchange_inst_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.exchange_inst_id)
}
inline void CTPInstrumentField::set_exchange_inst_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.exchange_inst_id)
}
inline void CTPInstrumentField::set_exchange_inst_id(const char* value, size_t size) {
  
  exchange_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.exchange_inst_id)
}
inline std::string* CTPInstrumentField::mutable_exchange_inst_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.exchange_inst_id)
  return exchange_inst_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_exchange_inst_id() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.exchange_inst_id)
  
  return exchange_inst_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_exchange_inst_id(std::string* exchange_inst_id) {
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_inst_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.exchange_inst_id)
}

// string product_id = 5;
inline void CTPInstrumentField::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::product_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.product_id)
  return product_id_.GetNoArena();
}
inline void CTPInstrumentField::set_product_id(const std::string& value) {
  
  product_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.product_id)
}
inline void CTPInstrumentField::set_product_id(std::string&& value) {
  
  product_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.product_id)
}
inline void CTPInstrumentField::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.product_id)
}
inline void CTPInstrumentField::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.product_id)
}
inline std::string* CTPInstrumentField::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.product_id)
  return product_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_product_id() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.product_id)
  
  return product_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.product_id)
}

// int32 product_class = 6;
inline void CTPInstrumentField::clear_product_class() {
  product_class_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::product_class() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.product_class)
  return product_class_;
}
inline void CTPInstrumentField::set_product_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  product_class_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.product_class)
}

// int32 delivery_year = 7;
inline void CTPInstrumentField::clear_delivery_year() {
  delivery_year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::delivery_year() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.delivery_year)
  return delivery_year_;
}
inline void CTPInstrumentField::set_delivery_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delivery_year_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.delivery_year)
}

// int32 delivery_month = 8;
inline void CTPInstrumentField::clear_delivery_month() {
  delivery_month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::delivery_month() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.delivery_month)
  return delivery_month_;
}
inline void CTPInstrumentField::set_delivery_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delivery_month_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.delivery_month)
}

// int32 max_market_order_volume = 9;
inline void CTPInstrumentField::clear_max_market_order_volume() {
  max_market_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::max_market_order_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.max_market_order_volume)
  return max_market_order_volume_;
}
inline void CTPInstrumentField::set_max_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_market_order_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.max_market_order_volume)
}

// int32 min_market_order_volume = 10;
inline void CTPInstrumentField::clear_min_market_order_volume() {
  min_market_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::min_market_order_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.min_market_order_volume)
  return min_market_order_volume_;
}
inline void CTPInstrumentField::set_min_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_market_order_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.min_market_order_volume)
}

// int32 max_limit_order_volume = 11;
inline void CTPInstrumentField::clear_max_limit_order_volume() {
  max_limit_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::max_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.max_limit_order_volume)
  return max_limit_order_volume_;
}
inline void CTPInstrumentField::set_max_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_limit_order_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.max_limit_order_volume)
}

// int32 min_limit_order_volume = 12;
inline void CTPInstrumentField::clear_min_limit_order_volume() {
  min_limit_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::min_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.min_limit_order_volume)
  return min_limit_order_volume_;
}
inline void CTPInstrumentField::set_min_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_limit_order_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.min_limit_order_volume)
}

// int32 volume_multiple = 13;
inline void CTPInstrumentField::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::volume_multiple() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.volume_multiple)
  return volume_multiple_;
}
inline void CTPInstrumentField::set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.volume_multiple)
}

// double price_tick = 14;
inline void CTPInstrumentField::clear_price_tick() {
  price_tick_ = 0;
}
inline double CTPInstrumentField::price_tick() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.price_tick)
  return price_tick_;
}
inline void CTPInstrumentField::set_price_tick(double value) {
  
  price_tick_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.price_tick)
}

// string create_date = 15;
inline void CTPInstrumentField::clear_create_date() {
  create_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::create_date() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.create_date)
  return create_date_.GetNoArena();
}
inline void CTPInstrumentField::set_create_date(const std::string& value) {
  
  create_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.create_date)
}
inline void CTPInstrumentField::set_create_date(std::string&& value) {
  
  create_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.create_date)
}
inline void CTPInstrumentField::set_create_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  create_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.create_date)
}
inline void CTPInstrumentField::set_create_date(const char* value, size_t size) {
  
  create_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.create_date)
}
inline std::string* CTPInstrumentField::mutable_create_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.create_date)
  return create_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_create_date() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.create_date)
  
  return create_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_create_date(std::string* create_date) {
  if (create_date != nullptr) {
    
  } else {
    
  }
  create_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.create_date)
}

// string open_date = 16;
inline void CTPInstrumentField::clear_open_date() {
  open_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::open_date() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.open_date)
  return open_date_.GetNoArena();
}
inline void CTPInstrumentField::set_open_date(const std::string& value) {
  
  open_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.open_date)
}
inline void CTPInstrumentField::set_open_date(std::string&& value) {
  
  open_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.open_date)
}
inline void CTPInstrumentField::set_open_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  open_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.open_date)
}
inline void CTPInstrumentField::set_open_date(const char* value, size_t size) {
  
  open_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.open_date)
}
inline std::string* CTPInstrumentField::mutable_open_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.open_date)
  return open_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_open_date() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.open_date)
  
  return open_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_open_date(std::string* open_date) {
  if (open_date != nullptr) {
    
  } else {
    
  }
  open_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.open_date)
}

// string expire_date = 17;
inline void CTPInstrumentField::clear_expire_date() {
  expire_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::expire_date() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.expire_date)
  return expire_date_.GetNoArena();
}
inline void CTPInstrumentField::set_expire_date(const std::string& value) {
  
  expire_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.expire_date)
}
inline void CTPInstrumentField::set_expire_date(std::string&& value) {
  
  expire_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.expire_date)
}
inline void CTPInstrumentField::set_expire_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expire_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.expire_date)
}
inline void CTPInstrumentField::set_expire_date(const char* value, size_t size) {
  
  expire_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.expire_date)
}
inline std::string* CTPInstrumentField::mutable_expire_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.expire_date)
  return expire_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_expire_date() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.expire_date)
  
  return expire_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_expire_date(std::string* expire_date) {
  if (expire_date != nullptr) {
    
  } else {
    
  }
  expire_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expire_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.expire_date)
}

// string start_deliv_date = 18;
inline void CTPInstrumentField::clear_start_deliv_date() {
  start_deliv_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::start_deliv_date() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.start_deliv_date)
  return start_deliv_date_.GetNoArena();
}
inline void CTPInstrumentField::set_start_deliv_date(const std::string& value) {
  
  start_deliv_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.start_deliv_date)
}
inline void CTPInstrumentField::set_start_deliv_date(std::string&& value) {
  
  start_deliv_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.start_deliv_date)
}
inline void CTPInstrumentField::set_start_deliv_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_deliv_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.start_deliv_date)
}
inline void CTPInstrumentField::set_start_deliv_date(const char* value, size_t size) {
  
  start_deliv_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.start_deliv_date)
}
inline std::string* CTPInstrumentField::mutable_start_deliv_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.start_deliv_date)
  return start_deliv_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_start_deliv_date() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.start_deliv_date)
  
  return start_deliv_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_start_deliv_date(std::string* start_deliv_date) {
  if (start_deliv_date != nullptr) {
    
  } else {
    
  }
  start_deliv_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_deliv_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.start_deliv_date)
}

// string end_deliv_date = 19;
inline void CTPInstrumentField::clear_end_deliv_date() {
  end_deliv_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::end_deliv_date() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.end_deliv_date)
  return end_deliv_date_.GetNoArena();
}
inline void CTPInstrumentField::set_end_deliv_date(const std::string& value) {
  
  end_deliv_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.end_deliv_date)
}
inline void CTPInstrumentField::set_end_deliv_date(std::string&& value) {
  
  end_deliv_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.end_deliv_date)
}
inline void CTPInstrumentField::set_end_deliv_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_deliv_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.end_deliv_date)
}
inline void CTPInstrumentField::set_end_deliv_date(const char* value, size_t size) {
  
  end_deliv_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.end_deliv_date)
}
inline std::string* CTPInstrumentField::mutable_end_deliv_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.end_deliv_date)
  return end_deliv_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_end_deliv_date() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.end_deliv_date)
  
  return end_deliv_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_end_deliv_date(std::string* end_deliv_date) {
  if (end_deliv_date != nullptr) {
    
  } else {
    
  }
  end_deliv_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_deliv_date);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.end_deliv_date)
}

// int32 inst_life_phase = 20;
inline void CTPInstrumentField::clear_inst_life_phase() {
  inst_life_phase_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::inst_life_phase() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.inst_life_phase)
  return inst_life_phase_;
}
inline void CTPInstrumentField::set_inst_life_phase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inst_life_phase_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.inst_life_phase)
}

// bool is_trading = 30;
inline void CTPInstrumentField::clear_is_trading() {
  is_trading_ = false;
}
inline bool CTPInstrumentField::is_trading() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.is_trading)
  return is_trading_;
}
inline void CTPInstrumentField::set_is_trading(bool value) {
  
  is_trading_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.is_trading)
}

// int32 position_type = 31;
inline void CTPInstrumentField::clear_position_type() {
  position_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::position_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.position_type)
  return position_type_;
}
inline void CTPInstrumentField::set_position_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.position_type)
}

// int32 position_date_type = 32;
inline void CTPInstrumentField::clear_position_date_type() {
  position_date_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::position_date_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.position_date_type)
  return position_date_type_;
}
inline void CTPInstrumentField::set_position_date_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_date_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.position_date_type)
}

// double long_margin_ratio = 33;
inline void CTPInstrumentField::clear_long_margin_ratio() {
  long_margin_ratio_ = 0;
}
inline double CTPInstrumentField::long_margin_ratio() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.long_margin_ratio)
  return long_margin_ratio_;
}
inline void CTPInstrumentField::set_long_margin_ratio(double value) {
  
  long_margin_ratio_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.long_margin_ratio)
}

// double short_margin_ratio = 34;
inline void CTPInstrumentField::clear_short_margin_ratio() {
  short_margin_ratio_ = 0;
}
inline double CTPInstrumentField::short_margin_ratio() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.short_margin_ratio)
  return short_margin_ratio_;
}
inline void CTPInstrumentField::set_short_margin_ratio(double value) {
  
  short_margin_ratio_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.short_margin_ratio)
}

// bool max_margin_side_algorithm = 35;
inline void CTPInstrumentField::clear_max_margin_side_algorithm() {
  max_margin_side_algorithm_ = false;
}
inline bool CTPInstrumentField::max_margin_side_algorithm() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.max_margin_side_algorithm)
  return max_margin_side_algorithm_;
}
inline void CTPInstrumentField::set_max_margin_side_algorithm(bool value) {
  
  max_margin_side_algorithm_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.max_margin_side_algorithm)
}

// string underlying_inst_id = 36;
inline void CTPInstrumentField::clear_underlying_inst_id() {
  underlying_inst_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTPInstrumentField::underlying_inst_id() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.underlying_inst_id)
  return underlying_inst_id_.GetNoArena();
}
inline void CTPInstrumentField::set_underlying_inst_id(const std::string& value) {
  
  underlying_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.underlying_inst_id)
}
inline void CTPInstrumentField::set_underlying_inst_id(std::string&& value) {
  
  underlying_inst_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CTPInstrumentField.underlying_inst_id)
}
inline void CTPInstrumentField::set_underlying_inst_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  underlying_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CTPInstrumentField.underlying_inst_id)
}
inline void CTPInstrumentField::set_underlying_inst_id(const char* value, size_t size) {
  
  underlying_inst_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CTPInstrumentField.underlying_inst_id)
}
inline std::string* CTPInstrumentField::mutable_underlying_inst_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CTPInstrumentField.underlying_inst_id)
  return underlying_inst_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTPInstrumentField::release_underlying_inst_id() {
  // @@protoc_insertion_point(field_release:pb.CTPInstrumentField.underlying_inst_id)
  
  return underlying_inst_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTPInstrumentField::set_allocated_underlying_inst_id(std::string* underlying_inst_id) {
  if (underlying_inst_id != nullptr) {
    
  } else {
    
  }
  underlying_inst_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), underlying_inst_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CTPInstrumentField.underlying_inst_id)
}

// double strike_price = 37;
inline void CTPInstrumentField::clear_strike_price() {
  strike_price_ = 0;
}
inline double CTPInstrumentField::strike_price() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.strike_price)
  return strike_price_;
}
inline void CTPInstrumentField::set_strike_price(double value) {
  
  strike_price_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.strike_price)
}

// int32 options_type = 38;
inline void CTPInstrumentField::clear_options_type() {
  options_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::options_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.options_type)
  return options_type_;
}
inline void CTPInstrumentField::set_options_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  options_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.options_type)
}

// int32 underlying_multiple = 39;
inline void CTPInstrumentField::clear_underlying_multiple() {
  underlying_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::underlying_multiple() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.underlying_multiple)
  return underlying_multiple_;
}
inline void CTPInstrumentField::set_underlying_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  underlying_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.underlying_multiple)
}

// int32 combination_type = 40;
inline void CTPInstrumentField::clear_combination_type() {
  combination_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTPInstrumentField::combination_type() const {
  // @@protoc_insertion_point(field_get:pb.CTPInstrumentField.combination_type)
  return combination_type_;
}
inline void CTPInstrumentField::set_combination_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  combination_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CTPInstrumentField.combination_type)
}

// -------------------------------------------------------------------

// CTPOnRspQryInstrument

// .pb.CTPInstrumentField inst = 1;
inline bool CTPOnRspQryInstrument::has_inst() const {
  return this != internal_default_instance() && inst_ != nullptr;
}
inline void CTPOnRspQryInstrument::clear_inst() {
  if (GetArenaNoVirtual() == nullptr && inst_ != nullptr) {
    delete inst_;
  }
  inst_ = nullptr;
}
inline const ::pb::CTPInstrumentField& CTPOnRspQryInstrument::inst() const {
  const ::pb::CTPInstrumentField* p = inst_;
  // @@protoc_insertion_point(field_get:pb.CTPOnRspQryInstrument.inst)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPInstrumentField*>(
      &::pb::_CTPInstrumentField_default_instance_);
}
inline ::pb::CTPInstrumentField* CTPOnRspQryInstrument::release_inst() {
  // @@protoc_insertion_point(field_release:pb.CTPOnRspQryInstrument.inst)
  
  ::pb::CTPInstrumentField* temp = inst_;
  inst_ = nullptr;
  return temp;
}
inline ::pb::CTPInstrumentField* CTPOnRspQryInstrument::mutable_inst() {
  
  if (inst_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPInstrumentField>(GetArenaNoVirtual());
    inst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPOnRspQryInstrument.inst)
  return inst_;
}
inline void CTPOnRspQryInstrument::set_allocated_inst(::pb::CTPInstrumentField* inst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete inst_;
  }
  if (inst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inst, submessage_arena);
    }
    
  } else {
    
  }
  inst_ = inst;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOnRspQryInstrument.inst)
}

// .pb.CTPRspInfo response = 2;
inline bool CTPOnRspQryInstrument::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline void CTPOnRspQryInstrument::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::pb::CTPRspInfo& CTPOnRspQryInstrument::response() const {
  const ::pb::CTPRspInfo* p = response_;
  // @@protoc_insertion_point(field_get:pb.CTPOnRspQryInstrument.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CTPRspInfo*>(
      &::pb::_CTPRspInfo_default_instance_);
}
inline ::pb::CTPRspInfo* CTPOnRspQryInstrument::release_response() {
  // @@protoc_insertion_point(field_release:pb.CTPOnRspQryInstrument.response)
  
  ::pb::CTPRspInfo* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::pb::CTPRspInfo* CTPOnRspQryInstrument::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CTPRspInfo>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CTPOnRspQryInstrument.response)
  return response_;
}
inline void CTPOnRspQryInstrument::set_allocated_response(::pb::CTPRspInfo* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:pb.CTPOnRspQryInstrument.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::CTPDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CTPDirection>() {
  return ::pb::CTPDirection_descriptor();
}
template <> struct is_proto_enum< ::pb::CTPOrderStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CTPOrderStatus>() {
  return ::pb::CTPOrderStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::CTPPriceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CTPPriceType>() {
  return ::pb::CTPPriceType_descriptor();
}
template <> struct is_proto_enum< ::pb::CTPOffsetFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CTPOffsetFlag>() {
  return ::pb::CTPOffsetFlag_descriptor();
}
template <> struct is_proto_enum< ::pb::CTPHedgeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CTPHedgeType>() {
  return ::pb::CTPHedgeType_descriptor();
}
template <> struct is_proto_enum< ::pb::CTPTradeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CTPTradeType>() {
  return ::pb::CTPTradeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ctp_2eproto
