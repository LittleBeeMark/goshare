// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_report.proto

#include "trade_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_order_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderID_order_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductID_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Symbol_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trade_5freport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TradeReport_trade_5freport_2eproto;
namespace pb {
class TradeReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeReport> _instance;
} _TradeReport_default_instance_;
class trade_report_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trade_report_list> _instance;
} _trade_report_list_default_instance_;
class TradeReportSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeReportSession> _instance;
} _TradeReportSession_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_TradeReport_trade_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TradeReport_default_instance_;
    new (ptr) ::pb::TradeReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TradeReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TradeReport_trade_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_TradeReport_trade_5freport_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_OrderID_order_2eproto.base,
      &scc_info_ProductID_common_2eproto.base,}};

static void InitDefaultsscc_info_TradeReportSession_trade_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TradeReportSession_default_instance_;
    new (ptr) ::pb::TradeReportSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TradeReportSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeReportSession_trade_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TradeReportSession_trade_5freport_2eproto}, {
      &scc_info_TradeReport_trade_5freport_2eproto.base,}};

static void InitDefaultsscc_info_trade_report_list_trade_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_trade_report_list_default_instance_;
    new (ptr) ::pb::trade_report_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::trade_report_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_trade_report_list_trade_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_trade_report_list_trade_5freport_2eproto}, {
      &scc_info_TradeReport_trade_5freport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trade_5freport_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_trade_5freport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trade_5freport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trade_5freport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, account_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, trade_id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, price_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, volume_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, traded_time_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, traded_trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, order_price_type_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, order_hedge_type_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, trade_type_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, local_type_id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, commission_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, tax_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, total_other_fee_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, initial_traded_price_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, reserve_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, route_account_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, user_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, settlement_group_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, symbol_name_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, child_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, price_tick_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, account_name_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, user_name_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, order_source_type_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, product_id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, branch_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, branch_name_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, local_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, broker_order_seq_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeReport, link_local_order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::trade_report_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::trade_report_list, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TradeReportSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TradeReportSession, trade_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::TradeReport)},
  { 42, -1, sizeof(::pb::trade_report_list)},
  { 48, -1, sizeof(::pb::TradeReportSession)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TradeReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_trade_report_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TradeReportSession_default_instance_),
};

const char descriptor_table_protodef_trade_5freport_2eproto[] =
  "\n\022trade_report.proto\022\002pb\032\014common.proto\032\013"
  "order.proto\"\333\007\n\013TradeReport\022\017\n\007account\030\001"
  " \001(\t\022\020\n\010trade_id\030\002 \001(\t\022\032\n\006symbol\030\003 \001(\0132\n"
  ".pb.Symbol\022%\n\tdirection\030\004 \001(\0162\022.pb.Order"
  "Direction\022\r\n\005price\030\005 \001(\001\022\016\n\006volume\030\006 \001(\005"
  "\022\023\n\013traded_time\030\007 \001(\003\022\032\n\022traded_trading_"
  "day\030\010 \001(\005\022\035\n\010order_id\030\t \001(\0132\013.pb.OrderID"
  "\022,\n\020order_price_type\030\n \001(\0162\022.pb.OrderPri"
  "ceType\022,\n\020order_hedge_type\030\013 \001(\0162\022.pb.Or"
  "derHedgeType\022!\n\ntrade_type\030\014 \001(\0162\r.pb.Tr"
  "adeType\022\025\n\rcurrency_type\030\r \001(\005\022\031\n\021exchan"
  "ge_order_id\030\016 \001(\t\022\025\n\rlocal_type_id\030\017 \001(\005"
  "\022\022\n\ncommission\030\020 \001(\001\022\013\n\003tax\030\021 \001(\001\022\027\n\017tot"
  "al_other_fee\030\022 \001(\001\022\034\n\024initial_traded_pri"
  "ce\030\023 \001(\001\022\017\n\007reserve\030\024 \001(\001\022#\n\013offset_flag"
  "\030\025 \001(\0162\016.pb.OffsetFlag\022\025\n\rroute_account\030"
  "\026 \001(\t\022\014\n\004user\030\027 \001(\t\022\030\n\020settlement_group\030"
  "\030 \001(\005\022\023\n\013symbol_name\030\031 \001(\t\022#\n\016child_orde"
  "r_id\030\032 \001(\0132\013.pb.OrderID\022\022\n\nprice_tick\030\033 "
  "\001(\001\022\024\n\014account_name\030\034 \001(\t\022\027\n\017volume_mult"
  "iple\030\035 \001(\005\022\021\n\tuser_name\030\036 \001(\t\022.\n\021order_s"
  "ource_type\030\037 \001(\0162\023.pb.OrderSourceType\022!\n"
  "\nproduct_id\030  \001(\0132\r.pb.ProductID\022\016\n\006bran"
  "ch\030! \001(\t\022\023\n\013branch_name\030\" \001(\t\022\026\n\016local_o"
  "rder_id\030# \001(\t\022\030\n\020broker_order_seq\030$ \001(\005\022"
  "(\n\023link_local_order_id\030% \001(\0132\013.pb.OrderI"
  "D\"2\n\021trade_report_list\022\035\n\004list\030\001 \003(\0132\017.p"
  "b.TradeReport\"4\n\022TradeReportSession\022\036\n\005t"
  "rade\030\001 \001(\0132\017.pb.TradeReport*]\n\016OrderHedg"
  "eType\022\023\n\017OHT_SPECULATION\020\000\022\021\n\rOHT_ARBITR"
  "AGE\020\001\022\r\n\tOHT_HEDGE\020\002\022\024\n\020OHT_SPECULATION2"
  "\020\003*\317\001\n\tTradeType\022\r\n\tTT_NORMAL\020\000\022\030\n\024TT_OP"
  "TIONS_EXECUTION\020\001\022\n\n\006TT_OTC\020\002\022\022\n\016TT_EFP_"
  "DERIVED\020\003\022\032\n\026TT_COMBINATION_DERIVED\020\004\022\025\n"
  "\021TT_DELIVERY_CLOSE\020\005\022\031\n\025TT_SETTLEMENT_DE"
  "RIVED\020\006\022\030\n\024TT_PLACEMENT_DERIVED\020\007\022\021\n\rTT_"
  "REPURCHASE\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_trade_5freport_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_order_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_trade_5freport_2eproto_sccs[3] = {
  &scc_info_TradeReport_trade_5freport_2eproto.base,
  &scc_info_TradeReportSession_trade_5freport_2eproto.base,
  &scc_info_trade_report_list_trade_5freport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trade_5freport_2eproto_once;
static bool descriptor_table_trade_5freport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_5freport_2eproto = {
  &descriptor_table_trade_5freport_2eproto_initialized, descriptor_table_protodef_trade_5freport_2eproto, "trade_report.proto", 1460,
  &descriptor_table_trade_5freport_2eproto_once, descriptor_table_trade_5freport_2eproto_sccs, descriptor_table_trade_5freport_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_trade_5freport_2eproto::offsets,
  file_level_metadata_trade_5freport_2eproto, 3, file_level_enum_descriptors_trade_5freport_2eproto, file_level_service_descriptors_trade_5freport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trade_5freport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trade_5freport_2eproto), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderHedgeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_5freport_2eproto);
  return file_level_enum_descriptors_trade_5freport_2eproto[0];
}
bool OrderHedgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_5freport_2eproto);
  return file_level_enum_descriptors_trade_5freport_2eproto[1];
}
bool TradeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TradeReport::InitAsDefaultInstance() {
  ::pb::_TradeReport_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_TradeReport_default_instance_._instance.get_mutable()->order_id_ = const_cast< ::pb::OrderID*>(
      ::pb::OrderID::internal_default_instance());
  ::pb::_TradeReport_default_instance_._instance.get_mutable()->child_order_id_ = const_cast< ::pb::OrderID*>(
      ::pb::OrderID::internal_default_instance());
  ::pb::_TradeReport_default_instance_._instance.get_mutable()->product_id_ = const_cast< ::pb::ProductID*>(
      ::pb::ProductID::internal_default_instance());
  ::pb::_TradeReport_default_instance_._instance.get_mutable()->link_local_order_id_ = const_cast< ::pb::OrderID*>(
      ::pb::OrderID::internal_default_instance());
}
class TradeReport::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const TradeReport* msg);
  static const ::pb::OrderID& order_id(const TradeReport* msg);
  static const ::pb::OrderID& child_order_id(const TradeReport* msg);
  static const ::pb::ProductID& product_id(const TradeReport* msg);
  static const ::pb::OrderID& link_local_order_id(const TradeReport* msg);
};

const ::pb::Symbol&
TradeReport::HasBitSetters::symbol(const TradeReport* msg) {
  return *msg->symbol_;
}
const ::pb::OrderID&
TradeReport::HasBitSetters::order_id(const TradeReport* msg) {
  return *msg->order_id_;
}
const ::pb::OrderID&
TradeReport::HasBitSetters::child_order_id(const TradeReport* msg) {
  return *msg->child_order_id_;
}
const ::pb::ProductID&
TradeReport::HasBitSetters::product_id(const TradeReport* msg) {
  return *msg->product_id_;
}
const ::pb::OrderID&
TradeReport::HasBitSetters::link_local_order_id(const TradeReport* msg) {
  return *msg->link_local_order_id_;
}
void TradeReport::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void TradeReport::clear_order_id() {
  if (GetArenaNoVirtual() == nullptr && order_id_ != nullptr) {
    delete order_id_;
  }
  order_id_ = nullptr;
}
void TradeReport::clear_child_order_id() {
  if (GetArenaNoVirtual() == nullptr && child_order_id_ != nullptr) {
    delete child_order_id_;
  }
  child_order_id_ = nullptr;
}
void TradeReport::clear_product_id() {
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
}
void TradeReport::clear_link_local_order_id() {
  if (GetArenaNoVirtual() == nullptr && link_local_order_id_ != nullptr) {
    delete link_local_order_id_;
  }
  link_local_order_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeReport::kAccountFieldNumber;
const int TradeReport::kTradeIdFieldNumber;
const int TradeReport::kSymbolFieldNumber;
const int TradeReport::kDirectionFieldNumber;
const int TradeReport::kPriceFieldNumber;
const int TradeReport::kVolumeFieldNumber;
const int TradeReport::kTradedTimeFieldNumber;
const int TradeReport::kTradedTradingDayFieldNumber;
const int TradeReport::kOrderIdFieldNumber;
const int TradeReport::kOrderPriceTypeFieldNumber;
const int TradeReport::kOrderHedgeTypeFieldNumber;
const int TradeReport::kTradeTypeFieldNumber;
const int TradeReport::kCurrencyTypeFieldNumber;
const int TradeReport::kExchangeOrderIdFieldNumber;
const int TradeReport::kLocalTypeIdFieldNumber;
const int TradeReport::kCommissionFieldNumber;
const int TradeReport::kTaxFieldNumber;
const int TradeReport::kTotalOtherFeeFieldNumber;
const int TradeReport::kInitialTradedPriceFieldNumber;
const int TradeReport::kReserveFieldNumber;
const int TradeReport::kOffsetFlagFieldNumber;
const int TradeReport::kRouteAccountFieldNumber;
const int TradeReport::kUserFieldNumber;
const int TradeReport::kSettlementGroupFieldNumber;
const int TradeReport::kSymbolNameFieldNumber;
const int TradeReport::kChildOrderIdFieldNumber;
const int TradeReport::kPriceTickFieldNumber;
const int TradeReport::kAccountNameFieldNumber;
const int TradeReport::kVolumeMultipleFieldNumber;
const int TradeReport::kUserNameFieldNumber;
const int TradeReport::kOrderSourceTypeFieldNumber;
const int TradeReport::kProductIdFieldNumber;
const int TradeReport::kBranchFieldNumber;
const int TradeReport::kBranchNameFieldNumber;
const int TradeReport::kLocalOrderIdFieldNumber;
const int TradeReport::kBrokerOrderSeqFieldNumber;
const int TradeReport::kLinkLocalOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeReport::TradeReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TradeReport)
}
TradeReport::TradeReport(const TradeReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  trade_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trade_id().size() > 0) {
    trade_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trade_id_);
  }
  exchange_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  route_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.route_account().size() > 0) {
    route_account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_account_);
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  symbol_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.symbol_name().size() > 0) {
    symbol_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.account_name().size() > 0) {
    account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.branch().size() > 0) {
    branch_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  branch_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.branch_name().size() > 0) {
    branch_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.branch_name_);
  }
  local_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.local_order_id().size() > 0) {
    local_order_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_order_id_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_order_id()) {
    order_id_ = new ::pb::OrderID(*from.order_id_);
  } else {
    order_id_ = nullptr;
  }
  if (from.has_child_order_id()) {
    child_order_id_ = new ::pb::OrderID(*from.child_order_id_);
  } else {
    child_order_id_ = nullptr;
  }
  if (from.has_product_id()) {
    product_id_ = new ::pb::ProductID(*from.product_id_);
  } else {
    product_id_ = nullptr;
  }
  if (from.has_link_local_order_id()) {
    link_local_order_id_ = new ::pb::OrderID(*from.link_local_order_id_);
  } else {
    link_local_order_id_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&broker_order_seq_) -
    reinterpret_cast<char*>(&price_)) + sizeof(broker_order_seq_));
  // @@protoc_insertion_point(copy_constructor:pb.TradeReport)
}

void TradeReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeReport_trade_5freport_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trade_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broker_order_seq_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(broker_order_seq_));
}

TradeReport::~TradeReport() {
  // @@protoc_insertion_point(destructor:pb.TradeReport)
  SharedDtor();
}

void TradeReport::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trade_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete order_id_;
  if (this != internal_default_instance()) delete child_order_id_;
  if (this != internal_default_instance()) delete product_id_;
  if (this != internal_default_instance()) delete link_local_order_id_;
}

void TradeReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeReport& TradeReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeReport_trade_5freport_2eproto.base);
  return *internal_default_instance();
}


void TradeReport::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TradeReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trade_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_order_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && order_id_ != nullptr) {
    delete order_id_;
  }
  order_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && child_order_id_ != nullptr) {
    delete child_order_id_;
  }
  child_order_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && link_local_order_id_ != nullptr) {
    delete link_local_order_id_;
  }
  link_local_order_id_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broker_order_seq_) -
      reinterpret_cast<char*>(&price_)) + sizeof(broker_order_seq_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradeReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "pb.TradeReport.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trade_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trade_id(), ptr, ctx, "pb.TradeReport.trade_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Symbol symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.OrderDirection direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_direction(static_cast<::pb::OrderDirection>(val));
        } else goto handle_unusual;
        continue;
      // double price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 traded_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          traded_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 traded_trading_day = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          traded_trading_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.OrderID order_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_order_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.OrderPriceType order_price_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_order_price_type(static_cast<::pb::OrderPriceType>(val));
        } else goto handle_unusual;
        continue;
      // .pb.OrderHedgeType order_hedge_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_order_hedge_type(static_cast<::pb::OrderHedgeType>(val));
        } else goto handle_unusual;
        continue;
      // .pb.TradeType trade_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_trade_type(static_cast<::pb::TradeType>(val));
        } else goto handle_unusual;
        continue;
      // int32 currency_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          currency_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_order_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exchange_order_id(), ptr, ctx, "pb.TradeReport.exchange_order_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 local_type_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          local_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double commission = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double tax = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          tax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double total_other_fee = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          total_other_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double initial_traded_price = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          initial_traded_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double reserve = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          reserve_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pb.OffsetFlag offset_flag = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_offset_flag(static_cast<::pb::OffsetFlag>(val));
        } else goto handle_unusual;
        continue;
      // string route_account = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_route_account(), ptr, ctx, "pb.TradeReport.route_account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_user(), ptr, ctx, "pb.TradeReport.user");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 settlement_group = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          settlement_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol_name = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_symbol_name(), ptr, ctx, "pb.TradeReport.symbol_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.OrderID child_order_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_child_order_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price_tick = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          price_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string account_name = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account_name(), ptr, ctx, "pb.TradeReport.account_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 volume_multiple = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          volume_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_user_name(), ptr, ctx, "pb.TradeReport.user_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.OrderSourceType order_source_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_order_source_type(static_cast<::pb::OrderSourceType>(val));
        } else goto handle_unusual;
        continue;
      // .pb.ProductID product_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_product_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string branch = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_branch(), ptr, ctx, "pb.TradeReport.branch");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string branch_name = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_branch_name(), ptr, ctx, "pb.TradeReport.branch_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_order_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_local_order_id(), ptr, ctx, "pb.TradeReport.local_order_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 broker_order_seq = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          broker_order_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.OrderID link_local_order_id = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_link_local_order_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradeReport::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TradeReport)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trade_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trade_id().data(), static_cast<int>(this->trade_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.trade_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderDirection direction = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::OrderDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 traded_time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &traded_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 traded_trading_day = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &traded_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderID order_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderPriceType order_price_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_order_price_type(static_cast< ::pb::OrderPriceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderHedgeType order_hedge_type = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_order_hedge_type(static_cast< ::pb::OrderHedgeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.TradeType trade_type = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trade_type(static_cast< ::pb::TradeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currency_type = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 local_type_id = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double commission = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tax = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (137 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_other_fee = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (145 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_other_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double initial_traded_price = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (153 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initial_traded_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reserve = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (161 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OffsetFlag offset_flag = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset_flag(static_cast< ::pb::OffsetFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->route_account().data(), static_cast<int>(this->route_account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.route_account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 settlement_group = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol_name = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.symbol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderID child_order_id = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_child_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (217 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_name = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.account_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_name = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderSourceType order_source_type = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_order_source_type(static_cast< ::pb::OrderSourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductID product_id = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string branch = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_branch()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->branch().data(), static_cast<int>(this->branch().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.branch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string branch_name = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->branch_name().data(), static_cast<int>(this->branch_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.branch_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_order_id = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_local_order_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->local_order_id().data(), static_cast<int>(this->local_order_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "pb.TradeReport.local_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 broker_order_seq = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &broker_order_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderID link_local_order_id = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_link_local_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TradeReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TradeReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradeReport::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TradeReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trade_id().data(), static_cast<int>(this->trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.trade_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trade_id(), output);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::symbol(this), output);
  }

  // .pb.OrderDirection direction = 4;
  if (this->direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }

  // double price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->price(), output);
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->volume(), output);
  }

  // int64 traded_time = 7;
  if (this->traded_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->traded_time(), output);
  }

  // int32 traded_trading_day = 8;
  if (this->traded_trading_day() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->traded_trading_day(), output);
  }

  // .pb.OrderID order_id = 9;
  if (this->has_order_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::order_id(this), output);
  }

  // .pb.OrderPriceType order_price_type = 10;
  if (this->order_price_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->order_price_type(), output);
  }

  // .pb.OrderHedgeType order_hedge_type = 11;
  if (this->order_hedge_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->order_hedge_type(), output);
  }

  // .pb.TradeType trade_type = 12;
  if (this->trade_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->trade_type(), output);
  }

  // int32 currency_type = 13;
  if (this->currency_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->currency_type(), output);
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.exchange_order_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->exchange_order_id(), output);
  }

  // int32 local_type_id = 15;
  if (this->local_type_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->local_type_id(), output);
  }

  // double commission = 16;
  if (!(this->commission() <= 0 && this->commission() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->commission(), output);
  }

  // double tax = 17;
  if (!(this->tax() <= 0 && this->tax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(17, this->tax(), output);
  }

  // double total_other_fee = 18;
  if (!(this->total_other_fee() <= 0 && this->total_other_fee() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(18, this->total_other_fee(), output);
  }

  // double initial_traded_price = 19;
  if (!(this->initial_traded_price() <= 0 && this->initial_traded_price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(19, this->initial_traded_price(), output);
  }

  // double reserve = 20;
  if (!(this->reserve() <= 0 && this->reserve() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(20, this->reserve(), output);
  }

  // .pb.OffsetFlag offset_flag = 21;
  if (this->offset_flag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      21, this->offset_flag(), output);
  }

  // string route_account = 22;
  if (this->route_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->route_account().data(), static_cast<int>(this->route_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.route_account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->route_account(), output);
  }

  // string user = 23;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.user");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->user(), output);
  }

  // int32 settlement_group = 24;
  if (this->settlement_group() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->settlement_group(), output);
  }

  // string symbol_name = 25;
  if (this->symbol_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.symbol_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->symbol_name(), output);
  }

  // .pb.OrderID child_order_id = 26;
  if (this->has_child_order_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, HasBitSetters::child_order_id(this), output);
  }

  // double price_tick = 27;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(27, this->price_tick(), output);
  }

  // string account_name = 28;
  if (this->account_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.account_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->account_name(), output);
  }

  // int32 volume_multiple = 29;
  if (this->volume_multiple() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(29, this->volume_multiple(), output);
  }

  // string user_name = 30;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.user_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->user_name(), output);
  }

  // .pb.OrderSourceType order_source_type = 31;
  if (this->order_source_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      31, this->order_source_type(), output);
  }

  // .pb.ProductID product_id = 32;
  if (this->has_product_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, HasBitSetters::product_id(this), output);
  }

  // string branch = 33;
  if (this->branch().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.branch");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->branch(), output);
  }

  // string branch_name = 34;
  if (this->branch_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->branch_name().data(), static_cast<int>(this->branch_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.branch_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->branch_name(), output);
  }

  // string local_order_id = 35;
  if (this->local_order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_order_id().data(), static_cast<int>(this->local_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.local_order_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->local_order_id(), output);
  }

  // int32 broker_order_seq = 36;
  if (this->broker_order_seq() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(36, this->broker_order_seq(), output);
  }

  // .pb.OrderID link_local_order_id = 37;
  if (this->has_link_local_order_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, HasBitSetters::link_local_order_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TradeReport)
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeReport::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TradeReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trade_id().data(), static_cast<int>(this->trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.trade_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->trade_id(), target);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::symbol(this), target);
  }

  // .pb.OrderDirection direction = 4;
  if (this->direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }

  // double price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->price(), target);
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->volume(), target);
  }

  // int64 traded_time = 7;
  if (this->traded_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->traded_time(), target);
  }

  // int32 traded_trading_day = 8;
  if (this->traded_trading_day() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->traded_trading_day(), target);
  }

  // .pb.OrderID order_id = 9;
  if (this->has_order_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::order_id(this), target);
  }

  // .pb.OrderPriceType order_price_type = 10;
  if (this->order_price_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->order_price_type(), target);
  }

  // .pb.OrderHedgeType order_hedge_type = 11;
  if (this->order_hedge_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->order_hedge_type(), target);
  }

  // .pb.TradeType trade_type = 12;
  if (this->trade_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->trade_type(), target);
  }

  // int32 currency_type = 13;
  if (this->currency_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->currency_type(), target);
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.exchange_order_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->exchange_order_id(), target);
  }

  // int32 local_type_id = 15;
  if (this->local_type_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->local_type_id(), target);
  }

  // double commission = 16;
  if (!(this->commission() <= 0 && this->commission() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->commission(), target);
  }

  // double tax = 17;
  if (!(this->tax() <= 0 && this->tax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->tax(), target);
  }

  // double total_other_fee = 18;
  if (!(this->total_other_fee() <= 0 && this->total_other_fee() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->total_other_fee(), target);
  }

  // double initial_traded_price = 19;
  if (!(this->initial_traded_price() <= 0 && this->initial_traded_price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->initial_traded_price(), target);
  }

  // double reserve = 20;
  if (!(this->reserve() <= 0 && this->reserve() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->reserve(), target);
  }

  // .pb.OffsetFlag offset_flag = 21;
  if (this->offset_flag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->offset_flag(), target);
  }

  // string route_account = 22;
  if (this->route_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->route_account().data(), static_cast<int>(this->route_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.route_account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        22, this->route_account(), target);
  }

  // string user = 23;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.user");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        23, this->user(), target);
  }

  // int32 settlement_group = 24;
  if (this->settlement_group() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->settlement_group(), target);
  }

  // string symbol_name = 25;
  if (this->symbol_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.symbol_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        25, this->symbol_name(), target);
  }

  // .pb.OrderID child_order_id = 26;
  if (this->has_child_order_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, HasBitSetters::child_order_id(this), target);
  }

  // double price_tick = 27;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->price_tick(), target);
  }

  // string account_name = 28;
  if (this->account_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.account_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        28, this->account_name(), target);
  }

  // int32 volume_multiple = 29;
  if (this->volume_multiple() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->volume_multiple(), target);
  }

  // string user_name = 30;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.user_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        30, this->user_name(), target);
  }

  // .pb.OrderSourceType order_source_type = 31;
  if (this->order_source_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->order_source_type(), target);
  }

  // .pb.ProductID product_id = 32;
  if (this->has_product_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, HasBitSetters::product_id(this), target);
  }

  // string branch = 33;
  if (this->branch().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.branch");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        33, this->branch(), target);
  }

  // string branch_name = 34;
  if (this->branch_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->branch_name().data(), static_cast<int>(this->branch_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.branch_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        34, this->branch_name(), target);
  }

  // string local_order_id = 35;
  if (this->local_order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_order_id().data(), static_cast<int>(this->local_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeReport.local_order_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        35, this->local_order_id(), target);
  }

  // int32 broker_order_seq = 36;
  if (this->broker_order_seq() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->broker_order_seq(), target);
  }

  // .pb.OrderID link_local_order_id = 37;
  if (this->has_link_local_order_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, HasBitSetters::link_local_order_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TradeReport)
  return target;
}

size_t TradeReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TradeReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trade_id());
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string route_account = 22;
  if (this->route_account().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->route_account());
  }

  // string user = 23;
  if (this->user().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->user());
  }

  // string symbol_name = 25;
  if (this->symbol_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->symbol_name());
  }

  // string account_name = 28;
  if (this->account_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account_name());
  }

  // string user_name = 30;
  if (this->user_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string branch = 33;
  if (this->branch().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->branch());
  }

  // string branch_name = 34;
  if (this->branch_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->branch_name());
  }

  // string local_order_id = 35;
  if (this->local_order_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->local_order_id());
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.OrderID order_id = 9;
  if (this->has_order_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_id_);
  }

  // .pb.OrderID child_order_id = 26;
  if (this->has_child_order_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_order_id_);
  }

  // .pb.ProductID product_id = 32;
  if (this->has_product_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_id_);
  }

  // .pb.OrderID link_local_order_id = 37;
  if (this->has_link_local_order_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_local_order_id_);
  }

  // double price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // .pb.OrderDirection direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->direction());
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int64 traded_time = 7;
  if (this->traded_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->traded_time());
  }

  // int32 traded_trading_day = 8;
  if (this->traded_trading_day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->traded_trading_day());
  }

  // .pb.OrderPriceType order_price_type = 10;
  if (this->order_price_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->order_price_type());
  }

  // .pb.OrderHedgeType order_hedge_type = 11;
  if (this->order_hedge_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->order_hedge_type());
  }

  // .pb.TradeType trade_type = 12;
  if (this->trade_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trade_type());
  }

  // int32 currency_type = 13;
  if (this->currency_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->currency_type());
  }

  // int32 local_type_id = 15;
  if (this->local_type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->local_type_id());
  }

  // double commission = 16;
  if (!(this->commission() <= 0 && this->commission() >= 0)) {
    total_size += 2 + 8;
  }

  // double tax = 17;
  if (!(this->tax() <= 0 && this->tax() >= 0)) {
    total_size += 2 + 8;
  }

  // double total_other_fee = 18;
  if (!(this->total_other_fee() <= 0 && this->total_other_fee() >= 0)) {
    total_size += 2 + 8;
  }

  // double initial_traded_price = 19;
  if (!(this->initial_traded_price() <= 0 && this->initial_traded_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double reserve = 20;
  if (!(this->reserve() <= 0 && this->reserve() >= 0)) {
    total_size += 2 + 8;
  }

  // .pb.OffsetFlag offset_flag = 21;
  if (this->offset_flag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->offset_flag());
  }

  // int32 settlement_group = 24;
  if (this->settlement_group() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->settlement_group());
  }

  // double price_tick = 27;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 volume_multiple = 29;
  if (this->volume_multiple() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  // .pb.OrderSourceType order_source_type = 31;
  if (this->order_source_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->order_source_type());
  }

  // int32 broker_order_seq = 36;
  if (this->broker_order_seq() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->broker_order_seq());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TradeReport)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TradeReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TradeReport)
    MergeFrom(*source);
  }
}

void TradeReport::MergeFrom(const TradeReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TradeReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.trade_id().size() > 0) {

    trade_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trade_id_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.route_account().size() > 0) {

    route_account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_account_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.symbol_name().size() > 0) {

    symbol_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.account_name().size() > 0) {

    account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.branch().size() > 0) {

    branch_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  if (from.branch_name().size() > 0) {

    branch_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.branch_name_);
  }
  if (from.local_order_id().size() > 0) {

    local_order_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_order_id_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_order_id()) {
    mutable_order_id()->::pb::OrderID::MergeFrom(from.order_id());
  }
  if (from.has_child_order_id()) {
    mutable_child_order_id()->::pb::OrderID::MergeFrom(from.child_order_id());
  }
  if (from.has_product_id()) {
    mutable_product_id()->::pb::ProductID::MergeFrom(from.product_id());
  }
  if (from.has_link_local_order_id()) {
    mutable_link_local_order_id()->::pb::OrderID::MergeFrom(from.link_local_order_id());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    set_price(from.price());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.traded_time() != 0) {
    set_traded_time(from.traded_time());
  }
  if (from.traded_trading_day() != 0) {
    set_traded_trading_day(from.traded_trading_day());
  }
  if (from.order_price_type() != 0) {
    set_order_price_type(from.order_price_type());
  }
  if (from.order_hedge_type() != 0) {
    set_order_hedge_type(from.order_hedge_type());
  }
  if (from.trade_type() != 0) {
    set_trade_type(from.trade_type());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.local_type_id() != 0) {
    set_local_type_id(from.local_type_id());
  }
  if (!(from.commission() <= 0 && from.commission() >= 0)) {
    set_commission(from.commission());
  }
  if (!(from.tax() <= 0 && from.tax() >= 0)) {
    set_tax(from.tax());
  }
  if (!(from.total_other_fee() <= 0 && from.total_other_fee() >= 0)) {
    set_total_other_fee(from.total_other_fee());
  }
  if (!(from.initial_traded_price() <= 0 && from.initial_traded_price() >= 0)) {
    set_initial_traded_price(from.initial_traded_price());
  }
  if (!(from.reserve() <= 0 && from.reserve() >= 0)) {
    set_reserve(from.reserve());
  }
  if (from.offset_flag() != 0) {
    set_offset_flag(from.offset_flag());
  }
  if (from.settlement_group() != 0) {
    set_settlement_group(from.settlement_group());
  }
  if (!(from.price_tick() <= 0 && from.price_tick() >= 0)) {
    set_price_tick(from.price_tick());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
  if (from.order_source_type() != 0) {
    set_order_source_type(from.order_source_type());
  }
  if (from.broker_order_seq() != 0) {
    set_broker_order_seq(from.broker_order_seq());
  }
}

void TradeReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TradeReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeReport::CopyFrom(const TradeReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TradeReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeReport::IsInitialized() const {
  return true;
}

void TradeReport::Swap(TradeReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeReport::InternalSwap(TradeReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trade_id_.Swap(&other->trade_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_.Swap(&other->route_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_name_.Swap(&other->symbol_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  branch_.Swap(&other->branch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  branch_name_.Swap(&other->branch_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_order_id_.Swap(&other->local_order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(order_id_, other->order_id_);
  swap(child_order_id_, other->child_order_id_);
  swap(product_id_, other->product_id_);
  swap(link_local_order_id_, other->link_local_order_id_);
  swap(price_, other->price_);
  swap(direction_, other->direction_);
  swap(volume_, other->volume_);
  swap(traded_time_, other->traded_time_);
  swap(traded_trading_day_, other->traded_trading_day_);
  swap(order_price_type_, other->order_price_type_);
  swap(order_hedge_type_, other->order_hedge_type_);
  swap(trade_type_, other->trade_type_);
  swap(currency_type_, other->currency_type_);
  swap(local_type_id_, other->local_type_id_);
  swap(commission_, other->commission_);
  swap(tax_, other->tax_);
  swap(total_other_fee_, other->total_other_fee_);
  swap(initial_traded_price_, other->initial_traded_price_);
  swap(reserve_, other->reserve_);
  swap(offset_flag_, other->offset_flag_);
  swap(settlement_group_, other->settlement_group_);
  swap(price_tick_, other->price_tick_);
  swap(volume_multiple_, other->volume_multiple_);
  swap(order_source_type_, other->order_source_type_);
  swap(broker_order_seq_, other->broker_order_seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void trade_report_list::InitAsDefaultInstance() {
}
class trade_report_list::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trade_report_list::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trade_report_list::trade_report_list()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.trade_report_list)
}
trade_report_list::trade_report_list(const trade_report_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.trade_report_list)
}

void trade_report_list::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_trade_report_list_trade_5freport_2eproto.base);
}

trade_report_list::~trade_report_list() {
  // @@protoc_insertion_point(destructor:pb.trade_report_list)
  SharedDtor();
}

void trade_report_list::SharedDtor() {
}

void trade_report_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const trade_report_list& trade_report_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_trade_report_list_trade_5freport_2eproto.base);
  return *internal_default_instance();
}


void trade_report_list::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.trade_report_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* trade_report_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.TradeReport list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool trade_report_list::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.trade_report_list)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TradeReport list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.trade_report_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.trade_report_list)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void trade_report_list::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.trade_report_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.TradeReport list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.trade_report_list)
}

::PROTOBUF_NAMESPACE_ID::uint8* trade_report_list::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.trade_report_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.TradeReport list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.trade_report_list)
  return target;
}

size_t trade_report_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.trade_report_list)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.TradeReport list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void trade_report_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.trade_report_list)
  GOOGLE_DCHECK_NE(&from, this);
  const trade_report_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<trade_report_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.trade_report_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.trade_report_list)
    MergeFrom(*source);
  }
}

void trade_report_list::MergeFrom(const trade_report_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.trade_report_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void trade_report_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.trade_report_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trade_report_list::CopyFrom(const trade_report_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.trade_report_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trade_report_list::IsInitialized() const {
  return true;
}

void trade_report_list::Swap(trade_report_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trade_report_list::InternalSwap(trade_report_list* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata trade_report_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeReportSession::InitAsDefaultInstance() {
  ::pb::_TradeReportSession_default_instance_._instance.get_mutable()->trade_ = const_cast< ::pb::TradeReport*>(
      ::pb::TradeReport::internal_default_instance());
}
class TradeReportSession::HasBitSetters {
 public:
  static const ::pb::TradeReport& trade(const TradeReportSession* msg);
};

const ::pb::TradeReport&
TradeReportSession::HasBitSetters::trade(const TradeReportSession* msg) {
  return *msg->trade_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeReportSession::kTradeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeReportSession::TradeReportSession()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TradeReportSession)
}
TradeReportSession::TradeReportSession(const TradeReportSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trade()) {
    trade_ = new ::pb::TradeReport(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.TradeReportSession)
}

void TradeReportSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeReportSession_trade_5freport_2eproto.base);
  trade_ = nullptr;
}

TradeReportSession::~TradeReportSession() {
  // @@protoc_insertion_point(destructor:pb.TradeReportSession)
  SharedDtor();
}

void TradeReportSession::SharedDtor() {
  if (this != internal_default_instance()) delete trade_;
}

void TradeReportSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeReportSession& TradeReportSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeReportSession_trade_5freport_2eproto.base);
  return *internal_default_instance();
}


void TradeReportSession::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TradeReportSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradeReportSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.TradeReport trade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradeReportSession::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TradeReportSession)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.TradeReport trade = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trade()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TradeReportSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TradeReportSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradeReportSession::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TradeReportSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.TradeReport trade = 1;
  if (this->has_trade()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::trade(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TradeReportSession)
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeReportSession::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TradeReportSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.TradeReport trade = 1;
  if (this->has_trade()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::trade(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TradeReportSession)
  return target;
}

size_t TradeReportSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TradeReportSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.TradeReport trade = 1;
  if (this->has_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeReportSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TradeReportSession)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeReportSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeReportSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TradeReportSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TradeReportSession)
    MergeFrom(*source);
  }
}

void TradeReportSession::MergeFrom(const TradeReportSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TradeReportSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trade()) {
    mutable_trade()->::pb::TradeReport::MergeFrom(from.trade());
  }
}

void TradeReportSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TradeReportSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeReportSession::CopyFrom(const TradeReportSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TradeReportSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeReportSession::IsInitialized() const {
  return true;
}

void TradeReportSession::Swap(TradeReportSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeReportSession::InternalSwap(TradeReportSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trade_, other->trade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeReportSession::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::TradeReport* Arena::CreateMaybeMessage< ::pb::TradeReport >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TradeReport >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::trade_report_list* Arena::CreateMaybeMessage< ::pb::trade_report_list >(Arena* arena) {
  return Arena::CreateInternal< ::pb::trade_report_list >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TradeReportSession* Arena::CreateMaybeMessage< ::pb::TradeReportSession >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TradeReportSession >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
