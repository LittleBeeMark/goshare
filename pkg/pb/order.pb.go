// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OrderStatus int32

const (
	// 完全成交
	OrderStatus_OS_DONE OrderStatus = 0
	// 部分成交还在队列中
	OrderStatus_OS_PENDING_WITH_PARTIAL_DONE OrderStatus = 1
	// 部分成交且已撤单
	OrderStatus_OS_CANCELED_WITH_PARTIAL_DONE OrderStatus = 2
	// 队列中
	OrderStatus_OS_PENDING OrderStatus = 3
	// 已经撤单
	OrderStatus_OS_CANCELED OrderStatus = 4
	// 未知
	OrderStatus_OS_UNKOWN OrderStatus = 5
)

var OrderStatus_name = map[int32]string{
	0: "OS_DONE",
	1: "OS_PENDING_WITH_PARTIAL_DONE",
	2: "OS_CANCELED_WITH_PARTIAL_DONE",
	3: "OS_PENDING",
	4: "OS_CANCELED",
	5: "OS_UNKOWN",
}
var OrderStatus_value = map[string]int32{
	"OS_DONE":                       0,
	"OS_PENDING_WITH_PARTIAL_DONE":  1,
	"OS_CANCELED_WITH_PARTIAL_DONE": 2,
	"OS_PENDING":                    3,
	"OS_CANCELED":                   4,
	"OS_UNKOWN":                     5,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}
func (OrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type OrderPriceType int32

const (
	// 限价
	OrderPriceType_OPT_LIMIT_PRICE OrderPriceType = 0
	// 市价
	OrderPriceType_OPT_MARKET_PRICE OrderPriceType = 1
	// 最优价
	OrderPriceType_OPT_BEST_PRICE OrderPriceType = 2
	// 最新价
	OrderPriceType_OPT_LAST_PRICE OrderPriceType = 3
)

var OrderPriceType_name = map[int32]string{
	0: "OPT_LIMIT_PRICE",
	1: "OPT_MARKET_PRICE",
	2: "OPT_BEST_PRICE",
	3: "OPT_LAST_PRICE",
}
var OrderPriceType_value = map[string]int32{
	"OPT_LIMIT_PRICE":  0,
	"OPT_MARKET_PRICE": 1,
	"OPT_BEST_PRICE":   2,
	"OPT_LAST_PRICE":   3,
}

func (x OrderPriceType) String() string {
	return proto.EnumName(OrderPriceType_name, int32(x))
}
func (OrderPriceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

type OffsetFlag int32

const (
	OffsetFlag_OF_NONE OffsetFlag = 0
	// 开仓
	OffsetFlag_OF_OPEN OffsetFlag = 1
	// 平仓
	OffsetFlag_OF_CLOSE OffsetFlag = 2
	// 强平
	OffsetFlag_OF_FORCE_CLOSE OffsetFlag = 3
	// 平今
	OffsetFlag_OF_CLOSE_TODAY OffsetFlag = 4
	// 平昨
	OffsetFlag_OF_CLOSE_YESTERDAY OffsetFlag = 5
)

var OffsetFlag_name = map[int32]string{
	0: "OF_NONE",
	1: "OF_OPEN",
	2: "OF_CLOSE",
	3: "OF_FORCE_CLOSE",
	4: "OF_CLOSE_TODAY",
	5: "OF_CLOSE_YESTERDAY",
}
var OffsetFlag_value = map[string]int32{
	"OF_NONE":            0,
	"OF_OPEN":            1,
	"OF_CLOSE":           2,
	"OF_FORCE_CLOSE":     3,
	"OF_CLOSE_TODAY":     4,
	"OF_CLOSE_YESTERDAY": 5,
}

func (x OffsetFlag) String() string {
	return proto.EnumName(OffsetFlag_name, int32(x))
}
func (OffsetFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

// 报单方向
type OrderDirection int32

const (
	OrderDirection_OD_LONG  OrderDirection = 0
	OrderDirection_OD_SHORT OrderDirection = 1
)

var OrderDirection_name = map[int32]string{
	0: "OD_LONG",
	1: "OD_SHORT",
}
var OrderDirection_value = map[string]int32{
	"OD_LONG":  0,
	"OD_SHORT": 1,
}

func (x OrderDirection) String() string {
	return proto.EnumName(OrderDirection_name, int32(x))
}
func (OrderDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

// 强平类型
type ForceCloseType int32

const (
	// 非强平
	ForceCloseType_FCT_NOT ForceCloseType = 0
	// 资金不足
	ForceCloseType_FCT_NOT_ENOUGH_MARGIN ForceCloseType = 1
	// 客户超仓
	ForceCloseType_FCT_client_over_position_limit ForceCloseType = 2
	// 会员超仓
	ForceCloseType_FCT_broker_over_poisition_limit ForceCloseType = 3
	// 违规
	ForceCloseType_FCT_violation ForceCloseType = 4
	// 其它
	ForceCloseType_FCT_other ForceCloseType = 5
	// 自然人临近交割
	ForceCloseType_FCT_person_deliver ForceCloseType = 6
)

var ForceCloseType_name = map[int32]string{
	0: "FCT_NOT",
	1: "FCT_NOT_ENOUGH_MARGIN",
	2: "FCT_client_over_position_limit",
	3: "FCT_broker_over_poisition_limit",
	4: "FCT_violation",
	5: "FCT_other",
	6: "FCT_person_deliver",
}
var ForceCloseType_value = map[string]int32{
	"FCT_NOT":                         0,
	"FCT_NOT_ENOUGH_MARGIN":           1,
	"FCT_client_over_position_limit":  2,
	"FCT_broker_over_poisition_limit": 3,
	"FCT_violation":                   4,
	"FCT_other":                       5,
	"FCT_person_deliver":              6,
}

func (x ForceCloseType) String() string {
	return proto.EnumName(ForceCloseType_name, int32(x))
}
func (ForceCloseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

// 报单来源
type OrderSourceType int32

const (
	// 客户
	OrderSourceType_OST_CLIENT OrderSourceType = 0
	// 管理员
	OrderSourceType_OST_ADMINISTRATOR OrderSourceType = 1
	// 风控
	OrderSourceType_OST_RISK_SRV OrderSourceType = 2
	// 手机端
	OrderSourceType_OST_MOBILE OrderSourceType = 3
	// PC端
	OrderSourceType_OST_PC OrderSourceType = 4
	// 结算衍生
	OrderSourceType_OST_SETTLEMENT_DERIVED OrderSourceType = 5
	// 套利单衍生
	OrderSourceType_OST_COMBINATION_DERIVED OrderSourceType = 6
	// 多路径平仓衍生
	OrderSourceType_OST_MULTI_ROUTE_CLOSE_DERIVED OrderSourceType = 7
	// 分红送股
	OrderSourceType_OST_PLACEMENT_SHARE OrderSourceType = 8
	// 回购操作
	OrderSourceType_OST_REPURCHASE OrderSourceType = 9
	// CTP上传
	OrderSourceType_OST_CTP_UPLOAD OrderSourceType = 10
	// 未设定
	OrderSourceType_OST_UNKOWN OrderSourceType = 11
)

var OrderSourceType_name = map[int32]string{
	0:  "OST_CLIENT",
	1:  "OST_ADMINISTRATOR",
	2:  "OST_RISK_SRV",
	3:  "OST_MOBILE",
	4:  "OST_PC",
	5:  "OST_SETTLEMENT_DERIVED",
	6:  "OST_COMBINATION_DERIVED",
	7:  "OST_MULTI_ROUTE_CLOSE_DERIVED",
	8:  "OST_PLACEMENT_SHARE",
	9:  "OST_REPURCHASE",
	10: "OST_CTP_UPLOAD",
	11: "OST_UNKOWN",
}
var OrderSourceType_value = map[string]int32{
	"OST_CLIENT":                    0,
	"OST_ADMINISTRATOR":             1,
	"OST_RISK_SRV":                  2,
	"OST_MOBILE":                    3,
	"OST_PC":                        4,
	"OST_SETTLEMENT_DERIVED":        5,
	"OST_COMBINATION_DERIVED":       6,
	"OST_MULTI_ROUTE_CLOSE_DERIVED": 7,
	"OST_PLACEMENT_SHARE":           8,
	"OST_REPURCHASE":                9,
	"OST_CTP_UPLOAD":                10,
	"OST_UNKOWN":                    11,
}

func (x OrderSourceType) String() string {
	return proto.EnumName(OrderSourceType_name, int32(x))
}
func (OrderSourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

// 价格类型
type ConditionOrderTriggerPriceType int32

const (
	// 最新价
	ConditionOrderTriggerPriceType_COTPT_LAST_PRICE ConditionOrderTriggerPriceType = 0
	// 买一价
	ConditionOrderTriggerPriceType_COTPT_BID_PRICE ConditionOrderTriggerPriceType = 1
	// 卖一价
	ConditionOrderTriggerPriceType_COTPT_ASK_PRICE ConditionOrderTriggerPriceType = 2
)

var ConditionOrderTriggerPriceType_name = map[int32]string{
	0: "COTPT_LAST_PRICE",
	1: "COTPT_BID_PRICE",
	2: "COTPT_ASK_PRICE",
}
var ConditionOrderTriggerPriceType_value = map[string]int32{
	"COTPT_LAST_PRICE": 0,
	"COTPT_BID_PRICE":  1,
	"COTPT_ASK_PRICE":  2,
}

func (x ConditionOrderTriggerPriceType) String() string {
	return proto.EnumName(ConditionOrderTriggerPriceType_name, int32(x))
}
func (ConditionOrderTriggerPriceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor8, []int{6}
}

// 条件单触发方式
type ConditionOrderTriggerType int32

const (
	// 大于等于
	ConditionOrderTriggerType_COTT_GREATER_THAN_OR_EQUAL ConditionOrderTriggerType = 0
	// 小于等于
	ConditionOrderTriggerType_COTT_LESS_THAN_OR_EQUAL ConditionOrderTriggerType = 1
)

var ConditionOrderTriggerType_name = map[int32]string{
	0: "COTT_GREATER_THAN_OR_EQUAL",
	1: "COTT_LESS_THAN_OR_EQUAL",
}
var ConditionOrderTriggerType_value = map[string]int32{
	"COTT_GREATER_THAN_OR_EQUAL": 0,
	"COTT_LESS_THAN_OR_EQUAL":    1,
}

func (x ConditionOrderTriggerType) String() string {
	return proto.EnumName(ConditionOrderTriggerType_name, int32(x))
}
func (ConditionOrderTriggerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

// 发送委托价格类型
type SendOrderPriceType int32

const (
	// 对手价
	SendOrderPriceType_SOPT_BID_ASK SendOrderPriceType = 0
	// 市价
	SendOrderPriceType_SOPT_MARKET SendOrderPriceType = 1
	// 超价
	SendOrderPriceType_SOPT_BID_ASK_MINUS SendOrderPriceType = 2
)

var SendOrderPriceType_name = map[int32]string{
	0: "SOPT_BID_ASK",
	1: "SOPT_MARKET",
	2: "SOPT_BID_ASK_MINUS",
}
var SendOrderPriceType_value = map[string]int32{
	"SOPT_BID_ASK":       0,
	"SOPT_MARKET":        1,
	"SOPT_BID_ASK_MINUS": 2,
}

func (x SendOrderPriceType) String() string {
	return proto.EnumName(SendOrderPriceType_name, int32(x))
}
func (SendOrderPriceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

// TradeCmdType 指令类型
type TradeCmdType int32

const (
	TradeCmdType_TCT_ORDER                 TradeCmdType = 0
	TradeCmdType_TCT_CANCEL                TradeCmdType = 1
	TradeCmdType_TCT_QUERY_BALANCE         TradeCmdType = 2
	TradeCmdType_TCT_QUERY_POSITION_DETAIL TradeCmdType = 3
)

var TradeCmdType_name = map[int32]string{
	0: "TCT_ORDER",
	1: "TCT_CANCEL",
	2: "TCT_QUERY_BALANCE",
	3: "TCT_QUERY_POSITION_DETAIL",
}
var TradeCmdType_value = map[string]int32{
	"TCT_ORDER":                 0,
	"TCT_CANCEL":                1,
	"TCT_QUERY_BALANCE":         2,
	"TCT_QUERY_POSITION_DETAIL": 3,
}

func (x TradeCmdType) String() string {
	return proto.EnumName(TradeCmdType_name, int32(x))
}
func (TradeCmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

// 报单ID
type OrderID struct {
	FrontId   int32 `protobuf:"varint,1,opt,name=front_id,json=frontId" json:"front_id,omitempty"`
	SessionId int32 `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	OrderRef  int32 `protobuf:"varint,3,opt,name=order_ref,json=orderRef" json:"order_ref,omitempty"`
}

func (m *OrderID) Reset()                    { *m = OrderID{} }
func (m *OrderID) String() string            { return proto.CompactTextString(m) }
func (*OrderID) ProtoMessage()               {}
func (*OrderID) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *OrderID) GetFrontId() int32 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *OrderID) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *OrderID) GetOrderRef() int32 {
	if m != nil {
		return m.OrderRef
	}
	return 0
}

// 委托
type Order struct {
	// 合约
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// id
	Id *OrderID `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// 账号
	Account string `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	// 方向
	Direction OrderDirection `protobuf:"varint,4,opt,name=direction,enum=pb.OrderDirection" json:"direction,omitempty"`
	// 状态
	Status OrderStatus `protobuf:"varint,5,opt,name=status,enum=pb.OrderStatus" json:"status,omitempty"`
	// 价格类型
	PriceType OrderPriceType `protobuf:"varint,6,opt,name=price_type,json=priceType,enum=pb.OrderPriceType" json:"price_type,omitempty"`
	// 限价
	LimitPrice float64 `protobuf:"fixed64,7,opt,name=limit_price,json=limitPrice" json:"limit_price,omitempty"`
	// 数量
	Volume int32 `protobuf:"varint,8,opt,name=volume" json:"volume,omitempty"`
	// 成交数量
	VolumeTraded int32 `protobuf:"varint,9,opt,name=volume_traded,json=volumeTraded" json:"volume_traded,omitempty"`
	// 撤单数量
	VolumeCanceled int32 `protobuf:"varint,10,opt,name=volume_canceled,json=volumeCanceled" json:"volume_canceled,omitempty"`
	// 冻结手续费
	FrozenCommission float64 `protobuf:"fixed64,11,opt,name=frozen_commission,json=frozenCommission" json:"frozen_commission,omitempty"`
	// 发送时间（成交时间)
	SendOrderTime int64 `protobuf:"varint,12,opt,name=send_order_time,json=sendOrderTime" json:"send_order_time,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,13,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	// 备注
	Comment string `protobuf:"bytes,14,opt,name=comment" json:"comment,omitempty"`
	// 请求编号
	RequestId int32 `protobuf:"varint,15,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// 序号
	LocalOrderSeq int32 `protobuf:"varint,16,opt,name=local_order_seq,json=localOrderSeq" json:"local_order_seq,omitempty"`
	// 强平类型
	ForceCloseType ForceCloseType `protobuf:"varint,17,opt,name=force_close_type,json=forceCloseType,enum=pb.ForceCloseType" json:"force_close_type,omitempty"`
	// 来源
	OrderSourceType OrderSourceType `protobuf:"varint,18,opt,name=order_source_type,json=orderSourceType,enum=pb.OrderSourceType" json:"order_source_type,omitempty"`
	// 投机套保类型
	OrderHedgeType int32 `protobuf:"varint,19,opt,name=order_hedge_type,json=orderHedgeType" json:"order_hedge_type,omitempty"`
	// 产品标识
	UserProductInfo string `protobuf:"bytes,20,opt,name=user_product_info,json=userProductInfo" json:"user_product_info,omitempty"`
	// 币种
	CurrencyType int32 `protobuf:"varint,21,opt,name=currency_type,json=currencyType" json:"currency_type,omitempty"`
	// 父ID
	LocalOrderId *OrderID `protobuf:"bytes,22,opt,name=local_order_id,json=localOrderId" json:"local_order_id,omitempty"`
	// 交易所ID
	ExchangeOrderId string `protobuf:"bytes,23,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`
	// 有效期类型
	TimeConditionType int32 `protobuf:"varint,24,opt,name=time_condition_type,json=timeConditionType" json:"time_condition_type,omitempty"`
	// 是否继续变化,优化手续费计算
	IsPending int32 `protobuf:"varint,25,opt,name=is_pending,json=isPending" json:"is_pending,omitempty"`
	// 下级通道
	RouteAccount string `protobuf:"bytes,26,opt,name=route_account,json=routeAccount" json:"route_account,omitempty"`
	// 本地编号类型
	LocalTypeId int32 `protobuf:"varint,27,opt,name=local_type_id,json=localTypeId" json:"local_type_id,omitempty"`
	// 委托收费
	Commission float64 `protobuf:"fixed64,28,opt,name=commission" json:"commission,omitempty"`
	// 保证金
	Margin float64 `protobuf:"fixed64,29,opt,name=margin" json:"margin,omitempty"`
	// 开平标志
	OffsetFlag OffsetFlag `protobuf:"varint,30,opt,name=offset_flag,json=offsetFlag,enum=pb.OffsetFlag" json:"offset_flag,omitempty"`
	// 错误代码
	ErrorCode int32 `protobuf:"varint,31,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// 交易品种类型
	ProductType ProductType `protobuf:"varint,32,opt,name=product_type,json=productType,enum=pb.ProductType" json:"product_type,omitempty"`
	// 结算组
	SettlementGroup int32 `protobuf:"varint,33,opt,name=settlement_group,json=settlementGroup" json:"settlement_group,omitempty"`
	// token
	Token string `protobuf:"bytes,34,opt,name=token" json:"token,omitempty"`
	// 成交金额
	TradedAmount float64 `protobuf:"fixed64,35,opt,name=traded_amount,json=tradedAmount" json:"traded_amount,omitempty"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,36,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// 产品
	ProductId *ProductID `protobuf:"bytes,37,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	// 最小变动价位
	PriceTick float64 `protobuf:"fixed64,38,opt,name=price_tick,json=priceTick" json:"price_tick,omitempty"`
	// 冻结保证金
	FrozenMargin float64 `protobuf:"fixed64,39,opt,name=frozen_margin,json=frozenMargin" json:"frozen_margin,omitempty"`
	// 合约名称
	SymbolName string `protobuf:"bytes,40,opt,name=symbol_name,json=symbolName" json:"symbol_name,omitempty"`
	// 发送原因
	ReasonComment string `protobuf:"bytes,41,opt,name=reason_comment,json=reasonComment" json:"reason_comment,omitempty"`
	// 印花税
	StampTax float64 `protobuf:"fixed64,42,opt,name=stamp_tax,json=stampTax" json:"stamp_tax,omitempty"`
	// 过户费
	TransferFee float64 `protobuf:"fixed64,43,opt,name=transfer_fee,json=transferFee" json:"transfer_fee,omitempty"`
	// 用户名
	AccountName string `protobuf:"bytes,44,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// 客户端ip
	Ip string `protobuf:"bytes,45,opt,name=ip" json:"ip,omitempty"`
	// 客户端mac
	Mac string `protobuf:"bytes,46,opt,name=mac" json:"mac,omitempty"`
	// 部门
	Branch string `protobuf:"bytes,47,opt,name=branch" json:"branch,omitempty"`
	// 部门名称
	BranchName string `protobuf:"bytes,48,opt,name=branch_name,json=branchName" json:"branch_name,omitempty"`
	// 方案编号
	RouteTemplateId int64 `protobuf:"varint,49,opt,name=route_template_id,json=routeTemplateId" json:"route_template_id,omitempty"`
	// 方案名称
	RouteTemplateName string `protobuf:"bytes,50,opt,name=route_template_name,json=routeTemplateName" json:"route_template_name,omitempty"`
	// 账户类型
	TradingAccountType TradingAccountType `protobuf:"varint,51,opt,name=trading_account_type,json=tradingAccountType,enum=pb.TradingAccountType" json:"trading_account_type,omitempty"`
	// 调试信息
	Debug string `protobuf:"bytes,52,opt,name=debug" json:"debug,omitempty"`
	// 用户编号
	User string `protobuf:"bytes,53,opt,name=user" json:"user,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *Order) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *Order) GetId() *OrderID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Order) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Order) GetDirection() OrderDirection {
	if m != nil {
		return m.Direction
	}
	return OrderDirection_OD_LONG
}

func (m *Order) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return OrderStatus_OS_DONE
}

func (m *Order) GetPriceType() OrderPriceType {
	if m != nil {
		return m.PriceType
	}
	return OrderPriceType_OPT_LIMIT_PRICE
}

func (m *Order) GetLimitPrice() float64 {
	if m != nil {
		return m.LimitPrice
	}
	return 0
}

func (m *Order) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Order) GetVolumeTraded() int32 {
	if m != nil {
		return m.VolumeTraded
	}
	return 0
}

func (m *Order) GetVolumeCanceled() int32 {
	if m != nil {
		return m.VolumeCanceled
	}
	return 0
}

func (m *Order) GetFrozenCommission() float64 {
	if m != nil {
		return m.FrozenCommission
	}
	return 0
}

func (m *Order) GetSendOrderTime() int64 {
	if m != nil {
		return m.SendOrderTime
	}
	return 0
}

func (m *Order) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *Order) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Order) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *Order) GetLocalOrderSeq() int32 {
	if m != nil {
		return m.LocalOrderSeq
	}
	return 0
}

func (m *Order) GetForceCloseType() ForceCloseType {
	if m != nil {
		return m.ForceCloseType
	}
	return ForceCloseType_FCT_NOT
}

func (m *Order) GetOrderSourceType() OrderSourceType {
	if m != nil {
		return m.OrderSourceType
	}
	return OrderSourceType_OST_CLIENT
}

func (m *Order) GetOrderHedgeType() int32 {
	if m != nil {
		return m.OrderHedgeType
	}
	return 0
}

func (m *Order) GetUserProductInfo() string {
	if m != nil {
		return m.UserProductInfo
	}
	return ""
}

func (m *Order) GetCurrencyType() int32 {
	if m != nil {
		return m.CurrencyType
	}
	return 0
}

func (m *Order) GetLocalOrderId() *OrderID {
	if m != nil {
		return m.LocalOrderId
	}
	return nil
}

func (m *Order) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

func (m *Order) GetTimeConditionType() int32 {
	if m != nil {
		return m.TimeConditionType
	}
	return 0
}

func (m *Order) GetIsPending() int32 {
	if m != nil {
		return m.IsPending
	}
	return 0
}

func (m *Order) GetRouteAccount() string {
	if m != nil {
		return m.RouteAccount
	}
	return ""
}

func (m *Order) GetLocalTypeId() int32 {
	if m != nil {
		return m.LocalTypeId
	}
	return 0
}

func (m *Order) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *Order) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *Order) GetOffsetFlag() OffsetFlag {
	if m != nil {
		return m.OffsetFlag
	}
	return OffsetFlag_OF_NONE
}

func (m *Order) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *Order) GetProductType() ProductType {
	if m != nil {
		return m.ProductType
	}
	return ProductType_PT_UNKOWN
}

func (m *Order) GetSettlementGroup() int32 {
	if m != nil {
		return m.SettlementGroup
	}
	return 0
}

func (m *Order) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Order) GetTradedAmount() float64 {
	if m != nil {
		return m.TradedAmount
	}
	return 0
}

func (m *Order) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *Order) GetProductId() *ProductID {
	if m != nil {
		return m.ProductId
	}
	return nil
}

func (m *Order) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *Order) GetFrozenMargin() float64 {
	if m != nil {
		return m.FrozenMargin
	}
	return 0
}

func (m *Order) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *Order) GetReasonComment() string {
	if m != nil {
		return m.ReasonComment
	}
	return ""
}

func (m *Order) GetStampTax() float64 {
	if m != nil {
		return m.StampTax
	}
	return 0
}

func (m *Order) GetTransferFee() float64 {
	if m != nil {
		return m.TransferFee
	}
	return 0
}

func (m *Order) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *Order) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Order) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *Order) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Order) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *Order) GetRouteTemplateId() int64 {
	if m != nil {
		return m.RouteTemplateId
	}
	return 0
}

func (m *Order) GetRouteTemplateName() string {
	if m != nil {
		return m.RouteTemplateName
	}
	return ""
}

func (m *Order) GetTradingAccountType() TradingAccountType {
	if m != nil {
		return m.TradingAccountType
	}
	return TradingAccountType_TAT_NORMAL
}

func (m *Order) GetDebug() string {
	if m != nil {
		return m.Debug
	}
	return ""
}

func (m *Order) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type OrderList struct {
	List []*Order `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *OrderList) Reset()                    { *m = OrderList{} }
func (m *OrderList) String() string            { return proto.CompactTextString(m) }
func (*OrderList) ProtoMessage()               {}
func (*OrderList) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *OrderList) GetList() []*Order {
	if m != nil {
		return m.List
	}
	return nil
}

type JointOrder struct {
	LocalOrder    *Order `protobuf:"bytes,1,opt,name=local_order,json=localOrder" json:"local_order,omitempty"`
	ExchangeOrder *Order `protobuf:"bytes,2,opt,name=exchange_order,json=exchangeOrder" json:"exchange_order,omitempty"`
}

func (m *JointOrder) Reset()                    { *m = JointOrder{} }
func (m *JointOrder) String() string            { return proto.CompactTextString(m) }
func (*JointOrder) ProtoMessage()               {}
func (*JointOrder) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *JointOrder) GetLocalOrder() *Order {
	if m != nil {
		return m.LocalOrder
	}
	return nil
}

func (m *JointOrder) GetExchangeOrder() *Order {
	if m != nil {
		return m.ExchangeOrder
	}
	return nil
}

type OrderLink struct {
	Local    *Order   `protobuf:"bytes,1,opt,name=local" json:"local,omitempty"`
	Upstream []*Order `protobuf:"bytes,2,rep,name=upstream" json:"upstream,omitempty"`
}

func (m *OrderLink) Reset()                    { *m = OrderLink{} }
func (m *OrderLink) String() string            { return proto.CompactTextString(m) }
func (*OrderLink) ProtoMessage()               {}
func (*OrderLink) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *OrderLink) GetLocal() *Order {
	if m != nil {
		return m.Local
	}
	return nil
}

func (m *OrderLink) GetUpstream() []*Order {
	if m != nil {
		return m.Upstream
	}
	return nil
}

// 发送撤单请求
type CancelOrderRequest struct {
	// 帐户
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// 委托编号
	OrderId *OrderID `protobuf:"bytes,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// 合约
	Symbol *Symbol `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
	// 请求id
	RequestId int32 `protobuf:"varint,4,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// 发起前置
	FrontId int32 `protobuf:"varint,5,opt,name=front_id,json=frontId" json:"front_id,omitempty"`
	// 发起session
	SessionId int32 `protobuf:"varint,6,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// 发起终端信息
	ExchangeOrderId string `protobuf:"bytes,7,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`
	// token
	Token string `protobuf:"bytes,8,opt,name=token" json:"token,omitempty"`
	// route account id
	RouteAccount string `protobuf:"bytes,9,opt,name=route_account,json=routeAccount" json:"route_account,omitempty"`
	// 结算组
	SettlementGroup int32 `protobuf:"varint,10,opt,name=settlement_group,json=settlementGroup" json:"settlement_group,omitempty"`
	// 所属
	Company int64 `protobuf:"varint,11,opt,name=company" json:"company,omitempty"`
	// 发送时间
	SendTime int64 `protobuf:"varint,12,opt,name=send_time,json=sendTime" json:"send_time,omitempty"`
	// usertype
	UserType TradingAccountType `protobuf:"varint,13,opt,name=user_type,json=userType,enum=pb.TradingAccountType" json:"user_type,omitempty"`
	// 用户编号
	User string `protobuf:"bytes,15,opt,name=user" json:"user,omitempty"`
}

func (m *CancelOrderRequest) Reset()                    { *m = CancelOrderRequest{} }
func (m *CancelOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelOrderRequest) ProtoMessage()               {}
func (*CancelOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *CancelOrderRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CancelOrderRequest) GetOrderId() *OrderID {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *CancelOrderRequest) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CancelOrderRequest) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CancelOrderRequest) GetFrontId() int32 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *CancelOrderRequest) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CancelOrderRequest) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

func (m *CancelOrderRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CancelOrderRequest) GetRouteAccount() string {
	if m != nil {
		return m.RouteAccount
	}
	return ""
}

func (m *CancelOrderRequest) GetSettlementGroup() int32 {
	if m != nil {
		return m.SettlementGroup
	}
	return 0
}

func (m *CancelOrderRequest) GetCompany() int64 {
	if m != nil {
		return m.Company
	}
	return 0
}

func (m *CancelOrderRequest) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *CancelOrderRequest) GetUserType() TradingAccountType {
	if m != nil {
		return m.UserType
	}
	return TradingAccountType_TAT_NORMAL
}

func (m *CancelOrderRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// OnRtnCancelOrder 撤单响应
type OnRtnCancelOrder struct {
	Account          string   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	OrderID          *OrderID `protobuf:"bytes,2,opt,name=OrderID" json:"OrderID,omitempty"`
	ExchangeOrderId  string   `protobuf:"bytes,3,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`
	Symbol           *Symbol  `protobuf:"bytes,4,opt,name=symbol" json:"symbol,omitempty"`
	RequestId        int32    `protobuf:"varint,5,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	ErrorType        int32    `protobuf:"varint,6,opt,name=error_type,json=errorType" json:"error_type,omitempty"`
	Error            int32    `protobuf:"varint,7,opt,name=error" json:"error,omitempty"`
	Msg              string   `protobuf:"bytes,8,opt,name=msg" json:"msg,omitempty"`
	RouteAccount     string   `protobuf:"bytes,9,opt,name=route_account,json=routeAccount" json:"route_account,omitempty"`
	UpstreamNotFound bool     `protobuf:"varint,10,opt,name=upstream_not_found,json=upstreamNotFound" json:"upstream_not_found,omitempty"`
	User             string   `protobuf:"bytes,70,opt,name=user" json:"user,omitempty"`
}

func (m *OnRtnCancelOrder) Reset()                    { *m = OnRtnCancelOrder{} }
func (m *OnRtnCancelOrder) String() string            { return proto.CompactTextString(m) }
func (*OnRtnCancelOrder) ProtoMessage()               {}
func (*OnRtnCancelOrder) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *OnRtnCancelOrder) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *OnRtnCancelOrder) GetOrderID() *OrderID {
	if m != nil {
		return m.OrderID
	}
	return nil
}

func (m *OnRtnCancelOrder) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

func (m *OnRtnCancelOrder) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *OnRtnCancelOrder) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *OnRtnCancelOrder) GetErrorType() int32 {
	if m != nil {
		return m.ErrorType
	}
	return 0
}

func (m *OnRtnCancelOrder) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *OnRtnCancelOrder) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *OnRtnCancelOrder) GetRouteAccount() string {
	if m != nil {
		return m.RouteAccount
	}
	return ""
}

func (m *OnRtnCancelOrder) GetUpstreamNotFound() bool {
	if m != nil {
		return m.UpstreamNotFound
	}
	return false
}

func (m *OnRtnCancelOrder) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// ConditionOrder 条件单
type ConditionOrder struct {
	// 编号
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 账号
	Account string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	// 合约代码
	Symbol *Symbol `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
	// 持仓方向
	PositionDirection OrderDirection `protobuf:"varint,4,opt,name=position_direction,json=positionDirection,enum=pb.OrderDirection" json:"position_direction,omitempty"`
	// 条件单方向
	Direction OrderDirection `protobuf:"varint,5,opt,name=direction,enum=pb.OrderDirection" json:"direction,omitempty"`
	// 开平标志
	OffsetFlag OffsetFlag `protobuf:"varint,6,opt,name=offset_flag,json=offsetFlag,enum=pb.OffsetFlag" json:"offset_flag,omitempty"`
	// 合约名称
	SymbolName string `protobuf:"bytes,7,opt,name=symbol_name,json=symbolName" json:"symbol_name,omitempty"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,8,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// 品种代码
	ProductId *ProductID `protobuf:"bytes,9,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	// 波动点
	PriceTick float64 `protobuf:"fixed64,10,opt,name=price_tick,json=priceTick" json:"price_tick,omitempty"`
	// 是否触发
	Triggered bool `protobuf:"varint,11,opt,name=triggered" json:"triggered,omitempty"`
	// 触发时间
	TriggeredTime int64 `protobuf:"varint,12,opt,name=triggered_time,json=triggeredTime" json:"triggered_time,omitempty"`
	// 数量
	Volume float64 `protobuf:"fixed64,13,opt,name=volume" json:"volume,omitempty"`
	// 委托价格
	Price float64 `protobuf:"fixed64,14,opt,name=price" json:"price,omitempty"`
	// 触发条件价格.
	TriggerConditionPrice float64 `protobuf:"fixed64,15,opt,name=trigger_condition_price,json=triggerConditionPrice" json:"trigger_condition_price,omitempty"`
	// 触发价格类型. 最新价， 买一价， 卖一价
	TriggerPriceType ConditionOrderTriggerPriceType `protobuf:"varint,16,opt,name=trigger_price_type,json=triggerPriceType,enum=pb.ConditionOrderTriggerPriceType" json:"trigger_price_type,omitempty"`
	// 触发方式. 大于等于，小于等于
	TriggerType ConditionOrderTriggerType `protobuf:"varint,17,opt,name=trigger_type,json=triggerType,enum=pb.ConditionOrderTriggerType" json:"trigger_type,omitempty"`
	// 发单价格方式. 对手，市价
	SendOrderPriceType SendOrderPriceType `protobuf:"varint,18,opt,name=send_order_price_type,json=sendOrderPriceType,enum=pb.SendOrderPriceType" json:"send_order_price_type,omitempty"`
	// 委托结果
	SendResult string `protobuf:"bytes,19,opt,name=send_result,json=sendResult" json:"send_result,omitempty"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,20,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// 标记
	Tag string `protobuf:"bytes,21,opt,name=tag" json:"tag,omitempty"`
	// 截止时间
	Deadline int64 `protobuf:"varint,22,opt,name=deadline" json:"deadline,omitempty"`
	// sg
	SettlementGroup int32 `protobuf:"varint,23,opt,name=settlement_group,json=settlementGroup" json:"settlement_group,omitempty"`
	// stoploss
	StopLoss bool `protobuf:"varint,24,opt,name=stop_loss,json=stopLoss" json:"stop_loss,omitempty"`
	// 客户端ip
	Ip string `protobuf:"bytes,25,opt,name=ip" json:"ip,omitempty"`
	// 客户端mac
	Mac string `protobuf:"bytes,26,opt,name=mac" json:"mac,omitempty"`
	// 用户名
	UserName string `protobuf:"bytes,27,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// 用户编号
	User string `protobuf:"bytes,70,opt,name=user" json:"user,omitempty"`
}

func (m *ConditionOrder) Reset()                    { *m = ConditionOrder{} }
func (m *ConditionOrder) String() string            { return proto.CompactTextString(m) }
func (*ConditionOrder) ProtoMessage()               {}
func (*ConditionOrder) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *ConditionOrder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ConditionOrder) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ConditionOrder) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *ConditionOrder) GetPositionDirection() OrderDirection {
	if m != nil {
		return m.PositionDirection
	}
	return OrderDirection_OD_LONG
}

func (m *ConditionOrder) GetDirection() OrderDirection {
	if m != nil {
		return m.Direction
	}
	return OrderDirection_OD_LONG
}

func (m *ConditionOrder) GetOffsetFlag() OffsetFlag {
	if m != nil {
		return m.OffsetFlag
	}
	return OffsetFlag_OF_NONE
}

func (m *ConditionOrder) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *ConditionOrder) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *ConditionOrder) GetProductId() *ProductID {
	if m != nil {
		return m.ProductId
	}
	return nil
}

func (m *ConditionOrder) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *ConditionOrder) GetTriggered() bool {
	if m != nil {
		return m.Triggered
	}
	return false
}

func (m *ConditionOrder) GetTriggeredTime() int64 {
	if m != nil {
		return m.TriggeredTime
	}
	return 0
}

func (m *ConditionOrder) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *ConditionOrder) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ConditionOrder) GetTriggerConditionPrice() float64 {
	if m != nil {
		return m.TriggerConditionPrice
	}
	return 0
}

func (m *ConditionOrder) GetTriggerPriceType() ConditionOrderTriggerPriceType {
	if m != nil {
		return m.TriggerPriceType
	}
	return ConditionOrderTriggerPriceType_COTPT_LAST_PRICE
}

func (m *ConditionOrder) GetTriggerType() ConditionOrderTriggerType {
	if m != nil {
		return m.TriggerType
	}
	return ConditionOrderTriggerType_COTT_GREATER_THAN_OR_EQUAL
}

func (m *ConditionOrder) GetSendOrderPriceType() SendOrderPriceType {
	if m != nil {
		return m.SendOrderPriceType
	}
	return SendOrderPriceType_SOPT_BID_ASK
}

func (m *ConditionOrder) GetSendResult() string {
	if m != nil {
		return m.SendResult
	}
	return ""
}

func (m *ConditionOrder) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ConditionOrder) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ConditionOrder) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *ConditionOrder) GetSettlementGroup() int32 {
	if m != nil {
		return m.SettlementGroup
	}
	return 0
}

func (m *ConditionOrder) GetStopLoss() bool {
	if m != nil {
		return m.StopLoss
	}
	return false
}

func (m *ConditionOrder) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ConditionOrder) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *ConditionOrder) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ConditionOrder) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// TradeCmd 交易指令
type TradeCmd struct {
	Type      TradeCmdType `protobuf:"varint,1,opt,name=type,enum=pb.TradeCmdType" json:"type,omitempty"`
	Data      []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	NodeId    int64        `protobuf:"varint,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	RequestId int64        `protobuf:"varint,4,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
}

func (m *TradeCmd) Reset()                    { *m = TradeCmd{} }
func (m *TradeCmd) String() string            { return proto.CompactTextString(m) }
func (*TradeCmd) ProtoMessage()               {}
func (*TradeCmd) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *TradeCmd) GetType() TradeCmdType {
	if m != nil {
		return m.Type
	}
	return TradeCmdType_TCT_ORDER
}

func (m *TradeCmd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TradeCmd) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *TradeCmd) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type DemoOrder struct {
	Order                *Order          `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	UpperLimitPrice      float64         `protobuf:"fixed64,2,opt,name=upper_limit_price,json=upperLimitPrice" json:"upper_limit_price,omitempty"`
	LowerLimitPrice      float64         `protobuf:"fixed64,3,opt,name=lower_limit_price,json=lowerLimitPrice" json:"lower_limit_price,omitempty"`
	MinLimitOrderVolume  int32           `protobuf:"varint,4,opt,name=min_limit_order_volume,json=minLimitOrderVolume" json:"min_limit_order_volume,omitempty"`
	MinMarketOrderVolume int32           `protobuf:"varint,5,opt,name=min_market_order_volume,json=minMarketOrderVolume" json:"min_market_order_volume,omitempty"`
	TimeRule             *MarketTimeRule `protobuf:"bytes,6,opt,name=time_rule,json=timeRule" json:"time_rule,omitempty"`
	UpdateTradingDay     int32           `protobuf:"varint,7,opt,name=update_trading_day,json=updateTradingDay" json:"update_trading_day,omitempty"`
}

func (m *DemoOrder) Reset()                    { *m = DemoOrder{} }
func (m *DemoOrder) String() string            { return proto.CompactTextString(m) }
func (*DemoOrder) ProtoMessage()               {}
func (*DemoOrder) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *DemoOrder) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *DemoOrder) GetUpperLimitPrice() float64 {
	if m != nil {
		return m.UpperLimitPrice
	}
	return 0
}

func (m *DemoOrder) GetLowerLimitPrice() float64 {
	if m != nil {
		return m.LowerLimitPrice
	}
	return 0
}

func (m *DemoOrder) GetMinLimitOrderVolume() int32 {
	if m != nil {
		return m.MinLimitOrderVolume
	}
	return 0
}

func (m *DemoOrder) GetMinMarketOrderVolume() int32 {
	if m != nil {
		return m.MinMarketOrderVolume
	}
	return 0
}

func (m *DemoOrder) GetTimeRule() *MarketTimeRule {
	if m != nil {
		return m.TimeRule
	}
	return nil
}

func (m *DemoOrder) GetUpdateTradingDay() int32 {
	if m != nil {
		return m.UpdateTradingDay
	}
	return 0
}

func init() {
	proto.RegisterType((*OrderID)(nil), "pb.OrderID")
	proto.RegisterType((*Order)(nil), "pb.Order")
	proto.RegisterType((*OrderList)(nil), "pb.OrderList")
	proto.RegisterType((*JointOrder)(nil), "pb.JointOrder")
	proto.RegisterType((*OrderLink)(nil), "pb.OrderLink")
	proto.RegisterType((*CancelOrderRequest)(nil), "pb.CancelOrderRequest")
	proto.RegisterType((*OnRtnCancelOrder)(nil), "pb.OnRtnCancelOrder")
	proto.RegisterType((*ConditionOrder)(nil), "pb.ConditionOrder")
	proto.RegisterType((*TradeCmd)(nil), "pb.TradeCmd")
	proto.RegisterType((*DemoOrder)(nil), "pb.DemoOrder")
	proto.RegisterEnum("pb.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("pb.OrderPriceType", OrderPriceType_name, OrderPriceType_value)
	proto.RegisterEnum("pb.OffsetFlag", OffsetFlag_name, OffsetFlag_value)
	proto.RegisterEnum("pb.OrderDirection", OrderDirection_name, OrderDirection_value)
	proto.RegisterEnum("pb.ForceCloseType", ForceCloseType_name, ForceCloseType_value)
	proto.RegisterEnum("pb.OrderSourceType", OrderSourceType_name, OrderSourceType_value)
	proto.RegisterEnum("pb.ConditionOrderTriggerPriceType", ConditionOrderTriggerPriceType_name, ConditionOrderTriggerPriceType_value)
	proto.RegisterEnum("pb.ConditionOrderTriggerType", ConditionOrderTriggerType_name, ConditionOrderTriggerType_value)
	proto.RegisterEnum("pb.SendOrderPriceType", SendOrderPriceType_name, SendOrderPriceType_value)
	proto.RegisterEnum("pb.TradeCmdType", TradeCmdType_name, TradeCmdType_value)
}

func init() { proto.RegisterFile("order.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 2525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xdf, 0x76, 0xdb, 0xc6,
	0xd1, 0x17, 0x49, 0x51, 0x22, 0x87, 0x12, 0x09, 0xad, 0x65, 0x0b, 0xb6, 0x62, 0x5b, 0x51, 0xe2,
	0x44, 0x61, 0xf2, 0x39, 0x89, 0xfd, 0xa5, 0x57, 0x3d, 0xa7, 0xa5, 0x49, 0xc8, 0x42, 0x4d, 0x11,
	0x0c, 0x00, 0x25, 0xcd, 0xd5, 0x06, 0x22, 0x96, 0x32, 0x2a, 0x12, 0x60, 0x00, 0xd0, 0xb5, 0x7a,
	0xfa, 0x0e, 0xbd, 0xe8, 0x8b, 0xf4, 0xbe, 0x0f, 0xd1, 0x73, 0xfa, 0x0e, 0xbd, 0xef, 0x23, 0xf4,
	0xcc, 0xec, 0x02, 0x04, 0x69, 0xda, 0x55, 0xef, 0x30, 0xbf, 0x99, 0xfd, 0x37, 0x33, 0xfb, 0x9b,
	0x59, 0x40, 0x23, 0x8a, 0x7d, 0x11, 0x3f, 0x9d, 0xc5, 0x51, 0x1a, 0xb1, 0xf2, 0xec, 0xf2, 0xc1,
	0xce, 0x28, 0x9a, 0x4e, 0xa3, 0x50, 0x22, 0xc7, 0x3f, 0xc3, 0xb6, 0x85, 0x06, 0x66, 0x8f, 0xdd,
	0x87, 0xda, 0x38, 0x8e, 0xc2, 0x94, 0x07, 0xbe, 0x5e, 0x3a, 0x2a, 0x9d, 0x54, 0xed, 0x6d, 0x92,
	0x4d, 0x9f, 0x3d, 0x04, 0x48, 0x44, 0x92, 0x04, 0x51, 0x88, 0xca, 0x32, 0x29, 0xeb, 0x0a, 0x31,
	0x7d, 0x76, 0x08, 0x75, 0x5a, 0x85, 0xc7, 0x62, 0xac, 0x57, 0x48, 0x5b, 0x23, 0xc0, 0x16, 0xe3,
	0xe3, 0x7f, 0xb6, 0xa0, 0x4a, 0x4b, 0xb0, 0x63, 0xd8, 0x4a, 0x6e, 0xa6, 0x97, 0xd1, 0x84, 0xa6,
	0x6f, 0x3c, 0x83, 0xa7, 0xb3, 0xcb, 0xa7, 0x0e, 0x21, 0xb6, 0xd2, 0xb0, 0x43, 0x28, 0xab, 0x15,
	0x1a, 0xcf, 0x1a, 0xa8, 0x57, 0xbb, 0xb3, 0xcb, 0x81, 0xcf, 0x74, 0xd8, 0xf6, 0x46, 0xa3, 0x68,
	0x1e, 0xa6, 0xb4, 0x4a, 0xdd, 0xce, 0x44, 0xf6, 0x0d, 0xd4, 0xfd, 0x20, 0x16, 0xa3, 0x34, 0x88,
	0x42, 0x7d, 0xf3, 0xa8, 0x74, 0xd2, 0x7c, 0xc6, 0xf2, 0xd1, 0xbd, 0x4c, 0x63, 0x2f, 0x8c, 0xd8,
	0xe7, 0xb0, 0x95, 0xa4, 0x5e, 0x3a, 0x4f, 0xf4, 0x2a, 0x99, 0xb7, 0x72, 0x73, 0x87, 0x60, 0x5b,
	0xa9, 0xd9, 0xb7, 0x00, 0xb3, 0x38, 0x18, 0x09, 0x9e, 0xde, 0xcc, 0x84, 0xbe, 0xb5, 0x32, 0xf7,
	0x10, 0x55, 0xee, 0xcd, 0x4c, 0xd8, 0xf5, 0x59, 0xf6, 0xc9, 0x1e, 0x43, 0x63, 0x12, 0x4c, 0x83,
	0x94, 0x13, 0xa4, 0x6f, 0x1f, 0x95, 0x4e, 0x4a, 0x36, 0x10, 0x44, 0xf6, 0xec, 0x1e, 0x6c, 0xbd,
	0x89, 0x26, 0xf3, 0xa9, 0xd0, 0x6b, 0xe4, 0x2d, 0x25, 0xb1, 0x4f, 0x60, 0x57, 0x7e, 0xf1, 0x34,
	0xf6, 0x7c, 0xe1, 0xeb, 0x75, 0x52, 0xef, 0x48, 0xd0, 0x25, 0x8c, 0x7d, 0x0e, 0x2d, 0x65, 0x34,
	0xf2, 0xc2, 0x91, 0x98, 0x08, 0x5f, 0x07, 0x32, 0x6b, 0x4a, 0xb8, 0xab, 0x50, 0xf6, 0x25, 0xec,
	0x8d, 0xe3, 0xe8, 0x4f, 0x22, 0xe4, 0x18, 0xf2, 0x80, 0xa2, 0xa5, 0x37, 0x68, 0x33, 0x9a, 0x54,
	0x74, 0x73, 0x9c, 0x7d, 0x06, 0xad, 0x44, 0x84, 0x3e, 0x97, 0x81, 0x4c, 0x83, 0xa9, 0xd0, 0x77,
	0x8e, 0x4a, 0x27, 0x15, 0x7b, 0x17, 0x61, 0x3a, 0xab, 0x1b, 0x4c, 0xe9, 0x6c, 0xb8, 0xb7, 0x20,
	0xbc, 0xe2, 0xbe, 0x77, 0xa3, 0xef, 0xd2, 0xca, 0xa0, 0xa0, 0x9e, 0x77, 0x83, 0x41, 0xc2, 0xe5,
	0x44, 0x98, 0xea, 0x4d, 0x19, 0x24, 0x25, 0x62, 0x16, 0xc5, 0xe2, 0x97, 0xb9, 0x48, 0x28, 0xc5,
	0x5a, 0x32, 0x8b, 0x14, 0x62, 0xfa, 0xb8, 0x83, 0x49, 0x34, 0xf2, 0x26, 0x6a, 0x0b, 0x89, 0xf8,
	0x45, 0xd7, 0xc8, 0x66, 0x97, 0x60, 0x19, 0x1b, 0xf1, 0x0b, 0xfb, 0x35, 0x68, 0xe3, 0x28, 0x1e,
	0x09, 0x3e, 0x9a, 0x44, 0x89, 0x0a, 0xcb, 0xde, 0x22, 0x2c, 0xa7, 0xa8, 0xeb, 0xa2, 0x8a, 0xc2,
	0xd2, 0x1c, 0x2f, 0xc9, 0xec, 0x37, 0xb0, 0xa7, 0xe6, 0x8f, 0xe6, 0x71, 0x16, 0x55, 0x46, 0xc3,
	0xef, 0x2c, 0x52, 0x80, 0x74, 0x34, 0xbe, 0x15, 0x2d, 0x03, 0xec, 0x04, 0x34, 0x39, 0xc1, 0x6b,
	0xe1, 0x5f, 0xa9, 0xf1, 0x77, 0xa4, 0xff, 0x09, 0x3f, 0x43, 0x98, 0x2c, 0xdb, 0xb0, 0x37, 0x4f,
	0x44, 0xcc, 0x67, 0x71, 0xe4, 0xcf, 0x47, 0x29, 0x0f, 0xc2, 0x71, 0xa4, 0xef, 0x93, 0x4f, 0x5a,
	0xa8, 0x18, 0x4a, 0xdc, 0x0c, 0xc7, 0x11, 0x46, 0x7e, 0x34, 0x8f, 0x63, 0x11, 0x8e, 0x6e, 0xe4,
	0x94, 0x77, 0x65, 0xe4, 0x33, 0x90, 0x26, 0xfc, 0x16, 0x9a, 0x45, 0x0f, 0x05, 0xbe, 0x7e, 0xef,
	0xdd, 0x8b, 0xb2, 0xb3, 0xf0, 0x96, 0xe9, 0xe3, 0x1e, 0xc4, 0xdb, 0xd1, 0x6b, 0x2f, 0xbc, 0x12,
	0x8b, 0x51, 0x07, 0x72, 0x0f, 0x99, 0x22, 0xb3, 0x7d, 0x0a, 0x77, 0x30, 0xee, 0x7c, 0x14, 0x85,
	0x7e, 0x80, 0x97, 0x44, 0xee, 0x44, 0xa7, 0x9d, 0xec, 0xa1, 0xaa, 0x9b, 0x69, 0x68, 0x3b, 0x0f,
	0x01, 0x82, 0x84, 0xcf, 0x44, 0x88, 0xa1, 0xd7, 0xef, 0xcb, 0x78, 0x06, 0xc9, 0x50, 0x02, 0x78,
	0xa4, 0x38, 0x9a, 0xa7, 0x82, 0x67, 0x77, 0xf6, 0x01, 0x2d, 0xbb, 0x43, 0x60, 0x47, 0x5d, 0xdc,
	0x63, 0x90, 0xd1, 0xa5, 0xa5, 0x70, 0x6f, 0x87, 0x34, 0x4d, 0x83, 0x40, 0x5c, 0xc5, 0xf4, 0xd9,
	0x23, 0x80, 0x42, 0x02, 0x7f, 0x24, 0x6f, 0xd3, 0x02, 0xc1, 0xdb, 0x34, 0xf5, 0xe2, 0xab, 0x20,
	0xd4, 0x1f, 0x92, 0x4e, 0x49, 0xec, 0x6b, 0x68, 0x44, 0xe3, 0x71, 0x22, 0x52, 0x3e, 0x9e, 0x78,
	0x57, 0xfa, 0x23, 0x0a, 0x72, 0x93, 0x7c, 0x45, 0xf0, 0xe9, 0xc4, 0xbb, 0xb2, 0x21, 0xca, 0xbf,
	0xf1, 0x40, 0x22, 0x8e, 0xa3, 0x98, 0x8f, 0x22, 0x5f, 0xe8, 0x8f, 0xe5, 0x81, 0x08, 0xe9, 0x46,
	0xbe, 0x60, 0xcf, 0x60, 0x27, 0x0b, 0x25, 0x39, 0xe6, 0x68, 0x41, 0x1c, 0x2a, 0x94, 0x94, 0x31,
	0x8d, 0xd9, 0x42, 0x60, 0x5f, 0x80, 0x96, 0x88, 0x34, 0x9d, 0x08, 0xbc, 0x01, 0xfc, 0x2a, 0x8e,
	0xe6, 0x33, 0xfd, 0x63, 0x9a, 0xb8, 0xb5, 0xc0, 0x5f, 0x22, 0xcc, 0xf6, 0xa1, 0x9a, 0x46, 0xd7,
	0x22, 0xd4, 0x8f, 0xc9, 0x4f, 0x52, 0x40, 0x2f, 0x4a, 0x2e, 0xe0, 0xde, 0x94, 0xbc, 0xf8, 0x09,
	0x9d, 0x71, 0x47, 0x82, 0x1d, 0xc2, 0x0a, 0x94, 0x30, 0x9d, 0x4f, 0xd2, 0x60, 0x36, 0x11, 0xfa,
	0xa7, 0x45, 0x4a, 0x38, 0x57, 0x28, 0xfb, 0x0a, 0xc9, 0x4c, 0x65, 0xa3, 0xaf, 0x3f, 0xa1, 0xec,
	0xd9, 0x2d, 0x1c, 0xc0, 0xec, 0x21, 0x8f, 0xc9, 0x4f, 0xa2, 0x7d, 0x45, 0x7d, 0xc1, 0xe8, 0x5a,
	0xff, 0x8c, 0x16, 0x56, 0x34, 0x17, 0x8c, 0xae, 0x71, 0x6b, 0x8a, 0x5f, 0x94, 0xfb, 0x3f, 0x97,
	0x5b, 0x93, 0xe0, 0xb9, 0x0c, 0xc2, 0x63, 0x68, 0x48, 0x6a, 0xe7, 0xa1, 0x37, 0x15, 0xfa, 0x09,
	0x9d, 0x0d, 0x24, 0x34, 0xf0, 0xa6, 0x82, 0x3d, 0x81, 0x66, 0x2c, 0xbc, 0x24, 0x92, 0x2c, 0x85,
	0xb4, 0xf1, 0x05, 0xd9, 0xec, 0x4a, 0xb4, 0xab, 0xc8, 0xe3, 0x10, 0xea, 0x49, 0xea, 0x4d, 0x67,
	0x3c, 0xf5, 0xde, 0xea, 0x6d, 0x5a, 0xa8, 0x46, 0x80, 0xeb, 0xbd, 0x65, 0x1f, 0x03, 0xfa, 0x23,
	0x4c, 0xc6, 0x22, 0xe6, 0x63, 0x21, 0xf4, 0x2f, 0x49, 0xdf, 0xc8, 0xb0, 0x53, 0x21, 0xd0, 0x44,
	0xe5, 0xa1, 0xdc, 0xc8, 0x57, 0xb4, 0x48, 0x43, 0x61, 0xb4, 0x93, 0x26, 0x94, 0x83, 0x99, 0xfe,
	0x7f, 0xa4, 0x28, 0x07, 0x33, 0xa6, 0x41, 0x65, 0xea, 0x8d, 0xf4, 0xa7, 0x04, 0xe0, 0x27, 0x66,
	0xda, 0x65, 0xec, 0x85, 0xa3, 0xd7, 0xfa, 0xd7, 0x04, 0x2a, 0x09, 0x0f, 0x29, 0xbf, 0xe4, 0xdc,
	0xdf, 0xc8, 0x43, 0x4a, 0x88, 0xa6, 0x6e, 0xc3, 0x9e, 0xbc, 0x0b, 0xa9, 0x98, 0xce, 0x26, 0x5e,
	0x4a, 0xa9, 0xfe, 0x2d, 0xf1, 0x6b, 0x8b, 0x14, 0xae, 0xc2, 0xe5, 0x35, 0x5c, 0xb1, 0xa5, 0x49,
	0x9f, 0xd1, 0xa4, 0x7b, 0x4b, 0xd6, 0x34, 0xf7, 0x19, 0xec, 0x67, 0x8c, 0x9c, 0x9d, 0x90, 0xd2,
	0xf3, 0x39, 0xa5, 0xe7, 0x3d, 0x8c, 0xae, 0x2b, 0xf5, 0xea, 0xd2, 0x51, 0x96, 0xb2, 0xf4, 0x1d,
	0x0c, 0x33, 0xd0, 0x17, 0x97, 0xf3, 0x2b, 0xfd, 0xff, 0x65, 0x06, 0x92, 0xc0, 0x18, 0x6c, 0x22,
	0x5b, 0xe9, 0xdf, 0x11, 0x48, 0xdf, 0xc7, 0x6d, 0xa8, 0x13, 0x6b, 0xf4, 0x83, 0x04, 0x79, 0x7d,
	0x73, 0x12, 0x24, 0xa9, 0x5e, 0x3a, 0xaa, 0x9c, 0x34, 0x9e, 0xd5, 0x73, 0x32, 0xb2, 0x09, 0x3e,
	0xfe, 0x03, 0xc0, 0xef, 0xa2, 0x20, 0x4c, 0x65, 0x13, 0xd0, 0x86, 0x46, 0x81, 0xc3, 0x54, 0x27,
	0x50, 0x18, 0x03, 0x0b, 0xfa, 0x62, 0xdf, 0x40, 0x73, 0x99, 0xbc, 0x54, 0x63, 0x50, 0x30, 0xdf,
	0x5d, 0x22, 0xb1, 0x63, 0x27, 0xdf, 0x57, 0x78, 0xcd, 0x1e, 0x43, 0x95, 0x26, 0x7b, 0x77, 0x11,
	0x89, 0xb3, 0x27, 0x50, 0x9b, 0xcf, 0x92, 0x34, 0x16, 0xde, 0x54, 0x2f, 0xaf, 0x6e, 0x3e, 0x57,
	0x1d, 0xff, 0xab, 0x02, 0x4c, 0x16, 0x55, 0xa9, 0x91, 0x15, 0xab, 0xd8, 0x8d, 0x94, 0x96, 0xbb,
	0x91, 0xcf, 0xa0, 0x96, 0x73, 0xed, 0x9a, 0x56, 0x66, 0x3b, 0x52, 0x84, 0xbb, 0x68, 0x88, 0x2a,
	0xef, 0x6d, 0x88, 0x96, 0x8b, 0xe6, 0xe6, 0x6a, 0xd1, 0x2c, 0x36, 0x6d, 0xd5, 0x0f, 0x35, 0x6d,
	0x5b, 0xab, 0x4d, 0xdb, 0xda, 0xca, 0xb0, 0xbd, 0xbe, 0x32, 0xe4, 0xd4, 0x54, 0x5b, 0xa1, 0xa6,
	0x65, 0x82, 0xaf, 0xaf, 0x21, 0xf8, 0x75, 0x04, 0x08, 0xeb, 0x09, 0x50, 0x76, 0x0e, 0x33, 0x2f,
	0xbc, 0xa1, 0x2e, 0xa5, 0x62, 0x67, 0x22, 0x5d, 0x7e, 0x6c, 0x4e, 0x0a, 0x6d, 0x49, 0x0d, 0x01,
	0xea, 0x48, 0x9e, 0x43, 0x9d, 0xca, 0x2c, 0x25, 0xfd, 0xee, 0x07, 0x93, 0xbe, 0x86, 0x86, 0x94,
	0xea, 0x59, 0x52, 0xb7, 0x0a, 0x49, 0xfd, 0xef, 0x32, 0x68, 0x56, 0x68, 0xa7, 0x61, 0x21, 0xd8,
	0x1f, 0x88, 0xf2, 0x93, 0xbc, 0x75, 0x5e, 0x1b, 0xe4, 0xac, 0xad, 0x5e, 0xeb, 0xe7, 0xca, 0x7a,
	0x3f, 0x2f, 0x12, 0x62, 0xf3, 0x96, 0x09, 0x51, 0x5d, 0x4d, 0x88, 0xbc, 0x86, 0xe5, 0xed, 0x6a,
	0x56, 0xc3, 0xb2, 0x2b, 0x4e, 0x02, 0x45, 0xba, 0x6a, 0x4b, 0x81, 0x98, 0x2e, 0xb9, 0x52, 0xd1,
	0xc5, 0xcf, 0xdb, 0xc5, 0xf6, 0x2b, 0x60, 0xd9, 0x25, 0xe1, 0x61, 0x94, 0xf2, 0x71, 0x34, 0x0f,
	0x65, 0x33, 0x5a, 0xb3, 0xb5, 0x4c, 0x33, 0x88, 0xd2, 0x53, 0xc4, 0x73, 0x97, 0x9f, 0x16, 0x5c,
	0xfe, 0xb7, 0x1a, 0x34, 0xf3, 0xa6, 0x42, 0x3a, 0xbc, 0x49, 0x2f, 0x80, 0x12, 0x05, 0x79, 0xa5,
	0xe9, 0x2f, 0x2f, 0x07, 0xe0, 0x36, 0xd7, 0xa7, 0x03, 0x6c, 0x16, 0x25, 0xb2, 0x9b, 0xb9, 0xcd,
	0x0b, 0x61, 0x2f, 0xb3, 0xce, 0xa1, 0xe5, 0xb7, 0x45, 0xf5, 0x36, 0x6f, 0x8b, 0x95, 0xc6, 0x63,
	0xeb, 0xbf, 0x36, 0x1e, 0x2b, 0x45, 0x72, 0xfb, 0x9d, 0x22, 0xb9, 0xa6, 0xc0, 0xd7, 0x6e, 0x51,
	0xe0, 0xeb, 0xff, 0x53, 0x81, 0x87, 0xd5, 0x02, 0xff, 0x11, 0xd4, 0xd3, 0x38, 0xb8, 0xba, 0x12,
	0xb1, 0xf0, 0xe9, 0x4a, 0xd6, 0xec, 0x05, 0x80, 0x85, 0x3b, 0x17, 0x96, 0x1e, 0x0c, 0x39, 0x4a,
	0xd7, 0x73, 0xf1, 0xd6, 0xd9, 0x95, 0xdd, 0x99, 0x7a, 0xeb, 0xec, 0x43, 0x55, 0x3e, 0x8f, 0x9a,
	0x04, 0x4b, 0x81, 0xfd, 0x0a, 0x0e, 0xd4, 0xf0, 0x42, 0x1b, 0x2a, 0xed, 0x5a, 0x64, 0x77, 0x57,
	0xa9, 0xf3, 0xac, 0x91, 0x2f, 0xaa, 0x21, 0xb0, 0x6c, 0x5c, 0xe1, 0xb5, 0xa6, 0x91, 0xe7, 0x8f,
	0xf1, 0xfc, 0xcb, 0x59, 0xe6, 0x4a, 0xdb, 0xc5, 0xeb, 0x4d, 0x4b, 0x57, 0x10, 0xf6, 0x5b, 0xec,
	0x29, 0xe4, 0x8c, 0x85, 0x27, 0xc6, 0xc3, 0xf7, 0xce, 0x25, 0x7b, 0xbf, 0x74, 0x21, 0x30, 0x13,
	0xee, 0x16, 0x9e, 0x54, 0x85, 0x6d, 0xb1, 0x05, 0x49, 0x39, 0xd9, 0xe3, 0x6a, 0xb1, 0x15, 0x96,
	0xbc, 0x83, 0x51, 0x82, 0xe0, 0x54, 0xb1, 0x48, 0xe6, 0x93, 0x94, 0xde, 0x1b, 0x98, 0x20, 0x22,
	0xf4, 0x6d, 0x42, 0xd0, 0x60, 0x14, 0x0b, 0x6c, 0x16, 0x28, 0x12, 0xfb, 0x14, 0x09, 0x90, 0x10,
	0x85, 0x41, 0x83, 0x4a, 0xea, 0x5d, 0xd1, 0xb3, 0xa2, 0x6e, 0xe3, 0x27, 0x7b, 0x00, 0x35, 0x5f,
	0x78, 0xfe, 0x24, 0x08, 0x05, 0xbd, 0x23, 0x2a, 0x76, 0x2e, 0xaf, 0x65, 0xed, 0x83, 0xf5, 0xac,
	0x4d, 0x8d, 0x59, 0x34, 0xe3, 0x93, 0x28, 0x49, 0xe8, 0xad, 0x50, 0xc3, 0xc6, 0x2c, 0x9a, 0xf5,
	0xa3, 0x24, 0x51, 0x2d, 0xd5, 0xfd, 0xd5, 0x96, 0xea, 0xc1, 0xa2, 0xa5, 0x3a, 0x54, 0xec, 0x4d,
	0x89, 0x7f, 0x48, 0x38, 0xb1, 0x34, 0xa5, 0xfd, 0x3a, 0xca, 0xf8, 0x33, 0xd4, 0xe8, 0x21, 0xdc,
	0x9d, 0xfa, 0xec, 0x53, 0xd8, 0x24, 0x87, 0x96, 0xc8, 0xa1, 0x5a, 0xc6, 0xfa, 0xa8, 0x23, 0x57,
	0x92, 0x16, 0x67, 0xf1, 0xbd, 0xd4, 0x23, 0xfa, 0xd8, 0xb1, 0xe9, 0x9b, 0x1d, 0xc0, 0x76, 0x18,
	0xf9, 0x22, 0xe3, 0xe2, 0x8a, 0xbd, 0x85, 0xa2, 0xbc, 0x12, 0x2b, 0xf5, 0xb6, 0x52, 0xa0, 0xd7,
	0xe3, 0x7f, 0x94, 0xa1, 0xde, 0x13, 0xd3, 0x48, 0x72, 0xd5, 0x63, 0xa8, 0xbe, 0xa7, 0x8d, 0x91,
	0x38, 0x3d, 0x01, 0x67, 0x33, 0x11, 0xf3, 0xe2, 0xff, 0x80, 0x32, 0x25, 0x72, 0x8b, 0x14, 0xfd,
	0xc5, 0x4f, 0x81, 0x36, 0xec, 0x4d, 0xa2, 0x3f, 0xae, 0xd8, 0x56, 0xa4, 0x2d, 0x29, 0x0a, 0xb6,
	0xcf, 0xe1, 0xde, 0x34, 0x08, 0x95, 0xa5, 0xcc, 0x2f, 0x75, 0xc9, 0x64, 0x87, 0x70, 0x67, 0x1a,
	0x84, 0x64, 0x4e, 0xbb, 0xf9, 0x41, 0xde, 0xb8, 0xef, 0xe0, 0x00, 0x07, 0x4d, 0xbd, 0xf8, 0x5a,
	0xac, 0x8c, 0x92, 0x65, 0x64, 0x7f, 0x1a, 0x60, 0xdb, 0x7e, 0x2d, 0x96, 0x86, 0x7d, 0x0d, 0x75,
	0x7a, 0x16, 0xc6, 0xf3, 0x89, 0x2c, 0x28, 0x0d, 0xc9, 0x7f, 0xd2, 0x12, 0x93, 0xcb, 0x9e, 0x4f,
	0x84, 0x5d, 0x4b, 0xd5, 0x97, 0x2c, 0x0b, 0x3e, 0xe5, 0x62, 0xe1, 0x4f, 0x81, 0x2c, 0x38, 0x9a,
	0xd4, 0xb8, 0xf9, 0xff, 0x82, 0xf6, 0x5f, 0x4a, 0xd0, 0x28, 0xfc, 0x77, 0x61, 0x0d, 0xd8, 0xb6,
	0x1c, 0xde, 0xb3, 0x06, 0x86, 0xb6, 0xc1, 0x8e, 0xe0, 0x23, 0xcb, 0xe1, 0x43, 0x63, 0xd0, 0x33,
	0x07, 0x2f, 0xf9, 0x8f, 0xa6, 0x7b, 0xc6, 0x87, 0x1d, 0xdb, 0x35, 0x3b, 0x7d, 0x69, 0x51, 0x62,
	0x1f, 0xc3, 0x43, 0xcb, 0xe1, 0xdd, 0xce, 0xa0, 0x6b, 0xf4, 0x8d, 0xde, 0x1a, 0x93, 0x32, 0x6b,
	0x02, 0x2c, 0x26, 0xd1, 0x2a, 0xac, 0x05, 0x8d, 0xc2, 0x10, 0x6d, 0x93, 0xed, 0x42, 0xdd, 0x72,
	0xf8, 0xc5, 0xe0, 0x95, 0xf5, 0xe3, 0x40, 0xab, 0xb6, 0x47, 0xd0, 0x5c, 0xb9, 0x7e, 0x77, 0xa0,
	0x65, 0x0d, 0x5d, 0xde, 0x37, 0xcf, 0x4d, 0x97, 0x0f, 0x6d, 0xb3, 0x8b, 0x7b, 0xdb, 0x07, 0x0d,
	0xc1, 0xf3, 0x8e, 0xfd, 0xca, 0xc8, 0xd0, 0x12, 0x63, 0xd0, 0x44, 0xf4, 0x85, 0xe1, 0x64, 0x58,
	0x39, 0xc3, 0xfa, 0x9d, 0x1c, 0xab, 0xb4, 0x53, 0x80, 0x45, 0x31, 0xa0, 0x43, 0x9f, 0xf2, 0x81,
	0x3c, 0xb4, 0x14, 0xac, 0xa1, 0x31, 0xd0, 0x4a, 0x6c, 0x07, 0x6a, 0xd6, 0x29, 0xef, 0xf6, 0x2d,
	0x27, 0x9b, 0xe9, 0x94, 0x9f, 0x5a, 0x76, 0xd7, 0x50, 0x58, 0x45, 0x61, 0x24, 0x71, 0xd7, 0xea,
	0x75, 0x7e, 0xd2, 0x36, 0xd9, 0x3d, 0x60, 0x39, 0xf6, 0x93, 0xe1, 0xb8, 0x86, 0x8d, 0x78, 0xb5,
	0xfd, 0xa5, 0x3a, 0xda, 0xa2, 0xba, 0xe1, 0x62, 0x3d, 0xde, 0xb7, 0x06, 0x2f, 0xb5, 0x0d, 0x5a,
	0xac, 0xc7, 0x9d, 0x33, 0xcb, 0x76, 0xb5, 0x52, 0xfb, 0xef, 0x25, 0x68, 0x2e, 0xff, 0x4d, 0x41,
	0xeb, 0xd3, 0xae, 0xcb, 0x07, 0x96, 0xab, 0x6d, 0xb0, 0xfb, 0x70, 0x57, 0x09, 0xdc, 0x18, 0x58,
	0x17, 0x2f, 0xcf, 0xd0, 0x17, 0x2f, 0x4d, 0xdc, 0xf5, 0x31, 0x3c, 0x42, 0xd5, 0x68, 0x12, 0x20,
	0x7f, 0x44, 0x6f, 0x90, 0xff, 0xb2, 0x32, 0x4c, 0x49, 0xab, 0x95, 0xd9, 0x27, 0xf0, 0x18, 0x6d,
	0x2e, 0xe3, 0xe8, 0x5a, 0xc4, 0x99, 0x4d, 0xb0, 0x64, 0x54, 0x61, 0x7b, 0xb0, 0x8b, 0x46, 0x6f,
	0x82, 0x68, 0xe2, 0xa1, 0x42, 0x46, 0x0b, 0xa1, 0x28, 0x7d, 0x2d, 0x62, 0xad, 0x8a, 0x47, 0x45,
	0x71, 0x26, 0x62, 0x7c, 0x43, 0xfa, 0x62, 0x12, 0xbc, 0x11, 0xb1, 0xb6, 0xd5, 0xfe, 0x6b, 0x19,
	0x5a, 0x2b, 0x3f, 0x73, 0x64, 0x26, 0xb8, 0xbc, 0xdb, 0x37, 0x8d, 0x01, 0x9e, 0xe0, 0x2e, 0xec,
	0xa1, 0xdc, 0xe9, 0x9d, 0x9b, 0x03, 0xd3, 0x71, 0xed, 0x8e, 0x6b, 0xd9, 0x5a, 0x89, 0x69, 0xb0,
	0x83, 0xb0, 0x6d, 0x3a, 0xaf, 0xb8, 0x63, 0xff, 0x90, 0xa5, 0x90, 0xcb, 0xcf, 0xad, 0x17, 0x66,
	0x1f, 0x7d, 0x0e, 0xb0, 0x85, 0xf2, 0xb0, 0xab, 0x6d, 0xb2, 0x07, 0x70, 0x0f, 0xbf, 0x1d, 0xc3,
	0x75, 0xfb, 0xc6, 0xb9, 0x31, 0x70, 0x79, 0xcf, 0xb0, 0xcd, 0x1f, 0x8c, 0x9e, 0x56, 0x65, 0x87,
	0x70, 0x40, 0x0b, 0x5a, 0xe7, 0x2f, 0xcc, 0x41, 0xc7, 0x35, 0xad, 0x41, 0xae, 0xdc, 0x92, 0xa9,
	0xeb, 0xf2, 0xf3, 0x8b, 0xbe, 0x6b, 0x72, 0xdb, 0xba, 0x70, 0x55, 0x4c, 0x73, 0x93, 0x6d, 0x76,
	0x00, 0x77, 0x68, 0x9d, 0x7e, 0xa7, 0x2b, 0xa7, 0x76, 0xce, 0x3a, 0xb6, 0xa1, 0xd5, 0x28, 0xe8,
	0xb8, 0x45, 0x63, 0x78, 0x61, 0x77, 0xcf, 0x3a, 0x8e, 0xa1, 0xd5, 0x33, 0xac, 0xeb, 0x0e, 0xf9,
	0xc5, 0xb0, 0x6f, 0x75, 0x7a, 0x1a, 0x64, 0x1b, 0x57, 0xb9, 0xdd, 0x68, 0xff, 0x0c, 0x8f, 0x3e,
	0x5c, 0x09, 0x31, 0xad, 0xbb, 0x96, 0xbb, 0x9c, 0xae, 0x1b, 0x78, 0x03, 0x24, 0xfa, 0xc2, 0xec,
	0xe5, 0xb9, 0x9e, 0x83, 0x1d, 0xe7, 0x55, 0x96, 0xec, 0xed, 0xdf, 0xc3, 0xfd, 0xf7, 0xd6, 0x47,
	0xf6, 0x08, 0x1e, 0x74, 0x2d, 0xd7, 0xe5, 0x2f, 0x6d, 0xa3, 0xe3, 0x1a, 0x36, 0x77, 0xcf, 0x3a,
	0x03, 0x6e, 0xd9, 0xdc, 0xf8, 0xfe, 0xa2, 0xd3, 0xd7, 0x36, 0xd0, 0x5f, 0xa4, 0xef, 0x1b, 0x8e,
	0xb3, 0xa2, 0x2c, 0xb5, 0x2d, 0x60, 0xef, 0x96, 0x4b, 0x0c, 0x96, 0x63, 0xa9, 0x8d, 0x75, 0x9c,
	0x57, 0xda, 0x06, 0xde, 0x6f, 0x67, 0x71, 0x33, 0xb5, 0x12, 0xa6, 0x48, 0xd1, 0x84, 0x9f, 0x9b,
	0x83, 0x0b, 0x47, 0x2b, 0xb7, 0x47, 0xb0, 0x53, 0x2c, 0x17, 0x98, 0x59, 0x6e, 0xd7, 0xe5, 0x96,
	0xdd, 0x33, 0x6c, 0x6d, 0x03, 0x7d, 0x87, 0xa2, 0x24, 0x0a, 0xad, 0x84, 0xd9, 0x82, 0xf2, 0xf7,
	0x17, 0x86, 0xfd, 0x13, 0x7f, 0xd1, 0xe9, 0x23, 0xae, 0x95, 0xd9, 0x43, 0xb8, 0xbf, 0x80, 0x87,
	0x96, 0x63, 0xaa, 0x30, 0xbb, 0x1d, 0xb3, 0xaf, 0x55, 0x2e, 0xb7, 0xe8, 0x47, 0xfb, 0xf3, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xca, 0xae, 0xad, 0x03, 0x89, 0x17, 0x00, 0x00,
}
