// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goshare.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReqSSEStockOptionList struct {
}

func (m *ReqSSEStockOptionList) Reset()                    { *m = ReqSSEStockOptionList{} }
func (m *ReqSSEStockOptionList) String() string            { return proto.CompactTextString(m) }
func (*ReqSSEStockOptionList) ProtoMessage()               {}
func (*ReqSSEStockOptionList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type RspSSEStockOptionList struct {
	List []*SSEStockOption `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *RspSSEStockOptionList) Reset()                    { *m = RspSSEStockOptionList{} }
func (m *RspSSEStockOptionList) String() string            { return proto.CompactTextString(m) }
func (*RspSSEStockOptionList) ProtoMessage()               {}
func (*RspSSEStockOptionList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *RspSSEStockOptionList) GetList() []*SSEStockOption {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqSSEStockOptionList)(nil), "pb.ReqSSEStockOptionList")
	proto.RegisterType((*RspSSEStockOptionList)(nil), "pb.RspSSEStockOptionList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoShare service

type GoShareClient interface {
	// GetLastTick 获取最新行情
	LastTick(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (*MarketDataSnapshot, error)
	// SSEStockOptionList 上证所期权列表
	SSEStockOptionList(ctx context.Context, in *ReqSSEStockOptionList, opts ...grpc.CallOption) (*RspSSEStockOptionList, error)
	// SubscribeMarketData 订阅行情
	SubscribeMarketData(ctx context.Context, in *ReqSubscribeMarketData, opts ...grpc.CallOption) (GoShare_SubscribeMarketDataClient, error)
	// PushTick 推送tick更新
	PushTick(ctx context.Context, in *MarketDataSnapshot, opts ...grpc.CallOption) (*EmptyResponse, error)
	// 策略列表
	GetStrategyList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StrategyList, error)
	// 查询策略
	GetStrategy(ctx context.Context, in *ReqGetStrategy, opts ...grpc.CallOption) (*Strategy, error)
	// 创建策略
	CreateStrategy(ctx context.Context, in *Strategy, opts ...grpc.CallOption) (*EmptyResponse, error)
	// 删除策略
	DeleteStrategy(ctx context.Context, in *ReqDeleteStrategy, opts ...grpc.CallOption) (*EmptyResponse, error)
	// 经纪商列表
	GetTradingRouteList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TradingRouteList, error)
	// 添加经纪商
	AddTradingRoute(ctx context.Context, in *TradingRoute, opts ...grpc.CallOption) (*EmptyResponse, error)
	// 删除经纪商
	DeleteTradingRoute(ctx context.Context, in *ReqDeleteTradingRoute, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type goShareClient struct {
	cc *grpc.ClientConn
}

func NewGoShareClient(cc *grpc.ClientConn) GoShareClient {
	return &goShareClient{cc}
}

func (c *goShareClient) LastTick(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (*MarketDataSnapshot, error) {
	out := new(MarketDataSnapshot)
	err := grpc.Invoke(ctx, "/pb.GoShare/LastTick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) SSEStockOptionList(ctx context.Context, in *ReqSSEStockOptionList, opts ...grpc.CallOption) (*RspSSEStockOptionList, error) {
	out := new(RspSSEStockOptionList)
	err := grpc.Invoke(ctx, "/pb.GoShare/SSEStockOptionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) SubscribeMarketData(ctx context.Context, in *ReqSubscribeMarketData, opts ...grpc.CallOption) (GoShare_SubscribeMarketDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GoShare_serviceDesc.Streams[0], c.cc, "/pb.GoShare/SubscribeMarketData", opts...)
	if err != nil {
		return nil, err
	}
	x := &goShareSubscribeMarketDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoShare_SubscribeMarketDataClient interface {
	Recv() (*MarketDataSnapshot, error)
	grpc.ClientStream
}

type goShareSubscribeMarketDataClient struct {
	grpc.ClientStream
}

func (x *goShareSubscribeMarketDataClient) Recv() (*MarketDataSnapshot, error) {
	m := new(MarketDataSnapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goShareClient) PushTick(ctx context.Context, in *MarketDataSnapshot, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/pb.GoShare/PushTick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) GetStrategyList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StrategyList, error) {
	out := new(StrategyList)
	err := grpc.Invoke(ctx, "/pb.GoShare/GetStrategyList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) GetStrategy(ctx context.Context, in *ReqGetStrategy, opts ...grpc.CallOption) (*Strategy, error) {
	out := new(Strategy)
	err := grpc.Invoke(ctx, "/pb.GoShare/GetStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) CreateStrategy(ctx context.Context, in *Strategy, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/pb.GoShare/CreateStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) DeleteStrategy(ctx context.Context, in *ReqDeleteStrategy, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/pb.GoShare/DeleteStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) GetTradingRouteList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TradingRouteList, error) {
	out := new(TradingRouteList)
	err := grpc.Invoke(ctx, "/pb.GoShare/GetTradingRouteList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) AddTradingRoute(ctx context.Context, in *TradingRoute, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/pb.GoShare/AddTradingRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) DeleteTradingRoute(ctx context.Context, in *ReqDeleteTradingRoute, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/pb.GoShare/DeleteTradingRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoShare service

type GoShareServer interface {
	// GetLastTick 获取最新行情
	LastTick(context.Context, *Symbol) (*MarketDataSnapshot, error)
	// SSEStockOptionList 上证所期权列表
	SSEStockOptionList(context.Context, *ReqSSEStockOptionList) (*RspSSEStockOptionList, error)
	// SubscribeMarketData 订阅行情
	SubscribeMarketData(*ReqSubscribeMarketData, GoShare_SubscribeMarketDataServer) error
	// PushTick 推送tick更新
	PushTick(context.Context, *MarketDataSnapshot) (*EmptyResponse, error)
	// 策略列表
	GetStrategyList(context.Context, *EmptyRequest) (*StrategyList, error)
	// 查询策略
	GetStrategy(context.Context, *ReqGetStrategy) (*Strategy, error)
	// 创建策略
	CreateStrategy(context.Context, *Strategy) (*EmptyResponse, error)
	// 删除策略
	DeleteStrategy(context.Context, *ReqDeleteStrategy) (*EmptyResponse, error)
	// 经纪商列表
	GetTradingRouteList(context.Context, *EmptyRequest) (*TradingRouteList, error)
	// 添加经纪商
	AddTradingRoute(context.Context, *TradingRoute) (*EmptyResponse, error)
	// 删除经纪商
	DeleteTradingRoute(context.Context, *ReqDeleteTradingRoute) (*EmptyResponse, error)
}

func RegisterGoShareServer(s *grpc.Server, srv GoShareServer) {
	s.RegisterService(&_GoShare_serviceDesc, srv)
}

func _GoShare_LastTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Symbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).LastTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/LastTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).LastTick(ctx, req.(*Symbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_SSEStockOptionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSSEStockOptionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).SSEStockOptionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/SSEStockOptionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).SSEStockOptionList(ctx, req.(*ReqSSEStockOptionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_SubscribeMarketData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqSubscribeMarketData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoShareServer).SubscribeMarketData(m, &goShareSubscribeMarketDataServer{stream})
}

type GoShare_SubscribeMarketDataServer interface {
	Send(*MarketDataSnapshot) error
	grpc.ServerStream
}

type goShareSubscribeMarketDataServer struct {
	grpc.ServerStream
}

func (x *goShareSubscribeMarketDataServer) Send(m *MarketDataSnapshot) error {
	return x.ServerStream.SendMsg(m)
}

func _GoShare_PushTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketDataSnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).PushTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/PushTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).PushTick(ctx, req.(*MarketDataSnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_GetStrategyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).GetStrategyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/GetStrategyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).GetStrategyList(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_GetStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetStrategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).GetStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/GetStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).GetStrategy(ctx, req.(*ReqGetStrategy))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_CreateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Strategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).CreateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/CreateStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).CreateStrategy(ctx, req.(*Strategy))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteStrategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/DeleteStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).DeleteStrategy(ctx, req.(*ReqDeleteStrategy))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_GetTradingRouteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).GetTradingRouteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/GetTradingRouteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).GetTradingRouteList(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_AddTradingRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradingRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).AddTradingRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/AddTradingRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).AddTradingRoute(ctx, req.(*TradingRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_DeleteTradingRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteTradingRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).DeleteTradingRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/DeleteTradingRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).DeleteTradingRoute(ctx, req.(*ReqDeleteTradingRoute))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoShare_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GoShare",
	HandlerType: (*GoShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastTick",
			Handler:    _GoShare_LastTick_Handler,
		},
		{
			MethodName: "SSEStockOptionList",
			Handler:    _GoShare_SSEStockOptionList_Handler,
		},
		{
			MethodName: "PushTick",
			Handler:    _GoShare_PushTick_Handler,
		},
		{
			MethodName: "GetStrategyList",
			Handler:    _GoShare_GetStrategyList_Handler,
		},
		{
			MethodName: "GetStrategy",
			Handler:    _GoShare_GetStrategy_Handler,
		},
		{
			MethodName: "CreateStrategy",
			Handler:    _GoShare_CreateStrategy_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _GoShare_DeleteStrategy_Handler,
		},
		{
			MethodName: "GetTradingRouteList",
			Handler:    _GoShare_GetTradingRouteList_Handler,
		},
		{
			MethodName: "AddTradingRoute",
			Handler:    _GoShare_AddTradingRoute_Handler,
		},
		{
			MethodName: "DeleteTradingRoute",
			Handler:    _GoShare_DeleteTradingRoute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMarketData",
			Handler:       _GoShare_SubscribeMarketData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "goshare.proto",
}

func init() { proto.RegisterFile("goshare.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x41, 0x6f, 0x12, 0x41,
	0x14, 0xc7, 0x43, 0x35, 0x4a, 0xa6, 0x2d, 0x6d, 0x5f, 0xc1, 0x96, 0xa1, 0x8d, 0x75, 0x34, 0x46,
	0x39, 0xb0, 0x5a, 0x6f, 0x35, 0xc6, 0x34, 0x6d, 0xc3, 0xa5, 0x56, 0x65, 0x9b, 0x18, 0xbd, 0x34,
	0xb3, 0xbb, 0xcf, 0x65, 0x03, 0xec, 0x0c, 0x3b, 0x83, 0x91, 0x10, 0x2e, 0x7e, 0x01, 0x0f, 0x7e,
	0x34, 0x0f, 0x7e, 0x01, 0x3f, 0x88, 0xd9, 0xd9, 0x05, 0x16, 0x58, 0xec, 0x8d, 0xf9, 0xbf, 0xf7,
	0x7e, 0xef, 0xfd, 0xff, 0x01, 0xc8, 0xa6, 0x2f, 0x54, 0x9b, 0x47, 0xd8, 0x90, 0x91, 0xd0, 0x02,
	0xd6, 0xa4, 0x43, 0x37, 0x5c, 0xd1, 0xeb, 0x89, 0x30, 0x51, 0xe8, 0x4e, 0x8f, 0x47, 0x1d, 0xd4,
	0x37, 0x1e, 0xd7, 0x3c, 0x95, 0x0e, 0x7c, 0x21, 0xfc, 0x2e, 0x5a, 0x5c, 0x06, 0x16, 0x0f, 0x43,
	0xa1, 0xb9, 0x0e, 0x44, 0xa8, 0xd2, 0x6a, 0x49, 0xe9, 0x88, 0x6b, 0xf4, 0x87, 0xe9, 0x7b, 0x53,
	0x47, 0xdc, 0x0b, 0x42, 0x3f, 0x79, 0xb2, 0x3d, 0x52, 0x69, 0x61, 0xdf, 0xb6, 0x2f, 0x6c, 0x2d,
	0xdc, 0xce, 0x7b, 0x19, 0x8f, 0x5e, 0x06, 0x4a, 0xb3, 0xb7, 0xa4, 0xd2, 0x52, 0x72, 0xb9, 0x00,
	0x4f, 0xc9, 0xdd, 0x6e, 0xa0, 0xf4, 0x7e, 0xe1, 0xe8, 0xce, 0xb3, 0xf5, 0x63, 0x68, 0x48, 0xa7,
	0x31, 0xdf, 0xd5, 0x32, 0xf5, 0xe3, 0x3f, 0x45, 0x72, 0xbf, 0x29, 0xec, 0xd8, 0x0d, 0xf4, 0x49,
	0xf1, 0x92, 0x2b, 0x7d, 0x1d, 0xb8, 0x1d, 0x20, 0x66, 0x62, 0xd8, 0x73, 0x44, 0x97, 0x3e, 0x88,
	0x3f, 0xbf, 0x33, 0x8e, 0xce, 0xb9, 0xe6, 0x76, 0xc8, 0xa5, 0x6a, 0x0b, 0xcd, 0x4e, 0x7f, 0xfc,
	0xfe, 0xfb, 0x6b, 0xed, 0x35, 0xdb, 0x36, 0xa6, 0xbe, 0xbd, 0xb4, 0xba, 0xe9, 0xf4, 0x49, 0xa1,
	0xfe, 0xe5, 0x09, 0xb0, 0x45, 0xd9, 0x1a, 0xe1, 0x77, 0xb7, 0xcd, 0x43, 0x1f, 0xc7, 0xd6, 0xc8,
	0x15, 0x1e, 0x8e, 0xe1, 0x67, 0x81, 0x40, 0xce, 0xf5, 0xd5, 0x78, 0x63, 0xae, 0x63, 0x9a, 0x94,
	0xf2, 0x3c, 0xb3, 0x33, 0x73, 0xcf, 0x1b, 0x46, 0x27, 0x8b, 0x95, 0xc2, 0x85, 0x9e, 0xf8, 0xb2,
	0x03, 0xf8, 0x4f, 0x03, 0x48, 0xb2, 0x6b, 0x0f, 0x1c, 0xe5, 0x46, 0x81, 0x83, 0x33, 0xcf, 0x40,
	0x27, 0x17, 0x2d, 0xd7, 0x56, 0xe6, 0xf3, 0xd8, 0xdc, 0x73, 0x08, 0xb5, 0xe9, 0xba, 0xe5, 0xe1,
	0x17, 0x05, 0xf8, 0x4a, 0x8a, 0x1f, 0x06, 0xaa, 0x6d, 0x62, 0x5f, 0x81, 0xa2, 0x3b, 0xb1, 0x7e,
	0xd1, 0x93, 0x7a, 0xd8, 0x42, 0x25, 0x45, 0xa8, 0x90, 0x59, 0x86, 0xfe, 0x7c, 0x96, 0xbe, 0x4c,
	0x21, 0xb1, 0x47, 0x80, 0x25, 0x19, 0x3e, 0x92, 0xad, 0x26, 0x6a, 0x3b, 0xfd, 0xa2, 0x19, 0xb3,
	0xdb, 0x19, 0x6c, 0x7f, 0x80, 0x4a, 0x53, 0xa3, 0x64, 0x7b, 0x18, 0x35, 0x7b, 0xca, 0x00, 0x53,
	0x17, 0x49, 0x35, 0x40, 0x05, 0x57, 0x64, 0x3d, 0x83, 0x04, 0x48, 0x43, 0xca, 0x68, 0x74, 0x23,
	0x0b, 0x64, 0x87, 0x06, 0xb6, 0x07, 0x95, 0x05, 0xd8, 0xd0, 0x1a, 0x05, 0xde, 0x18, 0xae, 0x48,
	0xe9, 0x2c, 0x42, 0xae, 0x71, 0x8a, 0x9c, 0x1b, 0xcf, 0x8b, 0xa1, 0x66, 0x88, 0x95, 0x59, 0x0c,
	0x13, 0xe2, 0x49, 0xa1, 0x0e, 0x9f, 0x49, 0xe9, 0x1c, 0xbb, 0x98, 0xe1, 0x55, 0xd2, 0x13, 0xe7,
	0xe5, 0x3c, 0x70, 0x7a, 0x6a, 0x7d, 0xc5, 0xa9, 0x37, 0x64, 0xb7, 0x89, 0xfa, 0x3a, 0xf9, 0x99,
	0xb6, 0xc4, 0x40, 0xe3, 0x8a, 0x44, 0xcb, 0xb1, 0xb2, 0xd8, 0xc7, 0x8e, 0x0c, 0x9d, 0xc2, 0xfe,
	0x84, 0xae, 0x17, 0x49, 0x9f, 0xc8, 0xd6, 0xa9, 0xe7, 0x65, 0x07, 0x13, 0x78, 0x56, 0xc9, 0xbb,
	0xfb, 0xa1, 0x21, 0x57, 0x59, 0x39, 0x8f, 0x1c, 0x87, 0x82, 0x04, 0x12, 0xf7, 0x73, 0xec, 0xea,
	0x5c, 0x30, 0xb7, 0x2d, 0x79, 0x64, 0x96, 0xd4, 0xea, 0xd5, 0xbc, 0x25, 0x26, 0x20, 0xe7, 0x9e,
	0xf9, 0xeb, 0x7a, 0xf5, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x88, 0x2b, 0x92, 0x42, 0x2d, 0x05, 0x00,
	0x00,
}
