// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goshare.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReqSSEStockOptionList struct {
}

func (m *ReqSSEStockOptionList) Reset()                    { *m = ReqSSEStockOptionList{} }
func (m *ReqSSEStockOptionList) String() string            { return proto.CompactTextString(m) }
func (*ReqSSEStockOptionList) ProtoMessage()               {}
func (*ReqSSEStockOptionList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type RspSSEStockOptionList struct {
	List []*SSEStockOption `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *RspSSEStockOptionList) Reset()                    { *m = RspSSEStockOptionList{} }
func (m *RspSSEStockOptionList) String() string            { return proto.CompactTextString(m) }
func (*RspSSEStockOptionList) ProtoMessage()               {}
func (*RspSSEStockOptionList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *RspSSEStockOptionList) GetList() []*SSEStockOption {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqSSEStockOptionList)(nil), "pb.ReqSSEStockOptionList")
	proto.RegisterType((*RspSSEStockOptionList)(nil), "pb.RspSSEStockOptionList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoShare service

type GoShareClient interface {
	// GetLastTick 获取最新行情
	LastTick(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (*MarketDataSnapshot, error)
	SSEStockOptionList(ctx context.Context, in *ReqSSEStockOptionList, opts ...grpc.CallOption) (*RspSSEStockOptionList, error)
	TickStream(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (GoShare_TickStreamClient, error)
}

type goShareClient struct {
	cc *grpc.ClientConn
}

func NewGoShareClient(cc *grpc.ClientConn) GoShareClient {
	return &goShareClient{cc}
}

func (c *goShareClient) LastTick(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (*MarketDataSnapshot, error) {
	out := new(MarketDataSnapshot)
	err := grpc.Invoke(ctx, "/pb.GoShare/LastTick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) SSEStockOptionList(ctx context.Context, in *ReqSSEStockOptionList, opts ...grpc.CallOption) (*RspSSEStockOptionList, error) {
	out := new(RspSSEStockOptionList)
	err := grpc.Invoke(ctx, "/pb.GoShare/SSEStockOptionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) TickStream(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (GoShare_TickStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GoShare_serviceDesc.Streams[0], c.cc, "/pb.GoShare/TickStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &goShareTickStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoShare_TickStreamClient interface {
	Recv() (*MarketDataSnapshot, error)
	grpc.ClientStream
}

type goShareTickStreamClient struct {
	grpc.ClientStream
}

func (x *goShareTickStreamClient) Recv() (*MarketDataSnapshot, error) {
	m := new(MarketDataSnapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GoShare service

type GoShareServer interface {
	// GetLastTick 获取最新行情
	LastTick(context.Context, *Symbol) (*MarketDataSnapshot, error)
	SSEStockOptionList(context.Context, *ReqSSEStockOptionList) (*RspSSEStockOptionList, error)
	TickStream(*Symbol, GoShare_TickStreamServer) error
}

func RegisterGoShareServer(s *grpc.Server, srv GoShareServer) {
	s.RegisterService(&_GoShare_serviceDesc, srv)
}

func _GoShare_LastTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Symbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).LastTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/LastTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).LastTick(ctx, req.(*Symbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_SSEStockOptionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSSEStockOptionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).SSEStockOptionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoShare/SSEStockOptionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).SSEStockOptionList(ctx, req.(*ReqSSEStockOptionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_TickStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Symbol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoShareServer).TickStream(m, &goShareTickStreamServer{stream})
}

type GoShare_TickStreamServer interface {
	Send(*MarketDataSnapshot) error
	grpc.ServerStream
}

type goShareTickStreamServer struct {
	grpc.ServerStream
}

func (x *goShareTickStreamServer) Send(m *MarketDataSnapshot) error {
	return x.ServerStream.SendMsg(m)
}

var _GoShare_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GoShare",
	HandlerType: (*GoShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastTick",
			Handler:    _GoShare_LastTick_Handler,
		},
		{
			MethodName: "SSEStockOptionList",
			Handler:    _GoShare_SSEStockOptionList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TickStream",
			Handler:       _GoShare_TickStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "goshare.proto",
}

func init() { proto.RegisterFile("goshare.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x4a, 0x33, 0x31,
	0x14, 0x86, 0x99, 0x7e, 0x1f, 0x2a, 0xb1, 0x8a, 0x06, 0x5a, 0xeb, 0x20, 0x52, 0x66, 0x21, 0xe2,
	0xa2, 0xa3, 0x2d, 0x2e, 0xd4, 0x85, 0x1b, 0x45, 0x90, 0x8a, 0xd0, 0xb8, 0x72, 0x23, 0x67, 0xa6,
	0x61, 0x1a, 0x3a, 0x93, 0x13, 0x27, 0x07, 0x51, 0x4a, 0x37, 0x6e, 0xbc, 0x00, 0xef, 0xca, 0xad,
	0xb7, 0xe0, 0x85, 0x48, 0xd2, 0x22, 0xfe, 0x54, 0x70, 0x17, 0xce, 0x93, 0x93, 0xf7, 0x79, 0x09,
	0x5b, 0xca, 0xd0, 0x0e, 0xa0, 0x94, 0x2d, 0x53, 0x22, 0x21, 0xaf, 0x98, 0x24, 0xac, 0xa6, 0x58,
	0x14, 0xa8, 0x27, 0x93, 0x70, 0xb5, 0x80, 0x72, 0x28, 0xe9, 0xa6, 0x0f, 0x04, 0xd3, 0xd1, 0x46,
	0x86, 0x98, 0xe5, 0x32, 0x06, 0xa3, 0x62, 0xd0, 0x1a, 0x09, 0x48, 0xa1, 0xb6, 0x13, 0x1a, 0xad,
	0xb1, 0x5a, 0x4f, 0xde, 0x0a, 0x71, 0x2a, 0x08, 0xd3, 0xe1, 0xa5, 0x71, 0xac, 0xab, 0x2c, 0x45,
	0xc7, 0xac, 0xd6, 0xb3, 0xe6, 0x27, 0xe0, 0x5b, 0xec, 0x7f, 0xae, 0x2c, 0x35, 0x82, 0xe6, 0xbf,
	0xed, 0xc5, 0x36, 0x6f, 0x99, 0xa4, 0xf5, 0xf5, 0x56, 0xcf, 0xf3, 0xf6, 0x4b, 0x85, 0xcd, 0x9f,
	0xa1, 0x70, 0xba, 0x5c, 0xb1, 0x85, 0x2e, 0x58, 0xba, 0x52, 0xe9, 0x90, 0x33, 0xbf, 0xf1, 0x50,
	0x24, 0x98, 0x87, 0x75, 0x77, 0xbe, 0xf0, 0xca, 0x27, 0x40, 0x20, 0x34, 0x18, 0x3b, 0x40, 0x8a,
	0x0e, 0x1e, 0x5f, 0xdf, 0x9e, 0x2b, 0x9d, 0xa8, 0x1a, 0xdf, 0xed, 0xc5, 0xf9, 0x74, 0xf3, 0x30,
	0xd8, 0xb9, 0x6e, 0xf2, 0xcd, 0xcf, 0xa3, 0x78, 0x24, 0xef, 0xd3, 0x01, 0xe8, 0x4c, 0x8e, 0xe3,
	0x51, 0x8a, 0x7d, 0x39, 0xe6, 0x4f, 0x01, 0xe3, 0x33, 0xac, 0xd7, 0x5d, 0xd2, 0xcc, 0xa6, 0xe1,
	0x04, 0xcd, 0xea, 0x1a, 0x1d, 0x79, 0x8f, 0xfd, 0xa8, 0xee, 0x42, 0xad, 0x95, 0xdf, 0xb8, 0x33,
	0x6a, 0xf0, 0x5f, 0x20, 0x3f, 0x67, 0xcc, 0x39, 0x0a, 0x2a, 0x25, 0x14, 0x7f, 0xaa, 0x5d, 0xf7,
	0x71, 0x2b, 0x7c, 0xd9, 0xbd, 0x48, 0x1f, 0xbb, 0xbb, 0x41, 0x32, 0xe7, 0x7f, 0xab, 0xf3, 0x1e,
	0x00, 0x00, 0xff, 0xff, 0x19, 0x71, 0xa3, 0x55, 0x01, 0x02, 0x00, 0x00,
}
