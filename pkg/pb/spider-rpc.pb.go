// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spider-rpc.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Spider service

type SpiderClient interface {
	GetNewsItemPage(ctx context.Context, in *NewsItemPage, opts ...grpc.CallOption) (*NewsItemPage, error)
	GetNewsDetail(ctx context.Context, in *NewsDetail, opts ...grpc.CallOption) (*NewsDetail, error)
}

type spiderClient struct {
	cc *grpc.ClientConn
}

func NewSpiderClient(cc *grpc.ClientConn) SpiderClient {
	return &spiderClient{cc}
}

func (c *spiderClient) GetNewsItemPage(ctx context.Context, in *NewsItemPage, opts ...grpc.CallOption) (*NewsItemPage, error) {
	out := new(NewsItemPage)
	err := grpc.Invoke(ctx, "/pb.Spider/GetNewsItemPage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderClient) GetNewsDetail(ctx context.Context, in *NewsDetail, opts ...grpc.CallOption) (*NewsDetail, error) {
	out := new(NewsDetail)
	err := grpc.Invoke(ctx, "/pb.Spider/GetNewsDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Spider service

type SpiderServer interface {
	GetNewsItemPage(context.Context, *NewsItemPage) (*NewsItemPage, error)
	GetNewsDetail(context.Context, *NewsDetail) (*NewsDetail, error)
}

func RegisterSpiderServer(s *grpc.Server, srv SpiderServer) {
	s.RegisterService(&_Spider_serviceDesc, srv)
}

func _Spider_GetNewsItemPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsItemPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderServer).GetNewsItemPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Spider/GetNewsItemPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderServer).GetNewsItemPage(ctx, req.(*NewsItemPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spider_GetNewsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderServer).GetNewsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Spider/GetNewsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderServer).GetNewsDetail(ctx, req.(*NewsDetail))
	}
	return interceptor(ctx, in, info, handler)
}

var _Spider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Spider",
	HandlerType: (*SpiderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewsItemPage",
			Handler:    _Spider_GetNewsItemPage_Handler,
		},
		{
			MethodName: "GetNewsDetail",
			Handler:    _Spider_GetNewsDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spider-rpc.proto",
}

func init() { proto.RegisterFile("spider-rpc.proto", fileDescriptorSpiderRpc) }

var fileDescriptorSpiderRpc = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x2e, 0xc8, 0x4c,
	0x49, 0x2d, 0xd2, 0x2d, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48,
	0x92, 0x12, 0x84, 0x8a, 0xe6, 0xa5, 0x96, 0x17, 0x43, 0x84, 0x8d, 0x4a, 0xb8, 0xd8, 0x82, 0xc1,
	0x82, 0x42, 0xe6, 0x5c, 0xfc, 0xee, 0xa9, 0x25, 0x7e, 0xa9, 0xe5, 0xc5, 0x9e, 0x25, 0xa9, 0xb9,
	0x01, 0x89, 0xe9, 0xa9, 0x42, 0x02, 0x7a, 0x05, 0x49, 0x7a, 0xc8, 0x22, 0x52, 0x18, 0x22, 0x4a,
	0x0c, 0x42, 0x86, 0x5c, 0xbc, 0x50, 0x8d, 0x2e, 0xa9, 0x25, 0x89, 0x99, 0x39, 0x42, 0x7c, 0x30,
	0x45, 0x10, 0xbe, 0x14, 0x1a, 0x5f, 0x89, 0xc1, 0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f,
	0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0xec, 0x1c, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x34, 0xaf, 0xf0, 0xb9, 0x00, 0x00, 0x00,
}
