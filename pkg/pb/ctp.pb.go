// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ctp.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 方向
type CTPDirection int32

const (
	CTPDirection_LONG  CTPDirection = 0
	CTPDirection_SHORT CTPDirection = 1
)

var CTPDirection_name = map[int32]string{
	0: "LONG",
	1: "SHORT",
}
var CTPDirection_value = map[string]int32{
	"LONG":  0,
	"SHORT": 1,
}

func (x CTPDirection) String() string {
	return proto.EnumName(CTPDirection_name, int32(x))
}
func (CTPDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// 状态
type CTPOrderStatus int32

const (
	// 完全成交
	CTPOrderStatus_DONE CTPOrderStatus = 0
	// 部分成交还在队列中
	CTPOrderStatus_PENDING_WITH_PARTIAL_DONE CTPOrderStatus = 1
	// 部分成交且已撤单
	CTPOrderStatus_CANCELED_WITH_PARTIAL_DONE CTPOrderStatus = 2
	// 队列中
	CTPOrderStatus_PENDING CTPOrderStatus = 3
	// 已经撤单
	CTPOrderStatus_CANCELED CTPOrderStatus = 4
	// 未知
	CTPOrderStatus_UNKOWN CTPOrderStatus = 5
)

var CTPOrderStatus_name = map[int32]string{
	0: "DONE",
	1: "PENDING_WITH_PARTIAL_DONE",
	2: "CANCELED_WITH_PARTIAL_DONE",
	3: "PENDING",
	4: "CANCELED",
	5: "UNKOWN",
}
var CTPOrderStatus_value = map[string]int32{
	"DONE":                       0,
	"PENDING_WITH_PARTIAL_DONE":  1,
	"CANCELED_WITH_PARTIAL_DONE": 2,
	"PENDING":                    3,
	"CANCELED":                   4,
	"UNKOWN":                     5,
}

func (x CTPOrderStatus) String() string {
	return proto.EnumName(CTPOrderStatus_name, int32(x))
}
func (CTPOrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type CTPPriceType int32

const (
	// 限价
	CTPPriceType_LIMIT_PRICE CTPPriceType = 0
	// 市价
	CTPPriceType_MARKET_PRICE CTPPriceType = 1
	// 最优价
	CTPPriceType_BEST_PRICE CTPPriceType = 2
	// 最新价
	CTPPriceType_LAST_PRICE CTPPriceType = 3
)

var CTPPriceType_name = map[int32]string{
	0: "LIMIT_PRICE",
	1: "MARKET_PRICE",
	2: "BEST_PRICE",
	3: "LAST_PRICE",
}
var CTPPriceType_value = map[string]int32{
	"LIMIT_PRICE":  0,
	"MARKET_PRICE": 1,
	"BEST_PRICE":   2,
	"LAST_PRICE":   3,
}

func (x CTPPriceType) String() string {
	return proto.EnumName(CTPPriceType_name, int32(x))
}
func (CTPPriceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type CTPOffsetFlag int32

const (
	CTPOffsetFlag_NONE CTPOffsetFlag = 0
	// 开仓
	CTPOffsetFlag_OPEN CTPOffsetFlag = 1
	// 平仓
	CTPOffsetFlag_CLOSE CTPOffsetFlag = 2
	// 强平
	CTPOffsetFlag_FORCE_CLOSE CTPOffsetFlag = 3
	// 平今
	CTPOffsetFlag_CLOSE_TODAY CTPOffsetFlag = 4
	// 平昨
	CTPOffsetFlag_CLOSE_YESTERDAY CTPOffsetFlag = 5
)

var CTPOffsetFlag_name = map[int32]string{
	0: "NONE",
	1: "OPEN",
	2: "CLOSE",
	3: "FORCE_CLOSE",
	4: "CLOSE_TODAY",
	5: "CLOSE_YESTERDAY",
}
var CTPOffsetFlag_value = map[string]int32{
	"NONE":            0,
	"OPEN":            1,
	"CLOSE":           2,
	"FORCE_CLOSE":     3,
	"CLOSE_TODAY":     4,
	"CLOSE_YESTERDAY": 5,
}

func (x CTPOffsetFlag) String() string {
	return proto.EnumName(CTPOffsetFlag_name, int32(x))
}
func (CTPOffsetFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

// 投机套保标志
type CTPHedgeType int32

const (
	// 投机
	CTPHedgeType_SPECULATION CTPHedgeType = 0
	// 套利
	CTPHedgeType_ARBITRAGE CTPHedgeType = 1
	// 套保
	CTPHedgeType_HEDGE CTPHedgeType = 2
)

var CTPHedgeType_name = map[int32]string{
	0: "SPECULATION",
	1: "ARBITRAGE",
	2: "HEDGE",
}
var CTPHedgeType_value = map[string]int32{
	"SPECULATION": 0,
	"ARBITRAGE":   1,
	"HEDGE":       2,
}

func (x CTPHedgeType) String() string {
	return proto.EnumName(CTPHedgeType_name, int32(x))
}
func (CTPHedgeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

// 成交类型
type CTPTradeType int32

const (
	// 普通成交
	CTPTradeType_NORMAL CTPTradeType = 0
	// 期权执行
	CTPTradeType_OPTIONS_EXECUTION CTPTradeType = 1
	// OTC成交
	CTPTradeType_OTC CTPTradeType = 2
	// 期转现衍生成交
	CTPTradeType_EFP_DERIVED CTPTradeType = 3
	// 组合衍生成交
	CTPTradeType_COMBINATION_DERIVED CTPTradeType = 4
	// 交割平仓
	CTPTradeType_DELIVERY_CLOSE CTPTradeType = 5
	// 结算衍生
	CTPTradeType_SETTLEMENT_DERIVED CTPTradeType = 6
	// 分红股票
	CTPTradeType_PLACEMENT_DERIVED CTPTradeType = 7
)

var CTPTradeType_name = map[int32]string{
	0: "NORMAL",
	1: "OPTIONS_EXECUTION",
	2: "OTC",
	3: "EFP_DERIVED",
	4: "COMBINATION_DERIVED",
	5: "DELIVERY_CLOSE",
	6: "SETTLEMENT_DERIVED",
	7: "PLACEMENT_DERIVED",
}
var CTPTradeType_value = map[string]int32{
	"NORMAL":              0,
	"OPTIONS_EXECUTION":   1,
	"OTC":                 2,
	"EFP_DERIVED":         3,
	"COMBINATION_DERIVED": 4,
	"DELIVERY_CLOSE":      5,
	"SETTLEMENT_DERIVED":  6,
	"PLACEMENT_DERIVED":   7,
}

func (x CTPTradeType) String() string {
	return proto.EnumName(CTPTradeType_name, int32(x))
}
func (CTPTradeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

// 报单ID
type CTPOrderID struct {
	FrontId   int64  `protobuf:"varint,1,opt,name=front_id,json=frontId" json:"front_id,omitempty"`
	SessionId int64  `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	OrderRef  int64  `protobuf:"varint,3,opt,name=order_ref,json=orderRef" json:"order_ref,omitempty"`
	StringId  string `protobuf:"bytes,4,opt,name=string_id,json=stringId" json:"string_id,omitempty"`
}

func (m *CTPOrderID) Reset()                    { *m = CTPOrderID{} }
func (m *CTPOrderID) String() string            { return proto.CompactTextString(m) }
func (*CTPOrderID) ProtoMessage()               {}
func (*CTPOrderID) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CTPOrderID) GetFrontId() int64 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *CTPOrderID) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CTPOrderID) GetOrderRef() int64 {
	if m != nil {
		return m.OrderRef
	}
	return 0
}

func (m *CTPOrderID) GetStringId() string {
	if m != nil {
		return m.StringId
	}
	return ""
}

// 委托
type CTPOrder struct {
	// 合约
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// ID
	Id *CTPOrderID `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// 账号
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// 方向
	Direction CTPDirection `protobuf:"varint,4,opt,name=direction,enum=pb.CTPDirection" json:"direction,omitempty"`
	// 状态
	Status CTPOrderStatus `protobuf:"varint,5,opt,name=status,enum=pb.CTPOrderStatus" json:"status,omitempty"`
	// 价格类型
	PriceType CTPPriceType `protobuf:"varint,6,opt,name=price_type,json=priceType,enum=pb.CTPPriceType" json:"price_type,omitempty"`
	// 限价
	LimitPrice float64 `protobuf:"fixed64,7,opt,name=limit_price,json=limitPrice" json:"limit_price,omitempty"`
	// 数量
	Volume int32 `protobuf:"varint,8,opt,name=volume" json:"volume,omitempty"`
	// 成交数量
	VolumeTraded int32 `protobuf:"varint,9,opt,name=volume_traded,json=volumeTraded" json:"volume_traded,omitempty"`
	// 撤单数量
	VolumeCanceled int32 `protobuf:"varint,10,opt,name=volume_canceled,json=volumeCanceled" json:"volume_canceled,omitempty"`
	// 冻结手续费
	FrozenCommission float64 `protobuf:"fixed64,11,opt,name=frozen_commission,json=frozenCommission" json:"frozen_commission,omitempty"`
	// 发送时间（成交时间)
	SendOrderTime int64 `protobuf:"varint,12,opt,name=send_order_time,json=sendOrderTime" json:"send_order_time,omitempty"`
	// 交易日
	SendOrderTradingDay int32 `protobuf:"varint,13,opt,name=send_order_trading_day,json=sendOrderTradingDay" json:"send_order_trading_day,omitempty"`
	// 备注
	Comment string `protobuf:"bytes,14,opt,name=comment" json:"comment,omitempty"`
	// 请求编号
	RequestId int32 `protobuf:"varint,15,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// 序号
	LocalOrderSeq int32 `protobuf:"varint,16,opt,name=local_order_seq,json=localOrderSeq" json:"local_order_seq,omitempty"`
	// 强平类型
	ForceCloseType int32 `protobuf:"varint,17,opt,name=force_close_type,json=forceCloseType" json:"force_close_type,omitempty"`
	// 来源
	OrderSourceType int32 `protobuf:"varint,18,opt,name=order_source_type,json=orderSourceType" json:"order_source_type,omitempty"`
	// 投机套保类型
	OrderHedgeType CTPHedgeType `protobuf:"varint,19,opt,name=order_hedge_type,json=orderHedgeType,enum=pb.CTPHedgeType" json:"order_hedge_type,omitempty"`
	// 产品标识
	UserProductInfo string `protobuf:"bytes,20,opt,name=user_product_info,json=userProductInfo" json:"user_product_info,omitempty"`
	// 币种
	CurrencyType CurrencyType `protobuf:"varint,21,opt,name=currency_type,json=currencyType,enum=pb.CurrencyType" json:"currency_type,omitempty"`
	// 交易所ID
	ExchangeOrderId string `protobuf:"bytes,22,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`
	// 有效期类型
	TimeConditionType int32 `protobuf:"varint,23,opt,name=time_condition_type,json=timeConditionType" json:"time_condition_type,omitempty"`
	// 主帐户
	RouteAccountId string `protobuf:"bytes,24,opt,name=route_account_id,json=routeAccountId" json:"route_account_id,omitempty"`
	// 本地编号类型
	LocalTypeId int32 `protobuf:"varint,25,opt,name=local_type_id,json=localTypeId" json:"local_type_id,omitempty"`
	// 委托收费
	Commission float64 `protobuf:"fixed64,26,opt,name=commission" json:"commission,omitempty"`
	// 开平标志
	OffsetFlag CTPOffsetFlag `protobuf:"varint,27,opt,name=offset_flag,json=offsetFlag,enum=pb.CTPOffsetFlag" json:"offset_flag,omitempty"`
	// 错误代码
	ErrorCode int32 `protobuf:"varint,28,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// token
	Token string `protobuf:"bytes,29,opt,name=token" json:"token,omitempty"`
	// 止损
	Stoploss float64 `protobuf:"fixed64,30,opt,name=stoploss" json:"stoploss,omitempty"`
	// 止赢
	TakeProfit float64 `protobuf:"fixed64,31,opt,name=take_profit,json=takeProfit" json:"take_profit,omitempty"`
	// 成交金额
	TradedAmount float64 `protobuf:"fixed64,32,opt,name=traded_amount,json=tradedAmount" json:"traded_amount,omitempty"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,33,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// 产品
	ProductId *ProductID `protobuf:"bytes,34,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	// 最小变动价位
	PriceTick float64 `protobuf:"fixed64,35,opt,name=price_tick,json=priceTick" json:"price_tick,omitempty"`
	// 冻结合计
	FrozenMargin float64 `protobuf:"fixed64,36,opt,name=frozen_margin,json=frozenMargin" json:"frozen_margin,omitempty"`
	// 合约名称
	SymbolName string `protobuf:"bytes,37,opt,name=symbol_name,json=symbolName" json:"symbol_name,omitempty"`
	// 发送原因备注
	ReasonComment string `protobuf:"bytes,38,opt,name=reason_comment,json=reasonComment" json:"reason_comment,omitempty"`
}

func (m *CTPOrder) Reset()                    { *m = CTPOrder{} }
func (m *CTPOrder) String() string            { return proto.CompactTextString(m) }
func (*CTPOrder) ProtoMessage()               {}
func (*CTPOrder) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CTPOrder) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPOrder) GetId() *CTPOrderID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CTPOrder) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CTPOrder) GetDirection() CTPDirection {
	if m != nil {
		return m.Direction
	}
	return CTPDirection_LONG
}

func (m *CTPOrder) GetStatus() CTPOrderStatus {
	if m != nil {
		return m.Status
	}
	return CTPOrderStatus_DONE
}

func (m *CTPOrder) GetPriceType() CTPPriceType {
	if m != nil {
		return m.PriceType
	}
	return CTPPriceType_LIMIT_PRICE
}

func (m *CTPOrder) GetLimitPrice() float64 {
	if m != nil {
		return m.LimitPrice
	}
	return 0
}

func (m *CTPOrder) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *CTPOrder) GetVolumeTraded() int32 {
	if m != nil {
		return m.VolumeTraded
	}
	return 0
}

func (m *CTPOrder) GetVolumeCanceled() int32 {
	if m != nil {
		return m.VolumeCanceled
	}
	return 0
}

func (m *CTPOrder) GetFrozenCommission() float64 {
	if m != nil {
		return m.FrozenCommission
	}
	return 0
}

func (m *CTPOrder) GetSendOrderTime() int64 {
	if m != nil {
		return m.SendOrderTime
	}
	return 0
}

func (m *CTPOrder) GetSendOrderTradingDay() int32 {
	if m != nil {
		return m.SendOrderTradingDay
	}
	return 0
}

func (m *CTPOrder) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *CTPOrder) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CTPOrder) GetLocalOrderSeq() int32 {
	if m != nil {
		return m.LocalOrderSeq
	}
	return 0
}

func (m *CTPOrder) GetForceCloseType() int32 {
	if m != nil {
		return m.ForceCloseType
	}
	return 0
}

func (m *CTPOrder) GetOrderSourceType() int32 {
	if m != nil {
		return m.OrderSourceType
	}
	return 0
}

func (m *CTPOrder) GetOrderHedgeType() CTPHedgeType {
	if m != nil {
		return m.OrderHedgeType
	}
	return CTPHedgeType_SPECULATION
}

func (m *CTPOrder) GetUserProductInfo() string {
	if m != nil {
		return m.UserProductInfo
	}
	return ""
}

func (m *CTPOrder) GetCurrencyType() CurrencyType {
	if m != nil {
		return m.CurrencyType
	}
	return CurrencyType_CNY
}

func (m *CTPOrder) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

func (m *CTPOrder) GetTimeConditionType() int32 {
	if m != nil {
		return m.TimeConditionType
	}
	return 0
}

func (m *CTPOrder) GetRouteAccountId() string {
	if m != nil {
		return m.RouteAccountId
	}
	return ""
}

func (m *CTPOrder) GetLocalTypeId() int32 {
	if m != nil {
		return m.LocalTypeId
	}
	return 0
}

func (m *CTPOrder) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *CTPOrder) GetOffsetFlag() CTPOffsetFlag {
	if m != nil {
		return m.OffsetFlag
	}
	return CTPOffsetFlag_NONE
}

func (m *CTPOrder) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CTPOrder) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CTPOrder) GetStoploss() float64 {
	if m != nil {
		return m.Stoploss
	}
	return 0
}

func (m *CTPOrder) GetTakeProfit() float64 {
	if m != nil {
		return m.TakeProfit
	}
	return 0
}

func (m *CTPOrder) GetTradedAmount() float64 {
	if m != nil {
		return m.TradedAmount
	}
	return 0
}

func (m *CTPOrder) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *CTPOrder) GetProductId() *ProductID {
	if m != nil {
		return m.ProductId
	}
	return nil
}

func (m *CTPOrder) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *CTPOrder) GetFrozenMargin() float64 {
	if m != nil {
		return m.FrozenMargin
	}
	return 0
}

func (m *CTPOrder) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *CTPOrder) GetReasonComment() string {
	if m != nil {
		return m.ReasonComment
	}
	return ""
}

type CTPOrderList struct {
	List []*CTPOrder `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CTPOrderList) Reset()                    { *m = CTPOrderList{} }
func (m *CTPOrderList) String() string            { return proto.CompactTextString(m) }
func (*CTPOrderList) ProtoMessage()               {}
func (*CTPOrderList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CTPOrderList) GetList() []*CTPOrder {
	if m != nil {
		return m.List
	}
	return nil
}

type JointOrder struct {
	LocalOrder    *CTPOrder `protobuf:"bytes,1,opt,name=local_order,json=localOrder" json:"local_order,omitempty"`
	ExchangeOrder *CTPOrder `protobuf:"bytes,2,opt,name=exchange_order,json=exchangeOrder" json:"exchange_order,omitempty"`
}

func (m *JointOrder) Reset()                    { *m = JointOrder{} }
func (m *JointOrder) String() string            { return proto.CompactTextString(m) }
func (*JointOrder) ProtoMessage()               {}
func (*JointOrder) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *JointOrder) GetLocalOrder() *CTPOrder {
	if m != nil {
		return m.LocalOrder
	}
	return nil
}

func (m *JointOrder) GetExchangeOrder() *CTPOrder {
	if m != nil {
		return m.ExchangeOrder
	}
	return nil
}

type CTPOrderLink struct {
	Parent   *CTPOrder   `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Children []*CTPOrder `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
}

func (m *CTPOrderLink) Reset()                    { *m = CTPOrderLink{} }
func (m *CTPOrderLink) String() string            { return proto.CompactTextString(m) }
func (*CTPOrderLink) ProtoMessage()               {}
func (*CTPOrderLink) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CTPOrderLink) GetParent() *CTPOrder {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CTPOrderLink) GetChildren() []*CTPOrder {
	if m != nil {
		return m.Children
	}
	return nil
}

// 发送撤单请求
type CTPCancelOrderRequest struct {
	// 帐户
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// 委托编号
	CTPOrderID *CTPOrderID `protobuf:"bytes,2,opt,name=CTPOrderID" json:"CTPOrderID,omitempty"`
	// 合约
	Symbol *Symbol `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
	// 请求id
	RequestId int32 `protobuf:"varint,4,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// 发起前置
	FrontId int32 `protobuf:"varint,5,opt,name=front_id,json=frontId" json:"front_id,omitempty"`
	// 发起session
	SessionId int32 `protobuf:"varint,6,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// 发起终端信息
	ExchangeOrderId string `protobuf:"bytes,7,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`
	// token
	Token string `protobuf:"bytes,8,opt,name=token" json:"token,omitempty"`
	// router account id
	RouteAccountId string `protobuf:"bytes,9,opt,name=route_account_id,json=routeAccountId" json:"route_account_id,omitempty"`
}

func (m *CTPCancelOrderRequest) Reset()                    { *m = CTPCancelOrderRequest{} }
func (m *CTPCancelOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*CTPCancelOrderRequest) ProtoMessage()               {}
func (*CTPCancelOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CTPCancelOrderRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CTPCancelOrderRequest) GetCTPOrderID() *CTPOrderID {
	if m != nil {
		return m.CTPOrderID
	}
	return nil
}

func (m *CTPCancelOrderRequest) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPCancelOrderRequest) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CTPCancelOrderRequest) GetFrontId() int32 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *CTPCancelOrderRequest) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CTPCancelOrderRequest) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

func (m *CTPCancelOrderRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CTPCancelOrderRequest) GetRouteAccountId() string {
	if m != nil {
		return m.RouteAccountId
	}
	return ""
}

type CTPOnRtnCancelOrder struct {
	AccountId       string      `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	OrderId         *CTPOrderID `protobuf:"bytes,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ExchangeOrderId string      `protobuf:"bytes,3,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`
	Symbol          *Symbol     `protobuf:"bytes,4,opt,name=symbol" json:"symbol,omitempty"`
	RequestId       int32       `protobuf:"varint,5,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	ErrorType       int32       `protobuf:"varint,6,opt,name=error_type,json=errorType" json:"error_type,omitempty"`
	Error           int32       `protobuf:"varint,7,opt,name=error" json:"error,omitempty"`
	Msg             string      `protobuf:"bytes,8,opt,name=msg" json:"msg,omitempty"`
	RouteAccountId  string      `protobuf:"bytes,9,opt,name=route_account_id,json=routeAccountId" json:"route_account_id,omitempty"`
}

func (m *CTPOnRtnCancelOrder) Reset()                    { *m = CTPOnRtnCancelOrder{} }
func (m *CTPOnRtnCancelOrder) String() string            { return proto.CompactTextString(m) }
func (*CTPOnRtnCancelOrder) ProtoMessage()               {}
func (*CTPOnRtnCancelOrder) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *CTPOnRtnCancelOrder) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CTPOnRtnCancelOrder) GetOrderId() *CTPOrderID {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *CTPOnRtnCancelOrder) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

func (m *CTPOnRtnCancelOrder) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPOnRtnCancelOrder) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CTPOnRtnCancelOrder) GetErrorType() int32 {
	if m != nil {
		return m.ErrorType
	}
	return 0
}

func (m *CTPOnRtnCancelOrder) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *CTPOnRtnCancelOrder) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CTPOnRtnCancelOrder) GetRouteAccountId() string {
	if m != nil {
		return m.RouteAccountId
	}
	return ""
}

// 成交
type CTPTradeReport struct {
	// 账号
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// 成交编号
	TradeId string `protobuf:"bytes,2,opt,name=trade_id,json=tradeId" json:"trade_id,omitempty"`
	// 合约
	Symbol *Symbol `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
	// 买卖
	Direction CTPDirection `protobuf:"varint,4,opt,name=direction,enum=pb.CTPDirection" json:"direction,omitempty"`
	// 价格
	Price float64 `protobuf:"fixed64,5,opt,name=price" json:"price,omitempty"`
	// 数量
	Volume int32 `protobuf:"varint,6,opt,name=volume" json:"volume,omitempty"`
	// 时间
	TradedTime int64 `protobuf:"varint,7,opt,name=traded_time,json=tradedTime" json:"traded_time,omitempty"`
	// 交易日
	TradedTradingDay int32 `protobuf:"varint,8,opt,name=traded_trading_day,json=tradedTradingDay" json:"traded_trading_day,omitempty"`
	// 报单编号
	OrderId *CTPOrderID `protobuf:"bytes,9,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// 类型
	PriceType CTPPriceType `protobuf:"varint,10,opt,name=price_type,json=priceType,enum=pb.CTPPriceType" json:"price_type,omitempty"`
	// 投机套保
	HedgeType CTPHedgeType `protobuf:"varint,11,opt,name=hedge_type,json=hedgeType,enum=pb.CTPHedgeType" json:"hedge_type,omitempty"`
	// 成交类型
	TradeType CTPTradeType `protobuf:"varint,12,opt,name=trade_type,json=tradeType,enum=pb.CTPTradeType" json:"trade_type,omitempty"`
	// 币种
	CurrencyType int32 `protobuf:"varint,13,opt,name=currency_type,json=currencyType" json:"currency_type,omitempty"`
	// 交易所ID
	ExchangeOrderId string `protobuf:"bytes,14,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`
	// 本地编号类型
	LocalTypeId int32 `protobuf:"varint,15,opt,name=local_type_id,json=localTypeId" json:"local_type_id,omitempty"`
	// 手续费
	Commission float64 `protobuf:"fixed64,16,opt,name=commission" json:"commission,omitempty"`
	// 成交金额
	Tax float64 `protobuf:"fixed64,17,opt,name=tax" json:"tax,omitempty"`
	// 其他费用
	TotalOtherFee float64 `protobuf:"fixed64,18,opt,name=total_other_fee,json=totalOtherFee" json:"total_other_fee,omitempty"`
	// 原成交价（结算衍生时)
	InitialTradedPrice float64 `protobuf:"fixed64,19,opt,name=initial_traded_price,json=initialTradedPrice" json:"initial_traded_price,omitempty"`
	// 保留附加金额(已经有用了的)
	Reserve float64 `protobuf:"fixed64,20,opt,name=reserve" json:"reserve,omitempty"`
	// 开平标志
	OffsetFlag CTPOffsetFlag `protobuf:"varint,21,opt,name=offset_flag,json=offsetFlag,enum=pb.CTPOffsetFlag" json:"offset_flag,omitempty"`
	// 下单帐户
	RouteAccountId string `protobuf:"bytes,22,opt,name=route_account_id,json=routeAccountId" json:"route_account_id,omitempty"`
	// 名称
	SymbolName string `protobuf:"bytes,23,opt,name=symbol_name,json=symbolName" json:"symbol_name,omitempty"`
	// 变动点
	PriceTick float64 `protobuf:"fixed64,24,opt,name=price_tick,json=priceTick" json:"price_tick,omitempty"`
}

func (m *CTPTradeReport) Reset()                    { *m = CTPTradeReport{} }
func (m *CTPTradeReport) String() string            { return proto.CompactTextString(m) }
func (*CTPTradeReport) ProtoMessage()               {}
func (*CTPTradeReport) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *CTPTradeReport) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CTPTradeReport) GetTradeId() string {
	if m != nil {
		return m.TradeId
	}
	return ""
}

func (m *CTPTradeReport) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPTradeReport) GetDirection() CTPDirection {
	if m != nil {
		return m.Direction
	}
	return CTPDirection_LONG
}

func (m *CTPTradeReport) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CTPTradeReport) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *CTPTradeReport) GetTradedTime() int64 {
	if m != nil {
		return m.TradedTime
	}
	return 0
}

func (m *CTPTradeReport) GetTradedTradingDay() int32 {
	if m != nil {
		return m.TradedTradingDay
	}
	return 0
}

func (m *CTPTradeReport) GetOrderId() *CTPOrderID {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *CTPTradeReport) GetPriceType() CTPPriceType {
	if m != nil {
		return m.PriceType
	}
	return CTPPriceType_LIMIT_PRICE
}

func (m *CTPTradeReport) GetHedgeType() CTPHedgeType {
	if m != nil {
		return m.HedgeType
	}
	return CTPHedgeType_SPECULATION
}

func (m *CTPTradeReport) GetTradeType() CTPTradeType {
	if m != nil {
		return m.TradeType
	}
	return CTPTradeType_NORMAL
}

func (m *CTPTradeReport) GetCurrencyType() int32 {
	if m != nil {
		return m.CurrencyType
	}
	return 0
}

func (m *CTPTradeReport) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

func (m *CTPTradeReport) GetLocalTypeId() int32 {
	if m != nil {
		return m.LocalTypeId
	}
	return 0
}

func (m *CTPTradeReport) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *CTPTradeReport) GetTax() float64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *CTPTradeReport) GetTotalOtherFee() float64 {
	if m != nil {
		return m.TotalOtherFee
	}
	return 0
}

func (m *CTPTradeReport) GetInitialTradedPrice() float64 {
	if m != nil {
		return m.InitialTradedPrice
	}
	return 0
}

func (m *CTPTradeReport) GetReserve() float64 {
	if m != nil {
		return m.Reserve
	}
	return 0
}

func (m *CTPTradeReport) GetOffsetFlag() CTPOffsetFlag {
	if m != nil {
		return m.OffsetFlag
	}
	return CTPOffsetFlag_NONE
}

func (m *CTPTradeReport) GetRouteAccountId() string {
	if m != nil {
		return m.RouteAccountId
	}
	return ""
}

func (m *CTPTradeReport) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *CTPTradeReport) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

type CTPTradeReportList struct {
	List []*CTPTradeReport `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CTPTradeReportList) Reset()                    { *m = CTPTradeReportList{} }
func (m *CTPTradeReportList) String() string            { return proto.CompactTextString(m) }
func (*CTPTradeReportList) ProtoMessage()               {}
func (*CTPTradeReportList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *CTPTradeReportList) GetList() []*CTPTradeReport {
	if m != nil {
		return m.List
	}
	return nil
}

// 持仓统计
type CTPPositionSummation struct {
	// 方向
	Direction CTPDirection `protobuf:"varint,1,opt,name=direction,enum=pb.CTPDirection" json:"direction,omitempty"`
	// 类型
	Type int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	// 路由分组
	RouteAccountId string `protobuf:"bytes,3,opt,name=route_account_id,json=routeAccountId" json:"route_account_id,omitempty"`
	// 持仓
	Position int32 `protobuf:"varint,4,opt,name=position" json:"position,omitempty"`
	// 金额
	Amount float64 `protobuf:"fixed64,5,opt,name=amount" json:"amount,omitempty"`
	// 成本
	Cost float64 `protobuf:"fixed64,6,opt,name=cost" json:"cost,omitempty"`
	// 冻结
	Frozen int32 `protobuf:"varint,7,opt,name=frozen" json:"frozen,omitempty"`
	// 可用
	Available int32 `protobuf:"varint,8,opt,name=available" json:"available,omitempty"`
	// 盈亏
	PositionProfit float64 `protobuf:"fixed64,9,opt,name=position_profit,json=positionProfit" json:"position_profit,omitempty"`
	// 平盈
	ClosedProfit float64 `protobuf:"fixed64,10,opt,name=closed_profit,json=closedProfit" json:"closed_profit,omitempty"`
	// 保证金
	Margin float64 `protobuf:"fixed64,11,opt,name=margin" json:"margin,omitempty"`
	// 冻结保证金
	FrozenMargin float64 `protobuf:"fixed64,12,opt,name=frozen_margin,json=frozenMargin" json:"frozen_margin,omitempty"`
	// 手续费
	Commission float64 `protobuf:"fixed64,13,opt,name=commission" json:"commission,omitempty"`
	// 冻结手续费
	FrozenCommission float64 `protobuf:"fixed64,14,opt,name=frozen_commission,json=frozenCommission" json:"frozen_commission,omitempty"`
	// 利息
	Interest float64 `protobuf:"fixed64,15,opt,name=interest" json:"interest,omitempty"`
	// 冻结利息
	FrozenInterest float64 `protobuf:"fixed64,16,opt,name=frozen_interest,json=frozenInterest" json:"frozen_interest,omitempty"`
	// 盯市盈亏
	MtmProfit float64 `protobuf:"fixed64,17,opt,name=mtm_profit,json=mtmProfit" json:"mtm_profit,omitempty"`
	// 进入清算的平仓盈亏
	ClearedClosedProfit float64 `protobuf:"fixed64,18,opt,name=cleared_closed_profit,json=clearedClosedProfit" json:"cleared_closed_profit,omitempty"`
}

func (m *CTPPositionSummation) Reset()                    { *m = CTPPositionSummation{} }
func (m *CTPPositionSummation) String() string            { return proto.CompactTextString(m) }
func (*CTPPositionSummation) ProtoMessage()               {}
func (*CTPPositionSummation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *CTPPositionSummation) GetDirection() CTPDirection {
	if m != nil {
		return m.Direction
	}
	return CTPDirection_LONG
}

func (m *CTPPositionSummation) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CTPPositionSummation) GetRouteAccountId() string {
	if m != nil {
		return m.RouteAccountId
	}
	return ""
}

func (m *CTPPositionSummation) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *CTPPositionSummation) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CTPPositionSummation) GetCost() float64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *CTPPositionSummation) GetFrozen() int32 {
	if m != nil {
		return m.Frozen
	}
	return 0
}

func (m *CTPPositionSummation) GetAvailable() int32 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *CTPPositionSummation) GetPositionProfit() float64 {
	if m != nil {
		return m.PositionProfit
	}
	return 0
}

func (m *CTPPositionSummation) GetClosedProfit() float64 {
	if m != nil {
		return m.ClosedProfit
	}
	return 0
}

func (m *CTPPositionSummation) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *CTPPositionSummation) GetFrozenMargin() float64 {
	if m != nil {
		return m.FrozenMargin
	}
	return 0
}

func (m *CTPPositionSummation) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *CTPPositionSummation) GetFrozenCommission() float64 {
	if m != nil {
		return m.FrozenCommission
	}
	return 0
}

func (m *CTPPositionSummation) GetInterest() float64 {
	if m != nil {
		return m.Interest
	}
	return 0
}

func (m *CTPPositionSummation) GetFrozenInterest() float64 {
	if m != nil {
		return m.FrozenInterest
	}
	return 0
}

func (m *CTPPositionSummation) GetMtmProfit() float64 {
	if m != nil {
		return m.MtmProfit
	}
	return 0
}

func (m *CTPPositionSummation) GetClearedClosedProfit() float64 {
	if m != nil {
		return m.ClearedClosedProfit
	}
	return 0
}

// 持仓
type CTPPosition struct {
	// / 合约编号
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// 统计
	Summation *CTPPositionSummation `protobuf:"bytes,2,opt,name=summation" json:"summation,omitempty"`
	// 今仓
	TodaySummation *CTPPositionSummation `protobuf:"bytes,3,opt,name=today_summation,json=todaySummation" json:"today_summation,omitempty"`
	// 今仓
	YesterdaySummation *CTPPositionSummation `protobuf:"bytes,4,opt,name=yesterday_summation,json=yesterdaySummation" json:"yesterday_summation,omitempty"`
	// 昨结算
	PreSettlementPrice float64 `protobuf:"fixed64,5,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	// 今结算
	SettlementPrice float64 `protobuf:"fixed64,6,opt,name=settlement_price,json=settlementPrice" json:"settlement_price,omitempty"`
	// 最新价
	LastPrice float64 `protobuf:"fixed64,7,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,8,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	// 交易品种类型
	ProductType int32 `protobuf:"varint,9,opt,name=product_type,json=productType" json:"product_type,omitempty"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,11,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// 产品
	ProductId *ProductID `protobuf:"bytes,12,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	// 最小变动价位
	PriceTick float64 `protobuf:"fixed64,13,opt,name=price_tick,json=priceTick" json:"price_tick,omitempty"`
	// 名称
	SymbolName string `protobuf:"bytes,14,opt,name=symbol_name,json=symbolName" json:"symbol_name,omitempty"`
	// 账号
	AccountId string `protobuf:"bytes,15,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *CTPPosition) Reset()                    { *m = CTPPosition{} }
func (m *CTPPosition) String() string            { return proto.CompactTextString(m) }
func (*CTPPosition) ProtoMessage()               {}
func (*CTPPosition) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *CTPPosition) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPPosition) GetSummation() *CTPPositionSummation {
	if m != nil {
		return m.Summation
	}
	return nil
}

func (m *CTPPosition) GetTodaySummation() *CTPPositionSummation {
	if m != nil {
		return m.TodaySummation
	}
	return nil
}

func (m *CTPPosition) GetYesterdaySummation() *CTPPositionSummation {
	if m != nil {
		return m.YesterdaySummation
	}
	return nil
}

func (m *CTPPosition) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *CTPPosition) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *CTPPosition) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *CTPPosition) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *CTPPosition) GetProductType() int32 {
	if m != nil {
		return m.ProductType
	}
	return 0
}

func (m *CTPPosition) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *CTPPosition) GetProductId() *ProductID {
	if m != nil {
		return m.ProductId
	}
	return nil
}

func (m *CTPPosition) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *CTPPosition) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *CTPPosition) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type CTPPositionList struct {
	List []*CTPPosition `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CTPPositionList) Reset()                    { *m = CTPPositionList{} }
func (m *CTPPositionList) String() string            { return proto.CompactTextString(m) }
func (*CTPPositionList) ProtoMessage()               {}
func (*CTPPositionList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *CTPPositionList) GetList() []*CTPPosition {
	if m != nil {
		return m.List
	}
	return nil
}

// 平仓明细.
type CTPCloseTradeRecord struct {
	// 帐号
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// 合约
	Symbol *Symbol `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	// 方向
	Direction CTPDirection `protobuf:"varint,3,opt,name=direction,enum=pb.CTPDirection" json:"direction,omitempty"`
	// 数量
	OpenVolume int32 `protobuf:"varint,4,opt,name=open_volume,json=openVolume" json:"open_volume,omitempty"`
	// 开仓金额
	OpenAmount float64 `protobuf:"fixed64,5,opt,name=open_amount,json=openAmount" json:"open_amount,omitempty"`
	// 平仓数量
	ClosedVolume int32 `protobuf:"varint,6,opt,name=closed_volume,json=closedVolume" json:"closed_volume,omitempty"`
	// 平仓金额
	ClosedAmount float64 `protobuf:"fixed64,7,opt,name=closed_amount,json=closedAmount" json:"closed_amount,omitempty"`
	// 开仓时间
	OpenTime int64 `protobuf:"varint,8,opt,name=open_time,json=openTime" json:"open_time,omitempty"`
	// 开仓交易日
	OpenTradingDay int32 `protobuf:"varint,9,opt,name=open_trading_day,json=openTradingDay" json:"open_trading_day,omitempty"`
	// 开仓委托单号
	OpenOrderId *CTPOrderID `protobuf:"bytes,10,opt,name=open_order_id,json=openOrderId" json:"open_order_id,omitempty"`
	// 开仓成交编号
	OpenTradeId string `protobuf:"bytes,11,opt,name=open_trade_id,json=openTradeId" json:"open_trade_id,omitempty"`
	// 开仓成交类型
	OpenTradeType int32 `protobuf:"varint,12,opt,name=open_trade_type,json=openTradeType" json:"open_trade_type,omitempty"`
	// 开仓投机套保类型
	OpenHedgeType int32 `protobuf:"varint,13,opt,name=open_hedge_type,json=openHedgeType" json:"open_hedge_type,omitempty"`
	// 平仓时间
	CloseTime int64 `protobuf:"varint,14,opt,name=close_time,json=closeTime" json:"close_time,omitempty"`
	// 平仓交易日
	CloseTradingDay int32 `protobuf:"varint,15,opt,name=close_trading_day,json=closeTradingDay" json:"close_trading_day,omitempty"`
	// 平仓委托单号
	CloseOrderId *CTPOrderID `protobuf:"bytes,16,opt,name=close_order_id,json=closeOrderId" json:"close_order_id,omitempty"`
	// 平仓成交编号
	CloseTradeId string `protobuf:"bytes,17,opt,name=close_trade_id,json=closeTradeId" json:"close_trade_id,omitempty"`
	// 平仓成交类型
	CloseTradeType int32 `protobuf:"varint,18,opt,name=close_trade_type,json=closeTradeType" json:"close_trade_type,omitempty"`
	// 平仓投机套保类型
	CloseHedgeType int32 `protobuf:"varint,19,opt,name=close_hedge_type,json=closeHedgeType" json:"close_hedge_type,omitempty"`
	// 平仓盈亏
	CloseProfit float64 `protobuf:"fixed64,20,opt,name=close_profit,json=closeProfit" json:"close_profit,omitempty"`
	// 昨结
	PreSettlementPrice float64 `protobuf:"fixed64,21,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	// 币种
	CurrencyType CurrencyType `protobuf:"varint,22,opt,name=currency_type,json=currencyType,enum=pb.CurrencyType" json:"currency_type,omitempty"`
	// 开仓手续费
	OpenCommission float64 `protobuf:"fixed64,23,opt,name=open_commission,json=openCommission" json:"open_commission,omitempty"`
	// 平仓手续费
	CloseCommission float64 `protobuf:"fixed64,24,opt,name=close_commission,json=closeCommission" json:"close_commission,omitempty"`
	// 保证金占用
	Margin float64 `protobuf:"fixed64,25,opt,name=margin" json:"margin,omitempty"`
	// 初始开仓金额
	InitialOpenAmount float64 `protobuf:"fixed64,26,opt,name=initial_open_amount,json=initialOpenAmount" json:"initial_open_amount,omitempty"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,27,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// 冻结利息
	FrozenInterest float64 `protobuf:"fixed64,28,opt,name=frozen_interest,json=frozenInterest" json:"frozen_interest,omitempty"`
	// 上游账户
	RouteAccountId string `protobuf:"bytes,29,opt,name=route_account_id,json=routeAccountId" json:"route_account_id,omitempty"`
	// 持仓盈亏
	PositionProfit float64 `protobuf:"fixed64,30,opt,name=position_profit,json=positionProfit" json:"position_profit,omitempty"`
}

func (m *CTPCloseTradeRecord) Reset()                    { *m = CTPCloseTradeRecord{} }
func (m *CTPCloseTradeRecord) String() string            { return proto.CompactTextString(m) }
func (*CTPCloseTradeRecord) ProtoMessage()               {}
func (*CTPCloseTradeRecord) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *CTPCloseTradeRecord) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CTPCloseTradeRecord) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPCloseTradeRecord) GetDirection() CTPDirection {
	if m != nil {
		return m.Direction
	}
	return CTPDirection_LONG
}

func (m *CTPCloseTradeRecord) GetOpenVolume() int32 {
	if m != nil {
		return m.OpenVolume
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetOpenAmount() float64 {
	if m != nil {
		return m.OpenAmount
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetClosedVolume() int32 {
	if m != nil {
		return m.ClosedVolume
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetClosedAmount() float64 {
	if m != nil {
		return m.ClosedAmount
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetOpenTime() int64 {
	if m != nil {
		return m.OpenTime
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetOpenTradingDay() int32 {
	if m != nil {
		return m.OpenTradingDay
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetOpenOrderId() *CTPOrderID {
	if m != nil {
		return m.OpenOrderId
	}
	return nil
}

func (m *CTPCloseTradeRecord) GetOpenTradeId() string {
	if m != nil {
		return m.OpenTradeId
	}
	return ""
}

func (m *CTPCloseTradeRecord) GetOpenTradeType() int32 {
	if m != nil {
		return m.OpenTradeType
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetOpenHedgeType() int32 {
	if m != nil {
		return m.OpenHedgeType
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseTime() int64 {
	if m != nil {
		return m.CloseTime
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseTradingDay() int32 {
	if m != nil {
		return m.CloseTradingDay
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseOrderId() *CTPOrderID {
	if m != nil {
		return m.CloseOrderId
	}
	return nil
}

func (m *CTPCloseTradeRecord) GetCloseTradeId() string {
	if m != nil {
		return m.CloseTradeId
	}
	return ""
}

func (m *CTPCloseTradeRecord) GetCloseTradeType() int32 {
	if m != nil {
		return m.CloseTradeType
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseHedgeType() int32 {
	if m != nil {
		return m.CloseHedgeType
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseProfit() float64 {
	if m != nil {
		return m.CloseProfit
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCurrencyType() CurrencyType {
	if m != nil {
		return m.CurrencyType
	}
	return CurrencyType_CNY
}

func (m *CTPCloseTradeRecord) GetOpenCommission() float64 {
	if m != nil {
		return m.OpenCommission
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseCommission() float64 {
	if m != nil {
		return m.CloseCommission
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetInitialOpenAmount() float64 {
	if m != nil {
		return m.InitialOpenAmount
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetFrozenInterest() float64 {
	if m != nil {
		return m.FrozenInterest
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetRouteAccountId() string {
	if m != nil {
		return m.RouteAccountId
	}
	return ""
}

func (m *CTPCloseTradeRecord) GetPositionProfit() float64 {
	if m != nil {
		return m.PositionProfit
	}
	return 0
}

type CTPCloseTradeRecordList struct {
	List []*CTPCloseTradeRecord `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CTPCloseTradeRecordList) Reset()                    { *m = CTPCloseTradeRecordList{} }
func (m *CTPCloseTradeRecordList) String() string            { return proto.CompactTextString(m) }
func (*CTPCloseTradeRecordList) ProtoMessage()               {}
func (*CTPCloseTradeRecordList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *CTPCloseTradeRecordList) GetList() []*CTPCloseTradeRecord {
	if m != nil {
		return m.List
	}
	return nil
}

// 保证金率
type CTPMarginRate struct {
	// 交易所
	Exchange ExchangeType `protobuf:"varint,1,opt,name=exchange,enum=pb.ExchangeType" json:"exchange,omitempty"`
	// symbol
	Symbol string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	// product
	Product string `protobuf:"bytes,3,opt,name=product" json:"product,omitempty"`
	// / 多头保证金率（按手数)
	LongByVolume float64 `protobuf:"fixed64,4,opt,name=long_by_volume,json=longByVolume" json:"long_by_volume,omitempty"`
	// / 多头保证金率（按金额)
	LongByAmount float64 `protobuf:"fixed64,5,opt,name=long_by_amount,json=longByAmount" json:"long_by_amount,omitempty"`
	// / 空头保证金率（按手数)
	ShortByVolume float64 `protobuf:"fixed64,6,opt,name=short_by_volume,json=shortByVolume" json:"short_by_volume,omitempty"`
	// / 空头保证金率（按金额)
	ShortByAmount float64 `protobuf:"fixed64,7,opt,name=short_by_amount,json=shortByAmount" json:"short_by_amount,omitempty"`
	// uid
	Id int64 `protobuf:"varint,10,opt,name=id" json:"id,omitempty"`
}

func (m *CTPMarginRate) Reset()                    { *m = CTPMarginRate{} }
func (m *CTPMarginRate) String() string            { return proto.CompactTextString(m) }
func (*CTPMarginRate) ProtoMessage()               {}
func (*CTPMarginRate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *CTPMarginRate) GetExchange() ExchangeType {
	if m != nil {
		return m.Exchange
	}
	return ExchangeType_SHFE
}

func (m *CTPMarginRate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *CTPMarginRate) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *CTPMarginRate) GetLongByVolume() float64 {
	if m != nil {
		return m.LongByVolume
	}
	return 0
}

func (m *CTPMarginRate) GetLongByAmount() float64 {
	if m != nil {
		return m.LongByAmount
	}
	return 0
}

func (m *CTPMarginRate) GetShortByVolume() float64 {
	if m != nil {
		return m.ShortByVolume
	}
	return 0
}

func (m *CTPMarginRate) GetShortByAmount() float64 {
	if m != nil {
		return m.ShortByAmount
	}
	return 0
}

func (m *CTPMarginRate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// CTPMarginItem
type CTPMarginItem struct {
	// / 多头保证金率（按手数)
	LongByVolume float64 `protobuf:"fixed64,1,opt,name=long_by_volume,json=longByVolume" json:"long_by_volume,omitempty"`
	// / 多头保证金率（按金额)
	LongByAmount float64 `protobuf:"fixed64,2,opt,name=long_by_amount,json=longByAmount" json:"long_by_amount,omitempty"`
	// / 空头保证金率（按手数)
	ShortByVolume float64 `protobuf:"fixed64,3,opt,name=short_by_volume,json=shortByVolume" json:"short_by_volume,omitempty"`
	// / 空头保证金率（按金额)
	ShortByAmount float64 `protobuf:"fixed64,4,opt,name=short_by_amount,json=shortByAmount" json:"short_by_amount,omitempty"`
}

func (m *CTPMarginItem) Reset()                    { *m = CTPMarginItem{} }
func (m *CTPMarginItem) String() string            { return proto.CompactTextString(m) }
func (*CTPMarginItem) ProtoMessage()               {}
func (*CTPMarginItem) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *CTPMarginItem) GetLongByVolume() float64 {
	if m != nil {
		return m.LongByVolume
	}
	return 0
}

func (m *CTPMarginItem) GetLongByAmount() float64 {
	if m != nil {
		return m.LongByAmount
	}
	return 0
}

func (m *CTPMarginItem) GetShortByVolume() float64 {
	if m != nil {
		return m.ShortByVolume
	}
	return 0
}

func (m *CTPMarginItem) GetShortByAmount() float64 {
	if m != nil {
		return m.ShortByAmount
	}
	return 0
}

// 手续费
type CTPCommissionRateItem struct {
	ByAmount   float64       `protobuf:"fixed64,1,opt,name=by_amount,json=byAmount" json:"by_amount,omitempty"`
	ByVolume   float64       `protobuf:"fixed64,2,opt,name=by_volume,json=byVolume" json:"by_volume,omitempty"`
	Minimum    float64       `protobuf:"fixed64,3,opt,name=minimum" json:"minimum,omitempty"`
	OffsetFlag CTPOffsetFlag `protobuf:"varint,4,opt,name=offset_flag,json=offsetFlag,enum=pb.CTPOffsetFlag" json:"offset_flag,omitempty"`
	Tag        string        `protobuf:"bytes,5,opt,name=tag" json:"tag,omitempty"`
}

func (m *CTPCommissionRateItem) Reset()                    { *m = CTPCommissionRateItem{} }
func (m *CTPCommissionRateItem) String() string            { return proto.CompactTextString(m) }
func (*CTPCommissionRateItem) ProtoMessage()               {}
func (*CTPCommissionRateItem) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *CTPCommissionRateItem) GetByAmount() float64 {
	if m != nil {
		return m.ByAmount
	}
	return 0
}

func (m *CTPCommissionRateItem) GetByVolume() float64 {
	if m != nil {
		return m.ByVolume
	}
	return 0
}

func (m *CTPCommissionRateItem) GetMinimum() float64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *CTPCommissionRateItem) GetOffsetFlag() CTPOffsetFlag {
	if m != nil {
		return m.OffsetFlag
	}
	return CTPOffsetFlag_NONE
}

func (m *CTPCommissionRateItem) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

// 手续费率
type CTPCommissionRate struct {
	// 交易所
	Exchange ExchangeType `protobuf:"varint,1,opt,name=exchange,enum=pb.ExchangeType" json:"exchange,omitempty"`
	// symbol
	Symbol string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	// product
	Product string `protobuf:"bytes,3,opt,name=product" json:"product,omitempty"`
	// 设置
	Settings []*CTPCommissionRateItem `protobuf:"bytes,4,rep,name=settings" json:"settings,omitempty"`
	// ID
	Id int64 `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
}

func (m *CTPCommissionRate) Reset()                    { *m = CTPCommissionRate{} }
func (m *CTPCommissionRate) String() string            { return proto.CompactTextString(m) }
func (*CTPCommissionRate) ProtoMessage()               {}
func (*CTPCommissionRate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *CTPCommissionRate) GetExchange() ExchangeType {
	if m != nil {
		return m.Exchange
	}
	return ExchangeType_SHFE
}

func (m *CTPCommissionRate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *CTPCommissionRate) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *CTPCommissionRate) GetSettings() []*CTPCommissionRateItem {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *CTPCommissionRate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 交易单元
type CTPTradingUnit struct {
	// / 合约编号
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// 统计
	Position []*CTPPosition `protobuf:"bytes,2,rep,name=position" json:"position,omitempty"`
	// 报单
	OrderLinkList []*CTPOrderLink `protobuf:"bytes,3,rep,name=order_link_list,json=orderLinkList" json:"order_link_list,omitempty"`
	// 持仓明细
	PositionDetailList []*CTPCloseTradeRecord `protobuf:"bytes,4,rep,name=position_detail_list,json=positionDetailList" json:"position_detail_list,omitempty"`
	// 平仓明细
	HistoryCtrList []*CTPCloseTradeRecord `protobuf:"bytes,5,rep,name=history_ctr_list,json=historyCtrList" json:"history_ctr_list,omitempty"`
	// 历史单
	HistoryOrderList []*CTPOrder `protobuf:"bytes,6,rep,name=history_order_list,json=historyOrderList" json:"history_order_list,omitempty"`
	// 成交
	HistoryTradeList []*CTPTradeReport `protobuf:"bytes,7,rep,name=history_trade_list,json=historyTradeList" json:"history_trade_list,omitempty"`
	// 最新价
	LastPrice float64 `protobuf:"fixed64,10,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	// 行情更新时间
	LastMdsUpdateTime int64 `protobuf:"varint,11,opt,name=last_mds_update_time,json=lastMdsUpdateTime" json:"last_mds_update_time,omitempty"`
	// 合约信息
	PriceTick float64 `protobuf:"fixed64,12,opt,name=price_tick,json=priceTick" json:"price_tick,omitempty"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,13,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// 手续费
	Cr *CTPCommissionRate `protobuf:"bytes,14,opt,name=cr" json:"cr,omitempty"`
	// 保证金
	Mr *CTPMarginRate `protobuf:"bytes,15,opt,name=mr" json:"mr,omitempty"`
}

func (m *CTPTradingUnit) Reset()                    { *m = CTPTradingUnit{} }
func (m *CTPTradingUnit) String() string            { return proto.CompactTextString(m) }
func (*CTPTradingUnit) ProtoMessage()               {}
func (*CTPTradingUnit) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *CTPTradingUnit) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPTradingUnit) GetPosition() []*CTPPosition {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *CTPTradingUnit) GetOrderLinkList() []*CTPOrderLink {
	if m != nil {
		return m.OrderLinkList
	}
	return nil
}

func (m *CTPTradingUnit) GetPositionDetailList() []*CTPCloseTradeRecord {
	if m != nil {
		return m.PositionDetailList
	}
	return nil
}

func (m *CTPTradingUnit) GetHistoryCtrList() []*CTPCloseTradeRecord {
	if m != nil {
		return m.HistoryCtrList
	}
	return nil
}

func (m *CTPTradingUnit) GetHistoryOrderList() []*CTPOrder {
	if m != nil {
		return m.HistoryOrderList
	}
	return nil
}

func (m *CTPTradingUnit) GetHistoryTradeList() []*CTPTradeReport {
	if m != nil {
		return m.HistoryTradeList
	}
	return nil
}

func (m *CTPTradingUnit) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *CTPTradingUnit) GetLastMdsUpdateTime() int64 {
	if m != nil {
		return m.LastMdsUpdateTime
	}
	return 0
}

func (m *CTPTradingUnit) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *CTPTradingUnit) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *CTPTradingUnit) GetCr() *CTPCommissionRate {
	if m != nil {
		return m.Cr
	}
	return nil
}

func (m *CTPTradingUnit) GetMr() *CTPMarginRate {
	if m != nil {
		return m.Mr
	}
	return nil
}

type CTPForceCloseTimeRule struct {
	Start            int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End              int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	DisableOpenStart int64 `protobuf:"varint,3,opt,name=disable_open_start,json=disableOpenStart" json:"disable_open_start,omitempty"`
}

func (m *CTPForceCloseTimeRule) Reset()                    { *m = CTPForceCloseTimeRule{} }
func (m *CTPForceCloseTimeRule) String() string            { return proto.CompactTextString(m) }
func (*CTPForceCloseTimeRule) ProtoMessage()               {}
func (*CTPForceCloseTimeRule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *CTPForceCloseTimeRule) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CTPForceCloseTimeRule) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *CTPForceCloseTimeRule) GetDisableOpenStart() int64 {
	if m != nil {
		return m.DisableOpenStart
	}
	return 0
}

// CTPTradingUnitOption 品种参数
type CTPTradingUnitOption struct {
	// 涨跌停N点内禁止开仓
	LimitPriceDisableOpen int32 `protobuf:"varint,1,opt,name=limit_price_disable_open,json=limitPriceDisableOpen" json:"limit_price_disable_open,omitempty"`
	// 涨跌停N点内强制平仓
	LimitPriceForceClose int32 `protobuf:"varint,2,opt,name=limit_price_force_close,json=limitPriceForceClose" json:"limit_price_force_close,omitempty"`
	// 昨持仓阀值
	PrePositionPercentageThreshold float64 `protobuf:"fixed64,3,opt,name=pre_position_percentage_threshold,json=prePositionPercentageThreshold" json:"pre_position_percentage_threshold,omitempty"`
	// 昨持仓绝对数量阀值
	PrePositionThreshold float64 `protobuf:"fixed64,4,opt,name=pre_position_threshold,json=prePositionThreshold" json:"pre_position_threshold,omitempty"`
	// 昨成交占比阀值
	PreVolumePercentageThreshold float64 `protobuf:"fixed64,5,opt,name=pre_volume_percentage_threshold,json=preVolumePercentageThreshold" json:"pre_volume_percentage_threshold,omitempty"`
	// 昨成交量绝对数量阀值
	PreVolumeThreshold float64 `protobuf:"fixed64,6,opt,name=pre_volume_threshold,json=preVolumeThreshold" json:"pre_volume_threshold,omitempty"`
	// 单资产持仓限制
	SingleProductMarginWeightLimit float64 `protobuf:"fixed64,7,opt,name=single_product_margin_weight_limit,json=singleProductMarginWeightLimit" json:"single_product_margin_weight_limit,omitempty"`
	// 开始时间
	FcrList []*CTPForceCloseTimeRule `protobuf:"bytes,8,rep,name=fcr_list,json=fcrList" json:"fcr_list,omitempty"`
	// 禁止开仓
	DisableOpen bool `protobuf:"varint,9,opt,name=disable_open,json=disableOpen" json:"disable_open,omitempty"`
	// 手续费
	CrSettings []*CTPCommissionRateItem `protobuf:"bytes,10,rep,name=cr_settings,json=crSettings" json:"cr_settings,omitempty"`
	// 保证金
	MarginRate *CTPMarginItem `protobuf:"bytes,11,opt,name=margin_rate,json=marginRate" json:"margin_rate,omitempty"`
	// 止损点数
	StoplossCandidates []int32 `protobuf:"varint,12,rep,packed,name=stoploss_candidates,json=stoplossCandidates" json:"stoploss_candidates,omitempty"`
	// 止赢点数
	TakeProfitCandidates []int32 `protobuf:"varint,13,rep,packed,name=take_profit_candidates,json=takeProfitCandidates" json:"take_profit_candidates,omitempty"`
	// 手数
	VolumeCandidates []int32 `protobuf:"varint,14,rep,packed,name=volume_candidates,json=volumeCandidates" json:"volume_candidates,omitempty"`
	// 禁止开仓
	DisableOpenSymbolList []string `protobuf:"bytes,15,rep,name=disable_open_symbol_list,json=disableOpenSymbolList" json:"disable_open_symbol_list,omitempty"`
	// 禁止开仓
	DisableOpenClassList []string `protobuf:"bytes,16,rep,name=disable_open_class_list,json=disableOpenClassList" json:"disable_open_class_list,omitempty"`
	// 上市<N天的品种禁止开仓
	OpenDaysLimit int32 `protobuf:"varint,17,opt,name=open_days_limit,json=openDaysLimit" json:"open_days_limit,omitempty"`
}

func (m *CTPTradingUnitOption) Reset()                    { *m = CTPTradingUnitOption{} }
func (m *CTPTradingUnitOption) String() string            { return proto.CompactTextString(m) }
func (*CTPTradingUnitOption) ProtoMessage()               {}
func (*CTPTradingUnitOption) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *CTPTradingUnitOption) GetLimitPriceDisableOpen() int32 {
	if m != nil {
		return m.LimitPriceDisableOpen
	}
	return 0
}

func (m *CTPTradingUnitOption) GetLimitPriceForceClose() int32 {
	if m != nil {
		return m.LimitPriceForceClose
	}
	return 0
}

func (m *CTPTradingUnitOption) GetPrePositionPercentageThreshold() float64 {
	if m != nil {
		return m.PrePositionPercentageThreshold
	}
	return 0
}

func (m *CTPTradingUnitOption) GetPrePositionThreshold() float64 {
	if m != nil {
		return m.PrePositionThreshold
	}
	return 0
}

func (m *CTPTradingUnitOption) GetPreVolumePercentageThreshold() float64 {
	if m != nil {
		return m.PreVolumePercentageThreshold
	}
	return 0
}

func (m *CTPTradingUnitOption) GetPreVolumeThreshold() float64 {
	if m != nil {
		return m.PreVolumeThreshold
	}
	return 0
}

func (m *CTPTradingUnitOption) GetSingleProductMarginWeightLimit() float64 {
	if m != nil {
		return m.SingleProductMarginWeightLimit
	}
	return 0
}

func (m *CTPTradingUnitOption) GetFcrList() []*CTPForceCloseTimeRule {
	if m != nil {
		return m.FcrList
	}
	return nil
}

func (m *CTPTradingUnitOption) GetDisableOpen() bool {
	if m != nil {
		return m.DisableOpen
	}
	return false
}

func (m *CTPTradingUnitOption) GetCrSettings() []*CTPCommissionRateItem {
	if m != nil {
		return m.CrSettings
	}
	return nil
}

func (m *CTPTradingUnitOption) GetMarginRate() *CTPMarginItem {
	if m != nil {
		return m.MarginRate
	}
	return nil
}

func (m *CTPTradingUnitOption) GetStoplossCandidates() []int32 {
	if m != nil {
		return m.StoplossCandidates
	}
	return nil
}

func (m *CTPTradingUnitOption) GetTakeProfitCandidates() []int32 {
	if m != nil {
		return m.TakeProfitCandidates
	}
	return nil
}

func (m *CTPTradingUnitOption) GetVolumeCandidates() []int32 {
	if m != nil {
		return m.VolumeCandidates
	}
	return nil
}

func (m *CTPTradingUnitOption) GetDisableOpenSymbolList() []string {
	if m != nil {
		return m.DisableOpenSymbolList
	}
	return nil
}

func (m *CTPTradingUnitOption) GetDisableOpenClassList() []string {
	if m != nil {
		return m.DisableOpenClassList
	}
	return nil
}

func (m *CTPTradingUnitOption) GetOpenDaysLimit() int32 {
	if m != nil {
		return m.OpenDaysLimit
	}
	return 0
}

// 隔夜自有资金检查.
type MarginCheckRule struct {
	// 开始时间
	Start int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	// 结束时间
	End int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	// 平仓顺序
	ForceCloseOrder int32 `protobuf:"varint,3,opt,name=force_close_order,json=forceCloseOrder" json:"force_close_order,omitempty"`
	// 报警
	WarningLevel float64 `protobuf:"fixed64,4,opt,name=warning_level,json=warningLevel" json:"warning_level,omitempty"`
	// 强平
	ForceCloseLevel float64 `protobuf:"fixed64,5,opt,name=force_close_level,json=forceCloseLevel" json:"force_close_level,omitempty"`
	// 自有可用倍率
	CommonBalanceMultiple float64 `protobuf:"fixed64,6,opt,name=common_balance_multiple,json=commonBalanceMultiple" json:"common_balance_multiple,omitempty"`
	// 报警线下禁止开仓
	DisableOpenUnderWarningLevel bool `protobuf:"varint,7,opt,name=disable_open_under_warning_level,json=disableOpenUnderWarningLevel" json:"disable_open_under_warning_level,omitempty"`
	// 按比例报警
	WarningLevelByPreferRatio float64 `protobuf:"fixed64,8,opt,name=warning_level_by_prefer_ratio,json=warningLevelByPreferRatio" json:"warning_level_by_prefer_ratio,omitempty"`
	// 按比例强平
	ForceCloseLevelByPreferRatio float64 `protobuf:"fixed64,9,opt,name=force_close_level_by_prefer_ratio,json=forceCloseLevelByPreferRatio" json:"force_close_level_by_prefer_ratio,omitempty"`
	// 报警按市值比例
	WarningLevelByMargin float64 `protobuf:"fixed64,10,opt,name=warning_level_by_margin,json=warningLevelByMargin" json:"warning_level_by_margin,omitempty"`
	// 强平按市值比例
	ForceCloseLevelByMargin float64 `protobuf:"fixed64,11,opt,name=force_close_level_by_margin,json=forceCloseLevelByMargin" json:"force_close_level_by_margin,omitempty"`
	// 总持仓占用上限
	MarginCeiling float64 `protobuf:"fixed64,12,opt,name=margin_ceiling,json=marginCeiling" json:"margin_ceiling,omitempty"`
	// 买入金额上限
	PositionAmountCeiling float64 `protobuf:"fixed64,13,opt,name=position_amount_ceiling,json=positionAmountCeiling" json:"position_amount_ceiling,omitempty"`
}

func (m *MarginCheckRule) Reset()                    { *m = MarginCheckRule{} }
func (m *MarginCheckRule) String() string            { return proto.CompactTextString(m) }
func (*MarginCheckRule) ProtoMessage()               {}
func (*MarginCheckRule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *MarginCheckRule) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *MarginCheckRule) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *MarginCheckRule) GetForceCloseOrder() int32 {
	if m != nil {
		return m.ForceCloseOrder
	}
	return 0
}

func (m *MarginCheckRule) GetWarningLevel() float64 {
	if m != nil {
		return m.WarningLevel
	}
	return 0
}

func (m *MarginCheckRule) GetForceCloseLevel() float64 {
	if m != nil {
		return m.ForceCloseLevel
	}
	return 0
}

func (m *MarginCheckRule) GetCommonBalanceMultiple() float64 {
	if m != nil {
		return m.CommonBalanceMultiple
	}
	return 0
}

func (m *MarginCheckRule) GetDisableOpenUnderWarningLevel() bool {
	if m != nil {
		return m.DisableOpenUnderWarningLevel
	}
	return false
}

func (m *MarginCheckRule) GetWarningLevelByPreferRatio() float64 {
	if m != nil {
		return m.WarningLevelByPreferRatio
	}
	return 0
}

func (m *MarginCheckRule) GetForceCloseLevelByPreferRatio() float64 {
	if m != nil {
		return m.ForceCloseLevelByPreferRatio
	}
	return 0
}

func (m *MarginCheckRule) GetWarningLevelByMargin() float64 {
	if m != nil {
		return m.WarningLevelByMargin
	}
	return 0
}

func (m *MarginCheckRule) GetForceCloseLevelByMargin() float64 {
	if m != nil {
		return m.ForceCloseLevelByMargin
	}
	return 0
}

func (m *MarginCheckRule) GetMarginCeiling() float64 {
	if m != nil {
		return m.MarginCeiling
	}
	return 0
}

func (m *MarginCheckRule) GetPositionAmountCeiling() float64 {
	if m != nil {
		return m.PositionAmountCeiling
	}
	return 0
}

// SettlementUnitOption 结算组参数
type SettlementUnitOption struct {
	// ID
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 备注
	Comment string `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	// 结算组
	SettlementGroup int32 `protobuf:"varint,3,opt,name=settlement_group,json=settlementGroup" json:"settlement_group,omitempty"`
	// 资金检查水平
	AvailableCheckLevel int32 `protobuf:"varint,4,opt,name=available_check_level,json=availableCheckLevel" json:"available_check_level,omitempty"`
	// 强平开启
	ForceCloseOn bool `protobuf:"varint,5,opt,name=force_close_on,json=forceCloseOn" json:"force_close_on,omitempty"`
	// 强平检查
	McrList []*MarginCheckRule `protobuf:"bytes,6,rep,name=mcr_list,json=mcrList" json:"mcr_list,omitempty"`
	// 禁止开仓
	DisableOpen bool `protobuf:"varint,7,opt,name=disable_open,json=disableOpen" json:"disable_open,omitempty"`
}

func (m *SettlementUnitOption) Reset()                    { *m = SettlementUnitOption{} }
func (m *SettlementUnitOption) String() string            { return proto.CompactTextString(m) }
func (*SettlementUnitOption) ProtoMessage()               {}
func (*SettlementUnitOption) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *SettlementUnitOption) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SettlementUnitOption) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *SettlementUnitOption) GetSettlementGroup() int32 {
	if m != nil {
		return m.SettlementGroup
	}
	return 0
}

func (m *SettlementUnitOption) GetAvailableCheckLevel() int32 {
	if m != nil {
		return m.AvailableCheckLevel
	}
	return 0
}

func (m *SettlementUnitOption) GetForceCloseOn() bool {
	if m != nil {
		return m.ForceCloseOn
	}
	return false
}

func (m *SettlementUnitOption) GetMcrList() []*MarginCheckRule {
	if m != nil {
		return m.McrList
	}
	return nil
}

func (m *SettlementUnitOption) GetDisableOpen() bool {
	if m != nil {
		return m.DisableOpen
	}
	return false
}

// 普通结算
type CTPTradingAccount struct {
	// 合计
	Summary *AccountMoneySummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	// 出入金
	MtrList []*MoneyTransferRecord `protobuf:"bytes,2,rep,name=mtr_list,json=mtrList" json:"mtr_list,omitempty"`
	// 交易明细
	TuList []*CTPTradingUnit `protobuf:"bytes,3,rep,name=tu_list,json=tuList" json:"tu_list,omitempty"`
	// 最后结算日期
	LastSettleDate int32 `protobuf:"varint,4,opt,name=last_settle_date,json=lastSettleDate" json:"last_settle_date,omitempty"`
	// 设置
	Options *SettlementUnitOption `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
}

func (m *CTPTradingAccount) Reset()                    { *m = CTPTradingAccount{} }
func (m *CTPTradingAccount) String() string            { return proto.CompactTextString(m) }
func (*CTPTradingAccount) ProtoMessage()               {}
func (*CTPTradingAccount) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *CTPTradingAccount) GetSummary() *AccountMoneySummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *CTPTradingAccount) GetMtrList() []*MoneyTransferRecord {
	if m != nil {
		return m.MtrList
	}
	return nil
}

func (m *CTPTradingAccount) GetTuList() []*CTPTradingUnit {
	if m != nil {
		return m.TuList
	}
	return nil
}

func (m *CTPTradingAccount) GetLastSettleDate() int32 {
	if m != nil {
		return m.LastSettleDate
	}
	return 0
}

func (m *CTPTradingAccount) GetOptions() *SettlementUnitOption {
	if m != nil {
		return m.Options
	}
	return nil
}

// 账户快照
type CTPTradingAccountSnapshot struct {
	// 账户
	Account *CTPTradingAccount `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// 快照时间
	Time int64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	// 快照备注
	Comment string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
}

func (m *CTPTradingAccountSnapshot) Reset()                    { *m = CTPTradingAccountSnapshot{} }
func (m *CTPTradingAccountSnapshot) String() string            { return proto.CompactTextString(m) }
func (*CTPTradingAccountSnapshot) ProtoMessage()               {}
func (*CTPTradingAccountSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

func (m *CTPTradingAccountSnapshot) GetAccount() *CTPTradingAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *CTPTradingAccountSnapshot) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CTPTradingAccountSnapshot) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func init() {
	proto.RegisterType((*CTPOrderID)(nil), "pb.CTPOrderID")
	proto.RegisterType((*CTPOrder)(nil), "pb.CTPOrder")
	proto.RegisterType((*CTPOrderList)(nil), "pb.CTPOrderList")
	proto.RegisterType((*JointOrder)(nil), "pb.JointOrder")
	proto.RegisterType((*CTPOrderLink)(nil), "pb.CTPOrderLink")
	proto.RegisterType((*CTPCancelOrderRequest)(nil), "pb.CTPCancelOrderRequest")
	proto.RegisterType((*CTPOnRtnCancelOrder)(nil), "pb.CTPOnRtnCancelOrder")
	proto.RegisterType((*CTPTradeReport)(nil), "pb.CTPTradeReport")
	proto.RegisterType((*CTPTradeReportList)(nil), "pb.CTPTradeReportList")
	proto.RegisterType((*CTPPositionSummation)(nil), "pb.CTPPositionSummation")
	proto.RegisterType((*CTPPosition)(nil), "pb.CTPPosition")
	proto.RegisterType((*CTPPositionList)(nil), "pb.CTPPositionList")
	proto.RegisterType((*CTPCloseTradeRecord)(nil), "pb.CTPCloseTradeRecord")
	proto.RegisterType((*CTPCloseTradeRecordList)(nil), "pb.CTPCloseTradeRecordList")
	proto.RegisterType((*CTPMarginRate)(nil), "pb.CTPMarginRate")
	proto.RegisterType((*CTPMarginItem)(nil), "pb.CTPMarginItem")
	proto.RegisterType((*CTPCommissionRateItem)(nil), "pb.CTPCommissionRateItem")
	proto.RegisterType((*CTPCommissionRate)(nil), "pb.CTPCommissionRate")
	proto.RegisterType((*CTPTradingUnit)(nil), "pb.CTPTradingUnit")
	proto.RegisterType((*CTPForceCloseTimeRule)(nil), "pb.CTPForceCloseTimeRule")
	proto.RegisterType((*CTPTradingUnitOption)(nil), "pb.CTPTradingUnitOption")
	proto.RegisterType((*MarginCheckRule)(nil), "pb.MarginCheckRule")
	proto.RegisterType((*SettlementUnitOption)(nil), "pb.SettlementUnitOption")
	proto.RegisterType((*CTPTradingAccount)(nil), "pb.CTPTradingAccount")
	proto.RegisterType((*CTPTradingAccountSnapshot)(nil), "pb.CTPTradingAccountSnapshot")
	proto.RegisterEnum("pb.CTPDirection", CTPDirection_name, CTPDirection_value)
	proto.RegisterEnum("pb.CTPOrderStatus", CTPOrderStatus_name, CTPOrderStatus_value)
	proto.RegisterEnum("pb.CTPPriceType", CTPPriceType_name, CTPPriceType_value)
	proto.RegisterEnum("pb.CTPOffsetFlag", CTPOffsetFlag_name, CTPOffsetFlag_value)
	proto.RegisterEnum("pb.CTPHedgeType", CTPHedgeType_name, CTPHedgeType_value)
	proto.RegisterEnum("pb.CTPTradeType", CTPTradeType_name, CTPTradeType_value)
}

func init() { proto.RegisterFile("ctp.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 3721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x4b, 0x73, 0xe3, 0xc6,
	0x76, 0x36, 0x5f, 0x22, 0x79, 0xf8, 0x54, 0x4b, 0x1a, 0x61, 0x9e, 0xd6, 0x70, 0x6c, 0x5f, 0x59,
	0xe3, 0xcc, 0x38, 0xb2, 0xc7, 0x37, 0x71, 0xdd, 0xc5, 0xd5, 0x50, 0x9c, 0x31, 0xef, 0x95, 0x44,
	0x06, 0xe2, 0xd8, 0xf1, 0x26, 0x28, 0x0c, 0xd0, 0x92, 0x50, 0x22, 0x01, 0x1a, 0x00, 0x7d, 0x2f,
	0xef, 0xca, 0x9b, 0x2c, 0xb2, 0x4d, 0x55, 0xaa, 0x52, 0x95, 0x1f, 0x90, 0x45, 0x56, 0xd9, 0x66,
	0x93, 0xca, 0x3a, 0x8b, 0xac, 0xf3, 0x23, 0xb2, 0xc9, 0x2f, 0x48, 0xf5, 0x39, 0xdd, 0x40, 0x83,
	0x84, 0x2c, 0x79, 0x91, 0x1d, 0xfb, 0x3c, 0xfa, 0x79, 0xce, 0x77, 0xbe, 0x6e, 0x10, 0xea, 0x4e,
	0x3c, 0x7f, 0x31, 0x0f, 0x83, 0x38, 0x60, 0xc5, 0xf9, 0xfb, 0x07, 0x4d, 0x27, 0x98, 0xcd, 0x02,
	0x9f, 0x24, 0xbd, 0x9f, 0x0a, 0x00, 0xfd, 0xc9, 0x78, 0x14, 0xba, 0x3c, 0x1c, 0x1e, 0xb3, 0xfb,
	0x50, 0xbb, 0x08, 0x03, 0x3f, 0xb6, 0x3c, 0xd7, 0x28, 0xec, 0x15, 0xf6, 0x4b, 0x66, 0x15, 0xdb,
	0x43, 0x97, 0x3d, 0x06, 0x88, 0x78, 0x14, 0x79, 0x81, 0x2f, 0x94, 0x45, 0x54, 0xd6, 0xa5, 0x64,
	0xe8, 0xb2, 0x87, 0x50, 0x0f, 0x44, 0x27, 0x56, 0xc8, 0x2f, 0x8c, 0x12, 0x6a, 0x6b, 0x28, 0x30,
	0xf9, 0x85, 0x50, 0x46, 0x71, 0xe8, 0xf9, 0x97, 0xc2, 0xb5, 0xbc, 0x57, 0xd8, 0xaf, 0x9b, 0x35,
	0x12, 0x0c, 0xdd, 0xde, 0x7f, 0x37, 0xa0, 0xa6, 0xa6, 0xc0, 0x7a, 0xb0, 0x11, 0x2d, 0x67, 0xef,
	0x83, 0x29, 0x0e, 0xdf, 0x38, 0x84, 0x17, 0xf3, 0xf7, 0x2f, 0xce, 0x51, 0x62, 0x4a, 0x0d, 0x7b,
	0x02, 0x45, 0x39, 0x83, 0xc6, 0x61, 0x5b, 0xe8, 0xd3, 0x05, 0x98, 0x45, 0x0f, 0x67, 0x6a, 0x3b,
	0x4e, 0xb0, 0xa0, 0x65, 0x94, 0x70, 0xb8, 0xba, 0x94, 0x0c, 0x5d, 0xf6, 0x02, 0xea, 0xae, 0x17,
	0x72, 0x27, 0xf6, 0x02, 0x1f, 0x27, 0xd3, 0x3e, 0xec, 0xca, 0x5e, 0x8e, 0x95, 0xdc, 0x4c, 0x4d,
	0xd8, 0x01, 0x6c, 0x44, 0xb1, 0x1d, 0x2f, 0x22, 0xa3, 0x82, 0xc6, 0x4c, 0x1f, 0xf2, 0x1c, 0x35,
	0xa6, 0xb4, 0x60, 0x2f, 0x01, 0xe6, 0xa1, 0xe7, 0x70, 0x2b, 0x5e, 0xce, 0xb9, 0xb1, 0x91, 0xe9,
	0x7c, 0x2c, 0x14, 0x93, 0xe5, 0x9c, 0x9b, 0xf5, 0xb9, 0xfa, 0xc9, 0x3e, 0x84, 0xc6, 0xd4, 0x9b,
	0x79, 0xb1, 0x85, 0x22, 0xa3, 0xba, 0x57, 0xd8, 0x2f, 0x98, 0x80, 0x22, 0xb4, 0x67, 0xf7, 0x60,
	0xe3, 0xc7, 0x60, 0xba, 0x98, 0x71, 0xa3, 0xb6, 0x57, 0xd8, 0xaf, 0x98, 0xb2, 0xc5, 0x9e, 0x41,
	0x8b, 0x7e, 0x59, 0x71, 0x68, 0xbb, 0xdc, 0x35, 0xea, 0xa8, 0x6e, 0x92, 0x70, 0x82, 0x32, 0xf6,
	0x2b, 0xe8, 0x48, 0x23, 0xc7, 0xf6, 0x1d, 0x3e, 0xe5, 0xae, 0x01, 0x68, 0xd6, 0x26, 0x71, 0x5f,
	0x4a, 0xd9, 0x73, 0xd8, 0xbc, 0x08, 0x83, 0x3f, 0x71, 0xdf, 0x12, 0xd1, 0xe1, 0xe1, 0xa1, 0x1a,
	0x0d, 0x9c, 0x4c, 0x97, 0x14, 0xfd, 0x44, 0xce, 0x3e, 0x81, 0x4e, 0xc4, 0x7d, 0xd7, 0xa2, 0xf3,
	0x8e, 0xbd, 0x19, 0x37, 0x9a, 0x78, 0xe0, 0x2d, 0x21, 0xc6, 0x6d, 0x99, 0x78, 0x33, 0xce, 0xbe,
	0x80, 0x7b, 0xba, 0x5d, 0x68, 0xbb, 0x22, 0x02, 0x5c, 0x7b, 0x69, 0xb4, 0x70, 0x12, 0x5b, 0xa9,
	0x39, 0xe9, 0x8e, 0xed, 0x25, 0x33, 0xa0, 0x2a, 0xa6, 0xc0, 0xfd, 0xd8, 0x68, 0xe3, 0xc9, 0xa9,
	0xa6, 0x38, 0xd6, 0x90, 0xff, 0xb0, 0xe0, 0x11, 0x1e, 0x6b, 0x07, 0xbb, 0xa8, 0x4b, 0xc9, 0xd0,
	0x15, 0xb3, 0x9a, 0x06, 0x8e, 0x3d, 0x95, 0xc3, 0x45, 0xfc, 0x07, 0xa3, 0x8b, 0x36, 0x2d, 0x14,
	0xd3, 0x69, 0xf1, 0x1f, 0xd8, 0x3e, 0x74, 0x2f, 0x82, 0xd0, 0xe1, 0x96, 0x33, 0x0d, 0x22, 0x79,
	0x50, 0x9b, 0xb4, 0x29, 0x28, 0xef, 0x0b, 0x31, 0x9e, 0xcd, 0x01, 0x6c, 0xca, 0xbe, 0x82, 0x45,
	0xa8, 0xce, 0x94, 0xa1, 0x69, 0x07, 0x15, 0xe7, 0x28, 0x47, 0xdb, 0xaf, 0xa1, 0x4b, 0xb6, 0x57,
	0xdc, 0xbd, 0x94, 0xa6, 0x5b, 0x99, 0xe3, 0xff, 0x46, 0x28, 0xf0, 0xf8, 0xdb, 0x68, 0x99, 0xb4,
	0xc5, 0x38, 0x8b, 0x88, 0x87, 0xd6, 0x3c, 0x0c, 0xdc, 0x85, 0x13, 0x5b, 0x9e, 0x7f, 0x11, 0x18,
	0xdb, 0xb8, 0xf8, 0x8e, 0x50, 0x8c, 0x49, 0x3e, 0xf4, 0x2f, 0x02, 0xf6, 0x0a, 0x5a, 0xce, 0x22,
	0x0c, 0xb9, 0xef, 0x2c, 0x69, 0x90, 0x1d, 0x6d, 0x10, 0xa9, 0xc0, 0x41, 0x9a, 0x8e, 0xd6, 0x12,
	0x43, 0xf0, 0x3f, 0x3a, 0x57, 0xb6, 0x7f, 0xc9, 0xe5, 0xfe, 0x78, 0xae, 0x71, 0x8f, 0x86, 0x50,
	0x0a, 0x4a, 0x21, 0x91, 0x1f, 0x5b, 0xe2, 0x4c, 0x2d, 0x27, 0xf0, 0x5d, 0x4f, 0x64, 0x00, 0x0d,
	0xb4, 0x8b, 0x0b, 0xdf, 0x14, 0xaa, 0xbe, 0xd2, 0x60, 0xdf, 0xfb, 0xd0, 0x0d, 0x83, 0x45, 0xcc,
	0x2d, 0x2d, 0xe9, 0x0c, 0xec, 0xba, 0x8d, 0xf2, 0xa3, 0x24, 0xf3, 0x7a, 0x40, 0x67, 0x81, 0x1d,
	0x0a, 0xb3, 0xfb, 0xd8, 0x67, 0x03, 0x85, 0xa2, 0xaf, 0xa1, 0xcb, 0x9e, 0x00, 0x68, 0x21, 0xf8,
	0x80, 0xf2, 0x21, 0x95, 0xb0, 0x43, 0x68, 0x04, 0x17, 0x17, 0x11, 0x8f, 0xad, 0x8b, 0xa9, 0x7d,
	0x69, 0x3c, 0xc4, 0xe5, 0x6f, 0xaa, 0x94, 0x44, 0xcd, 0x9b, 0xa9, 0x7d, 0x69, 0x42, 0x90, 0xfc,
	0x16, 0x91, 0xc3, 0xc3, 0x30, 0x08, 0x2d, 0x27, 0x70, 0xb9, 0xf1, 0x88, 0x22, 0x07, 0x25, 0xfd,
	0xc0, 0xe5, 0x6c, 0x1b, 0x2a, 0x71, 0x70, 0xcd, 0x7d, 0xe3, 0x31, 0xce, 0x9a, 0x1a, 0xec, 0x01,
	0xd4, 0xa2, 0x38, 0x98, 0x4f, 0x83, 0x28, 0x32, 0x9e, 0xe0, 0x34, 0x92, 0xb6, 0xc8, 0xda, 0xd8,
	0xbe, 0xe6, 0xe2, 0xc4, 0x2e, 0xbc, 0xd8, 0xf8, 0x90, 0x66, 0x29, 0x44, 0x63, 0x94, 0x88, 0xec,
	0xa4, 0xb4, 0xb4, 0xec, 0x99, 0x58, 0xbc, 0xb1, 0x87, 0x26, 0x4d, 0x12, 0x1e, 0xa1, 0x4c, 0xcb,
	0xce, 0xd9, 0x62, 0x1a, 0x7b, 0xf3, 0x29, 0x37, 0x9e, 0xea, 0xd9, 0x79, 0x2a, 0xa5, 0xec, 0x33,
	0x81, 0x2a, 0x32, 0x36, 0x5c, 0xa3, 0x87, 0xc0, 0xd7, 0x12, 0x4b, 0x56, 0x91, 0x71, 0x2c, 0x20,
	0x85, 0x7e, 0x22, 0xfc, 0x49, 0x0c, 0xf2, 0x9c, 0x6b, 0xe3, 0x19, 0x0e, 0x2c, 0x11, 0xc7, 0x73,
	0xae, 0xc5, 0xd4, 0x64, 0xaa, 0xcf, 0xec, 0xf0, 0xd2, 0xf3, 0x8d, 0x8f, 0x68, 0x6a, 0x24, 0x3c,
	0x45, 0x99, 0x58, 0x20, 0x81, 0xad, 0xe5, 0xdb, 0x33, 0x6e, 0x7c, 0x8c, 0x1b, 0x03, 0x24, 0x3a,
	0xb3, 0x67, 0x9c, 0x7d, 0x0c, 0xed, 0x90, 0xdb, 0x51, 0x40, 0x80, 0x21, 0xb2, 0xf5, 0x13, 0xb4,
	0x69, 0x91, 0xb4, 0x4f, 0xc2, 0xde, 0xe7, 0xd0, 0x54, 0x48, 0x79, 0xe2, 0x45, 0x31, 0xdb, 0x83,
	0xf2, 0xd4, 0x8b, 0x62, 0xa3, 0xb0, 0x57, 0xda, 0x6f, 0x1c, 0x36, 0x75, 0x24, 0x35, 0x51, 0xd3,
	0x9b, 0x03, 0xfc, 0x2e, 0xf0, 0xfc, 0x98, 0xca, 0xc1, 0x9f, 0x41, 0x43, 0x4b, 0x6a, 0x59, 0x13,
	0xb2, 0x6e, 0x90, 0xa6, 0x37, 0xfb, 0x02, 0xda, 0xd9, 0x30, 0x97, 0x55, 0x22, 0xeb, 0xd1, 0xca,
	0x44, 0x7c, 0xef, 0x6f, 0xf4, 0x39, 0xfa, 0xd7, 0xec, 0x23, 0xd8, 0x98, 0xdb, 0xa1, 0x58, 0x52,
	0xde, 0x70, 0x52, 0xc7, 0xf6, 0xa1, 0xe6, 0x5c, 0x79, 0x53, 0x37, 0xe4, 0xbe, 0x51, 0xcc, 0x59,
	0x4d, 0xa2, 0xed, 0xfd, 0x57, 0x11, 0x76, 0xfa, 0x93, 0x31, 0x61, 0x2d, 0x29, 0x09, 0xb4, 0x56,
	0x0a, 0x55, 0x61, 0xbd, 0x50, 0x69, 0xa5, 0xf9, 0x86, 0x7a, 0xa7, 0x17, 0xef, 0xb4, 0x76, 0x96,
	0x6e, 0xac, 0x9d, 0x59, 0x10, 0x2d, 0xaf, 0x82, 0xa8, 0x5e, 0xff, 0x2b, 0xa8, 0xbc, 0xa1, 0xfe,
	0x6f, 0x90, 0x67, 0x5a, 0xff, 0x73, 0x11, 0xa6, 0x9a, 0x8f, 0x30, 0x49, 0xc2, 0xd5, 0xf4, 0x84,
	0xcb, 0xc3, 0x91, 0x7a, 0x1e, 0x8e, 0xf4, 0xfe, 0xbd, 0x08, 0x5b, 0x62, 0xdd, 0xbe, 0x19, 0xfb,
	0xda, 0xb6, 0xde, 0xb6, 0x9f, 0x9f, 0x42, 0x2d, 0x99, 0x59, 0xfe, 0x6e, 0x56, 0x03, 0x39, 0xc3,
	0xdc, 0xd5, 0x94, 0xf2, 0x57, 0x93, 0x6e, 0x7b, 0xf9, 0x8e, 0xdb, 0x5e, 0x59, 0xdd, 0xf6, 0x04,
	0xa0, 0x12, 0xda, 0xa0, 0x00, 0x0a, 0x11, 0x76, 0x1b, 0x2a, 0xd8, 0xc0, 0xfd, 0xac, 0x98, 0xd4,
	0x60, 0x5d, 0x28, 0xcd, 0xa2, 0x4b, 0xb9, 0x87, 0xe2, 0xe7, 0x2f, 0xd8, 0xc1, 0xbf, 0xaf, 0x42,
	0xbb, 0x3f, 0x19, 0x23, 0x4d, 0x30, 0xf9, 0x3c, 0x08, 0x6f, 0x0d, 0xc6, 0xfb, 0x50, 0x43, 0xf0,
	0x52, 0x9b, 0x57, 0x37, 0xab, 0xd8, 0xce, 0x6c, 0xc0, 0xcd, 0x71, 0xf7, 0x4b, 0x49, 0xd7, 0x36,
	0x54, 0x88, 0x11, 0x55, 0x10, 0x9d, 0xa8, 0xa1, 0x91, 0xa1, 0x8d, 0x0c, 0x19, 0x12, 0x78, 0x4c,
	0x70, 0x8b, 0x6c, 0xa4, 0x8a, 0x6c, 0x04, 0x48, 0x84, 0x54, 0xe4, 0x33, 0x60, 0xca, 0x40, 0xa3,
	0x21, 0xc4, 0xa8, 0xba, 0xd2, 0x2e, 0xe5, 0x20, 0x7a, 0xa0, 0xd4, 0x7f, 0x3e, 0x50, 0xb2, 0x84,
	0x0f, 0x6e, 0x27, 0x7c, 0x2f, 0x01, 0x34, 0x8a, 0xd0, 0xb8, 0x81, 0x22, 0xd4, 0xaf, 0x12, 0x76,
	0xf0, 0x12, 0x68, 0x21, 0xe4, 0xd0, 0xcc, 0x38, 0xe0, 0xf9, 0x91, 0x43, 0xac, 0x7e, 0x0a, 0x80,
	0xcf, 0x52, 0x04, 0x62, 0x5b, 0x77, 0x20, 0x04, 0xed, 0x9b, 0x02, 0x7c, 0xa5, 0x6c, 0x77, 0x6e,
	0x2b, 0xdb, 0xdd, 0xb5, 0xb2, 0xdd, 0x85, 0x52, 0x6c, 0xff, 0x11, 0x89, 0x56, 0xc1, 0x14, 0x3f,
	0x05, 0x5f, 0x8b, 0x83, 0x58, 0x40, 0x7b, 0x7c, 0xc5, 0x43, 0xeb, 0x82, 0x13, 0xb7, 0x2a, 0x98,
	0x2d, 0x14, 0x8f, 0x84, 0xf4, 0x0d, 0xe7, 0xec, 0x73, 0xd8, 0xf6, 0x7c, 0x2f, 0xf6, 0xc4, 0xf8,
	0x74, 0x84, 0x14, 0x18, 0x5b, 0x68, 0xcc, 0xa4, 0x8e, 0x08, 0x2f, 0x51, 0x66, 0x03, 0xaa, 0x21,
	0x8f, 0x78, 0xf8, 0x23, 0x47, 0x16, 0x55, 0x30, 0x55, 0x73, 0x95, 0x3c, 0xec, 0xdc, 0x85, 0x3c,
	0xe4, 0x25, 0xd5, 0xbd, 0x5c, 0x7a, 0xb3, 0x52, 0x34, 0x77, 0xd7, 0x8a, 0x66, 0xb6, 0x32, 0x1b,
	0x2b, 0x95, 0xb9, 0xf7, 0x1b, 0x60, 0xd9, 0x9c, 0xc4, 0x92, 0xf9, 0x49, 0xa6, 0x64, 0x32, 0xfd,
	0xe4, 0xc9, 0x4a, 0x16, 0xce, 0xff, 0x2d, 0xc3, 0xb6, 0x08, 0xba, 0x20, 0x42, 0x6a, 0x76, 0xbe,
	0x98, 0xcd, 0x6c, 0x4c, 0xa5, 0x4c, 0xea, 0x15, 0x6e, 0x4f, 0x3d, 0x06, 0x65, 0x0c, 0x9b, 0x22,
	0x9e, 0x32, 0xfe, 0xce, 0xdd, 0x84, 0x52, 0xee, 0x26, 0x3c, 0x80, 0xda, 0x5c, 0x4e, 0x41, 0x96,
	0x97, 0xa4, 0x2d, 0xd2, 0x57, 0xd2, 0x21, 0xca, 0x6a, 0xd9, 0x12, 0x23, 0x3a, 0x41, 0x14, 0x63,
	0x52, 0x17, 0x4c, 0xfc, 0x2d, 0x6c, 0x89, 0x91, 0x48, 0xd0, 0x93, 0x2d, 0xf6, 0x08, 0xea, 0xf6,
	0x8f, 0xb6, 0x37, 0xb5, 0xdf, 0x4f, 0xd5, 0x95, 0x28, 0x15, 0x08, 0x4a, 0xa5, 0x46, 0x53, 0xe4,
	0xac, 0x8e, 0x9d, 0xb6, 0x95, 0x38, 0x25, 0x68, 0xc8, 0xff, 0x5d, 0x65, 0x06, 0xc4, 0x82, 0x48,
	0x28, 0x8d, 0xee, 0xc1, 0x86, 0xe4, 0x48, 0x74, 0x15, 0x92, 0xad, 0x75, 0x0a, 0xd5, 0xcc, 0xa1,
	0x50, 0xd9, 0x8c, 0x68, 0xad, 0x65, 0x44, 0xee, 0x95, 0xab, 0x7d, 0xc3, 0x95, 0xeb, 0x01, 0xd4,
	0x3c, 0x3f, 0xe6, 0x21, 0x8f, 0x62, 0xcc, 0xbe, 0x82, 0x99, 0xb4, 0xc5, 0x9a, 0x65, 0x47, 0x89,
	0x09, 0xe5, 0x5f, 0x9b, 0xc4, 0x43, 0x65, 0xf8, 0x18, 0x60, 0x16, 0xcf, 0xd4, 0x82, 0x29, 0x15,
	0xeb, 0xb3, 0x78, 0x26, 0x57, 0x7b, 0x08, 0x3b, 0xce, 0x94, 0xdb, 0x21, 0x77, 0xad, 0xec, 0xd6,
	0x50, 0x5a, 0x6e, 0x49, 0x65, 0x5f, 0xdb, 0xa1, 0xde, 0xff, 0x94, 0xa1, 0xa1, 0x05, 0xdd, 0x9d,
	0xae, 0xef, 0x5f, 0x41, 0x3d, 0x52, 0xc1, 0x29, 0xeb, 0xb0, 0xa1, 0x10, 0x73, 0x35, 0x78, 0xcd,
	0xd4, 0x94, 0x1d, 0x09, 0xc0, 0x70, 0xed, 0xa5, 0x95, 0x7a, 0x97, 0x6e, 0xf1, 0x6e, 0xa3, 0x43,
	0x9a, 0x0a, 0x43, 0xd8, 0x5a, 0xf2, 0x28, 0xe6, 0x61, 0xb6, 0x9b, 0xf2, 0x2d, 0xdd, 0xb0, 0xc4,
	0x29, 0xed, 0xea, 0x73, 0xd8, 0x9e, 0x87, 0xdc, 0x8a, 0x78, 0x1c, 0x4f, 0xb9, 0xe0, 0xba, 0x96,
	0x5e, 0xaf, 0xd8, 0x3c, 0xe4, 0xe7, 0x89, 0x8a, 0x60, 0xe9, 0x53, 0xe8, 0xae, 0x59, 0x53, 0xc4,
	0x77, 0xa2, 0x15, 0xd3, 0xc7, 0x00, 0x53, 0x3b, 0xca, 0x3e, 0x0a, 0xd4, 0x85, 0x84, 0xd4, 0xb2,
	0xdc, 0x65, 0xcb, 0x18, 0xc4, 0x69, 0x01, 0x7b, 0x0a, 0x4d, 0x75, 0x61, 0xc0, 0x54, 0xa6, 0xb7,
	0x81, 0x86, 0x94, 0x61, 0x01, 0xc8, 0xb9, 0x7c, 0x34, 0xee, 0x70, 0xf9, 0x68, 0xfe, 0xa2, 0xcb,
	0x47, 0x6b, 0xf5, 0xf2, 0xb1, 0x02, 0x91, 0xed, 0x3c, 0x88, 0xd4, 0x20, 0xa6, 0xb3, 0xc2, 0x42,
	0x7a, 0x5f, 0x41, 0x47, 0x3b, 0x21, 0xc4, 0xc7, 0x67, 0x19, 0x7c, 0xec, 0xac, 0x1c, 0xa2, 0x04,
	0xc7, 0xff, 0xac, 0x23, 0x63, 0xa4, 0xbb, 0x3d, 0x41, 0xa7, 0x13, 0x84, 0xee, 0x6d, 0xa4, 0x27,
	0x0d, 0xe7, 0xe2, 0xdd, 0x98, 0x4d, 0xe9, 0x76, 0x78, 0xfd, 0x10, 0x1a, 0xc1, 0x9c, 0xfb, 0x96,
	0x24, 0x32, 0x84, 0x91, 0x20, 0x44, 0xdf, 0x26, 0x64, 0x06, 0x0d, 0x32, 0x50, 0x89, 0x06, 0xf2,
	0xde, 0x98, 0x62, 0x57, 0x86, 0x0c, 0x49, 0xec, 0xfa, 0x36, 0x79, 0x1f, 0x92, 0x46, 0xb2, 0x9f,
	0xaa, 0x0e, 0x70, 0xb2, 0xa7, 0x87, 0x50, 0xc7, 0xa1, 0x90, 0x35, 0xd5, 0xe4, 0xa3, 0xdd, 0x9c,
	0xfb, 0xc8, 0x99, 0xf6, 0xa1, 0x4b, 0x4a, 0x2d, 0xd4, 0x28, 0x90, 0xda, 0x68, 0x93, 0x86, 0xdb,
	0x21, 0xb4, 0xd0, 0x32, 0x21, 0x12, 0x90, 0x4b, 0x9a, 0x70, 0x59, 0x1a, 0xa9, 0x48, 0x7a, 0x47,
	0x52, 0xd1, 0xc0, 0xcd, 0x6f, 0xa8, 0xae, 0x39, 0x3d, 0xe9, 0x68, 0x36, 0x09, 0xff, 0xa9, 0x98,
	0xad, 0xc4, 0x0a, 0x63, 0x59, 0xd9, 0x69, 0xc4, 0xaa, 0x95, 0xda, 0xa5, 0x0f, 0x2d, 0x8f, 0x01,
	0xe4, 0xa3, 0x8f, 0x27, 0x83, 0xaf, 0x64, 0xd6, 0x51, 0x82, 0x0b, 0x3e, 0x80, 0x4d, 0xa9, 0xd6,
	0x56, 0x4c, 0x5c, 0xa7, 0xe3, 0xa8, 0xc8, 0x91, 0x4b, 0xfe, 0x12, 0xda, 0x64, 0x9b, 0xac, 0xb9,
	0x9b, 0xbb, 0x66, 0xda, 0x6f, 0xb5, 0xe8, 0x8f, 0x94, 0x57, 0xb2, 0xea, 0x4d, 0x5c, 0x75, 0x33,
	0xe9, 0x5e, 0x2c, 0x7b, 0x1f, 0xba, 0xba, 0x95, 0xf6, 0xec, 0xd4, 0x4e, 0xed, 0xd4, 0xd3, 0x0b,
	0x59, 0xae, 0xbc, 0x3a, 0x29, 0xcb, 0x74, 0xe9, 0x4f, 0x81, 0xc6, 0x50, 0x98, 0x4e, 0xc4, 0xa8,
	0x81, 0x32, 0x89, 0xff, 0x37, 0x21, 0xda, 0xce, 0x8d, 0x88, 0xb6, 0xf6, 0x18, 0x75, 0xef, 0x4e,
	0x8f, 0x51, 0xbf, 0x92, 0xc7, 0xa5, 0xd5, 0xbd, 0x5d, 0x2a, 0x58, 0x42, 0xac, 0x55, 0xbd, 0x4f,
	0xd5, 0xf2, 0x34, 0x4b, 0x62, 0x4d, 0x74, 0x1e, 0x9a, 0x69, 0x5a, 0xaa, 0xef, 0x67, 0x4a, 0xf5,
	0x0b, 0xd8, 0x52, 0xec, 0x51, 0x4f, 0x2a, 0x7a, 0x57, 0xda, 0x94, 0xaa, 0x51, 0x9a, 0x5b, 0x39,
	0xb0, 0xf8, 0x30, 0x17, 0x16, 0x73, 0xaa, 0xee, 0xa3, 0xdc, 0xaa, 0x9b, 0x47, 0x9d, 0x1e, 0xe7,
	0x52, 0xa7, 0x1c, 0xf2, 0xf2, 0x24, 0x8f, 0xbc, 0xf4, 0xde, 0xc0, 0x6e, 0x0e, 0x98, 0x21, 0x1a,
	0x3e, 0xcf, 0xa0, 0xe1, 0xae, 0x8c, 0xc6, 0x55, 0x53, 0x89, 0x8a, 0xff, 0x54, 0x84, 0x56, 0x7f,
	0x32, 0x26, 0xc2, 0x62, 0xda, 0xb1, 0x00, 0xfb, 0x9a, 0x62, 0xff, 0x3a, 0x55, 0x1c, 0x48, 0x19,
	0x1e, 0x66, 0x62, 0x21, 0x36, 0x5d, 0x83, 0xc7, 0x7a, 0x02, 0x89, 0x06, 0x54, 0x65, 0x45, 0x90,
	0x24, 0x51, 0x35, 0x45, 0x02, 0x4c, 0x03, 0xff, 0xd2, 0x7a, 0xbf, 0xd4, 0xf1, 0xaf, 0x60, 0x36,
	0x85, 0xf4, 0xf5, 0x52, 0x62, 0x97, 0x66, 0x95, 0x01, 0x41, 0x69, 0x25, 0x8f, 0xea, 0x13, 0xe8,
	0x44, 0x57, 0x41, 0x18, 0x6b, 0x9d, 0x51, 0x39, 0x6d, 0xa1, 0x38, 0xe9, 0x4d, 0xb7, 0xcb, 0x60,
	0xa1, 0xb2, 0x93, 0xfd, 0xb5, 0xf1, 0xb3, 0x02, 0x20, 0x2a, 0x14, 0x3d, 0xb7, 0xf7, 0x2f, 0x05,
	0x6d, 0x77, 0x86, 0x31, 0x9f, 0xe5, 0xcc, 0xbe, 0x70, 0xa7, 0xd9, 0x17, 0xef, 0x36, 0xfb, 0xd2,
	0x1d, 0x67, 0x5f, 0xce, 0x99, 0x7d, 0xef, 0x5f, 0x0b, 0xf4, 0xca, 0x94, 0xa4, 0x84, 0x38, 0x4f,
	0x9c, 0xf5, 0x43, 0xa8, 0xa7, 0xbe, 0x34, 0xe1, 0xda, 0xfb, 0x65, 0x5a, 0x01, 0xd2, 0x09, 0x14,
	0x95, 0x52, 0x8e, 0x6d, 0x40, 0x75, 0xe6, 0xf9, 0xde, 0x6c, 0x31, 0x93, 0x73, 0x53, 0xcd, 0xd5,
	0x8b, 0x54, 0xf9, 0x2e, 0x17, 0x29, 0xbc, 0x02, 0x5e, 0xe2, 0x51, 0xd6, 0xc5, 0x15, 0xf0, 0xb2,
	0xf7, 0x6f, 0x05, 0xd8, 0x5c, 0x9b, 0xf3, 0xff, 0x7b, 0x0c, 0xbe, 0x82, 0x9a, 0xc0, 0x38, 0xcf,
	0xbf, 0x8c, 0x8c, 0x32, 0xa6, 0xc9, 0x7d, 0x95, 0x26, 0x6b, 0x9b, 0x67, 0x26, 0xa6, 0x32, 0x3c,
	0x2a, 0x49, 0x78, 0xfc, 0x5d, 0x25, 0x79, 0x42, 0xf1, 0xfc, 0xcb, 0x77, 0xbe, 0x17, 0xdf, 0x89,
	0xfd, 0x3e, 0xd7, 0xee, 0x47, 0xc5, 0x7c, 0xca, 0x92, 0x5e, 0x98, 0xfe, 0x02, 0xe8, 0x43, 0x83,
	0x35, 0xf5, 0xfc, 0x6b, 0x0b, 0x13, 0xbb, 0x84, 0x3e, 0x5d, 0xbd, 0xcc, 0x9c, 0x78, 0xfe, 0xb5,
	0xd9, 0x0a, 0xd4, 0x4f, 0xc4, 0x81, 0x21, 0x6c, 0x27, 0x58, 0xe2, 0xf2, 0xd8, 0xf6, 0xa6, 0xe4,
	0x5e, 0xfe, 0x79, 0x5c, 0x60, 0xca, 0xe9, 0x18, 0x7d, 0xb0, 0xab, 0x23, 0xe8, 0x5e, 0x79, 0x51,
	0x1c, 0x84, 0x4b, 0xcb, 0x89, 0x43, 0xea, 0xa6, 0xf2, 0xf3, 0xdd, 0xb4, 0xa5, 0x43, 0x3f, 0xa6,
	0x67, 0xdf, 0xaf, 0x81, 0xa9, 0x2e, 0xd4, 0x7a, 0xf0, 0xba, 0xb7, 0xfe, 0x6c, 0xaa, 0x86, 0x4a,
	0x9f, 0x8c, 0x7f, 0x9b, 0xfa, 0x52, 0x3d, 0x44, 0xdf, 0xea, 0x8d, 0xb7, 0x61, 0xd5, 0x03, 0xca,
	0xb0, 0x87, 0x2c, 0x9b, 0x86, 0x55, 0x36, 0xfd, 0x12, 0xb6, 0x51, 0x3d, 0x73, 0x23, 0x6b, 0x31,
	0x77, 0xed, 0x58, 0xf2, 0x83, 0x06, 0x1e, 0xf5, 0xa6, 0xd0, 0x9d, 0xba, 0xd1, 0x3b, 0xd4, 0x20,
	0x4f, 0xc8, 0x72, 0xdc, 0xe6, 0x2a, 0xc7, 0xcd, 0x29, 0x21, 0xad, 0xdc, 0x12, 0xf2, 0x31, 0x14,
	0x9d, 0x10, 0x69, 0x48, 0xe3, 0x70, 0x27, 0x37, 0x04, 0xcd, 0xa2, 0x13, 0xb2, 0xa7, 0x50, 0x9c,
	0x85, 0xc8, 0x43, 0x1a, 0x49, 0x8a, 0xa5, 0x90, 0x6d, 0x16, 0x67, 0x61, 0x6f, 0x86, 0xb9, 0xff,
	0x26, 0xfd, 0x7c, 0xe5, 0xcd, 0xb8, 0xb9, 0x98, 0xe2, 0xcb, 0x61, 0x14, 0xdb, 0x61, 0x2c, 0x3f,
	0xe6, 0x52, 0x43, 0x64, 0x22, 0xf7, 0xd5, 0x37, 0x5c, 0xf1, 0x93, 0x7d, 0x06, 0xcc, 0xf5, 0x22,
	0x71, 0x85, 0xa6, 0x32, 0x49, 0x4e, 0xf4, 0x19, 0xb7, 0x2b, 0x35, 0xa2, 0x4a, 0x9e, 0x0b, 0x79,
	0xef, 0x3f, 0xaa, 0xf8, 0xd4, 0xa0, 0x85, 0xfe, 0x68, 0x8e, 0xf1, 0xfa, 0x6b, 0x30, 0xb4, 0xaf,
	0x99, 0x96, 0xde, 0x25, 0xce, 0xa0, 0x62, 0xee, 0xa4, 0x9f, 0x36, 0x8f, 0xd3, 0x6e, 0xd9, 0x2b,
	0xd8, 0xd5, 0x1d, 0xb5, 0x0f, 0x74, 0xf2, 0x19, 0x62, 0x3b, 0xf5, 0x4b, 0x97, 0xc9, 0x86, 0xf0,
	0x54, 0x50, 0x96, 0xb4, 0x6a, 0xf2, 0xd0, 0xe1, 0x7e, 0x6c, 0x0b, 0x2e, 0x74, 0x15, 0xf2, 0xe8,
	0x2a, 0x98, 0xba, 0x12, 0xba, 0x9e, 0xcc, 0x43, 0xae, 0x32, 0x6c, 0x9c, 0x98, 0x4d, 0x94, 0x15,
	0xfb, 0x12, 0xee, 0x65, 0xba, 0x4a, 0xfd, 0x09, 0x6e, 0xb7, 0x35, 0xff, 0xd4, 0x6b, 0x00, 0x1f,
	0x0a, 0x2f, 0x79, 0xde, 0xb9, 0xc3, 0x53, 0xe9, 0x7a, 0x34, 0x0f, 0x39, 0xa1, 0x6a, 0xde, 0xe0,
	0x92, 0x7a, 0xa9, 0x0f, 0xba, 0x89, 0xef, 0x46, 0x42, 0xbd, 0xc8, 0x37, 0xf5, 0xf8, 0x1d, 0xf4,
	0x22, 0xcf, 0xbf, 0x9c, 0xf2, 0xe4, 0xab, 0x21, 0x11, 0x1e, 0xeb, 0x0f, 0xdc, 0xbb, 0xbc, 0x8a,
	0x2d, 0xdc, 0x2e, 0x59, 0xe7, 0x9e, 0x90, 0xa5, 0xbc, 0xaf, 0x51, 0xe8, 0x7c, 0x87, 0x66, 0x27,
	0xc2, 0x8a, 0x7d, 0x09, 0xb5, 0x0b, 0x47, 0xe6, 0x64, 0x2d, 0x03, 0x88, 0xeb, 0x11, 0x65, 0x56,
	0x2f, 0x1c, 0xca, 0xcb, 0xa7, 0xd0, 0xcc, 0x9c, 0xaf, 0xb8, 0x1a, 0xd4, 0xcc, 0x86, 0x16, 0x2c,
	0xec, 0x6b, 0x68, 0x38, 0xa1, 0x95, 0x80, 0x2d, 0xdc, 0x06, 0xb6, 0xe0, 0x84, 0xe7, 0x0a, 0x6e,
	0x0f, 0xa1, 0x21, 0x57, 0x14, 0xda, 0x31, 0x25, 0xe3, 0x6a, 0xf8, 0x93, 0xcf, 0x2c, 0x65, 0x2f,
	0x2f, 0x61, 0x4b, 0x7d, 0xa2, 0xb3, 0x1c, 0xdb, 0x77, 0x3d, 0x91, 0xb2, 0x91, 0xd1, 0xdc, 0x2b,
	0xed, 0x57, 0x4c, 0xa6, 0x54, 0xfd, 0x44, 0x23, 0x0e, 0x5d, 0xfb, 0x8e, 0xa7, 0xfb, 0xb4, 0xd0,
	0x67, 0x3b, 0xfd, 0xa4, 0xa7, 0x79, 0x3d, 0x87, 0xcd, 0xf4, 0xab, 0xba, 0x72, 0x68, 0xa3, 0x43,
	0x37, 0xf9, 0xae, 0xae, 0x8c, 0x7f, 0x0d, 0x46, 0x36, 0xb3, 0xe8, 0xfa, 0x8b, 0x9b, 0xdd, 0xd9,
	0x2b, 0xed, 0xd7, 0xcd, 0x1d, 0x3d, 0xbf, 0x50, 0x8b, 0xfb, 0xfb, 0x0a, 0x76, 0x33, 0x8e, 0xce,
	0xd4, 0x8e, 0x22, 0xf2, 0xeb, 0xa2, 0xdf, 0xb6, 0xe6, 0xd7, 0x17, 0x4a, 0xf9, 0x5c, 0x48, 0xe4,
	0xda, 0xb5, 0x97, 0x91, 0x8c, 0x82, 0xcd, 0xf4, 0x2e, 0x74, 0x6c, 0x2f, 0x23, 0x3c, 0xf4, 0xde,
	0x3f, 0x54, 0xa0, 0x43, 0xdb, 0xd8, 0xbf, 0xe2, 0xce, 0xf5, 0x2f, 0x42, 0x8b, 0x03, 0xd8, 0xd4,
	0x3f, 0xa1, 0xd3, 0x97, 0xb6, 0x12, 0x5d, 0x94, 0xd2, 0x6f, 0xe8, 0xf4, 0x4d, 0xe6, 0x19, 0xb4,
	0xfe, 0x60, 0x87, 0xbe, 0xb8, 0x4e, 0x4d, 0xf9, 0x8f, 0x7c, 0xaa, 0x08, 0x9f, 0x14, 0x9e, 0x08,
	0xd9, 0x6a, 0x87, 0x64, 0x48, 0x89, 0xa3, 0x75, 0x48, 0xb6, 0x5f, 0xc1, 0x2e, 0xfd, 0x83, 0xc5,
	0x7a, 0x6f, 0x4f, 0x6d, 0xdf, 0xd1, 0x60, 0x96, 0xd2, 0x65, 0x87, 0xd4, 0xaf, 0x49, 0x9b, 0xa0,
	0xed, 0x1b, 0xd8, 0xcb, 0xec, 0xe7, 0xc2, 0x17, 0x85, 0x28, 0x3b, 0xb7, 0x2a, 0xc6, 0xf0, 0x23,
	0x6d, 0x63, 0xdf, 0x09, 0xab, 0xef, 0xf4, 0xb9, 0xfe, 0x16, 0x1e, 0x67, 0x9c, 0x04, 0x31, 0x9b,
	0x87, 0xfc, 0x82, 0x87, 0x22, 0x52, 0xbd, 0x00, 0xef, 0xd1, 0x05, 0xf3, 0xbe, 0xbe, 0xc0, 0xd7,
	0xcb, 0x31, 0x5a, 0x98, 0xc2, 0x80, 0xbd, 0x85, 0xa7, 0x6b, 0xab, 0x5d, 0xeb, 0x85, 0x9e, 0x2d,
	0x1f, 0xad, 0xac, 0x3e, 0xdb, 0xd1, 0x2b, 0xd8, 0x5d, 0x9b, 0x8a, 0xbc, 0x05, 0x51, 0x95, 0xdb,
	0xce, 0x4e, 0x42, 0xbe, 0x4c, 0xfe, 0x06, 0x1e, 0xe6, 0x8e, 0x9f, 0x79, 0xeb, 0xdc, 0x5d, 0x1b,
	0x59, 0x7a, 0x7f, 0x0c, 0x6d, 0x99, 0x98, 0x0e, 0xf7, 0xa6, 0x9e, 0x7f, 0x29, 0x2b, 0x60, 0x8b,
	0xa4, 0x7d, 0x12, 0x8a, 0x63, 0x4a, 0xb0, 0x94, 0xb8, 0x67, 0x62, 0x4f, 0xaf, 0x42, 0x3b, 0x4a,
	0x4d, 0x4c, 0x54, 0xfa, 0xf5, 0xfe, 0xb1, 0x08, 0xdb, 0xe9, 0x3d, 0x53, 0xab, 0x2d, 0xc4, 0xbf,
	0x0a, 0x8a, 0x7f, 0xe9, 0x7f, 0x14, 0x29, 0x66, 0xff, 0x28, 0x92, 0x7d, 0x68, 0xbb, 0x0c, 0x83,
	0xc5, 0x5c, 0x45, 0x67, 0x2a, 0x7f, 0x2b, 0xc4, 0xec, 0x10, 0x76, 0x92, 0xc7, 0x63, 0xcb, 0x11,
	0x89, 0xa0, 0x45, 0x69, 0xc5, 0xdc, 0x4a, 0x94, 0x98, 0x24, 0x14, 0x00, 0x1f, 0x41, 0x3b, 0x13,
	0xfd, 0x3e, 0x46, 0x6a, 0xcd, 0x6c, 0x6a, 0xa1, 0x2f, 0x2e, 0x9e, 0xb5, 0x99, 0x93, 0x21, 0x3a,
	0x5b, 0x02, 0xbc, 0x56, 0x52, 0xce, 0xac, 0xce, 0x6e, 0x80, 0xd3, 0xea, 0x1a, 0x9c, 0xf6, 0xfe,
	0xb6, 0x88, 0x74, 0x59, 0x96, 0x5d, 0x79, 0x6f, 0x64, 0x7f, 0x0e, 0x55, 0x7c, 0xc9, 0x0c, 0x97,
	0x92, 0x75, 0x22, 0x2b, 0x93, 0xda, 0xd3, 0xc0, 0xe7, 0xf4, 0x68, 0x19, 0x2e, 0x4d, 0x65, 0xc7,
	0x0e, 0xa1, 0x36, 0x53, 0x4c, 0xae, 0x98, 0x32, 0x39, 0x34, 0x9e, 0x84, 0xb6, 0x1f, 0x89, 0x08,
	0x23, 0x26, 0x57, 0x9d, 0x49, 0x0a, 0xf7, 0x1c, 0xaa, 0xf1, 0x42, 0xa7, 0xa0, 0x3a, 0xf7, 0x92,
	0x2c, 0xc0, 0xdc, 0x88, 0x17, 0x68, 0xbc, 0x0f, 0x5d, 0xa4, 0x54, 0xb4, 0xdd, 0x96, 0x40, 0x42,
	0xb9, 0xa3, 0x6d, 0x21, 0xa7, 0xf3, 0x3d, 0x16, 0x90, 0x7d, 0x08, 0xd5, 0x00, 0xcf, 0x97, 0xfe,
	0x5d, 0x25, 0x5f, 0x61, 0xf3, 0x02, 0xc0, 0x54, 0x86, 0xbd, 0x3f, 0xc1, 0xfd, 0xb5, 0x6d, 0x38,
	0xf7, 0xed, 0x79, 0x74, 0x15, 0xc4, 0xec, 0x25, 0x54, 0xe5, 0x45, 0x5b, 0x6e, 0xc7, 0x4e, 0x76,
	0x9e, 0xd2, 0xde, 0x54, 0x56, 0xf8, 0xb9, 0xc3, 0x93, 0x97, 0x9f, 0x92, 0x89, 0xbf, 0xf5, 0xd8,
	0x2a, 0x65, 0x62, 0xeb, 0xe0, 0x19, 0xfe, 0x59, 0x20, 0x79, 0xd8, 0x63, 0x35, 0x28, 0x9f, 0x8c,
	0xce, 0xde, 0x76, 0x3f, 0x60, 0x75, 0xa8, 0x9c, 0x7f, 0x33, 0x32, 0x27, 0xdd, 0xc2, 0xc1, 0x4f,
	0x05, 0xbc, 0x1a, 0x68, 0x7f, 0x10, 0x13, 0x76, 0xc7, 0xa3, 0xb3, 0x41, 0xf7, 0x03, 0xf6, 0x18,
	0xee, 0x8f, 0x07, 0x67, 0xc7, 0xc3, 0xb3, 0xb7, 0xd6, 0x77, 0xc3, 0xc9, 0x37, 0xd6, 0xf8, 0xc8,
	0x9c, 0x0c, 0x8f, 0x4e, 0x2c, 0x54, 0x17, 0xd8, 0x13, 0x78, 0xd0, 0x3f, 0x3a, 0xeb, 0x0f, 0x4e,
	0x06, 0xc7, 0x39, 0xfa, 0x22, 0x6b, 0x40, 0x55, 0xba, 0x77, 0x4b, 0xac, 0x09, 0x35, 0x65, 0xdc,
	0x2d, 0x33, 0x80, 0x8d, 0x77, 0x67, 0xbf, 0x1f, 0x7d, 0x77, 0xd6, 0xad, 0x1c, 0xfc, 0x15, 0xce,
	0x33, 0xf9, 0x02, 0xc9, 0x3a, 0xd0, 0x38, 0x19, 0x9e, 0x0e, 0x27, 0xd6, 0xd8, 0x1c, 0xf6, 0xc5,
	0x34, 0xba, 0xd0, 0x3c, 0x3d, 0x32, 0x7f, 0x3f, 0x50, 0x92, 0x02, 0x6b, 0x03, 0xbc, 0x1e, 0x9c,
	0xab, 0x76, 0x51, 0xb4, 0x4f, 0x8e, 0x92, 0x76, 0xe9, 0x80, 0xe3, 0x75, 0x38, 0xbd, 0xdc, 0x89,
	0x35, 0x9d, 0xd1, 0x9a, 0x6a, 0x50, 0x1e, 0x8d, 0x07, 0x67, 0xdd, 0x82, 0xd8, 0x85, 0xfe, 0xc9,
	0xe8, 0x5c, 0xf8, 0x77, 0xa0, 0xf1, 0x66, 0x64, 0xf6, 0x07, 0x16, 0x09, 0x4a, 0x42, 0x80, 0x3f,
	0xad, 0xc9, 0xe8, 0xf8, 0xe8, 0xfb, 0x6e, 0x99, 0x6d, 0x41, 0x87, 0x04, 0xdf, 0x0f, 0xce, 0x27,
	0x03, 0x53, 0x08, 0x2b, 0x07, 0x7f, 0x89, 0x33, 0x4f, 0x5f, 0xae, 0x3a, 0xd0, 0x38, 0x1f, 0x0f,
	0xfa, 0xef, 0x4e, 0x8e, 0x26, 0xc3, 0xd1, 0x59, 0xf7, 0x03, 0xd6, 0x82, 0xfa, 0x91, 0xf9, 0x7a,
	0x38, 0x31, 0x8f, 0xde, 0x0e, 0x68, 0xc4, 0x6f, 0x06, 0xc7, 0x6f, 0x07, 0xdd, 0xe2, 0xc1, 0x3f,
	0x17, 0xd0, 0x37, 0x7d, 0x1f, 0x03, 0xd8, 0x38, 0x1b, 0x99, 0xa7, 0x47, 0x27, 0xdd, 0x0f, 0xd8,
	0x0e, 0x6c, 0x8e, 0xc6, 0xa2, 0x8b, 0x73, 0x6b, 0xf0, 0xd7, 0x83, 0xfe, 0x3b, 0xec, 0xad, 0xc0,
	0xaa, 0x50, 0x1a, 0x4d, 0xfa, 0x34, 0xdd, 0xc1, 0x9b, 0xb1, 0x75, 0x3c, 0x30, 0x87, 0xdf, 0x0e,
	0x8e, 0xbb, 0x25, 0xb6, 0x0b, 0x5b, 0xfd, 0xd1, 0xe9, 0xeb, 0xe1, 0x19, 0x0e, 0x9c, 0x28, 0xca,
	0x8c, 0x41, 0xfb, 0x78, 0x70, 0x32, 0xfc, 0x76, 0x60, 0x7e, 0x2f, 0xd7, 0x56, 0x61, 0xf7, 0x80,
	0x9d, 0x0f, 0x26, 0x93, 0x93, 0xc1, 0xe9, 0xe0, 0x6c, 0x92, 0xd8, 0x6e, 0x88, 0x51, 0xc7, 0x27,
	0x47, 0xfd, 0xac, 0xb8, 0xfa, 0x7e, 0x03, 0xff, 0x7d, 0xf9, 0xc5, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xb9, 0xdb, 0x53, 0x7d, 0x9c, 0x29, 0x00, 0x00,
}
