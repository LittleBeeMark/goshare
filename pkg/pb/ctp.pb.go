// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ctp.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 方向
type CTPDirection int32

const (
	CTPDirection_LONG  CTPDirection = 0
	CTPDirection_SHORT CTPDirection = 1
)

var CTPDirection_name = map[int32]string{
	0: "LONG",
	1: "SHORT",
}
var CTPDirection_value = map[string]int32{
	"LONG":  0,
	"SHORT": 1,
}

func (x CTPDirection) String() string {
	return proto.EnumName(CTPDirection_name, int32(x))
}
func (CTPDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// 状态
type CTPOrderStatus int32

const (
	// 完全成交
	CTPOrderStatus_CTP_OS_DONE CTPOrderStatus = 0
	// 部分成交还在队列中
	CTPOrderStatus_CTP_OS_PENDING_WITH_PARTIAL_DONE CTPOrderStatus = 1
	// 部分成交且已撤单
	CTPOrderStatus_CTP_OS_CANCELED_WITH_PARTIAL_DONE CTPOrderStatus = 2
	// 队列中
	CTPOrderStatus_CTP_OS_PENDING CTPOrderStatus = 3
	// 已经撤单
	CTPOrderStatus_CTP_OS_CANCELED CTPOrderStatus = 4
	// 未知
	CTPOrderStatus_CTP_OS_UNKOWN CTPOrderStatus = 5
)

var CTPOrderStatus_name = map[int32]string{
	0: "CTP_OS_DONE",
	1: "CTP_OS_PENDING_WITH_PARTIAL_DONE",
	2: "CTP_OS_CANCELED_WITH_PARTIAL_DONE",
	3: "CTP_OS_PENDING",
	4: "CTP_OS_CANCELED",
	5: "CTP_OS_UNKOWN",
}
var CTPOrderStatus_value = map[string]int32{
	"CTP_OS_DONE":                       0,
	"CTP_OS_PENDING_WITH_PARTIAL_DONE":  1,
	"CTP_OS_CANCELED_WITH_PARTIAL_DONE": 2,
	"CTP_OS_PENDING":                    3,
	"CTP_OS_CANCELED":                   4,
	"CTP_OS_UNKOWN":                     5,
}

func (x CTPOrderStatus) String() string {
	return proto.EnumName(CTPOrderStatus_name, int32(x))
}
func (CTPOrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type CTPPriceType int32

const (
	// 限价
	CTPPriceType_LIMIT_PRICE CTPPriceType = 0
	// 市价
	CTPPriceType_MARKET_PRICE CTPPriceType = 1
	// 最优价
	CTPPriceType_BEST_PRICE CTPPriceType = 2
	// 最新价
	CTPPriceType_LAST_PRICE CTPPriceType = 3
)

var CTPPriceType_name = map[int32]string{
	0: "LIMIT_PRICE",
	1: "MARKET_PRICE",
	2: "BEST_PRICE",
	3: "LAST_PRICE",
}
var CTPPriceType_value = map[string]int32{
	"LIMIT_PRICE":  0,
	"MARKET_PRICE": 1,
	"BEST_PRICE":   2,
	"LAST_PRICE":   3,
}

func (x CTPPriceType) String() string {
	return proto.EnumName(CTPPriceType_name, int32(x))
}
func (CTPPriceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type CTPOffsetFlag int32

const (
	CTPOffsetFlag_NONE CTPOffsetFlag = 0
	// 开仓
	CTPOffsetFlag_OPEN CTPOffsetFlag = 1
	// 平仓
	CTPOffsetFlag_CLOSE CTPOffsetFlag = 2
	// 强平
	CTPOffsetFlag_FORCE_CLOSE CTPOffsetFlag = 3
	// 平今
	CTPOffsetFlag_CLOSE_TODAY CTPOffsetFlag = 4
	// 平昨
	CTPOffsetFlag_CLOSE_YESTERDAY CTPOffsetFlag = 5
)

var CTPOffsetFlag_name = map[int32]string{
	0: "NONE",
	1: "OPEN",
	2: "CLOSE",
	3: "FORCE_CLOSE",
	4: "CLOSE_TODAY",
	5: "CLOSE_YESTERDAY",
}
var CTPOffsetFlag_value = map[string]int32{
	"NONE":            0,
	"OPEN":            1,
	"CLOSE":           2,
	"FORCE_CLOSE":     3,
	"CLOSE_TODAY":     4,
	"CLOSE_YESTERDAY": 5,
}

func (x CTPOffsetFlag) String() string {
	return proto.EnumName(CTPOffsetFlag_name, int32(x))
}
func (CTPOffsetFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

// 投机套保标志
type CTPHedgeType int32

const (
	// 投机
	CTPHedgeType_SPECULATION CTPHedgeType = 0
	// 套利
	CTPHedgeType_ARBITRAGE CTPHedgeType = 1
	// 套保
	CTPHedgeType_HEDGE CTPHedgeType = 2
)

var CTPHedgeType_name = map[int32]string{
	0: "SPECULATION",
	1: "ARBITRAGE",
	2: "HEDGE",
}
var CTPHedgeType_value = map[string]int32{
	"SPECULATION": 0,
	"ARBITRAGE":   1,
	"HEDGE":       2,
}

func (x CTPHedgeType) String() string {
	return proto.EnumName(CTPHedgeType_name, int32(x))
}
func (CTPHedgeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

// 成交类型
type CTPTradeType int32

const (
	// 普通成交
	CTPTradeType_NORMAL CTPTradeType = 0
	// 期权执行
	CTPTradeType_OPTIONS_EXECUTION CTPTradeType = 1
	// OTC成交
	CTPTradeType_OTC CTPTradeType = 2
	// 期转现衍生成交
	CTPTradeType_EFP_DERIVED CTPTradeType = 3
	// 组合衍生成交
	CTPTradeType_COMBINATION_DERIVED CTPTradeType = 4
	// 交割平仓
	CTPTradeType_DELIVERY_CLOSE CTPTradeType = 5
	// 结算衍生
	CTPTradeType_SETTLEMENT_DERIVED CTPTradeType = 6
	// 分红股票
	CTPTradeType_PLACEMENT_DERIVED CTPTradeType = 7
)

var CTPTradeType_name = map[int32]string{
	0: "NORMAL",
	1: "OPTIONS_EXECUTION",
	2: "OTC",
	3: "EFP_DERIVED",
	4: "COMBINATION_DERIVED",
	5: "DELIVERY_CLOSE",
	6: "SETTLEMENT_DERIVED",
	7: "PLACEMENT_DERIVED",
}
var CTPTradeType_value = map[string]int32{
	"NORMAL":              0,
	"OPTIONS_EXECUTION":   1,
	"OTC":                 2,
	"EFP_DERIVED":         3,
	"COMBINATION_DERIVED": 4,
	"DELIVERY_CLOSE":      5,
	"SETTLEMENT_DERIVED":  6,
	"PLACEMENT_DERIVED":   7,
}

func (x CTPTradeType) String() string {
	return proto.EnumName(CTPTradeType_name, int32(x))
}
func (CTPTradeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

// 报单ID
type CTPOrderID struct {
	FrontId   int64  `protobuf:"varint,1,opt,name=front_id,json=frontId" json:"front_id,omitempty"`
	SessionId int64  `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	OrderRef  int64  `protobuf:"varint,3,opt,name=order_ref,json=orderRef" json:"order_ref,omitempty"`
	StringId  string `protobuf:"bytes,4,opt,name=string_id,json=stringId" json:"string_id,omitempty"`
}

func (m *CTPOrderID) Reset()                    { *m = CTPOrderID{} }
func (m *CTPOrderID) String() string            { return proto.CompactTextString(m) }
func (*CTPOrderID) ProtoMessage()               {}
func (*CTPOrderID) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *CTPOrderID) GetFrontId() int64 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *CTPOrderID) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CTPOrderID) GetOrderRef() int64 {
	if m != nil {
		return m.OrderRef
	}
	return 0
}

func (m *CTPOrderID) GetStringId() string {
	if m != nil {
		return m.StringId
	}
	return ""
}

// 委托
type CTPOrderField struct {
	BrokerId             string  `protobuf:"bytes,1,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	InvestorId           string  `protobuf:"bytes,2,opt,name=investor_id,json=investorId" json:"investor_id,omitempty"`
	InstrumentId         string  `protobuf:"bytes,3,opt,name=instrument_id,json=instrumentId" json:"instrument_id,omitempty"`
	OrderRef             string  `protobuf:"bytes,4,opt,name=order_ref,json=orderRef" json:"order_ref,omitempty"`
	UserId               string  `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrderPriceType       int32   `protobuf:"varint,6,opt,name=order_price_type,json=orderPriceType" json:"order_price_type,omitempty"`
	Direction            int32   `protobuf:"varint,7,opt,name=direction" json:"direction,omitempty"`
	CombOffsetFlag       int32   `protobuf:"varint,8,opt,name=comb_offset_flag,json=combOffsetFlag" json:"comb_offset_flag,omitempty"`
	CombHedgeFlag        int32   `protobuf:"varint,9,opt,name=comb_hedge_flag,json=combHedgeFlag" json:"comb_hedge_flag,omitempty"`
	LimitPrice           float64 `protobuf:"fixed64,10,opt,name=limit_price,json=limitPrice" json:"limit_price,omitempty"`
	VolumeTotalOriginal  int32   `protobuf:"varint,11,opt,name=volume_total_original,json=volumeTotalOriginal" json:"volume_total_original,omitempty"`
	TimeCondition        int32   `protobuf:"varint,12,opt,name=time_condition,json=timeCondition" json:"time_condition,omitempty"`
	GTDDate              string  `protobuf:"bytes,13,opt,name=GTD_date,json=GTDDate" json:"GTD_date,omitempty"`
	VolumeCondition      int32   `protobuf:"varint,14,opt,name=volume_condition,json=volumeCondition" json:"volume_condition,omitempty"`
	MinVolume            int32   `protobuf:"varint,15,opt,name=min_volume,json=minVolume" json:"min_volume,omitempty"`
	ContingentCondition  int32   `protobuf:"varint,16,opt,name=contingent_condition,json=contingentCondition" json:"contingent_condition,omitempty"`
	StopPrice            float64 `protobuf:"fixed64,17,opt,name=stop_price,json=stopPrice" json:"stop_price,omitempty"`
	ForceCloseReason     int32   `protobuf:"varint,18,opt,name=force_close_reason,json=forceCloseReason" json:"force_close_reason,omitempty"`
	IsAutoSuspend        bool    `protobuf:"varint,19,opt,name=is_auto_suspend,json=isAutoSuspend" json:"is_auto_suspend,omitempty"`
	BusinessUnit         string  `protobuf:"bytes,20,opt,name=business_unit,json=businessUnit" json:"business_unit,omitempty"`
	RequestId            int32   `protobuf:"varint,21,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	OrderLocalId         string  `protobuf:"bytes,22,opt,name=order_local_id,json=orderLocalId" json:"order_local_id,omitempty"`
	ExchangeId           string  `protobuf:"bytes,23,opt,name=exchange_id,json=exchangeId" json:"exchange_id,omitempty"`
	ParticipantId        string  `protobuf:"bytes,24,opt,name=participant_id,json=participantId" json:"participant_id,omitempty"`
	ClientId             string  `protobuf:"bytes,25,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	ExchangeInstId       string  `protobuf:"bytes,26,opt,name=exchange_inst_id,json=exchangeInstId" json:"exchange_inst_id,omitempty"`
	TraderId             string  `protobuf:"bytes,27,opt,name=trader_id,json=traderId" json:"trader_id,omitempty"`
	InstallId            int32   `protobuf:"varint,28,opt,name=install_id,json=installId" json:"install_id,omitempty"`
	OrderSubmitStatus    int32   `protobuf:"varint,29,opt,name=order_submit_status,json=orderSubmitStatus" json:"order_submit_status,omitempty"`
	NotifySequence       int32   `protobuf:"varint,30,opt,name=notify_sequence,json=notifySequence" json:"notify_sequence,omitempty"`
	TradingDay           int32   `protobuf:"varint,31,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	SettlementId         int32   `protobuf:"varint,32,opt,name=settlement_id,json=settlementId" json:"settlement_id,omitempty"`
	OrderSysId           string  `protobuf:"bytes,33,opt,name=order_sys_id,json=orderSysId" json:"order_sys_id,omitempty"`
	OrderSource          int32   `protobuf:"varint,34,opt,name=order_source,json=orderSource" json:"order_source,omitempty"`
	OrderStatus          int32   `protobuf:"varint,35,opt,name=order_status,json=orderStatus" json:"order_status,omitempty"`
	OrderType            int32   `protobuf:"varint,36,opt,name=order_type,json=orderType" json:"order_type,omitempty"`
	VolumeTraded         int32   `protobuf:"varint,37,opt,name=volume_traded,json=volumeTraded" json:"volume_traded,omitempty"`
	VolumeTotal          int32   `protobuf:"varint,38,opt,name=volume_total,json=volumeTotal" json:"volume_total,omitempty"`
	InsertDate           string  `protobuf:"bytes,39,opt,name=insert_date,json=insertDate" json:"insert_date,omitempty"`
	InsertTime           string  `protobuf:"bytes,40,opt,name=insert_time,json=insertTime" json:"insert_time,omitempty"`
	ActiveTime           string  `protobuf:"bytes,41,opt,name=active_time,json=activeTime" json:"active_time,omitempty"`
	SuspendTime          string  `protobuf:"bytes,42,opt,name=suspend_time,json=suspendTime" json:"suspend_time,omitempty"`
	UpdateTime           string  `protobuf:"bytes,43,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	CancelTime           string  `protobuf:"bytes,44,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	ActiveTraderId       string  `protobuf:"bytes,45,opt,name=active_trader_id,json=activeTraderId" json:"active_trader_id,omitempty"`
	ClearingPartId       string  `protobuf:"bytes,46,opt,name=clearing_part_id,json=clearingPartId" json:"clearing_part_id,omitempty"`
	SequenceNo           int32   `protobuf:"varint,47,opt,name=sequence_no,json=sequenceNo" json:"sequence_no,omitempty"`
	FrontId              int32   `protobuf:"varint,48,opt,name=front_id,json=frontId" json:"front_id,omitempty"`
	SessionId            int32   `protobuf:"varint,49,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	UserProductInfo      string  `protobuf:"bytes,50,opt,name=user_product_info,json=userProductInfo" json:"user_product_info,omitempty"`
	StatusMsg            []byte  `protobuf:"bytes,51,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	UserForceClose       bool    `protobuf:"varint,52,opt,name=user_force_close,json=userForceClose" json:"user_force_close,omitempty"`
	ActiveUserId         string  `protobuf:"bytes,53,opt,name=active_user_id,json=activeUserId" json:"active_user_id,omitempty"`
	BrokerOrderSeq       int32   `protobuf:"varint,54,opt,name=broker_order_seq,json=brokerOrderSeq" json:"broker_order_seq,omitempty"`
	RelativeOrderSysId   string  `protobuf:"bytes,55,opt,name=relative_order_sys_id,json=relativeOrderSysId" json:"relative_order_sys_id,omitempty"`
	ZCETotalTradedVolume int32   `protobuf:"varint,56,opt,name=ZCE_total_traded_volume,json=ZCETotalTradedVolume" json:"ZCE_total_traded_volume,omitempty"`
	IsSwapOrder          bool    `protobuf:"varint,57,opt,name=is_swap_order,json=isSwapOrder" json:"is_swap_order,omitempty"`
	BranchId             string  `protobuf:"bytes,58,opt,name=branch_id,json=branchId" json:"branch_id,omitempty"`
	InvestUnitId         string  `protobuf:"bytes,59,opt,name=invest_unit_id,json=investUnitId" json:"invest_unit_id,omitempty"`
	AccountId            string  `protobuf:"bytes,60,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CurrencyId           string  `protobuf:"bytes,61,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	IPAddress            string  `protobuf:"bytes,62,opt,name=IP_address,json=IPAddress" json:"IP_address,omitempty"`
	MacAddress           string  `protobuf:"bytes,63,opt,name=Mac_address,json=MacAddress" json:"Mac_address,omitempty"`
}

func (m *CTPOrderField) Reset()                    { *m = CTPOrderField{} }
func (m *CTPOrderField) String() string            { return proto.CompactTextString(m) }
func (*CTPOrderField) ProtoMessage()               {}
func (*CTPOrderField) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *CTPOrderField) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CTPOrderField) GetInvestorId() string {
	if m != nil {
		return m.InvestorId
	}
	return ""
}

func (m *CTPOrderField) GetInstrumentId() string {
	if m != nil {
		return m.InstrumentId
	}
	return ""
}

func (m *CTPOrderField) GetOrderRef() string {
	if m != nil {
		return m.OrderRef
	}
	return ""
}

func (m *CTPOrderField) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CTPOrderField) GetOrderPriceType() int32 {
	if m != nil {
		return m.OrderPriceType
	}
	return 0
}

func (m *CTPOrderField) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *CTPOrderField) GetCombOffsetFlag() int32 {
	if m != nil {
		return m.CombOffsetFlag
	}
	return 0
}

func (m *CTPOrderField) GetCombHedgeFlag() int32 {
	if m != nil {
		return m.CombHedgeFlag
	}
	return 0
}

func (m *CTPOrderField) GetLimitPrice() float64 {
	if m != nil {
		return m.LimitPrice
	}
	return 0
}

func (m *CTPOrderField) GetVolumeTotalOriginal() int32 {
	if m != nil {
		return m.VolumeTotalOriginal
	}
	return 0
}

func (m *CTPOrderField) GetTimeCondition() int32 {
	if m != nil {
		return m.TimeCondition
	}
	return 0
}

func (m *CTPOrderField) GetGTDDate() string {
	if m != nil {
		return m.GTDDate
	}
	return ""
}

func (m *CTPOrderField) GetVolumeCondition() int32 {
	if m != nil {
		return m.VolumeCondition
	}
	return 0
}

func (m *CTPOrderField) GetMinVolume() int32 {
	if m != nil {
		return m.MinVolume
	}
	return 0
}

func (m *CTPOrderField) GetContingentCondition() int32 {
	if m != nil {
		return m.ContingentCondition
	}
	return 0
}

func (m *CTPOrderField) GetStopPrice() float64 {
	if m != nil {
		return m.StopPrice
	}
	return 0
}

func (m *CTPOrderField) GetForceCloseReason() int32 {
	if m != nil {
		return m.ForceCloseReason
	}
	return 0
}

func (m *CTPOrderField) GetIsAutoSuspend() bool {
	if m != nil {
		return m.IsAutoSuspend
	}
	return false
}

func (m *CTPOrderField) GetBusinessUnit() string {
	if m != nil {
		return m.BusinessUnit
	}
	return ""
}

func (m *CTPOrderField) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CTPOrderField) GetOrderLocalId() string {
	if m != nil {
		return m.OrderLocalId
	}
	return ""
}

func (m *CTPOrderField) GetExchangeId() string {
	if m != nil {
		return m.ExchangeId
	}
	return ""
}

func (m *CTPOrderField) GetParticipantId() string {
	if m != nil {
		return m.ParticipantId
	}
	return ""
}

func (m *CTPOrderField) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *CTPOrderField) GetExchangeInstId() string {
	if m != nil {
		return m.ExchangeInstId
	}
	return ""
}

func (m *CTPOrderField) GetTraderId() string {
	if m != nil {
		return m.TraderId
	}
	return ""
}

func (m *CTPOrderField) GetInstallId() int32 {
	if m != nil {
		return m.InstallId
	}
	return 0
}

func (m *CTPOrderField) GetOrderSubmitStatus() int32 {
	if m != nil {
		return m.OrderSubmitStatus
	}
	return 0
}

func (m *CTPOrderField) GetNotifySequence() int32 {
	if m != nil {
		return m.NotifySequence
	}
	return 0
}

func (m *CTPOrderField) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *CTPOrderField) GetSettlementId() int32 {
	if m != nil {
		return m.SettlementId
	}
	return 0
}

func (m *CTPOrderField) GetOrderSysId() string {
	if m != nil {
		return m.OrderSysId
	}
	return ""
}

func (m *CTPOrderField) GetOrderSource() int32 {
	if m != nil {
		return m.OrderSource
	}
	return 0
}

func (m *CTPOrderField) GetOrderStatus() int32 {
	if m != nil {
		return m.OrderStatus
	}
	return 0
}

func (m *CTPOrderField) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *CTPOrderField) GetVolumeTraded() int32 {
	if m != nil {
		return m.VolumeTraded
	}
	return 0
}

func (m *CTPOrderField) GetVolumeTotal() int32 {
	if m != nil {
		return m.VolumeTotal
	}
	return 0
}

func (m *CTPOrderField) GetInsertDate() string {
	if m != nil {
		return m.InsertDate
	}
	return ""
}

func (m *CTPOrderField) GetInsertTime() string {
	if m != nil {
		return m.InsertTime
	}
	return ""
}

func (m *CTPOrderField) GetActiveTime() string {
	if m != nil {
		return m.ActiveTime
	}
	return ""
}

func (m *CTPOrderField) GetSuspendTime() string {
	if m != nil {
		return m.SuspendTime
	}
	return ""
}

func (m *CTPOrderField) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *CTPOrderField) GetCancelTime() string {
	if m != nil {
		return m.CancelTime
	}
	return ""
}

func (m *CTPOrderField) GetActiveTraderId() string {
	if m != nil {
		return m.ActiveTraderId
	}
	return ""
}

func (m *CTPOrderField) GetClearingPartId() string {
	if m != nil {
		return m.ClearingPartId
	}
	return ""
}

func (m *CTPOrderField) GetSequenceNo() int32 {
	if m != nil {
		return m.SequenceNo
	}
	return 0
}

func (m *CTPOrderField) GetFrontId() int32 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *CTPOrderField) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CTPOrderField) GetUserProductInfo() string {
	if m != nil {
		return m.UserProductInfo
	}
	return ""
}

func (m *CTPOrderField) GetStatusMsg() []byte {
	if m != nil {
		return m.StatusMsg
	}
	return nil
}

func (m *CTPOrderField) GetUserForceClose() bool {
	if m != nil {
		return m.UserForceClose
	}
	return false
}

func (m *CTPOrderField) GetActiveUserId() string {
	if m != nil {
		return m.ActiveUserId
	}
	return ""
}

func (m *CTPOrderField) GetBrokerOrderSeq() int32 {
	if m != nil {
		return m.BrokerOrderSeq
	}
	return 0
}

func (m *CTPOrderField) GetRelativeOrderSysId() string {
	if m != nil {
		return m.RelativeOrderSysId
	}
	return ""
}

func (m *CTPOrderField) GetZCETotalTradedVolume() int32 {
	if m != nil {
		return m.ZCETotalTradedVolume
	}
	return 0
}

func (m *CTPOrderField) GetIsSwapOrder() bool {
	if m != nil {
		return m.IsSwapOrder
	}
	return false
}

func (m *CTPOrderField) GetBranchId() string {
	if m != nil {
		return m.BranchId
	}
	return ""
}

func (m *CTPOrderField) GetInvestUnitId() string {
	if m != nil {
		return m.InvestUnitId
	}
	return ""
}

func (m *CTPOrderField) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CTPOrderField) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

func (m *CTPOrderField) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *CTPOrderField) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type CTPOrderList struct {
	List []*CTPOrderField `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CTPOrderList) Reset()                    { *m = CTPOrderList{} }
func (m *CTPOrderList) String() string            { return proto.CompactTextString(m) }
func (*CTPOrderList) ProtoMessage()               {}
func (*CTPOrderList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *CTPOrderList) GetList() []*CTPOrderField {
	if m != nil {
		return m.List
	}
	return nil
}

type CTPOrderLink struct {
	Parent   *CTPOrderField   `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Children []*CTPOrderField `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
}

func (m *CTPOrderLink) Reset()                    { *m = CTPOrderLink{} }
func (m *CTPOrderLink) String() string            { return proto.CompactTextString(m) }
func (*CTPOrderLink) ProtoMessage()               {}
func (*CTPOrderLink) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *CTPOrderLink) GetParent() *CTPOrderField {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CTPOrderLink) GetChildren() []*CTPOrderField {
	if m != nil {
		return m.Children
	}
	return nil
}

// 发送撤单请求
type CTPCancelOrderRequest struct {
	// 帐户
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// 委托编号
	CTPOrderID *CTPOrderID `protobuf:"bytes,2,opt,name=CTPOrderID" json:"CTPOrderID,omitempty"`
	// 合约
	Symbol *Symbol `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
	// 请求id
	RequestId int32 `protobuf:"varint,4,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// 发起前置
	FrontId int32 `protobuf:"varint,5,opt,name=front_id,json=frontId" json:"front_id,omitempty"`
	// 发起session
	SessionId int32 `protobuf:"varint,6,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// 发起终端信息
	ExchangeOrderId string `protobuf:"bytes,7,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`
	// token
	Token string `protobuf:"bytes,8,opt,name=token" json:"token,omitempty"`
	// router account id
	RouteAccountId string `protobuf:"bytes,9,opt,name=route_account_id,json=routeAccountId" json:"route_account_id,omitempty"`
}

func (m *CTPCancelOrderRequest) Reset()                    { *m = CTPCancelOrderRequest{} }
func (m *CTPCancelOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*CTPCancelOrderRequest) ProtoMessage()               {}
func (*CTPCancelOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *CTPCancelOrderRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CTPCancelOrderRequest) GetCTPOrderID() *CTPOrderID {
	if m != nil {
		return m.CTPOrderID
	}
	return nil
}

func (m *CTPCancelOrderRequest) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPCancelOrderRequest) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CTPCancelOrderRequest) GetFrontId() int32 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *CTPCancelOrderRequest) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CTPCancelOrderRequest) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

func (m *CTPCancelOrderRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CTPCancelOrderRequest) GetRouteAccountId() string {
	if m != nil {
		return m.RouteAccountId
	}
	return ""
}

type CTPOnRtnCancelOrder struct {
	AccountId       string      `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	OrderId         *CTPOrderID `protobuf:"bytes,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ExchangeOrderId string      `protobuf:"bytes,3,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`
	Symbol          *Symbol     `protobuf:"bytes,4,opt,name=symbol" json:"symbol,omitempty"`
	RequestId       int32       `protobuf:"varint,5,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	ErrorType       int32       `protobuf:"varint,6,opt,name=error_type,json=errorType" json:"error_type,omitempty"`
	Error           int32       `protobuf:"varint,7,opt,name=error" json:"error,omitempty"`
	Msg             string      `protobuf:"bytes,8,opt,name=msg" json:"msg,omitempty"`
	RouteAccountId  string      `protobuf:"bytes,9,opt,name=route_account_id,json=routeAccountId" json:"route_account_id,omitempty"`
}

func (m *CTPOnRtnCancelOrder) Reset()                    { *m = CTPOnRtnCancelOrder{} }
func (m *CTPOnRtnCancelOrder) String() string            { return proto.CompactTextString(m) }
func (*CTPOnRtnCancelOrder) ProtoMessage()               {}
func (*CTPOnRtnCancelOrder) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *CTPOnRtnCancelOrder) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CTPOnRtnCancelOrder) GetOrderId() *CTPOrderID {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *CTPOnRtnCancelOrder) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

func (m *CTPOnRtnCancelOrder) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPOnRtnCancelOrder) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CTPOnRtnCancelOrder) GetErrorType() int32 {
	if m != nil {
		return m.ErrorType
	}
	return 0
}

func (m *CTPOnRtnCancelOrder) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *CTPOnRtnCancelOrder) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CTPOnRtnCancelOrder) GetRouteAccountId() string {
	if m != nil {
		return m.RouteAccountId
	}
	return ""
}

// 成交
type CTPTradeField struct {
	BrokerId       string  `protobuf:"bytes,1,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	InvestorId     string  `protobuf:"bytes,2,opt,name=investor_id,json=investorId" json:"investor_id,omitempty"`
	InstrumentId   string  `protobuf:"bytes,3,opt,name=instrument_id,json=instrumentId" json:"instrument_id,omitempty"`
	OrderRef       string  `protobuf:"bytes,4,opt,name=order_ref,json=orderRef" json:"order_ref,omitempty"`
	UserId         string  `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ExchangeId     string  `protobuf:"bytes,6,opt,name=exchange_id,json=exchangeId" json:"exchange_id,omitempty"`
	TradeId        string  `protobuf:"bytes,7,opt,name=trade_id,json=tradeId" json:"trade_id,omitempty"`
	Direction      int32   `protobuf:"varint,8,opt,name=direction" json:"direction,omitempty"`
	OrderSysId     string  `protobuf:"bytes,9,opt,name=order_sys_id,json=orderSysId" json:"order_sys_id,omitempty"`
	ParticipantId  string  `protobuf:"bytes,10,opt,name=participant_id,json=participantId" json:"participant_id,omitempty"`
	ClientId       string  `protobuf:"bytes,11,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	TradingRole    int32   `protobuf:"varint,12,opt,name=trading_role,json=tradingRole" json:"trading_role,omitempty"`
	ExchangeInstId string  `protobuf:"bytes,13,opt,name=exchange_inst_id,json=exchangeInstId" json:"exchange_inst_id,omitempty"`
	OffsetFlag     int32   `protobuf:"varint,14,opt,name=offset_flag,json=offsetFlag" json:"offset_flag,omitempty"`
	HedgeFlag      int32   `protobuf:"varint,15,opt,name=hedge_flag,json=hedgeFlag" json:"hedge_flag,omitempty"`
	Price          float64 `protobuf:"fixed64,16,opt,name=price" json:"price,omitempty"`
	Volume         int32   `protobuf:"varint,17,opt,name=volume" json:"volume,omitempty"`
	TradeDate      string  `protobuf:"bytes,18,opt,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	TradeTime      string  `protobuf:"bytes,19,opt,name=trade_time,json=tradeTime" json:"trade_time,omitempty"`
	TradeType      int32   `protobuf:"varint,20,opt,name=trade_type,json=tradeType" json:"trade_type,omitempty"`
	PriceSource    int32   `protobuf:"varint,21,opt,name=price_source,json=priceSource" json:"price_source,omitempty"`
	TraderId       string  `protobuf:"bytes,22,opt,name=trader_id,json=traderId" json:"trader_id,omitempty"`
	OrderLocalId   string  `protobuf:"bytes,23,opt,name=order_local_id,json=orderLocalId" json:"order_local_id,omitempty"`
	ClearingPartId string  `protobuf:"bytes,24,opt,name=clearing_part_id,json=clearingPartId" json:"clearing_part_id,omitempty"`
	BusinessUnit   string  `protobuf:"bytes,25,opt,name=business_unit,json=businessUnit" json:"business_unit,omitempty"`
	SequenceNo     int32   `protobuf:"varint,26,opt,name=sequence_no,json=sequenceNo" json:"sequence_no,omitempty"`
	TradingDay     int32   `protobuf:"varint,27,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	SettlementId   int32   `protobuf:"varint,28,opt,name=settlement_id,json=settlementId" json:"settlement_id,omitempty"`
	BrokerOrderSeq int32   `protobuf:"varint,29,opt,name=broker_order_seq,json=brokerOrderSeq" json:"broker_order_seq,omitempty"`
	TradeSource    int32   `protobuf:"varint,30,opt,name=trade_source,json=tradeSource" json:"trade_source,omitempty"`
	InvestUnitId   string  `protobuf:"bytes,31,opt,name=invest_unit_id,json=investUnitId" json:"invest_unit_id,omitempty"`
}

func (m *CTPTradeField) Reset()                    { *m = CTPTradeField{} }
func (m *CTPTradeField) String() string            { return proto.CompactTextString(m) }
func (*CTPTradeField) ProtoMessage()               {}
func (*CTPTradeField) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *CTPTradeField) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CTPTradeField) GetInvestorId() string {
	if m != nil {
		return m.InvestorId
	}
	return ""
}

func (m *CTPTradeField) GetInstrumentId() string {
	if m != nil {
		return m.InstrumentId
	}
	return ""
}

func (m *CTPTradeField) GetOrderRef() string {
	if m != nil {
		return m.OrderRef
	}
	return ""
}

func (m *CTPTradeField) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CTPTradeField) GetExchangeId() string {
	if m != nil {
		return m.ExchangeId
	}
	return ""
}

func (m *CTPTradeField) GetTradeId() string {
	if m != nil {
		return m.TradeId
	}
	return ""
}

func (m *CTPTradeField) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *CTPTradeField) GetOrderSysId() string {
	if m != nil {
		return m.OrderSysId
	}
	return ""
}

func (m *CTPTradeField) GetParticipantId() string {
	if m != nil {
		return m.ParticipantId
	}
	return ""
}

func (m *CTPTradeField) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *CTPTradeField) GetTradingRole() int32 {
	if m != nil {
		return m.TradingRole
	}
	return 0
}

func (m *CTPTradeField) GetExchangeInstId() string {
	if m != nil {
		return m.ExchangeInstId
	}
	return ""
}

func (m *CTPTradeField) GetOffsetFlag() int32 {
	if m != nil {
		return m.OffsetFlag
	}
	return 0
}

func (m *CTPTradeField) GetHedgeFlag() int32 {
	if m != nil {
		return m.HedgeFlag
	}
	return 0
}

func (m *CTPTradeField) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CTPTradeField) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *CTPTradeField) GetTradeDate() string {
	if m != nil {
		return m.TradeDate
	}
	return ""
}

func (m *CTPTradeField) GetTradeTime() string {
	if m != nil {
		return m.TradeTime
	}
	return ""
}

func (m *CTPTradeField) GetTradeType() int32 {
	if m != nil {
		return m.TradeType
	}
	return 0
}

func (m *CTPTradeField) GetPriceSource() int32 {
	if m != nil {
		return m.PriceSource
	}
	return 0
}

func (m *CTPTradeField) GetTraderId() string {
	if m != nil {
		return m.TraderId
	}
	return ""
}

func (m *CTPTradeField) GetOrderLocalId() string {
	if m != nil {
		return m.OrderLocalId
	}
	return ""
}

func (m *CTPTradeField) GetClearingPartId() string {
	if m != nil {
		return m.ClearingPartId
	}
	return ""
}

func (m *CTPTradeField) GetBusinessUnit() string {
	if m != nil {
		return m.BusinessUnit
	}
	return ""
}

func (m *CTPTradeField) GetSequenceNo() int32 {
	if m != nil {
		return m.SequenceNo
	}
	return 0
}

func (m *CTPTradeField) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *CTPTradeField) GetSettlementId() int32 {
	if m != nil {
		return m.SettlementId
	}
	return 0
}

func (m *CTPTradeField) GetBrokerOrderSeq() int32 {
	if m != nil {
		return m.BrokerOrderSeq
	}
	return 0
}

func (m *CTPTradeField) GetTradeSource() int32 {
	if m != nil {
		return m.TradeSource
	}
	return 0
}

func (m *CTPTradeField) GetInvestUnitId() string {
	if m != nil {
		return m.InvestUnitId
	}
	return ""
}

type CTPTradeReportList struct {
	List []*CTPTradeField `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CTPTradeReportList) Reset()                    { *m = CTPTradeReportList{} }
func (m *CTPTradeReportList) String() string            { return proto.CompactTextString(m) }
func (*CTPTradeReportList) ProtoMessage()               {}
func (*CTPTradeReportList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *CTPTradeReportList) GetList() []*CTPTradeField {
	if m != nil {
		return m.List
	}
	return nil
}

// 持仓统计
type CTPPositionSummation struct {
	// 方向
	Direction CTPDirection `protobuf:"varint,1,opt,name=direction,enum=pb.CTPDirection" json:"direction,omitempty"`
	// 类型
	Type int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	// 路由分组
	RouteAccountId string `protobuf:"bytes,3,opt,name=route_account_id,json=routeAccountId" json:"route_account_id,omitempty"`
	// 持仓
	Position int32 `protobuf:"varint,4,opt,name=position" json:"position,omitempty"`
	// 金额
	Amount float64 `protobuf:"fixed64,5,opt,name=amount" json:"amount,omitempty"`
	// 成本
	Cost float64 `protobuf:"fixed64,6,opt,name=cost" json:"cost,omitempty"`
	// 冻结
	Frozen int32 `protobuf:"varint,7,opt,name=frozen" json:"frozen,omitempty"`
	// 可用
	Available int32 `protobuf:"varint,8,opt,name=available" json:"available,omitempty"`
	// 盈亏
	PositionProfit float64 `protobuf:"fixed64,9,opt,name=position_profit,json=positionProfit" json:"position_profit,omitempty"`
	// 平盈
	ClosedProfit float64 `protobuf:"fixed64,10,opt,name=closed_profit,json=closedProfit" json:"closed_profit,omitempty"`
	// 保证金
	Margin float64 `protobuf:"fixed64,11,opt,name=margin" json:"margin,omitempty"`
	// 冻结保证金
	FrozenMargin float64 `protobuf:"fixed64,12,opt,name=frozen_margin,json=frozenMargin" json:"frozen_margin,omitempty"`
	// 手续费
	Commission float64 `protobuf:"fixed64,13,opt,name=commission" json:"commission,omitempty"`
	// 冻结手续费
	FrozenCommission float64 `protobuf:"fixed64,14,opt,name=frozen_commission,json=frozenCommission" json:"frozen_commission,omitempty"`
	// 利息
	Interest float64 `protobuf:"fixed64,15,opt,name=interest" json:"interest,omitempty"`
	// 冻结利息
	FrozenInterest float64 `protobuf:"fixed64,16,opt,name=frozen_interest,json=frozenInterest" json:"frozen_interest,omitempty"`
	// 盯市盈亏
	MtmProfit float64 `protobuf:"fixed64,17,opt,name=mtm_profit,json=mtmProfit" json:"mtm_profit,omitempty"`
	// 进入清算的平仓盈亏
	ClearedClosedProfit float64 `protobuf:"fixed64,18,opt,name=cleared_closed_profit,json=clearedClosedProfit" json:"cleared_closed_profit,omitempty"`
}

func (m *CTPPositionSummation) Reset()                    { *m = CTPPositionSummation{} }
func (m *CTPPositionSummation) String() string            { return proto.CompactTextString(m) }
func (*CTPPositionSummation) ProtoMessage()               {}
func (*CTPPositionSummation) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *CTPPositionSummation) GetDirection() CTPDirection {
	if m != nil {
		return m.Direction
	}
	return CTPDirection_LONG
}

func (m *CTPPositionSummation) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CTPPositionSummation) GetRouteAccountId() string {
	if m != nil {
		return m.RouteAccountId
	}
	return ""
}

func (m *CTPPositionSummation) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *CTPPositionSummation) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CTPPositionSummation) GetCost() float64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *CTPPositionSummation) GetFrozen() int32 {
	if m != nil {
		return m.Frozen
	}
	return 0
}

func (m *CTPPositionSummation) GetAvailable() int32 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *CTPPositionSummation) GetPositionProfit() float64 {
	if m != nil {
		return m.PositionProfit
	}
	return 0
}

func (m *CTPPositionSummation) GetClosedProfit() float64 {
	if m != nil {
		return m.ClosedProfit
	}
	return 0
}

func (m *CTPPositionSummation) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *CTPPositionSummation) GetFrozenMargin() float64 {
	if m != nil {
		return m.FrozenMargin
	}
	return 0
}

func (m *CTPPositionSummation) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *CTPPositionSummation) GetFrozenCommission() float64 {
	if m != nil {
		return m.FrozenCommission
	}
	return 0
}

func (m *CTPPositionSummation) GetInterest() float64 {
	if m != nil {
		return m.Interest
	}
	return 0
}

func (m *CTPPositionSummation) GetFrozenInterest() float64 {
	if m != nil {
		return m.FrozenInterest
	}
	return 0
}

func (m *CTPPositionSummation) GetMtmProfit() float64 {
	if m != nil {
		return m.MtmProfit
	}
	return 0
}

func (m *CTPPositionSummation) GetClearedClosedProfit() float64 {
	if m != nil {
		return m.ClearedClosedProfit
	}
	return 0
}

// 持仓
type CTPPosition struct {
	// / 合约编号
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// 统计
	Summation *CTPPositionSummation `protobuf:"bytes,2,opt,name=summation" json:"summation,omitempty"`
	// 今仓
	TodaySummation *CTPPositionSummation `protobuf:"bytes,3,opt,name=today_summation,json=todaySummation" json:"today_summation,omitempty"`
	// 今仓
	YesterdaySummation *CTPPositionSummation `protobuf:"bytes,4,opt,name=yesterday_summation,json=yesterdaySummation" json:"yesterday_summation,omitempty"`
	// 昨结算
	PreSettlementPrice float64 `protobuf:"fixed64,5,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	// 今结算
	SettlementPrice float64 `protobuf:"fixed64,6,opt,name=settlement_price,json=settlementPrice" json:"settlement_price,omitempty"`
	// 最新价
	LastPrice float64 `protobuf:"fixed64,7,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,8,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	// 交易品种类型
	ProductType int32 `protobuf:"varint,9,opt,name=product_type,json=productType" json:"product_type,omitempty"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,11,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// 产品
	ProductId *ProductID `protobuf:"bytes,12,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	// 最小变动价位
	PriceTick float64 `protobuf:"fixed64,13,opt,name=price_tick,json=priceTick" json:"price_tick,omitempty"`
	// 名称
	SymbolName string `protobuf:"bytes,14,opt,name=symbol_name,json=symbolName" json:"symbol_name,omitempty"`
	// 账号
	AccountId string `protobuf:"bytes,15,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *CTPPosition) Reset()                    { *m = CTPPosition{} }
func (m *CTPPosition) String() string            { return proto.CompactTextString(m) }
func (*CTPPosition) ProtoMessage()               {}
func (*CTPPosition) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *CTPPosition) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPPosition) GetSummation() *CTPPositionSummation {
	if m != nil {
		return m.Summation
	}
	return nil
}

func (m *CTPPosition) GetTodaySummation() *CTPPositionSummation {
	if m != nil {
		return m.TodaySummation
	}
	return nil
}

func (m *CTPPosition) GetYesterdaySummation() *CTPPositionSummation {
	if m != nil {
		return m.YesterdaySummation
	}
	return nil
}

func (m *CTPPosition) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *CTPPosition) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *CTPPosition) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *CTPPosition) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *CTPPosition) GetProductType() int32 {
	if m != nil {
		return m.ProductType
	}
	return 0
}

func (m *CTPPosition) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *CTPPosition) GetProductId() *ProductID {
	if m != nil {
		return m.ProductId
	}
	return nil
}

func (m *CTPPosition) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *CTPPosition) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *CTPPosition) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type CTPPositionList struct {
	List []*CTPPosition `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CTPPositionList) Reset()                    { *m = CTPPositionList{} }
func (m *CTPPositionList) String() string            { return proto.CompactTextString(m) }
func (*CTPPositionList) ProtoMessage()               {}
func (*CTPPositionList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *CTPPositionList) GetList() []*CTPPosition {
	if m != nil {
		return m.List
	}
	return nil
}

// 平仓明细.
type CTPCloseTradeRecord struct {
	// 帐号
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// 合约
	Symbol *Symbol `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	// 方向
	Direction CTPDirection `protobuf:"varint,3,opt,name=direction,enum=pb.CTPDirection" json:"direction,omitempty"`
	// 数量
	OpenVolume int32 `protobuf:"varint,4,opt,name=open_volume,json=openVolume" json:"open_volume,omitempty"`
	// 开仓金额
	OpenAmount float64 `protobuf:"fixed64,5,opt,name=open_amount,json=openAmount" json:"open_amount,omitempty"`
	// 平仓数量
	ClosedVolume int32 `protobuf:"varint,6,opt,name=closed_volume,json=closedVolume" json:"closed_volume,omitempty"`
	// 平仓金额
	ClosedAmount float64 `protobuf:"fixed64,7,opt,name=closed_amount,json=closedAmount" json:"closed_amount,omitempty"`
	// 开仓时间
	OpenTime int64 `protobuf:"varint,8,opt,name=open_time,json=openTime" json:"open_time,omitempty"`
	// 开仓交易日
	OpenTradingDay int32 `protobuf:"varint,9,opt,name=open_trading_day,json=openTradingDay" json:"open_trading_day,omitempty"`
	// 开仓委托单号
	OpenOrderId *CTPOrderID `protobuf:"bytes,10,opt,name=open_order_id,json=openOrderId" json:"open_order_id,omitempty"`
	// 开仓成交编号
	OpenTradeId string `protobuf:"bytes,11,opt,name=open_trade_id,json=openTradeId" json:"open_trade_id,omitempty"`
	// 开仓成交类型
	OpenTradeType int32 `protobuf:"varint,12,opt,name=open_trade_type,json=openTradeType" json:"open_trade_type,omitempty"`
	// 开仓投机套保类型
	OpenHedgeType int32 `protobuf:"varint,13,opt,name=open_hedge_type,json=openHedgeType" json:"open_hedge_type,omitempty"`
	// 平仓时间
	CloseTime int64 `protobuf:"varint,14,opt,name=close_time,json=closeTime" json:"close_time,omitempty"`
	// 平仓交易日
	CloseTradingDay int32 `protobuf:"varint,15,opt,name=close_trading_day,json=closeTradingDay" json:"close_trading_day,omitempty"`
	// 平仓委托单号
	CloseOrderId *CTPOrderID `protobuf:"bytes,16,opt,name=close_order_id,json=closeOrderId" json:"close_order_id,omitempty"`
	// 平仓成交编号
	CloseTradeId string `protobuf:"bytes,17,opt,name=close_trade_id,json=closeTradeId" json:"close_trade_id,omitempty"`
	// 平仓成交类型
	CloseTradeType int32 `protobuf:"varint,18,opt,name=close_trade_type,json=closeTradeType" json:"close_trade_type,omitempty"`
	// 平仓投机套保类型
	CloseHedgeType int32 `protobuf:"varint,19,opt,name=close_hedge_type,json=closeHedgeType" json:"close_hedge_type,omitempty"`
	// 平仓盈亏
	CloseProfit float64 `protobuf:"fixed64,20,opt,name=close_profit,json=closeProfit" json:"close_profit,omitempty"`
	// 昨结
	PreSettlementPrice float64 `protobuf:"fixed64,21,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	// 币种
	CurrencyType CurrencyType `protobuf:"varint,22,opt,name=currency_type,json=currencyType,enum=pb.CurrencyType" json:"currency_type,omitempty"`
	// 开仓手续费
	OpenCommission float64 `protobuf:"fixed64,23,opt,name=open_commission,json=openCommission" json:"open_commission,omitempty"`
	// 平仓手续费
	CloseCommission float64 `protobuf:"fixed64,24,opt,name=close_commission,json=closeCommission" json:"close_commission,omitempty"`
	// 保证金占用
	Margin float64 `protobuf:"fixed64,25,opt,name=margin" json:"margin,omitempty"`
	// 初始开仓金额
	InitialOpenAmount float64 `protobuf:"fixed64,26,opt,name=initial_open_amount,json=initialOpenAmount" json:"initial_open_amount,omitempty"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,27,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// 冻结利息
	FrozenInterest float64 `protobuf:"fixed64,28,opt,name=frozen_interest,json=frozenInterest" json:"frozen_interest,omitempty"`
	// 上游账户
	RouteAccountId string `protobuf:"bytes,29,opt,name=route_account_id,json=routeAccountId" json:"route_account_id,omitempty"`
	// 持仓盈亏
	PositionProfit float64 `protobuf:"fixed64,30,opt,name=position_profit,json=positionProfit" json:"position_profit,omitempty"`
}

func (m *CTPCloseTradeRecord) Reset()                    { *m = CTPCloseTradeRecord{} }
func (m *CTPCloseTradeRecord) String() string            { return proto.CompactTextString(m) }
func (*CTPCloseTradeRecord) ProtoMessage()               {}
func (*CTPCloseTradeRecord) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *CTPCloseTradeRecord) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CTPCloseTradeRecord) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPCloseTradeRecord) GetDirection() CTPDirection {
	if m != nil {
		return m.Direction
	}
	return CTPDirection_LONG
}

func (m *CTPCloseTradeRecord) GetOpenVolume() int32 {
	if m != nil {
		return m.OpenVolume
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetOpenAmount() float64 {
	if m != nil {
		return m.OpenAmount
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetClosedVolume() int32 {
	if m != nil {
		return m.ClosedVolume
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetClosedAmount() float64 {
	if m != nil {
		return m.ClosedAmount
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetOpenTime() int64 {
	if m != nil {
		return m.OpenTime
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetOpenTradingDay() int32 {
	if m != nil {
		return m.OpenTradingDay
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetOpenOrderId() *CTPOrderID {
	if m != nil {
		return m.OpenOrderId
	}
	return nil
}

func (m *CTPCloseTradeRecord) GetOpenTradeId() string {
	if m != nil {
		return m.OpenTradeId
	}
	return ""
}

func (m *CTPCloseTradeRecord) GetOpenTradeType() int32 {
	if m != nil {
		return m.OpenTradeType
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetOpenHedgeType() int32 {
	if m != nil {
		return m.OpenHedgeType
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseTime() int64 {
	if m != nil {
		return m.CloseTime
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseTradingDay() int32 {
	if m != nil {
		return m.CloseTradingDay
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseOrderId() *CTPOrderID {
	if m != nil {
		return m.CloseOrderId
	}
	return nil
}

func (m *CTPCloseTradeRecord) GetCloseTradeId() string {
	if m != nil {
		return m.CloseTradeId
	}
	return ""
}

func (m *CTPCloseTradeRecord) GetCloseTradeType() int32 {
	if m != nil {
		return m.CloseTradeType
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseHedgeType() int32 {
	if m != nil {
		return m.CloseHedgeType
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseProfit() float64 {
	if m != nil {
		return m.CloseProfit
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCurrencyType() CurrencyType {
	if m != nil {
		return m.CurrencyType
	}
	return CurrencyType_CNY
}

func (m *CTPCloseTradeRecord) GetOpenCommission() float64 {
	if m != nil {
		return m.OpenCommission
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetCloseCommission() float64 {
	if m != nil {
		return m.CloseCommission
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetInitialOpenAmount() float64 {
	if m != nil {
		return m.InitialOpenAmount
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetFrozenInterest() float64 {
	if m != nil {
		return m.FrozenInterest
	}
	return 0
}

func (m *CTPCloseTradeRecord) GetRouteAccountId() string {
	if m != nil {
		return m.RouteAccountId
	}
	return ""
}

func (m *CTPCloseTradeRecord) GetPositionProfit() float64 {
	if m != nil {
		return m.PositionProfit
	}
	return 0
}

type CTPCloseTradeRecordList struct {
	List []*CTPCloseTradeRecord `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CTPCloseTradeRecordList) Reset()                    { *m = CTPCloseTradeRecordList{} }
func (m *CTPCloseTradeRecordList) String() string            { return proto.CompactTextString(m) }
func (*CTPCloseTradeRecordList) ProtoMessage()               {}
func (*CTPCloseTradeRecordList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *CTPCloseTradeRecordList) GetList() []*CTPCloseTradeRecord {
	if m != nil {
		return m.List
	}
	return nil
}

// 保证金率
type CTPMarginRate struct {
	// 交易所
	Exchange ExchangeType `protobuf:"varint,1,opt,name=exchange,enum=pb.ExchangeType" json:"exchange,omitempty"`
	// symbol
	Symbol string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	// product
	Product string `protobuf:"bytes,3,opt,name=product" json:"product,omitempty"`
	// / 多头保证金率（按手数)
	LongByVolume float64 `protobuf:"fixed64,4,opt,name=long_by_volume,json=longByVolume" json:"long_by_volume,omitempty"`
	// / 多头保证金率（按金额)
	LongByAmount float64 `protobuf:"fixed64,5,opt,name=long_by_amount,json=longByAmount" json:"long_by_amount,omitempty"`
	// / 空头保证金率（按手数)
	ShortByVolume float64 `protobuf:"fixed64,6,opt,name=short_by_volume,json=shortByVolume" json:"short_by_volume,omitempty"`
	// / 空头保证金率（按金额)
	ShortByAmount float64 `protobuf:"fixed64,7,opt,name=short_by_amount,json=shortByAmount" json:"short_by_amount,omitempty"`
	// uid
	Id int64 `protobuf:"varint,10,opt,name=id" json:"id,omitempty"`
}

func (m *CTPMarginRate) Reset()                    { *m = CTPMarginRate{} }
func (m *CTPMarginRate) String() string            { return proto.CompactTextString(m) }
func (*CTPMarginRate) ProtoMessage()               {}
func (*CTPMarginRate) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

func (m *CTPMarginRate) GetExchange() ExchangeType {
	if m != nil {
		return m.Exchange
	}
	return ExchangeType_SHFE
}

func (m *CTPMarginRate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *CTPMarginRate) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *CTPMarginRate) GetLongByVolume() float64 {
	if m != nil {
		return m.LongByVolume
	}
	return 0
}

func (m *CTPMarginRate) GetLongByAmount() float64 {
	if m != nil {
		return m.LongByAmount
	}
	return 0
}

func (m *CTPMarginRate) GetShortByVolume() float64 {
	if m != nil {
		return m.ShortByVolume
	}
	return 0
}

func (m *CTPMarginRate) GetShortByAmount() float64 {
	if m != nil {
		return m.ShortByAmount
	}
	return 0
}

func (m *CTPMarginRate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// CTPMarginItem
type CTPMarginItem struct {
	// / 多头保证金率（按手数)
	LongByVolume float64 `protobuf:"fixed64,1,opt,name=long_by_volume,json=longByVolume" json:"long_by_volume,omitempty"`
	// / 多头保证金率（按金额)
	LongByAmount float64 `protobuf:"fixed64,2,opt,name=long_by_amount,json=longByAmount" json:"long_by_amount,omitempty"`
	// / 空头保证金率（按手数)
	ShortByVolume float64 `protobuf:"fixed64,3,opt,name=short_by_volume,json=shortByVolume" json:"short_by_volume,omitempty"`
	// / 空头保证金率（按金额)
	ShortByAmount float64 `protobuf:"fixed64,4,opt,name=short_by_amount,json=shortByAmount" json:"short_by_amount,omitempty"`
}

func (m *CTPMarginItem) Reset()                    { *m = CTPMarginItem{} }
func (m *CTPMarginItem) String() string            { return proto.CompactTextString(m) }
func (*CTPMarginItem) ProtoMessage()               {}
func (*CTPMarginItem) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{14} }

func (m *CTPMarginItem) GetLongByVolume() float64 {
	if m != nil {
		return m.LongByVolume
	}
	return 0
}

func (m *CTPMarginItem) GetLongByAmount() float64 {
	if m != nil {
		return m.LongByAmount
	}
	return 0
}

func (m *CTPMarginItem) GetShortByVolume() float64 {
	if m != nil {
		return m.ShortByVolume
	}
	return 0
}

func (m *CTPMarginItem) GetShortByAmount() float64 {
	if m != nil {
		return m.ShortByAmount
	}
	return 0
}

// 手续费
type CTPCommissionRateItem struct {
	ByAmount   float64       `protobuf:"fixed64,1,opt,name=by_amount,json=byAmount" json:"by_amount,omitempty"`
	ByVolume   float64       `protobuf:"fixed64,2,opt,name=by_volume,json=byVolume" json:"by_volume,omitempty"`
	Minimum    float64       `protobuf:"fixed64,3,opt,name=minimum" json:"minimum,omitempty"`
	OffsetFlag CTPOffsetFlag `protobuf:"varint,4,opt,name=offset_flag,json=offsetFlag,enum=pb.CTPOffsetFlag" json:"offset_flag,omitempty"`
	Tag        string        `protobuf:"bytes,5,opt,name=tag" json:"tag,omitempty"`
}

func (m *CTPCommissionRateItem) Reset()                    { *m = CTPCommissionRateItem{} }
func (m *CTPCommissionRateItem) String() string            { return proto.CompactTextString(m) }
func (*CTPCommissionRateItem) ProtoMessage()               {}
func (*CTPCommissionRateItem) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{15} }

func (m *CTPCommissionRateItem) GetByAmount() float64 {
	if m != nil {
		return m.ByAmount
	}
	return 0
}

func (m *CTPCommissionRateItem) GetByVolume() float64 {
	if m != nil {
		return m.ByVolume
	}
	return 0
}

func (m *CTPCommissionRateItem) GetMinimum() float64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *CTPCommissionRateItem) GetOffsetFlag() CTPOffsetFlag {
	if m != nil {
		return m.OffsetFlag
	}
	return CTPOffsetFlag_NONE
}

func (m *CTPCommissionRateItem) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

// 手续费率
type CTPCommissionRate struct {
	// 交易所
	Exchange ExchangeType `protobuf:"varint,1,opt,name=exchange,enum=pb.ExchangeType" json:"exchange,omitempty"`
	// symbol
	Symbol string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	// product
	Product string `protobuf:"bytes,3,opt,name=product" json:"product,omitempty"`
	// 设置
	Settings []*CTPCommissionRateItem `protobuf:"bytes,4,rep,name=settings" json:"settings,omitempty"`
	// ID
	Id int64 `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
}

func (m *CTPCommissionRate) Reset()                    { *m = CTPCommissionRate{} }
func (m *CTPCommissionRate) String() string            { return proto.CompactTextString(m) }
func (*CTPCommissionRate) ProtoMessage()               {}
func (*CTPCommissionRate) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{16} }

func (m *CTPCommissionRate) GetExchange() ExchangeType {
	if m != nil {
		return m.Exchange
	}
	return ExchangeType_SHFE
}

func (m *CTPCommissionRate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *CTPCommissionRate) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *CTPCommissionRate) GetSettings() []*CTPCommissionRateItem {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *CTPCommissionRate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 交易单元
type CTPTradingUnit struct {
	// / 合约编号
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// 统计
	Position []*CTPPosition `protobuf:"bytes,2,rep,name=position" json:"position,omitempty"`
	// 报单
	OrderLinkList []*CTPOrderLink `protobuf:"bytes,3,rep,name=order_link_list,json=orderLinkList" json:"order_link_list,omitempty"`
	// 持仓明细
	PositionDetailList []*CTPCloseTradeRecord `protobuf:"bytes,4,rep,name=position_detail_list,json=positionDetailList" json:"position_detail_list,omitempty"`
	// 平仓明细
	HistoryCtrList []*CTPCloseTradeRecord `protobuf:"bytes,5,rep,name=history_ctr_list,json=historyCtrList" json:"history_ctr_list,omitempty"`
	// 历史单
	HistoryOrderList []*CTPOrderField `protobuf:"bytes,6,rep,name=history_order_list,json=historyOrderList" json:"history_order_list,omitempty"`
	// 成交
	HistoryTradeList []*CTPTradeField `protobuf:"bytes,7,rep,name=history_trade_list,json=historyTradeList" json:"history_trade_list,omitempty"`
	// 最新价
	LastPrice float64 `protobuf:"fixed64,10,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	// 行情更新时间
	LastMdsUpdateTime int64 `protobuf:"varint,11,opt,name=last_mds_update_time,json=lastMdsUpdateTime" json:"last_mds_update_time,omitempty"`
	// 合约信息
	PriceTick float64 `protobuf:"fixed64,12,opt,name=price_tick,json=priceTick" json:"price_tick,omitempty"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,13,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// 手续费
	Cr *CTPCommissionRate `protobuf:"bytes,14,opt,name=cr" json:"cr,omitempty"`
	// 保证金
	Mr *CTPMarginRate `protobuf:"bytes,15,opt,name=mr" json:"mr,omitempty"`
}

func (m *CTPTradingUnit) Reset()                    { *m = CTPTradingUnit{} }
func (m *CTPTradingUnit) String() string            { return proto.CompactTextString(m) }
func (*CTPTradingUnit) ProtoMessage()               {}
func (*CTPTradingUnit) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{17} }

func (m *CTPTradingUnit) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CTPTradingUnit) GetPosition() []*CTPPosition {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *CTPTradingUnit) GetOrderLinkList() []*CTPOrderLink {
	if m != nil {
		return m.OrderLinkList
	}
	return nil
}

func (m *CTPTradingUnit) GetPositionDetailList() []*CTPCloseTradeRecord {
	if m != nil {
		return m.PositionDetailList
	}
	return nil
}

func (m *CTPTradingUnit) GetHistoryCtrList() []*CTPCloseTradeRecord {
	if m != nil {
		return m.HistoryCtrList
	}
	return nil
}

func (m *CTPTradingUnit) GetHistoryOrderList() []*CTPOrderField {
	if m != nil {
		return m.HistoryOrderList
	}
	return nil
}

func (m *CTPTradingUnit) GetHistoryTradeList() []*CTPTradeField {
	if m != nil {
		return m.HistoryTradeList
	}
	return nil
}

func (m *CTPTradingUnit) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *CTPTradingUnit) GetLastMdsUpdateTime() int64 {
	if m != nil {
		return m.LastMdsUpdateTime
	}
	return 0
}

func (m *CTPTradingUnit) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *CTPTradingUnit) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *CTPTradingUnit) GetCr() *CTPCommissionRate {
	if m != nil {
		return m.Cr
	}
	return nil
}

func (m *CTPTradingUnit) GetMr() *CTPMarginRate {
	if m != nil {
		return m.Mr
	}
	return nil
}

type CTPForceCloseTimeRule struct {
	Start            int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End              int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	DisableOpenStart int64 `protobuf:"varint,3,opt,name=disable_open_start,json=disableOpenStart" json:"disable_open_start,omitempty"`
}

func (m *CTPForceCloseTimeRule) Reset()                    { *m = CTPForceCloseTimeRule{} }
func (m *CTPForceCloseTimeRule) String() string            { return proto.CompactTextString(m) }
func (*CTPForceCloseTimeRule) ProtoMessage()               {}
func (*CTPForceCloseTimeRule) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{18} }

func (m *CTPForceCloseTimeRule) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CTPForceCloseTimeRule) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *CTPForceCloseTimeRule) GetDisableOpenStart() int64 {
	if m != nil {
		return m.DisableOpenStart
	}
	return 0
}

// CTPTradingUnitOption 品种参数
type CTPTradingUnitOption struct {
	// 涨跌停N点内禁止开仓
	LimitPriceDisableOpen int32 `protobuf:"varint,1,opt,name=limit_price_disable_open,json=limitPriceDisableOpen" json:"limit_price_disable_open,omitempty"`
	// 涨跌停N点内强制平仓
	LimitPriceForceClose int32 `protobuf:"varint,2,opt,name=limit_price_force_close,json=limitPriceForceClose" json:"limit_price_force_close,omitempty"`
	// 昨持仓阀值
	PrePositionPercentageThreshold float64 `protobuf:"fixed64,3,opt,name=pre_position_percentage_threshold,json=prePositionPercentageThreshold" json:"pre_position_percentage_threshold,omitempty"`
	// 昨持仓绝对数量阀值
	PrePositionThreshold float64 `protobuf:"fixed64,4,opt,name=pre_position_threshold,json=prePositionThreshold" json:"pre_position_threshold,omitempty"`
	// 昨成交占比阀值
	PreVolumePercentageThreshold float64 `protobuf:"fixed64,5,opt,name=pre_volume_percentage_threshold,json=preVolumePercentageThreshold" json:"pre_volume_percentage_threshold,omitempty"`
	// 昨成交量绝对数量阀值
	PreVolumeThreshold float64 `protobuf:"fixed64,6,opt,name=pre_volume_threshold,json=preVolumeThreshold" json:"pre_volume_threshold,omitempty"`
	// 单资产持仓限制
	SingleProductMarginWeightLimit float64 `protobuf:"fixed64,7,opt,name=single_product_margin_weight_limit,json=singleProductMarginWeightLimit" json:"single_product_margin_weight_limit,omitempty"`
	// 开始时间
	FcrList []*CTPForceCloseTimeRule `protobuf:"bytes,8,rep,name=fcr_list,json=fcrList" json:"fcr_list,omitempty"`
	// 禁止开仓
	DisableOpen bool `protobuf:"varint,9,opt,name=disable_open,json=disableOpen" json:"disable_open,omitempty"`
	// 手续费
	CrSettings []*CTPCommissionRateItem `protobuf:"bytes,10,rep,name=cr_settings,json=crSettings" json:"cr_settings,omitempty"`
	// 保证金
	MarginRate *CTPMarginItem `protobuf:"bytes,11,opt,name=margin_rate,json=marginRate" json:"margin_rate,omitempty"`
	// 止损点数
	StoplossCandidates []int32 `protobuf:"varint,12,rep,packed,name=stoploss_candidates,json=stoplossCandidates" json:"stoploss_candidates,omitempty"`
	// 止赢点数
	TakeProfitCandidates []int32 `protobuf:"varint,13,rep,packed,name=take_profit_candidates,json=takeProfitCandidates" json:"take_profit_candidates,omitempty"`
	// 手数
	VolumeCandidates []int32 `protobuf:"varint,14,rep,packed,name=volume_candidates,json=volumeCandidates" json:"volume_candidates,omitempty"`
	// 禁止开仓
	DisableOpenSymbolList []string `protobuf:"bytes,15,rep,name=disable_open_symbol_list,json=disableOpenSymbolList" json:"disable_open_symbol_list,omitempty"`
	// 禁止开仓
	DisableOpenClassList []string `protobuf:"bytes,16,rep,name=disable_open_class_list,json=disableOpenClassList" json:"disable_open_class_list,omitempty"`
	// 上市<N天的品种禁止开仓
	OpenDaysLimit int32 `protobuf:"varint,17,opt,name=open_days_limit,json=openDaysLimit" json:"open_days_limit,omitempty"`
}

func (m *CTPTradingUnitOption) Reset()                    { *m = CTPTradingUnitOption{} }
func (m *CTPTradingUnitOption) String() string            { return proto.CompactTextString(m) }
func (*CTPTradingUnitOption) ProtoMessage()               {}
func (*CTPTradingUnitOption) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{19} }

func (m *CTPTradingUnitOption) GetLimitPriceDisableOpen() int32 {
	if m != nil {
		return m.LimitPriceDisableOpen
	}
	return 0
}

func (m *CTPTradingUnitOption) GetLimitPriceForceClose() int32 {
	if m != nil {
		return m.LimitPriceForceClose
	}
	return 0
}

func (m *CTPTradingUnitOption) GetPrePositionPercentageThreshold() float64 {
	if m != nil {
		return m.PrePositionPercentageThreshold
	}
	return 0
}

func (m *CTPTradingUnitOption) GetPrePositionThreshold() float64 {
	if m != nil {
		return m.PrePositionThreshold
	}
	return 0
}

func (m *CTPTradingUnitOption) GetPreVolumePercentageThreshold() float64 {
	if m != nil {
		return m.PreVolumePercentageThreshold
	}
	return 0
}

func (m *CTPTradingUnitOption) GetPreVolumeThreshold() float64 {
	if m != nil {
		return m.PreVolumeThreshold
	}
	return 0
}

func (m *CTPTradingUnitOption) GetSingleProductMarginWeightLimit() float64 {
	if m != nil {
		return m.SingleProductMarginWeightLimit
	}
	return 0
}

func (m *CTPTradingUnitOption) GetFcrList() []*CTPForceCloseTimeRule {
	if m != nil {
		return m.FcrList
	}
	return nil
}

func (m *CTPTradingUnitOption) GetDisableOpen() bool {
	if m != nil {
		return m.DisableOpen
	}
	return false
}

func (m *CTPTradingUnitOption) GetCrSettings() []*CTPCommissionRateItem {
	if m != nil {
		return m.CrSettings
	}
	return nil
}

func (m *CTPTradingUnitOption) GetMarginRate() *CTPMarginItem {
	if m != nil {
		return m.MarginRate
	}
	return nil
}

func (m *CTPTradingUnitOption) GetStoplossCandidates() []int32 {
	if m != nil {
		return m.StoplossCandidates
	}
	return nil
}

func (m *CTPTradingUnitOption) GetTakeProfitCandidates() []int32 {
	if m != nil {
		return m.TakeProfitCandidates
	}
	return nil
}

func (m *CTPTradingUnitOption) GetVolumeCandidates() []int32 {
	if m != nil {
		return m.VolumeCandidates
	}
	return nil
}

func (m *CTPTradingUnitOption) GetDisableOpenSymbolList() []string {
	if m != nil {
		return m.DisableOpenSymbolList
	}
	return nil
}

func (m *CTPTradingUnitOption) GetDisableOpenClassList() []string {
	if m != nil {
		return m.DisableOpenClassList
	}
	return nil
}

func (m *CTPTradingUnitOption) GetOpenDaysLimit() int32 {
	if m != nil {
		return m.OpenDaysLimit
	}
	return 0
}

// 隔夜自有资金检查.
type MarginCheckRule struct {
	// 开始时间
	Start int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	// 结束时间
	End int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	// 平仓顺序
	ForceCloseOrder int32 `protobuf:"varint,3,opt,name=force_close_order,json=forceCloseOrder" json:"force_close_order,omitempty"`
	// 报警
	WarningLevel float64 `protobuf:"fixed64,4,opt,name=warning_level,json=warningLevel" json:"warning_level,omitempty"`
	// 强平
	ForceCloseLevel float64 `protobuf:"fixed64,5,opt,name=force_close_level,json=forceCloseLevel" json:"force_close_level,omitempty"`
	// 自有可用倍率
	CommonBalanceMultiple float64 `protobuf:"fixed64,6,opt,name=common_balance_multiple,json=commonBalanceMultiple" json:"common_balance_multiple,omitempty"`
	// 报警线下禁止开仓
	DisableOpenUnderWarningLevel bool `protobuf:"varint,7,opt,name=disable_open_under_warning_level,json=disableOpenUnderWarningLevel" json:"disable_open_under_warning_level,omitempty"`
	// 按比例报警
	WarningLevelByPreferRatio float64 `protobuf:"fixed64,8,opt,name=warning_level_by_prefer_ratio,json=warningLevelByPreferRatio" json:"warning_level_by_prefer_ratio,omitempty"`
	// 按比例强平
	ForceCloseLevelByPreferRatio float64 `protobuf:"fixed64,9,opt,name=force_close_level_by_prefer_ratio,json=forceCloseLevelByPreferRatio" json:"force_close_level_by_prefer_ratio,omitempty"`
	// 报警按市值比例
	WarningLevelByMargin float64 `protobuf:"fixed64,10,opt,name=warning_level_by_margin,json=warningLevelByMargin" json:"warning_level_by_margin,omitempty"`
	// 强平按市值比例
	ForceCloseLevelByMargin float64 `protobuf:"fixed64,11,opt,name=force_close_level_by_margin,json=forceCloseLevelByMargin" json:"force_close_level_by_margin,omitempty"`
	// 总持仓占用上限
	MarginCeiling float64 `protobuf:"fixed64,12,opt,name=margin_ceiling,json=marginCeiling" json:"margin_ceiling,omitempty"`
	// 买入金额上限
	PositionAmountCeiling float64 `protobuf:"fixed64,13,opt,name=position_amount_ceiling,json=positionAmountCeiling" json:"position_amount_ceiling,omitempty"`
}

func (m *MarginCheckRule) Reset()                    { *m = MarginCheckRule{} }
func (m *MarginCheckRule) String() string            { return proto.CompactTextString(m) }
func (*MarginCheckRule) ProtoMessage()               {}
func (*MarginCheckRule) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{20} }

func (m *MarginCheckRule) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *MarginCheckRule) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *MarginCheckRule) GetForceCloseOrder() int32 {
	if m != nil {
		return m.ForceCloseOrder
	}
	return 0
}

func (m *MarginCheckRule) GetWarningLevel() float64 {
	if m != nil {
		return m.WarningLevel
	}
	return 0
}

func (m *MarginCheckRule) GetForceCloseLevel() float64 {
	if m != nil {
		return m.ForceCloseLevel
	}
	return 0
}

func (m *MarginCheckRule) GetCommonBalanceMultiple() float64 {
	if m != nil {
		return m.CommonBalanceMultiple
	}
	return 0
}

func (m *MarginCheckRule) GetDisableOpenUnderWarningLevel() bool {
	if m != nil {
		return m.DisableOpenUnderWarningLevel
	}
	return false
}

func (m *MarginCheckRule) GetWarningLevelByPreferRatio() float64 {
	if m != nil {
		return m.WarningLevelByPreferRatio
	}
	return 0
}

func (m *MarginCheckRule) GetForceCloseLevelByPreferRatio() float64 {
	if m != nil {
		return m.ForceCloseLevelByPreferRatio
	}
	return 0
}

func (m *MarginCheckRule) GetWarningLevelByMargin() float64 {
	if m != nil {
		return m.WarningLevelByMargin
	}
	return 0
}

func (m *MarginCheckRule) GetForceCloseLevelByMargin() float64 {
	if m != nil {
		return m.ForceCloseLevelByMargin
	}
	return 0
}

func (m *MarginCheckRule) GetMarginCeiling() float64 {
	if m != nil {
		return m.MarginCeiling
	}
	return 0
}

func (m *MarginCheckRule) GetPositionAmountCeiling() float64 {
	if m != nil {
		return m.PositionAmountCeiling
	}
	return 0
}

// SettlementUnitOption 结算组参数
type SettlementUnitOption struct {
	// ID
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 备注
	Comment string `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	// 结算组
	SettlementGroup int32 `protobuf:"varint,3,opt,name=settlement_group,json=settlementGroup" json:"settlement_group,omitempty"`
	// 资金检查水平
	AvailableCheckLevel int32 `protobuf:"varint,4,opt,name=available_check_level,json=availableCheckLevel" json:"available_check_level,omitempty"`
	// 强平开启
	ForceCloseOn bool `protobuf:"varint,5,opt,name=force_close_on,json=forceCloseOn" json:"force_close_on,omitempty"`
	// 强平检查
	McrList []*MarginCheckRule `protobuf:"bytes,6,rep,name=mcr_list,json=mcrList" json:"mcr_list,omitempty"`
	// 禁止开仓
	DisableOpen bool `protobuf:"varint,7,opt,name=disable_open,json=disableOpen" json:"disable_open,omitempty"`
}

func (m *SettlementUnitOption) Reset()                    { *m = SettlementUnitOption{} }
func (m *SettlementUnitOption) String() string            { return proto.CompactTextString(m) }
func (*SettlementUnitOption) ProtoMessage()               {}
func (*SettlementUnitOption) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{21} }

func (m *SettlementUnitOption) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SettlementUnitOption) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *SettlementUnitOption) GetSettlementGroup() int32 {
	if m != nil {
		return m.SettlementGroup
	}
	return 0
}

func (m *SettlementUnitOption) GetAvailableCheckLevel() int32 {
	if m != nil {
		return m.AvailableCheckLevel
	}
	return 0
}

func (m *SettlementUnitOption) GetForceCloseOn() bool {
	if m != nil {
		return m.ForceCloseOn
	}
	return false
}

func (m *SettlementUnitOption) GetMcrList() []*MarginCheckRule {
	if m != nil {
		return m.McrList
	}
	return nil
}

func (m *SettlementUnitOption) GetDisableOpen() bool {
	if m != nil {
		return m.DisableOpen
	}
	return false
}

// 普通结算
type CTPTradingAccount struct {
	// 合计
	Summary *AccountMoneySummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	// 出入金
	MtrList []*MoneyTransferRecord `protobuf:"bytes,2,rep,name=mtr_list,json=mtrList" json:"mtr_list,omitempty"`
	// 交易明细
	TuList []*CTPTradingUnit `protobuf:"bytes,3,rep,name=tu_list,json=tuList" json:"tu_list,omitempty"`
	// 最后结算日期
	LastSettleDate int32 `protobuf:"varint,4,opt,name=last_settle_date,json=lastSettleDate" json:"last_settle_date,omitempty"`
	// 设置
	Options *SettlementUnitOption `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
}

func (m *CTPTradingAccount) Reset()                    { *m = CTPTradingAccount{} }
func (m *CTPTradingAccount) String() string            { return proto.CompactTextString(m) }
func (*CTPTradingAccount) ProtoMessage()               {}
func (*CTPTradingAccount) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{22} }

func (m *CTPTradingAccount) GetSummary() *AccountMoneySummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *CTPTradingAccount) GetMtrList() []*MoneyTransferRecord {
	if m != nil {
		return m.MtrList
	}
	return nil
}

func (m *CTPTradingAccount) GetTuList() []*CTPTradingUnit {
	if m != nil {
		return m.TuList
	}
	return nil
}

func (m *CTPTradingAccount) GetLastSettleDate() int32 {
	if m != nil {
		return m.LastSettleDate
	}
	return 0
}

func (m *CTPTradingAccount) GetOptions() *SettlementUnitOption {
	if m != nil {
		return m.Options
	}
	return nil
}

// 账户快照
type CTPTradingAccountSnapshot struct {
	// 账户
	Account *CTPTradingAccount `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// 快照时间
	Time int64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	// 快照备注
	Comment string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
}

func (m *CTPTradingAccountSnapshot) Reset()                    { *m = CTPTradingAccountSnapshot{} }
func (m *CTPTradingAccountSnapshot) String() string            { return proto.CompactTextString(m) }
func (*CTPTradingAccountSnapshot) ProtoMessage()               {}
func (*CTPTradingAccountSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{23} }

func (m *CTPTradingAccountSnapshot) GetAccount() *CTPTradingAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *CTPTradingAccountSnapshot) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CTPTradingAccountSnapshot) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

// CTP常规性返回
type CTPRspInfo struct {
	ErrorId   int32  `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg  []byte `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	RequestId int32  `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	IsLast    bool   `protobuf:"varint,4,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
}

func (m *CTPRspInfo) Reset()                    { *m = CTPRspInfo{} }
func (m *CTPRspInfo) String() string            { return proto.CompactTextString(m) }
func (*CTPRspInfo) ProtoMessage()               {}
func (*CTPRspInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{24} }

func (m *CTPRspInfo) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *CTPRspInfo) GetErrorMsg() []byte {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

func (m *CTPRspInfo) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CTPRspInfo) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

// 请求查询注册账户
type CtpReqQryAccountRegister struct {
	BrokerId     string `protobuf:"bytes,1,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	AccountId    string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	BankId       string `protobuf:"bytes,3,opt,name=bank_id,json=bankId" json:"bank_id,omitempty"`
	BankBranchId string `protobuf:"bytes,4,opt,name=bank_branch_id,json=bankBranchId" json:"bank_branch_id,omitempty"`
	CurrencyId   string `protobuf:"bytes,5,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
}

func (m *CtpReqQryAccountRegister) Reset()                    { *m = CtpReqQryAccountRegister{} }
func (m *CtpReqQryAccountRegister) String() string            { return proto.CompactTextString(m) }
func (*CtpReqQryAccountRegister) ProtoMessage()               {}
func (*CtpReqQryAccountRegister) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{25} }

func (m *CtpReqQryAccountRegister) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpReqQryAccountRegister) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CtpReqQryAccountRegister) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *CtpReqQryAccountRegister) GetBankBranchId() string {
	if m != nil {
		return m.BankBranchId
	}
	return ""
}

func (m *CtpReqQryAccountRegister) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

// 查询注册账户响应
type CtpRspQryAccountRegister struct {
	ErrorId          int32  `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg         string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	RequestId        int32  `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	IsLast           bool   `protobuf:"varint,4,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	TradingDay       string `protobuf:"bytes,5,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	BankId           string `protobuf:"bytes,6,opt,name=bank_id,json=bankId" json:"bank_id,omitempty"`
	BankBranchId     string `protobuf:"bytes,7,opt,name=bank_branch_id,json=bankBranchId" json:"bank_branch_id,omitempty"`
	BankAccount      string `protobuf:"bytes,8,opt,name=bank_account,json=bankAccount" json:"bank_account,omitempty"`
	BrokerId         string `protobuf:"bytes,9,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	BrokerBranchId   string `protobuf:"bytes,10,opt,name=broker_branch_id,json=brokerBranchId" json:"broker_branch_id,omitempty"`
	AccountId        string `protobuf:"bytes,11,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IdCardType       int32  `protobuf:"varint,12,opt,name=id_card_type,json=idCardType" json:"id_card_type,omitempty"`
	IdentifiedCardNo string `protobuf:"bytes,13,opt,name=identified_card_no,json=identifiedCardNo" json:"identified_card_no,omitempty"`
	CustomerName     string `protobuf:"bytes,14,opt,name=customer_name,json=customerName" json:"customer_name,omitempty"`
	CurrencyId       string `protobuf:"bytes,15,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	OpenOrDestory    int32  `protobuf:"varint,16,opt,name=open_or_destory,json=openOrDestory" json:"open_or_destory,omitempty"`
	RegDate          string `protobuf:"bytes,17,opt,name=reg_date,json=regDate" json:"reg_date,omitempty"`
	OutDate          string `protobuf:"bytes,18,opt,name=out_date,json=outDate" json:"out_date,omitempty"`
	Tid              int32  `protobuf:"varint,19,opt,name=tid" json:"tid,omitempty"`
	CustType         int32  `protobuf:"varint,20,opt,name=cust_type,json=custType" json:"cust_type,omitempty"`
	BankAccType      int32  `protobuf:"varint,21,opt,name=bank_acc_type,json=bankAccType" json:"bank_acc_type,omitempty"`
	LongCustomerName string `protobuf:"bytes,22,opt,name=long_customer_name,json=longCustomerName" json:"long_customer_name,omitempty"`
}

func (m *CtpRspQryAccountRegister) Reset()                    { *m = CtpRspQryAccountRegister{} }
func (m *CtpRspQryAccountRegister) String() string            { return proto.CompactTextString(m) }
func (*CtpRspQryAccountRegister) ProtoMessage()               {}
func (*CtpRspQryAccountRegister) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{26} }

func (m *CtpRspQryAccountRegister) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *CtpRspQryAccountRegister) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CtpRspQryAccountRegister) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func (m *CtpRspQryAccountRegister) GetTradingDay() string {
	if m != nil {
		return m.TradingDay
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetBankBranchId() string {
	if m != nil {
		return m.BankBranchId
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetBankAccount() string {
	if m != nil {
		return m.BankAccount
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetBrokerBranchId() string {
	if m != nil {
		return m.BrokerBranchId
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetIdCardType() int32 {
	if m != nil {
		return m.IdCardType
	}
	return 0
}

func (m *CtpRspQryAccountRegister) GetIdentifiedCardNo() string {
	if m != nil {
		return m.IdentifiedCardNo
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetCustomerName() string {
	if m != nil {
		return m.CustomerName
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetOpenOrDestory() int32 {
	if m != nil {
		return m.OpenOrDestory
	}
	return 0
}

func (m *CtpRspQryAccountRegister) GetRegDate() string {
	if m != nil {
		return m.RegDate
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetOutDate() string {
	if m != nil {
		return m.OutDate
	}
	return ""
}

func (m *CtpRspQryAccountRegister) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *CtpRspQryAccountRegister) GetCustType() int32 {
	if m != nil {
		return m.CustType
	}
	return 0
}

func (m *CtpRspQryAccountRegister) GetBankAccType() int32 {
	if m != nil {
		return m.BankAccType
	}
	return 0
}

func (m *CtpRspQryAccountRegister) GetLongCustomerName() string {
	if m != nil {
		return m.LongCustomerName
	}
	return ""
}

// 认证
type CtpReqAuthencate struct {
	AuthCode string `protobuf:"bytes,1,opt,name=auth_code,json=authCode" json:"auth_code,omitempty"`
	Product  string `protobuf:"bytes,2,opt,name=product" json:"product,omitempty"`
}

func (m *CtpReqAuthencate) Reset()                    { *m = CtpReqAuthencate{} }
func (m *CtpReqAuthencate) String() string            { return proto.CompactTextString(m) }
func (*CtpReqAuthencate) ProtoMessage()               {}
func (*CtpReqAuthencate) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{27} }

func (m *CtpReqAuthencate) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

func (m *CtpReqAuthencate) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

// 认证结果
type CtpRspAuthencate struct {
	ErrorId         int32  `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg        string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	RequestId       int32  `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	IsLast          bool   `protobuf:"varint,4,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	BrokerId        string `protobuf:"bytes,5,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	UserId          string `protobuf:"bytes,6,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserProductInfo string `protobuf:"bytes,7,opt,name=user_product_info,json=userProductInfo" json:"user_product_info,omitempty"`
}

func (m *CtpRspAuthencate) Reset()                    { *m = CtpRspAuthencate{} }
func (m *CtpRspAuthencate) String() string            { return proto.CompactTextString(m) }
func (*CtpRspAuthencate) ProtoMessage()               {}
func (*CtpRspAuthencate) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{28} }

func (m *CtpRspAuthencate) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *CtpRspAuthencate) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *CtpRspAuthencate) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CtpRspAuthencate) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func (m *CtpRspAuthencate) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpRspAuthencate) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CtpRspAuthencate) GetUserProductInfo() string {
	if m != nil {
		return m.UserProductInfo
	}
	return ""
}

// 登陆
type CtpReqUserLogin struct {
	BrokerId string `protobuf:"bytes,1,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	Account  string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *CtpReqUserLogin) Reset()                    { *m = CtpReqUserLogin{} }
func (m *CtpReqUserLogin) String() string            { return proto.CompactTextString(m) }
func (*CtpReqUserLogin) ProtoMessage()               {}
func (*CtpReqUserLogin) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{29} }

func (m *CtpReqUserLogin) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpReqUserLogin) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CtpReqUserLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// 登陆返回
type CtpRspUserLogin struct {
	ErrorId     int32  `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg    string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	RequestId   int32  `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	IsLast      bool   `protobuf:"varint,4,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	TradingDay  string `protobuf:"bytes,5,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	LoginTime   string `protobuf:"bytes,6,opt,name=login_time,json=loginTime" json:"login_time,omitempty"`
	BrokerId    string `protobuf:"bytes,7,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	UserId      string `protobuf:"bytes,8,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SystemName  string `protobuf:"bytes,9,opt,name=system_name,json=systemName" json:"system_name,omitempty"`
	FrontId     int32  `protobuf:"varint,10,opt,name=front_id,json=frontId" json:"front_id,omitempty"`
	SessionId   int32  `protobuf:"varint,11,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	MaxOrderRef string `protobuf:"bytes,12,opt,name=max_order_ref,json=maxOrderRef" json:"max_order_ref,omitempty"`
	ShfeTime    string `protobuf:"bytes,13,opt,name=shfe_time,json=shfeTime" json:"shfe_time,omitempty"`
	DceTime     string `protobuf:"bytes,14,opt,name=dce_time,json=dceTime" json:"dce_time,omitempty"`
	CzceTime    string `protobuf:"bytes,15,opt,name=czce_time,json=czceTime" json:"czce_time,omitempty"`
	CffexTime   string `protobuf:"bytes,16,opt,name=cffex_time,json=cffexTime" json:"cffex_time,omitempty"`
	IneTime     string `protobuf:"bytes,17,opt,name=ine_time,json=ineTime" json:"ine_time,omitempty"`
}

func (m *CtpRspUserLogin) Reset()                    { *m = CtpRspUserLogin{} }
func (m *CtpRspUserLogin) String() string            { return proto.CompactTextString(m) }
func (*CtpRspUserLogin) ProtoMessage()               {}
func (*CtpRspUserLogin) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{30} }

func (m *CtpRspUserLogin) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *CtpRspUserLogin) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *CtpRspUserLogin) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CtpRspUserLogin) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func (m *CtpRspUserLogin) GetTradingDay() string {
	if m != nil {
		return m.TradingDay
	}
	return ""
}

func (m *CtpRspUserLogin) GetLoginTime() string {
	if m != nil {
		return m.LoginTime
	}
	return ""
}

func (m *CtpRspUserLogin) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpRspUserLogin) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CtpRspUserLogin) GetSystemName() string {
	if m != nil {
		return m.SystemName
	}
	return ""
}

func (m *CtpRspUserLogin) GetFrontId() int32 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *CtpRspUserLogin) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CtpRspUserLogin) GetMaxOrderRef() string {
	if m != nil {
		return m.MaxOrderRef
	}
	return ""
}

func (m *CtpRspUserLogin) GetShfeTime() string {
	if m != nil {
		return m.ShfeTime
	}
	return ""
}

func (m *CtpRspUserLogin) GetDceTime() string {
	if m != nil {
		return m.DceTime
	}
	return ""
}

func (m *CtpRspUserLogin) GetCzceTime() string {
	if m != nil {
		return m.CzceTime
	}
	return ""
}

func (m *CtpRspUserLogin) GetCffexTime() string {
	if m != nil {
		return m.CffexTime
	}
	return ""
}

func (m *CtpRspUserLogin) GetIneTime() string {
	if m != nil {
		return m.IneTime
	}
	return ""
}

// 连接
type CtpReqConnect struct {
	Address   string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Account   string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Directory string `protobuf:"bytes,3,opt,name=directory" json:"directory,omitempty"`
}

func (m *CtpReqConnect) Reset()                    { *m = CtpReqConnect{} }
func (m *CtpReqConnect) String() string            { return proto.CompactTextString(m) }
func (*CtpReqConnect) ProtoMessage()               {}
func (*CtpReqConnect) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{31} }

func (m *CtpReqConnect) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CtpReqConnect) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CtpReqConnect) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

// 前置连接
type CtpOnFrontConnected struct {
}

func (m *CtpOnFrontConnected) Reset()                    { *m = CtpOnFrontConnected{} }
func (m *CtpOnFrontConnected) String() string            { return proto.CompactTextString(m) }
func (*CtpOnFrontConnected) ProtoMessage()               {}
func (*CtpOnFrontConnected) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{32} }

// 前置断开
type CtpOnFrontDisconnected struct {
}

func (m *CtpOnFrontDisconnected) Reset()                    { *m = CtpOnFrontDisconnected{} }
func (m *CtpOnFrontDisconnected) String() string            { return proto.CompactTextString(m) }
func (*CtpOnFrontDisconnected) ProtoMessage()               {}
func (*CtpOnFrontDisconnected) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{33} }

// 确认结算
type CtpReqSettlementInfoConfirm struct {
	BrokerId   string `protobuf:"bytes,1,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	InvestorId string `protobuf:"bytes,2,opt,name=investor_id,json=investorId" json:"investor_id,omitempty"`
}

func (m *CtpReqSettlementInfoConfirm) Reset()                    { *m = CtpReqSettlementInfoConfirm{} }
func (m *CtpReqSettlementInfoConfirm) String() string            { return proto.CompactTextString(m) }
func (*CtpReqSettlementInfoConfirm) ProtoMessage()               {}
func (*CtpReqSettlementInfoConfirm) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{34} }

func (m *CtpReqSettlementInfoConfirm) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpReqSettlementInfoConfirm) GetInvestorId() string {
	if m != nil {
		return m.InvestorId
	}
	return ""
}

// 确认结算返回
type CtpOnRspSettlementInfoConfirm struct {
	ErrorId      int32  `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg     string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	RequestId    int32  `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	IsLast       bool   `protobuf:"varint,4,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	BrokerId     string `protobuf:"bytes,5,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	InvestorId   string `protobuf:"bytes,6,opt,name=investor_id,json=investorId" json:"investor_id,omitempty"`
	ConfirmDate  string `protobuf:"bytes,7,opt,name=confirm_date,json=confirmDate" json:"confirm_date,omitempty"`
	ConfirmTime  string `protobuf:"bytes,8,opt,name=confirm_time,json=confirmTime" json:"confirm_time,omitempty"`
	SettlementId int32  `protobuf:"varint,9,opt,name=settlement_id,json=settlementId" json:"settlement_id,omitempty"`
	AccountId    string `protobuf:"bytes,10,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CurrencyId   string `protobuf:"bytes,11,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
}

func (m *CtpOnRspSettlementInfoConfirm) Reset()                    { *m = CtpOnRspSettlementInfoConfirm{} }
func (m *CtpOnRspSettlementInfoConfirm) String() string            { return proto.CompactTextString(m) }
func (*CtpOnRspSettlementInfoConfirm) ProtoMessage()               {}
func (*CtpOnRspSettlementInfoConfirm) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{35} }

func (m *CtpOnRspSettlementInfoConfirm) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *CtpOnRspSettlementInfoConfirm) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *CtpOnRspSettlementInfoConfirm) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CtpOnRspSettlementInfoConfirm) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func (m *CtpOnRspSettlementInfoConfirm) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpOnRspSettlementInfoConfirm) GetInvestorId() string {
	if m != nil {
		return m.InvestorId
	}
	return ""
}

func (m *CtpOnRspSettlementInfoConfirm) GetConfirmDate() string {
	if m != nil {
		return m.ConfirmDate
	}
	return ""
}

func (m *CtpOnRspSettlementInfoConfirm) GetConfirmTime() string {
	if m != nil {
		return m.ConfirmTime
	}
	return ""
}

func (m *CtpOnRspSettlementInfoConfirm) GetSettlementId() int32 {
	if m != nil {
		return m.SettlementId
	}
	return 0
}

func (m *CtpOnRspSettlementInfoConfirm) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CtpOnRspSettlementInfoConfirm) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

// 查询投资者
type CtpReqQryInvestor struct {
}

func (m *CtpReqQryInvestor) Reset()                    { *m = CtpReqQryInvestor{} }
func (m *CtpReqQryInvestor) String() string            { return proto.CompactTextString(m) }
func (*CtpReqQryInvestor) ProtoMessage()               {}
func (*CtpReqQryInvestor) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{36} }

// 返回查询投资者
type CtpRspQryInvestor struct {
	ErrorId            int32  `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg           string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	RequestId          int32  `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	IsLast             bool   `protobuf:"varint,4,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	InvestorId         string `protobuf:"bytes,5,opt,name=investor_id,json=investorId" json:"investor_id,omitempty"`
	BrokerId           string `protobuf:"bytes,6,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	InvestorGroupId    string `protobuf:"bytes,7,opt,name=investor_group_id,json=investorGroupId" json:"investor_group_id,omitempty"`
	InvestorName       string `protobuf:"bytes,8,opt,name=investor_name,json=investorName" json:"investor_name,omitempty"`
	IdentifiedCardType int32  `protobuf:"varint,9,opt,name=identified_card_type,json=identifiedCardType" json:"identified_card_type,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,10,opt,name=identified_card_no,json=identifiedCardNo" json:"identified_card_no,omitempty"`
	IsActive           bool   `protobuf:"varint,11,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	Telphone           string `protobuf:"bytes,12,opt,name=telphone" json:"telphone,omitempty"`
	Address            string `protobuf:"bytes,13,opt,name=address" json:"address,omitempty"`
	OpenDate           string `protobuf:"bytes,14,opt,name=open_date,json=openDate" json:"open_date,omitempty"`
	Mobile             string `protobuf:"bytes,15,opt,name=mobile" json:"mobile,omitempty"`
}

func (m *CtpRspQryInvestor) Reset()                    { *m = CtpRspQryInvestor{} }
func (m *CtpRspQryInvestor) String() string            { return proto.CompactTextString(m) }
func (*CtpRspQryInvestor) ProtoMessage()               {}
func (*CtpRspQryInvestor) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{37} }

func (m *CtpRspQryInvestor) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *CtpRspQryInvestor) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *CtpRspQryInvestor) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CtpRspQryInvestor) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func (m *CtpRspQryInvestor) GetInvestorId() string {
	if m != nil {
		return m.InvestorId
	}
	return ""
}

func (m *CtpRspQryInvestor) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpRspQryInvestor) GetInvestorGroupId() string {
	if m != nil {
		return m.InvestorGroupId
	}
	return ""
}

func (m *CtpRspQryInvestor) GetInvestorName() string {
	if m != nil {
		return m.InvestorName
	}
	return ""
}

func (m *CtpRspQryInvestor) GetIdentifiedCardType() int32 {
	if m != nil {
		return m.IdentifiedCardType
	}
	return 0
}

func (m *CtpRspQryInvestor) GetIdentifiedCardNo() string {
	if m != nil {
		return m.IdentifiedCardNo
	}
	return ""
}

func (m *CtpRspQryInvestor) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *CtpRspQryInvestor) GetTelphone() string {
	if m != nil {
		return m.Telphone
	}
	return ""
}

func (m *CtpRspQryInvestor) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CtpRspQryInvestor) GetOpenDate() string {
	if m != nil {
		return m.OpenDate
	}
	return ""
}

func (m *CtpRspQryInvestor) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

// 查询银行
type CtpReqQryTransferBank struct {
	BrokerId   string `protobuf:"bytes,1,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	InvestorId string `protobuf:"bytes,2,opt,name=investor_id,json=investorId" json:"investor_id,omitempty"`
}

func (m *CtpReqQryTransferBank) Reset()                    { *m = CtpReqQryTransferBank{} }
func (m *CtpReqQryTransferBank) String() string            { return proto.CompactTextString(m) }
func (*CtpReqQryTransferBank) ProtoMessage()               {}
func (*CtpReqQryTransferBank) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{38} }

func (m *CtpReqQryTransferBank) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpReqQryTransferBank) GetInvestorId() string {
	if m != nil {
		return m.InvestorId
	}
	return ""
}

// 返回查询银行
type CtpRspQryTransferBank struct {
	ErrorId      int32  `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg     string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	RequestId    int32  `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	IsLast       bool   `protobuf:"varint,4,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	BrokerId     string `protobuf:"bytes,5,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	BankId       string `protobuf:"bytes,6,opt,name=bank_id,json=bankId" json:"bank_id,omitempty"`
	BankBranchId string `protobuf:"bytes,7,opt,name=bank_branch_id,json=bankBranchId" json:"bank_branch_id,omitempty"`
	BankName     string `protobuf:"bytes,8,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
}

func (m *CtpRspQryTransferBank) Reset()                    { *m = CtpRspQryTransferBank{} }
func (m *CtpRspQryTransferBank) String() string            { return proto.CompactTextString(m) }
func (*CtpRspQryTransferBank) ProtoMessage()               {}
func (*CtpRspQryTransferBank) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{39} }

func (m *CtpRspQryTransferBank) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *CtpRspQryTransferBank) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *CtpRspQryTransferBank) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CtpRspQryTransferBank) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func (m *CtpRspQryTransferBank) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpRspQryTransferBank) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *CtpRspQryTransferBank) GetBankBranchId() string {
	if m != nil {
		return m.BankBranchId
	}
	return ""
}

func (m *CtpRspQryTransferBank) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

// 银行转期货
type CtpReqTransfer struct {
	TradeCode         string  `protobuf:"bytes,1,opt,name=trade_code,json=tradeCode" json:"trade_code,omitempty"`
	BankId            string  `protobuf:"bytes,2,opt,name=bank_id,json=bankId" json:"bank_id,omitempty"`
	BankBranchId      string  `protobuf:"bytes,3,opt,name=bank_branch_id,json=bankBranchId" json:"bank_branch_id,omitempty"`
	BrokerId          string  `protobuf:"bytes,4,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	BrokerBranchId    string  `protobuf:"bytes,5,opt,name=broker_branch_id,json=brokerBranchId" json:"broker_branch_id,omitempty"`
	TradeDate         string  `protobuf:"bytes,6,opt,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	TradeTime         string  `protobuf:"bytes,7,opt,name=trade_time,json=tradeTime" json:"trade_time,omitempty"`
	BankSerial        string  `protobuf:"bytes,8,opt,name=bank_serial,json=bankSerial" json:"bank_serial,omitempty"`
	TradingDay        string  `protobuf:"bytes,9,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	PlateSerieal      int32   `protobuf:"varint,10,opt,name=plate_serieal,json=plateSerieal" json:"plate_serieal,omitempty"`
	LastFragment      string  `protobuf:"bytes,11,opt,name=last_fragment,json=lastFragment" json:"last_fragment,omitempty"`
	SessionId         int32   `protobuf:"varint,12,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	CustomerName      string  `protobuf:"bytes,13,opt,name=customer_name,json=customerName" json:"customer_name,omitempty"`
	IdCardType        int32   `protobuf:"varint,14,opt,name=id_card_type,json=idCardType" json:"id_card_type,omitempty"`
	IdentifiedCardNo  string  `protobuf:"bytes,15,opt,name=identified_card_no,json=identifiedCardNo" json:"identified_card_no,omitempty"`
	CustType          string  `protobuf:"bytes,16,opt,name=cust_type,json=custType" json:"cust_type,omitempty"`
	BankAccount       string  `protobuf:"bytes,17,opt,name=bank_account,json=bankAccount" json:"bank_account,omitempty"`
	BankPassword      string  `protobuf:"bytes,18,opt,name=bank_password,json=bankPassword" json:"bank_password,omitempty"`
	AccountId         string  `protobuf:"bytes,19,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Password          string  `protobuf:"bytes,20,opt,name=password" json:"password,omitempty"`
	InstallId         int32   `protobuf:"varint,21,opt,name=install_id,json=installId" json:"install_id,omitempty"`
	FutureSerial      int32   `protobuf:"varint,22,opt,name=future_serial,json=futureSerial" json:"future_serial,omitempty"`
	UserId            string  `protobuf:"bytes,23,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	VerifyCertNoFlag  string  `protobuf:"bytes,24,opt,name=verify_cert_no_flag,json=verifyCertNoFlag" json:"verify_cert_no_flag,omitempty"`
	CurrencyId        string  `protobuf:"bytes,25,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	TradeAmount       float64 `protobuf:"fixed64,26,opt,name=trade_amount,json=tradeAmount" json:"trade_amount,omitempty"`
	FutureFetchAmount float64 `protobuf:"fixed64,27,opt,name=future_fetch_amount,json=futureFetchAmount" json:"future_fetch_amount,omitempty"`
	FeePayFlag        int32   `protobuf:"varint,28,opt,name=fee_pay_flag,json=feePayFlag" json:"fee_pay_flag,omitempty"`
	CustFee           float64 `protobuf:"fixed64,29,opt,name=cust_fee,json=custFee" json:"cust_fee,omitempty"`
	BrokerFee         float64 `protobuf:"fixed64,30,opt,name=broker_fee,json=brokerFee" json:"broker_fee,omitempty"`
	Message           string  `protobuf:"bytes,31,opt,name=message" json:"message,omitempty"`
	Digest            string  `protobuf:"bytes,32,opt,name=digest" json:"digest,omitempty"`
	BankAccType       int32   `protobuf:"varint,33,opt,name=bank_acc_type,json=bankAccType" json:"bank_acc_type,omitempty"`
	DeviceId          string  `protobuf:"bytes,34,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	BankSecuAcc       string  `protobuf:"bytes,35,opt,name=bank_secu_acc,json=bankSecuAcc" json:"bank_secu_acc,omitempty"`
	BankPwdFlag       string  `protobuf:"bytes,36,opt,name=bank_pwd_flag,json=bankPwdFlag" json:"bank_pwd_flag,omitempty"`
	SecuPwdFlag       string  `protobuf:"bytes,37,opt,name=secu_pwd_flag,json=secuPwdFlag" json:"secu_pwd_flag,omitempty"`
	OperNo            string  `protobuf:"bytes,38,opt,name=oper_no,json=operNo" json:"oper_no,omitempty"`
	RequestId         int32   `protobuf:"varint,39,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Tid               int32   `protobuf:"varint,40,opt,name=tid" json:"tid,omitempty"`
	TransferStatus    string  `protobuf:"bytes,41,opt,name=transfer_status,json=transferStatus" json:"transfer_status,omitempty"`
	LongCustomerName  string  `protobuf:"bytes,42,opt,name=long_customer_name,json=longCustomerName" json:"long_customer_name,omitempty"`
}

func (m *CtpReqTransfer) Reset()                    { *m = CtpReqTransfer{} }
func (m *CtpReqTransfer) String() string            { return proto.CompactTextString(m) }
func (*CtpReqTransfer) ProtoMessage()               {}
func (*CtpReqTransfer) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{40} }

func (m *CtpReqTransfer) GetTradeCode() string {
	if m != nil {
		return m.TradeCode
	}
	return ""
}

func (m *CtpReqTransfer) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *CtpReqTransfer) GetBankBranchId() string {
	if m != nil {
		return m.BankBranchId
	}
	return ""
}

func (m *CtpReqTransfer) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *CtpReqTransfer) GetBrokerBranchId() string {
	if m != nil {
		return m.BrokerBranchId
	}
	return ""
}

func (m *CtpReqTransfer) GetTradeDate() string {
	if m != nil {
		return m.TradeDate
	}
	return ""
}

func (m *CtpReqTransfer) GetTradeTime() string {
	if m != nil {
		return m.TradeTime
	}
	return ""
}

func (m *CtpReqTransfer) GetBankSerial() string {
	if m != nil {
		return m.BankSerial
	}
	return ""
}

func (m *CtpReqTransfer) GetTradingDay() string {
	if m != nil {
		return m.TradingDay
	}
	return ""
}

func (m *CtpReqTransfer) GetPlateSerieal() int32 {
	if m != nil {
		return m.PlateSerieal
	}
	return 0
}

func (m *CtpReqTransfer) GetLastFragment() string {
	if m != nil {
		return m.LastFragment
	}
	return ""
}

func (m *CtpReqTransfer) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CtpReqTransfer) GetCustomerName() string {
	if m != nil {
		return m.CustomerName
	}
	return ""
}

func (m *CtpReqTransfer) GetIdCardType() int32 {
	if m != nil {
		return m.IdCardType
	}
	return 0
}

func (m *CtpReqTransfer) GetIdentifiedCardNo() string {
	if m != nil {
		return m.IdentifiedCardNo
	}
	return ""
}

func (m *CtpReqTransfer) GetCustType() string {
	if m != nil {
		return m.CustType
	}
	return ""
}

func (m *CtpReqTransfer) GetBankAccount() string {
	if m != nil {
		return m.BankAccount
	}
	return ""
}

func (m *CtpReqTransfer) GetBankPassword() string {
	if m != nil {
		return m.BankPassword
	}
	return ""
}

func (m *CtpReqTransfer) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CtpReqTransfer) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CtpReqTransfer) GetInstallId() int32 {
	if m != nil {
		return m.InstallId
	}
	return 0
}

func (m *CtpReqTransfer) GetFutureSerial() int32 {
	if m != nil {
		return m.FutureSerial
	}
	return 0
}

func (m *CtpReqTransfer) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CtpReqTransfer) GetVerifyCertNoFlag() string {
	if m != nil {
		return m.VerifyCertNoFlag
	}
	return ""
}

func (m *CtpReqTransfer) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

func (m *CtpReqTransfer) GetTradeAmount() float64 {
	if m != nil {
		return m.TradeAmount
	}
	return 0
}

func (m *CtpReqTransfer) GetFutureFetchAmount() float64 {
	if m != nil {
		return m.FutureFetchAmount
	}
	return 0
}

func (m *CtpReqTransfer) GetFeePayFlag() int32 {
	if m != nil {
		return m.FeePayFlag
	}
	return 0
}

func (m *CtpReqTransfer) GetCustFee() float64 {
	if m != nil {
		return m.CustFee
	}
	return 0
}

func (m *CtpReqTransfer) GetBrokerFee() float64 {
	if m != nil {
		return m.BrokerFee
	}
	return 0
}

func (m *CtpReqTransfer) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CtpReqTransfer) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *CtpReqTransfer) GetBankAccType() int32 {
	if m != nil {
		return m.BankAccType
	}
	return 0
}

func (m *CtpReqTransfer) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *CtpReqTransfer) GetBankSecuAcc() string {
	if m != nil {
		return m.BankSecuAcc
	}
	return ""
}

func (m *CtpReqTransfer) GetBankPwdFlag() string {
	if m != nil {
		return m.BankPwdFlag
	}
	return ""
}

func (m *CtpReqTransfer) GetSecuPwdFlag() string {
	if m != nil {
		return m.SecuPwdFlag
	}
	return ""
}

func (m *CtpReqTransfer) GetOperNo() string {
	if m != nil {
		return m.OperNo
	}
	return ""
}

func (m *CtpReqTransfer) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CtpReqTransfer) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *CtpReqTransfer) GetTransferStatus() string {
	if m != nil {
		return m.TransferStatus
	}
	return ""
}

func (m *CtpReqTransfer) GetLongCustomerName() string {
	if m != nil {
		return m.LongCustomerName
	}
	return ""
}

// 返回银行转期货
type CtpRspTransfer struct {
	ErrorId   int32           `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg  string          `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	RequestId int32           `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	IsLast    bool            `protobuf:"varint,4,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	Req       *CtpReqTransfer `protobuf:"bytes,5,opt,name=req" json:"req,omitempty"`
}

func (m *CtpRspTransfer) Reset()                    { *m = CtpRspTransfer{} }
func (m *CtpRspTransfer) String() string            { return proto.CompactTextString(m) }
func (*CtpRspTransfer) ProtoMessage()               {}
func (*CtpRspTransfer) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{41} }

func (m *CtpRspTransfer) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *CtpRspTransfer) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *CtpRspTransfer) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CtpRspTransfer) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func (m *CtpRspTransfer) GetReq() *CtpReqTransfer {
	if m != nil {
		return m.Req
	}
	return nil
}

type CTPReqSubscribeMarketData struct {
	List []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CTPReqSubscribeMarketData) Reset()                    { *m = CTPReqSubscribeMarketData{} }
func (m *CTPReqSubscribeMarketData) String() string            { return proto.CompactTextString(m) }
func (*CTPReqSubscribeMarketData) ProtoMessage()               {}
func (*CTPReqSubscribeMarketData) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{42} }

func (m *CTPReqSubscribeMarketData) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type CTPRspSusbcribeMarketData struct {
}

func (m *CTPRspSusbcribeMarketData) Reset()                    { *m = CTPRspSusbcribeMarketData{} }
func (m *CTPRspSusbcribeMarketData) String() string            { return proto.CompactTextString(m) }
func (*CTPRspSusbcribeMarketData) ProtoMessage()               {}
func (*CTPRspSusbcribeMarketData) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{43} }

type CTPReqUnSusbibeMarketData struct {
	List []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CTPReqUnSusbibeMarketData) Reset()                    { *m = CTPReqUnSusbibeMarketData{} }
func (m *CTPReqUnSusbibeMarketData) String() string            { return proto.CompactTextString(m) }
func (*CTPReqUnSusbibeMarketData) ProtoMessage()               {}
func (*CTPReqUnSusbibeMarketData) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{44} }

func (m *CTPReqUnSusbibeMarketData) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type CTPRspUnSusbibeMarketData struct {
}

func (m *CTPRspUnSusbibeMarketData) Reset()                    { *m = CTPRspUnSusbibeMarketData{} }
func (m *CTPRspUnSusbibeMarketData) String() string            { return proto.CompactTextString(m) }
func (*CTPRspUnSusbibeMarketData) ProtoMessage()               {}
func (*CTPRspUnSusbibeMarketData) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{45} }

// 发单错误返回
type CTPOnRspOrderInsert struct {
	ErrorId  int32  `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg []byte `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	OrderRef string `protobuf:"bytes,3,opt,name=order_ref,json=orderRef" json:"order_ref,omitempty"`
}

func (m *CTPOnRspOrderInsert) Reset()                    { *m = CTPOnRspOrderInsert{} }
func (m *CTPOnRspOrderInsert) String() string            { return proto.CompactTextString(m) }
func (*CTPOnRspOrderInsert) ProtoMessage()               {}
func (*CTPOnRspOrderInsert) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{46} }

func (m *CTPOnRspOrderInsert) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *CTPOnRspOrderInsert) GetErrorMsg() []byte {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

func (m *CTPOnRspOrderInsert) GetOrderRef() string {
	if m != nil {
		return m.OrderRef
	}
	return ""
}

// 合约信息
type CTPInstrumentField struct {
	// /合约代码
	InstrumentId string `protobuf:"bytes,1,opt,name=instrument_id,json=instrumentId" json:"instrument_id,omitempty"`
	// /交易所代码
	ExchangeId string `protobuf:"bytes,2,opt,name=exchange_id,json=exchangeId" json:"exchange_id,omitempty"`
	// /合约名称
	InstrumentName []byte `protobuf:"bytes,3,opt,name=instrument_name,json=instrumentName,proto3" json:"instrument_name,omitempty"`
	// /合约在交易所的代码
	ExchangeInstId string `protobuf:"bytes,4,opt,name=exchange_inst_id,json=exchangeInstId" json:"exchange_inst_id,omitempty"`
	// /产品代码
	ProductId string `protobuf:"bytes,5,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	// /产品类型
	ProductClass int32 `protobuf:"varint,6,opt,name=product_class,json=productClass" json:"product_class,omitempty"`
	// /交割年份
	DeliveryYear int32 `protobuf:"varint,7,opt,name=delivery_year,json=deliveryYear" json:"delivery_year,omitempty"`
	// /交割月
	DeliveryMonth int32 `protobuf:"varint,8,opt,name=delivery_month,json=deliveryMonth" json:"delivery_month,omitempty"`
	// /市价单最大下单量
	MaxMarketOrderVolume int32 `protobuf:"varint,9,opt,name=max_market_order_volume,json=maxMarketOrderVolume" json:"max_market_order_volume,omitempty"`
	// /市价单最小下单量
	MinMarketOrderVolume int32 `protobuf:"varint,10,opt,name=min_market_order_volume,json=minMarketOrderVolume" json:"min_market_order_volume,omitempty"`
	// /限价单最大下单量
	MaxLimitOrderVolume int32 `protobuf:"varint,11,opt,name=max_limit_order_volume,json=maxLimitOrderVolume" json:"max_limit_order_volume,omitempty"`
	// /限价单最小下单量
	MinLimitOrderVolume int32 `protobuf:"varint,12,opt,name=min_limit_order_volume,json=minLimitOrderVolume" json:"min_limit_order_volume,omitempty"`
	// /合约数量乘数
	VolumeMultiple int32 `protobuf:"varint,13,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// /最小变动价位
	PriceTick float64 `protobuf:"fixed64,14,opt,name=price_tick,json=priceTick" json:"price_tick,omitempty"`
	// /创建日
	CreateDate string `protobuf:"bytes,15,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	// /上市日
	OpenDate string `protobuf:"bytes,16,opt,name=open_date,json=openDate" json:"open_date,omitempty"`
	// /到期日
	ExpireDate string `protobuf:"bytes,17,opt,name=expire_date,json=expireDate" json:"expire_date,omitempty"`
	// /开始交割日
	StartDelivDate string `protobuf:"bytes,18,opt,name=start_deliv_date,json=startDelivDate" json:"start_deliv_date,omitempty"`
	// /结束交割日
	EndDelivDate string `protobuf:"bytes,19,opt,name=end_deliv_date,json=endDelivDate" json:"end_deliv_date,omitempty"`
	// /合约生命周期状态
	InstLifePhase int32 `protobuf:"varint,20,opt,name=inst_life_phase,json=instLifePhase" json:"inst_life_phase,omitempty"`
	// /当前是否交易
	IsTrading bool `protobuf:"varint,30,opt,name=is_trading,json=isTrading" json:"is_trading,omitempty"`
	// /持仓类型
	PositionType int32 `protobuf:"varint,31,opt,name=position_type,json=positionType" json:"position_type,omitempty"`
	// /持仓日期类型
	PositionDateType int32 `protobuf:"varint,32,opt,name=position_date_type,json=positionDateType" json:"position_date_type,omitempty"`
	// /多头保证金率
	LongMarginRatio float64 `protobuf:"fixed64,33,opt,name=long_margin_ratio,json=longMarginRatio" json:"long_margin_ratio,omitempty"`
	// /空头保证金率
	ShortMarginRatio float64 `protobuf:"fixed64,34,opt,name=short_margin_ratio,json=shortMarginRatio" json:"short_margin_ratio,omitempty"`
	// /是否使用大额单边保证金算法
	MaxMarginSideAlgorithm bool `protobuf:"varint,35,opt,name=max_margin_side_algorithm,json=maxMarginSideAlgorithm" json:"max_margin_side_algorithm,omitempty"`
	// /基础商品代码
	UnderlyingInstId string `protobuf:"bytes,36,opt,name=underlying_inst_id,json=underlyingInstId" json:"underlying_inst_id,omitempty"`
	// /执行价
	StrikePrice float64 `protobuf:"fixed64,37,opt,name=strike_price,json=strikePrice" json:"strike_price,omitempty"`
	// /期权类型
	OptionsType int32 `protobuf:"varint,38,opt,name=options_type,json=optionsType" json:"options_type,omitempty"`
	// /合约基础商品乘数
	UnderlyingMultiple int32 `protobuf:"varint,39,opt,name=underlying_multiple,json=underlyingMultiple" json:"underlying_multiple,omitempty"`
	// /组合类型
	CombinationType int32 `protobuf:"varint,40,opt,name=combination_type,json=combinationType" json:"combination_type,omitempty"`
}

func (m *CTPInstrumentField) Reset()                    { *m = CTPInstrumentField{} }
func (m *CTPInstrumentField) String() string            { return proto.CompactTextString(m) }
func (*CTPInstrumentField) ProtoMessage()               {}
func (*CTPInstrumentField) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{47} }

func (m *CTPInstrumentField) GetInstrumentId() string {
	if m != nil {
		return m.InstrumentId
	}
	return ""
}

func (m *CTPInstrumentField) GetExchangeId() string {
	if m != nil {
		return m.ExchangeId
	}
	return ""
}

func (m *CTPInstrumentField) GetInstrumentName() []byte {
	if m != nil {
		return m.InstrumentName
	}
	return nil
}

func (m *CTPInstrumentField) GetExchangeInstId() string {
	if m != nil {
		return m.ExchangeInstId
	}
	return ""
}

func (m *CTPInstrumentField) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *CTPInstrumentField) GetProductClass() int32 {
	if m != nil {
		return m.ProductClass
	}
	return 0
}

func (m *CTPInstrumentField) GetDeliveryYear() int32 {
	if m != nil {
		return m.DeliveryYear
	}
	return 0
}

func (m *CTPInstrumentField) GetDeliveryMonth() int32 {
	if m != nil {
		return m.DeliveryMonth
	}
	return 0
}

func (m *CTPInstrumentField) GetMaxMarketOrderVolume() int32 {
	if m != nil {
		return m.MaxMarketOrderVolume
	}
	return 0
}

func (m *CTPInstrumentField) GetMinMarketOrderVolume() int32 {
	if m != nil {
		return m.MinMarketOrderVolume
	}
	return 0
}

func (m *CTPInstrumentField) GetMaxLimitOrderVolume() int32 {
	if m != nil {
		return m.MaxLimitOrderVolume
	}
	return 0
}

func (m *CTPInstrumentField) GetMinLimitOrderVolume() int32 {
	if m != nil {
		return m.MinLimitOrderVolume
	}
	return 0
}

func (m *CTPInstrumentField) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *CTPInstrumentField) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *CTPInstrumentField) GetCreateDate() string {
	if m != nil {
		return m.CreateDate
	}
	return ""
}

func (m *CTPInstrumentField) GetOpenDate() string {
	if m != nil {
		return m.OpenDate
	}
	return ""
}

func (m *CTPInstrumentField) GetExpireDate() string {
	if m != nil {
		return m.ExpireDate
	}
	return ""
}

func (m *CTPInstrumentField) GetStartDelivDate() string {
	if m != nil {
		return m.StartDelivDate
	}
	return ""
}

func (m *CTPInstrumentField) GetEndDelivDate() string {
	if m != nil {
		return m.EndDelivDate
	}
	return ""
}

func (m *CTPInstrumentField) GetInstLifePhase() int32 {
	if m != nil {
		return m.InstLifePhase
	}
	return 0
}

func (m *CTPInstrumentField) GetIsTrading() bool {
	if m != nil {
		return m.IsTrading
	}
	return false
}

func (m *CTPInstrumentField) GetPositionType() int32 {
	if m != nil {
		return m.PositionType
	}
	return 0
}

func (m *CTPInstrumentField) GetPositionDateType() int32 {
	if m != nil {
		return m.PositionDateType
	}
	return 0
}

func (m *CTPInstrumentField) GetLongMarginRatio() float64 {
	if m != nil {
		return m.LongMarginRatio
	}
	return 0
}

func (m *CTPInstrumentField) GetShortMarginRatio() float64 {
	if m != nil {
		return m.ShortMarginRatio
	}
	return 0
}

func (m *CTPInstrumentField) GetMaxMarginSideAlgorithm() bool {
	if m != nil {
		return m.MaxMarginSideAlgorithm
	}
	return false
}

func (m *CTPInstrumentField) GetUnderlyingInstId() string {
	if m != nil {
		return m.UnderlyingInstId
	}
	return ""
}

func (m *CTPInstrumentField) GetStrikePrice() float64 {
	if m != nil {
		return m.StrikePrice
	}
	return 0
}

func (m *CTPInstrumentField) GetOptionsType() int32 {
	if m != nil {
		return m.OptionsType
	}
	return 0
}

func (m *CTPInstrumentField) GetUnderlyingMultiple() int32 {
	if m != nil {
		return m.UnderlyingMultiple
	}
	return 0
}

func (m *CTPInstrumentField) GetCombinationType() int32 {
	if m != nil {
		return m.CombinationType
	}
	return 0
}

type CTPOnRspQryInstrument struct {
	Inst     *CTPInstrumentField `protobuf:"bytes,1,opt,name=inst" json:"inst,omitempty"`
	Response *CTPRspInfo         `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *CTPOnRspQryInstrument) Reset()                    { *m = CTPOnRspQryInstrument{} }
func (m *CTPOnRspQryInstrument) String() string            { return proto.CompactTextString(m) }
func (*CTPOnRspQryInstrument) ProtoMessage()               {}
func (*CTPOnRspQryInstrument) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{48} }

func (m *CTPOnRspQryInstrument) GetInst() *CTPInstrumentField {
	if m != nil {
		return m.Inst
	}
	return nil
}

func (m *CTPOnRspQryInstrument) GetResponse() *CTPRspInfo {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*CTPOrderID)(nil), "pb.CTPOrderID")
	proto.RegisterType((*CTPOrderField)(nil), "pb.CTPOrderField")
	proto.RegisterType((*CTPOrderList)(nil), "pb.CTPOrderList")
	proto.RegisterType((*CTPOrderLink)(nil), "pb.CTPOrderLink")
	proto.RegisterType((*CTPCancelOrderRequest)(nil), "pb.CTPCancelOrderRequest")
	proto.RegisterType((*CTPOnRtnCancelOrder)(nil), "pb.CTPOnRtnCancelOrder")
	proto.RegisterType((*CTPTradeField)(nil), "pb.CTPTradeField")
	proto.RegisterType((*CTPTradeReportList)(nil), "pb.CTPTradeReportList")
	proto.RegisterType((*CTPPositionSummation)(nil), "pb.CTPPositionSummation")
	proto.RegisterType((*CTPPosition)(nil), "pb.CTPPosition")
	proto.RegisterType((*CTPPositionList)(nil), "pb.CTPPositionList")
	proto.RegisterType((*CTPCloseTradeRecord)(nil), "pb.CTPCloseTradeRecord")
	proto.RegisterType((*CTPCloseTradeRecordList)(nil), "pb.CTPCloseTradeRecordList")
	proto.RegisterType((*CTPMarginRate)(nil), "pb.CTPMarginRate")
	proto.RegisterType((*CTPMarginItem)(nil), "pb.CTPMarginItem")
	proto.RegisterType((*CTPCommissionRateItem)(nil), "pb.CTPCommissionRateItem")
	proto.RegisterType((*CTPCommissionRate)(nil), "pb.CTPCommissionRate")
	proto.RegisterType((*CTPTradingUnit)(nil), "pb.CTPTradingUnit")
	proto.RegisterType((*CTPForceCloseTimeRule)(nil), "pb.CTPForceCloseTimeRule")
	proto.RegisterType((*CTPTradingUnitOption)(nil), "pb.CTPTradingUnitOption")
	proto.RegisterType((*MarginCheckRule)(nil), "pb.MarginCheckRule")
	proto.RegisterType((*SettlementUnitOption)(nil), "pb.SettlementUnitOption")
	proto.RegisterType((*CTPTradingAccount)(nil), "pb.CTPTradingAccount")
	proto.RegisterType((*CTPTradingAccountSnapshot)(nil), "pb.CTPTradingAccountSnapshot")
	proto.RegisterType((*CTPRspInfo)(nil), "pb.CTPRspInfo")
	proto.RegisterType((*CtpReqQryAccountRegister)(nil), "pb.CtpReqQryAccountRegister")
	proto.RegisterType((*CtpRspQryAccountRegister)(nil), "pb.CtpRspQryAccountRegister")
	proto.RegisterType((*CtpReqAuthencate)(nil), "pb.CtpReqAuthencate")
	proto.RegisterType((*CtpRspAuthencate)(nil), "pb.CtpRspAuthencate")
	proto.RegisterType((*CtpReqUserLogin)(nil), "pb.CtpReqUserLogin")
	proto.RegisterType((*CtpRspUserLogin)(nil), "pb.CtpRspUserLogin")
	proto.RegisterType((*CtpReqConnect)(nil), "pb.CtpReqConnect")
	proto.RegisterType((*CtpOnFrontConnected)(nil), "pb.CtpOnFrontConnected")
	proto.RegisterType((*CtpOnFrontDisconnected)(nil), "pb.CtpOnFrontDisconnected")
	proto.RegisterType((*CtpReqSettlementInfoConfirm)(nil), "pb.CtpReqSettlementInfoConfirm")
	proto.RegisterType((*CtpOnRspSettlementInfoConfirm)(nil), "pb.CtpOnRspSettlementInfoConfirm")
	proto.RegisterType((*CtpReqQryInvestor)(nil), "pb.CtpReqQryInvestor")
	proto.RegisterType((*CtpRspQryInvestor)(nil), "pb.CtpRspQryInvestor")
	proto.RegisterType((*CtpReqQryTransferBank)(nil), "pb.CtpReqQryTransferBank")
	proto.RegisterType((*CtpRspQryTransferBank)(nil), "pb.CtpRspQryTransferBank")
	proto.RegisterType((*CtpReqTransfer)(nil), "pb.CtpReqTransfer")
	proto.RegisterType((*CtpRspTransfer)(nil), "pb.CtpRspTransfer")
	proto.RegisterType((*CTPReqSubscribeMarketData)(nil), "pb.CTPReqSubscribeMarketData")
	proto.RegisterType((*CTPRspSusbcribeMarketData)(nil), "pb.CTPRspSusbcribeMarketData")
	proto.RegisterType((*CTPReqUnSusbibeMarketData)(nil), "pb.CTPReqUnSusbibeMarketData")
	proto.RegisterType((*CTPRspUnSusbibeMarketData)(nil), "pb.CTPRspUnSusbibeMarketData")
	proto.RegisterType((*CTPOnRspOrderInsert)(nil), "pb.CTPOnRspOrderInsert")
	proto.RegisterType((*CTPInstrumentField)(nil), "pb.CTPInstrumentField")
	proto.RegisterType((*CTPOnRspQryInstrument)(nil), "pb.CTPOnRspQryInstrument")
	proto.RegisterEnum("pb.CTPDirection", CTPDirection_name, CTPDirection_value)
	proto.RegisterEnum("pb.CTPOrderStatus", CTPOrderStatus_name, CTPOrderStatus_value)
	proto.RegisterEnum("pb.CTPPriceType", CTPPriceType_name, CTPPriceType_value)
	proto.RegisterEnum("pb.CTPOffsetFlag", CTPOffsetFlag_name, CTPOffsetFlag_value)
	proto.RegisterEnum("pb.CTPHedgeType", CTPHedgeType_name, CTPHedgeType_value)
	proto.RegisterEnum("pb.CTPTradeType", CTPTradeType_name, CTPTradeType_value)
}

func init() { proto.RegisterFile("ctp.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 6147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7c, 0xcd, 0x73, 0x23, 0x47,
	0x72, 0xaf, 0x00, 0x90, 0x04, 0x90, 0xf8, 0x64, 0x93, 0x1c, 0x82, 0x1a, 0x51, 0x43, 0x62, 0x66,
	0x24, 0x0e, 0xa5, 0x1d, 0xad, 0xb8, 0x1a, 0xed, 0xe7, 0x7b, 0xfb, 0x38, 0x20, 0x66, 0x84, 0xb7,
	0xfc, 0xda, 0x26, 0x67, 0xf5, 0xb4, 0xef, 0xd0, 0xd1, 0xec, 0x2e, 0x80, 0xe5, 0x01, 0xba, 0xa1,
	0xee, 0xc6, 0x8c, 0xa0, 0xf0, 0x61, 0x2f, 0x7b, 0x72, 0x38, 0xf6, 0xe4, 0x08, 0x47, 0xf8, 0x6e,
	0x47, 0xd8, 0x27, 0x5f, 0x7c, 0xf0, 0xc5, 0xe1, 0xb3, 0x0f, 0xfe, 0x27, 0x7c, 0xf0, 0xc5, 0x17,
	0x9f, 0x1c, 0xf6, 0xc5, 0x51, 0x99, 0x55, 0xdd, 0xd5, 0x8d, 0xe6, 0xcc, 0xc8, 0x0a, 0xaf, 0x75,
	0x43, 0x67, 0x66, 0x65, 0xd7, 0x47, 0x7e, 0xfc, 0xaa, 0x2a, 0x1b, 0x50, 0x75, 0xa2, 0xe9, 0xc3,
	0x69, 0xe0, 0x47, 0xbe, 0x51, 0x9c, 0x5e, 0xbd, 0x5d, 0x77, 0xfc, 0xc9, 0xc4, 0xf7, 0x88, 0xd2,
	0xfd, 0x4d, 0x01, 0xa0, 0x77, 0x79, 0x7e, 0x16, 0xb8, 0x2c, 0x18, 0x1c, 0x19, 0x5b, 0x50, 0x19,
	0x06, 0xbe, 0x17, 0x59, 0xdc, 0xed, 0x14, 0x76, 0x0a, 0x7b, 0x25, 0xb3, 0x8c, 0xcf, 0x03, 0xd7,
	0xd8, 0x06, 0x08, 0x59, 0x18, 0x72, 0xdf, 0x13, 0xcc, 0x22, 0x32, 0xab, 0x92, 0x32, 0x70, 0x8d,
	0xdb, 0x50, 0xf5, 0x85, 0x12, 0x2b, 0x60, 0xc3, 0x4e, 0x09, 0xb9, 0x15, 0x24, 0x98, 0x6c, 0x28,
	0x98, 0x61, 0x14, 0x70, 0x6f, 0x24, 0x9a, 0x2e, 0xed, 0x14, 0xf6, 0xaa, 0x66, 0x85, 0x08, 0x03,
	0xb7, 0xfb, 0x1f, 0xab, 0xd0, 0x50, 0x5d, 0x78, 0xc2, 0xd9, 0x18, 0x75, 0x5d, 0x05, 0xfe, 0x73,
	0x16, 0xa8, 0x6e, 0x54, 0xcd, 0x0a, 0x11, 0x06, 0xae, 0x71, 0x07, 0x6a, 0xdc, 0x7b, 0xc1, 0xc2,
	0xc8, 0x0f, 0x54, 0x47, 0xaa, 0x26, 0x28, 0xd2, 0xc0, 0x35, 0xee, 0x42, 0x83, 0x7b, 0x61, 0x14,
	0xcc, 0x26, 0x8c, 0x06, 0x52, 0x42, 0x91, 0x7a, 0x42, 0xcc, 0x76, 0x57, 0xf6, 0x28, 0xee, 0xee,
	0x26, 0x94, 0x67, 0x21, 0xbd, 0x7d, 0x19, 0x59, 0x2b, 0xe2, 0x71, 0xe0, 0x1a, 0x7b, 0xd0, 0xa6,
	0x56, 0xd3, 0x80, 0x3b, 0xcc, 0x8a, 0xe6, 0x53, 0xd6, 0x59, 0xd9, 0x29, 0xec, 0x2d, 0x9b, 0x4d,
	0xa4, 0x9f, 0x0b, 0xf2, 0xe5, 0x7c, 0xca, 0x8c, 0x77, 0xa0, 0xea, 0xf2, 0x80, 0x39, 0x11, 0xf7,
	0xbd, 0x4e, 0x19, 0x45, 0x12, 0x82, 0xd0, 0xe3, 0xf8, 0x93, 0x2b, 0xcb, 0x1f, 0x0e, 0x43, 0x16,
	0x59, 0xc3, 0xb1, 0x3d, 0xea, 0x54, 0x48, 0x8f, 0xa0, 0x9f, 0x21, 0xf9, 0xc9, 0xd8, 0x1e, 0x19,
	0xef, 0x41, 0x0b, 0x25, 0xaf, 0x99, 0x3b, 0x62, 0x24, 0x58, 0x45, 0xc1, 0x86, 0x20, 0x7f, 0x26,
	0xa8, 0x28, 0x77, 0x07, 0x6a, 0x63, 0x3e, 0xe1, 0x11, 0xf5, 0xac, 0x03, 0x3b, 0x85, 0xbd, 0x82,
	0x09, 0x48, 0xc2, 0x4e, 0x19, 0x07, 0xb0, 0xf1, 0xc2, 0x1f, 0xcf, 0x26, 0xcc, 0x8a, 0xfc, 0xc8,
	0x1e, 0x5b, 0x7e, 0xc0, 0x47, 0xdc, 0xb3, 0xc7, 0x9d, 0x1a, 0xaa, 0x5b, 0x23, 0xe6, 0xa5, 0xe0,
	0x9d, 0x49, 0x96, 0x71, 0x1f, 0x9a, 0x11, 0x9f, 0x30, 0xcb, 0xf1, 0x3d, 0x97, 0xe3, 0x48, 0xea,
	0xf4, 0x6e, 0x41, 0xed, 0x29, 0xa2, 0x30, 0x9a, 0xa7, 0x97, 0x47, 0x96, 0x6b, 0x47, 0xac, 0xd3,
	0xc0, 0xf9, 0x2a, 0x3f, 0xbd, 0x3c, 0x3a, 0xb2, 0x23, 0x66, 0x3c, 0x80, 0xb6, 0x7c, 0x6b, 0xa2,
	0xa3, 0x89, 0x3a, 0x5a, 0x44, 0x4f, 0xb4, 0x6c, 0x03, 0x4c, 0xb8, 0x67, 0x11, 0xb9, 0xd3, 0xa2,
	0x29, 0x9b, 0x70, 0xef, 0x57, 0x48, 0x30, 0x3e, 0x86, 0x75, 0xc7, 0xf7, 0x22, 0xee, 0x8d, 0xc4,
	0xaa, 0x26, 0xda, 0xda, 0xd4, 0xfd, 0x84, 0x97, 0xd2, 0x18, 0x46, 0xfe, 0x54, 0x4e, 0xc9, 0x2a,
	0x4e, 0x49, 0x55, 0x50, 0x68, 0x46, 0x3e, 0x04, 0x63, 0xe8, 0x07, 0x0e, 0xb3, 0x9c, 0xb1, 0x1f,
	0x32, 0x2b, 0x60, 0x76, 0xe8, 0x7b, 0x1d, 0x03, 0xf5, 0xb5, 0x91, 0xd3, 0x13, 0x0c, 0x13, 0xe9,
	0x62, 0x21, 0x78, 0x68, 0xd9, 0xb3, 0xc8, 0xb7, 0xc2, 0x59, 0x38, 0x65, 0x9e, 0xdb, 0x59, 0xdb,
	0x29, 0xec, 0x55, 0xcc, 0x06, 0x0f, 0x0f, 0x67, 0x91, 0x7f, 0x41, 0x44, 0x61, 0x7d, 0x57, 0xb3,
	0x90, 0x7b, 0x2c, 0x0c, 0xad, 0x99, 0xc7, 0xa3, 0xce, 0x3a, 0x59, 0x9f, 0x22, 0x3e, 0xf3, 0x78,
	0x24, 0x7a, 0x16, 0xb0, 0x2f, 0x67, 0x2c, 0x44, 0xfb, 0xdc, 0xa0, 0xb1, 0x4a, 0xca, 0xc0, 0x35,
	0xee, 0x01, 0x99, 0x93, 0x35, 0xf6, 0x1d, 0x7b, 0x2c, 0x44, 0x6e, 0x91, 0x12, 0xa4, 0x1e, 0x0b,
	0x22, 0x39, 0x02, 0xfb, 0xca, 0xb9, 0xb6, 0xbd, 0x11, 0x13, 0x22, 0x9b, 0xe4, 0x08, 0x8a, 0x34,
	0x70, 0xc5, 0xf2, 0x4d, 0xed, 0x20, 0xe2, 0x0e, 0x9f, 0xda, 0xe4, 0x09, 0x1d, 0x94, 0x69, 0x68,
	0x54, 0x72, 0x05, 0x67, 0xcc, 0xa5, 0xaf, 0x6c, 0x91, 0x2b, 0x10, 0x81, 0x2c, 0x3e, 0x79, 0x89,
	0x47, 0xfd, 0x7d, 0x1b, 0x65, 0x9a, 0xf1, 0x9b, 0xbc, 0x50, 0xaa, 0x89, 0x02, 0xdb, 0x25, 0xb7,
	0xb9, 0x4d, 0x6a, 0x88, 0x40, 0xc1, 0x43, 0xb4, 0xb6, 0xc7, 0x38, 0x9a, 0x77, 0x68, 0xc0, 0x92,
	0x32, 0x70, 0x8d, 0x87, 0xb0, 0x46, 0x03, 0x0e, 0x67, 0x57, 0xc2, 0x88, 0xc3, 0xc8, 0x8e, 0x66,
	0x61, 0x67, 0x1b, 0xe5, 0x56, 0x91, 0x75, 0x81, 0x9c, 0x0b, 0x64, 0x18, 0xef, 0x43, 0xcb, 0xf3,
	0x23, 0x3e, 0x9c, 0x5b, 0xa1, 0x98, 0x34, 0xcf, 0x61, 0x9d, 0x77, 0xc9, 0x7d, 0x88, 0x7c, 0x21,
	0xa9, 0x62, 0x8e, 0x44, 0x1f, 0x44, 0xe4, 0x71, 0xed, 0x79, 0xe7, 0x0e, 0x0a, 0x81, 0x24, 0x1d,
	0xd9, 0x73, 0xb1, 0x5c, 0x21, 0x8b, 0xa2, 0x31, 0x53, 0xc1, 0x62, 0x07, 0x45, 0xea, 0x09, 0x71,
	0xe0, 0x1a, 0x3b, 0x50, 0x97, 0xdd, 0x9b, 0x87, 0x42, 0x66, 0x97, 0xa6, 0x9a, 0xfa, 0x35, 0x0f,
	0x07, 0xae, 0xb1, 0x1b, 0x4b, 0xf8, 0xb3, 0xc0, 0x61, 0x9d, 0x2e, 0x6a, 0xa9, 0x91, 0x04, 0x92,
	0x34, 0x11, 0x1a, 0xdc, 0x5d, 0x5d, 0x84, 0x86, 0xb5, 0x0d, 0xa4, 0x93, 0x02, 0xcb, 0x3d, 0x9a,
	0x25, 0xa4, 0x60, 0x4c, 0xb9, 0x0b, 0x0d, 0xe5, 0xc2, 0x62, 0x5e, 0xdd, 0xce, 0x7d, 0xea, 0xab,
	0x74, 0x5d, 0xa4, 0x89, 0xd7, 0xe8, 0x7e, 0xde, 0x79, 0x8f, 0x5e, 0xa3, 0xb9, 0x37, 0x45, 0xd0,
	0x90, 0x05, 0x11, 0xb9, 0xec, 0xfb, 0x2a, 0x82, 0x0a, 0x12, 0x7a, 0x6d, 0x22, 0x20, 0x1c, 0xbd,
	0xb3, 0xa7, 0x0b, 0x5c, 0xf2, 0x09, 0x0a, 0xd8, 0x4e, 0xc4, 0x5f, 0x30, 0x12, 0x78, 0x40, 0x02,
	0x44, 0x42, 0x81, 0x5d, 0xa8, 0x4b, 0x2f, 0x21, 0x89, 0x7d, 0x94, 0xa8, 0x49, 0x9a, 0xd2, 0x31,
	0x9b, 0x8a, 0x0e, 0x90, 0xc4, 0x07, 0xa4, 0x83, 0x48, 0x4a, 0xc0, 0xb1, 0x3d, 0x87, 0x8d, 0x49,
	0xe0, 0x43, 0x12, 0x20, 0x12, 0x0a, 0xec, 0x41, 0x5b, 0xf5, 0x22, 0x36, 0xbc, 0xef, 0x91, 0x6d,
	0xca, 0xae, 0x28, 0xf3, 0x13, 0xf1, 0x76, 0xcc, 0x6c, 0xcc, 0x40, 0xc2, 0xf8, 0x85, 0xe4, 0x43,
	0x92, 0x54, 0xf4, 0x73, 0x3b, 0x88, 0xc8, 0xa9, 0x94, 0x49, 0x59, 0x9e, 0xdf, 0xf9, 0x88, 0x0c,
	0x46, 0x91, 0x4e, 0xfd, 0x54, 0x86, 0xfc, 0x3e, 0x72, 0x6f, 0xc8, 0x90, 0x1f, 0xd3, 0xf2, 0x25,
	0x19, 0x72, 0x1f, 0x56, 0x31, 0xab, 0x4c, 0x03, 0xdf, 0x9d, 0x39, 0x91, 0xc5, 0xbd, 0xa1, 0xdf,
	0x39, 0xc0, 0x5e, 0xb4, 0x04, 0xe3, 0x9c, 0xe8, 0x03, 0x6f, 0xe8, 0x53, 0xe8, 0x12, 0x36, 0x61,
	0x4d, 0xc2, 0x51, 0xe7, 0x07, 0x3b, 0x85, 0xbd, 0xba, 0x08, 0x5d, 0x82, 0x72, 0x12, 0x8e, 0xc4,
	0x78, 0x50, 0x95, 0x16, 0xbf, 0x3a, 0x9f, 0x60, 0x34, 0x6a, 0x0a, 0xfa, 0x93, 0x38, 0x78, 0x89,
	0x50, 0x22, 0xe7, 0x48, 0x65, 0xb4, 0x47, 0x14, 0x4a, 0x88, 0xfa, 0x2c, 0xce, 0x6b, 0x32, 0xe1,
	0x4a, 0x13, 0x65, 0x5f, 0x76, 0x3e, 0x25, 0x87, 0x22, 0x3a, 0x26, 0xe7, 0x0b, 0xf6, 0xa5, 0xf1,
	0x31, 0x6c, 0x04, 0x6c, 0x6c, 0xa3, 0xc6, 0x94, 0x4f, 0xfc, 0x10, 0xd5, 0x1a, 0x8a, 0x79, 0x96,
	0xf8, 0xc6, 0x23, 0xd8, 0xfc, 0x75, 0xaf, 0x2f, 0xd3, 0x0e, 0x59, 0xae, 0x8a, 0xf2, 0x3f, 0xc2,
	0x77, 0xac, 0xff, 0xba, 0xd7, 0x47, 0xcb, 0x24, 0x13, 0x96, 0x01, 0xbf, 0x0b, 0x0d, 0x1e, 0x5a,
	0xe1, 0x4b, 0x7b, 0x4a, 0x2f, 0xea, 0xfc, 0x18, 0x07, 0x58, 0xe3, 0xe1, 0xc5, 0x4b, 0x7b, 0x8a,
	0xfa, 0x09, 0x28, 0xd8, 0x9e, 0x73, 0x2d, 0x7a, 0xf0, 0x13, 0x05, 0x14, 0x04, 0x81, 0xa2, 0x28,
	0xa1, 0x02, 0x8c, 0xc3, 0x42, 0xe2, 0xa7, 0x0a, 0x08, 0x08, 0xaa, 0x08, 0xc4, 0xb4, 0x68, 0xb6,
	0xe3, 0xf8, 0x33, 0x5a, 0xd1, 0x9f, 0xa1, 0x44, 0x55, 0x52, 0xc8, 0x1e, 0x9c, 0x59, 0x10, 0x30,
	0xcf, 0x99, 0x0b, 0xfe, 0xff, 0x92, 0x46, 0x28, 0x49, 0xd4, 0x7e, 0x70, 0x6e, 0xd9, 0xae, 0x1b,
	0xb0, 0x30, 0xec, 0xfc, 0x6f, 0x6a, 0x3f, 0x38, 0x3f, 0x24, 0x82, 0x68, 0x7f, 0x62, 0x3b, 0x31,
	0xff, 0xe7, 0xd4, 0xfe, 0xc4, 0x76, 0xa4, 0x40, 0xf7, 0x11, 0xd4, 0x15, 0xf8, 0x39, 0xe6, 0x61,
	0x64, 0xdc, 0x87, 0xa5, 0x31, 0x0f, 0xa3, 0x4e, 0x61, 0xa7, 0xb4, 0x57, 0x3b, 0x58, 0x7d, 0x38,
	0xbd, 0x7a, 0x98, 0x02, 0x47, 0x26, 0xb2, 0xbb, 0xd7, 0x7a, 0x33, 0xef, 0xb9, 0xf1, 0x00, 0x56,
	0xa6, 0x76, 0xc0, 0xbc, 0x08, 0xf1, 0x52, 0x6e, 0x43, 0x29, 0x60, 0x7c, 0x0f, 0x2a, 0xce, 0x35,
	0x1f, 0xbb, 0x01, 0xf3, 0x3a, 0xc5, 0x9b, 0xde, 0x12, 0x8b, 0x74, 0xff, 0xb1, 0x08, 0x1b, 0xbd,
	0xcb, 0xf3, 0x1e, 0xfa, 0xdd, 0x19, 0x41, 0x24, 0x4c, 0x54, 0x99, 0xa9, 0x2b, 0x64, 0xa7, 0xee,
	0xa1, 0x8e, 0x2c, 0x11, 0xa7, 0xd5, 0x0e, 0x9a, 0xfa, 0x9b, 0x06, 0x47, 0xa6, 0x8e, 0x3d, 0xbb,
	0xb0, 0x12, 0xce, 0x27, 0x57, 0xfe, 0x18, 0x01, 0x5b, 0xed, 0x00, 0x84, 0xec, 0x05, 0x52, 0x4c,
	0xc9, 0xc9, 0x24, 0xce, 0xa5, 0x6c, 0xe2, 0xd4, 0x9d, 0x73, 0xf9, 0x55, 0xce, 0xb9, 0x92, 0xe3,
	0x9c, 0x71, 0x9e, 0x23, 0xbb, 0xe6, 0x2e, 0xe2, 0xb6, 0xaa, 0xd9, 0x52, 0x0c, 0xea, 0xa8, 0x6b,
	0xac, 0xc3, 0x72, 0xe4, 0x3f, 0x67, 0x1e, 0x42, 0xb6, 0xaa, 0x49, 0x0f, 0xc2, 0x87, 0x02, 0x7f,
	0x16, 0x31, 0x4b, 0x9b, 0x93, 0x2a, 0xc5, 0x18, 0xa4, 0x1f, 0xaa, 0x89, 0xe9, 0xfe, 0x5d, 0x11,
	0xd6, 0xc4, 0xb8, 0x3d, 0x33, 0xf2, 0xb4, 0x69, 0x7d, 0xdd, 0x7c, 0x3e, 0x80, 0x4a, 0xdc, 0xb3,
	0xfc, 0xd9, 0x2c, 0xfb, 0xb2, 0x87, 0xb9, 0xa3, 0x29, 0xe5, 0x8f, 0x26, 0x99, 0xf6, 0xa5, 0x37,
	0x9c, 0xf6, 0xe5, 0xec, 0xb4, 0x6f, 0x03, 0xb0, 0x20, 0xf0, 0x03, 0x1d, 0x10, 0x57, 0x91, 0x82,
	0x79, 0x6b, 0x1d, 0x96, 0xf1, 0x41, 0xe2, 0x60, 0x7a, 0x30, 0xda, 0x50, 0x12, 0xb1, 0x8d, 0xe6,
	0x50, 0xfc, 0xfc, 0x06, 0x33, 0xf8, 0xbb, 0x0a, 0x6e, 0x19, 0x30, 0x5e, 0x7c, 0xc7, 0xb7, 0x0c,
	0x19, 0x94, 0xb6, 0xb2, 0x80, 0xd2, 0xb6, 0x80, 0x60, 0x52, 0x62, 0x70, 0x65, 0x7c, 0x1e, 0xb8,
	0xe9, 0x4d, 0x44, 0x25, 0xbb, 0x89, 0xc8, 0xa2, 0x92, 0xea, 0x02, 0x2a, 0x59, 0x04, 0x80, 0xf0,
	0x5a, 0x00, 0x58, 0xcb, 0x00, 0xc0, 0x5d, 0xa8, 0x2b, 0x04, 0x15, 0xf8, 0x63, 0x26, 0x77, 0x00,
	0x0a, 0x55, 0x99, 0xfe, 0x98, 0xe5, 0x62, 0xc4, 0x46, 0x2e, 0x46, 0xbc, 0x03, 0x35, 0x7d, 0xcb,
	0x43, 0x3b, 0x01, 0xf0, 0x93, 0xed, 0xce, 0x36, 0x80, 0xb6, 0xd3, 0x91, 0x9b, 0x80, 0xeb, 0x78,
	0x97, 0xb3, 0x0e, 0xcb, 0x04, 0xe6, 0xdb, 0x08, 0xe6, 0xe9, 0xc1, 0xb8, 0x05, 0x2b, 0x32, 0x9f,
	0xac, 0x62, 0x03, 0xf9, 0x24, 0x94, 0xd1, 0xcc, 0x22, 0xcc, 0x31, 0xc8, 0x9f, 0x90, 0x82, 0x28,
	0x27, 0x66, 0x23, 0xbc, 0x58, 0xd3, 0xd8, 0x88, 0x2e, 0x12, 0xb6, 0x30, 0xea, 0x75, 0xea, 0x0a,
	0xb1, 0x85, 0x51, 0xef, 0x42, 0x9d, 0x36, 0x81, 0x12, 0xf1, 0x11, 0x88, 0xaf, 0x21, 0x4d, 0x22,
	0xbe, 0x14, 0x22, 0xbe, 0x95, 0x41, 0xc4, 0x8b, 0x18, 0x7f, 0x33, 0x07, 0xe3, 0xe7, 0x01, 0x97,
	0x4e, 0x2e, 0x70, 0x59, 0xd8, 0x77, 0x6c, 0xe5, 0xec, 0x3b, 0x32, 0xe8, 0xe6, 0xed, 0x05, 0x74,
	0x93, 0xc1, 0xcb, 0xb7, 0x5f, 0x8f, 0x97, 0xdf, 0xc9, 0xc1, 0xcb, 0x79, 0x70, 0x62, 0x3b, 0x17,
	0x4e, 0x48, 0xeb, 0x8a, 0x67, 0xf1, 0xdd, 0xc4, 0xba, 0xd4, 0x2c, 0x2e, 0xa6, 0xf1, 0x3b, 0x8b,
	0x69, 0xbc, 0xfb, 0x53, 0x30, 0x54, 0x40, 0x30, 0xd9, 0xd4, 0x0f, 0xa2, 0x57, 0x24, 0xd3, 0x24,
	0x6c, 0xc8, 0x64, 0xfa, 0xaf, 0x4b, 0xb0, 0xde, 0xbb, 0x3c, 0x3f, 0xf7, 0x43, 0xdc, 0x38, 0x5e,
	0xcc, 0x26, 0x13, 0x1b, 0x5d, 0xec, 0xa1, 0xee, 0x80, 0x22, 0xaa, 0x34, 0x0f, 0xda, 0x52, 0xc9,
	0x91, 0xa2, 0xeb, 0x2e, 0x69, 0xc0, 0x12, 0x5a, 0x4b, 0x11, 0x87, 0x81, 0xbf, 0x73, 0xa3, 0x5a,
	0x29, 0x2f, 0xaa, 0x19, 0x6f, 0x43, 0x65, 0x2a, 0xbb, 0x20, 0x53, 0x5b, 0xfc, 0x2c, 0x6c, 0xdc,
	0x9e, 0x08, 0x39, 0x0c, 0x2f, 0x05, 0x53, 0x3e, 0x89, 0x37, 0x3a, 0x7e, 0x18, 0x61, 0x5c, 0x29,
	0x98, 0xf8, 0x5b, 0xc8, 0x0e, 0x03, 0xff, 0x6b, 0xa6, 0x0e, 0x1e, 0xe4, 0x93, 0x08, 0x27, 0xf6,
	0x0b, 0x9b, 0x8f, 0xed, 0xab, 0x31, 0x53, 0xe1, 0x24, 0x26, 0x88, 0x3d, 0x95, 0x7a, 0x9b, 0x80,
	0xa8, 0x43, 0x1e, 0x61, 0x44, 0x29, 0x98, 0x4d, 0x45, 0x3e, 0x47, 0xaa, 0x30, 0x01, 0x44, 0x9c,
	0xae, 0x12, 0xa3, 0xc3, 0x86, 0x3a, 0x11, 0xa5, 0xd0, 0x2d, 0x58, 0x99, 0xd8, 0xc1, 0x88, 0x7b,
	0x18, 0x50, 0x0a, 0xa6, 0x7c, 0x12, 0x8d, 0xa9, 0x37, 0x96, 0x64, 0xd7, 0xa9, 0x31, 0x11, 0x4f,
	0x48, 0xe8, 0x5d, 0x00, 0xc7, 0x9f, 0x4c, 0x38, 0x26, 0x67, 0x0c, 0x25, 0x05, 0x53, 0xa3, 0x18,
	0x1f, 0xc0, 0xaa, 0x54, 0xa2, 0x89, 0x35, 0x51, 0xac, 0x4d, 0x8c, 0x5e, 0x22, 0xfc, 0x36, 0x54,
	0xb8, 0x17, 0xb1, 0x80, 0x85, 0x11, 0x06, 0x94, 0x82, 0x19, 0x3f, 0x8b, 0x31, 0x4b, 0x45, 0xb1,
	0x08, 0x45, 0x96, 0x26, 0x91, 0x07, 0x4a, 0x70, 0x1b, 0x60, 0x12, 0x4d, 0xd4, 0x80, 0xe5, 0x51,
	0xc2, 0x24, 0x9a, 0xc8, 0xd1, 0x1e, 0xc0, 0x06, 0xba, 0x23, 0x73, 0xad, 0xf4, 0xd4, 0x18, 0x28,
	0xb9, 0x26, 0x99, 0x3d, 0x6d, 0x86, 0xba, 0xff, 0xb2, 0x04, 0x35, 0xcd, 0xe8, 0xb4, 0x3c, 0x5c,
	0xb8, 0x31, 0x0f, 0x7f, 0x0a, 0xd5, 0x50, 0x19, 0xa7, 0xc4, 0x00, 0x1d, 0x69, 0x8f, 0x0b, 0xc6,
	0x6b, 0x26, 0xa2, 0xc6, 0x21, 0xb4, 0x22, 0xdf, 0xb5, 0xe7, 0x56, 0xd2, 0xba, 0xf4, 0x9a, 0xd6,
	0x4d, 0x6c, 0x90, 0xb8, 0xc2, 0x00, 0xd6, 0xe6, 0x2c, 0x8c, 0x58, 0x90, 0x56, 0xb3, 0xf4, 0x1a,
	0x35, 0x46, 0xdc, 0x28, 0x51, 0xf5, 0x7d, 0x58, 0x9f, 0x06, 0xcc, 0xd2, 0xe2, 0x08, 0x05, 0x75,
	0xb2, 0x6c, 0x63, 0x1a, 0xb0, 0x8b, 0x98, 0x45, 0x47, 0x35, 0x0f, 0xa0, 0xbd, 0x20, 0x4d, 0x16,
	0xdf, 0x0a, 0x33, 0xa2, 0xdb, 0x00, 0x63, 0x3b, 0x54, 0x42, 0x65, 0x5a, 0x29, 0x41, 0x21, 0x76,
	0x26, 0xc0, 0x55, 0x16, 0x02, 0x1c, 0xc6, 0x75, 0xda, 0xa0, 0xa1, 0x2b, 0x57, 0x55, 0x5c, 0x47,
	0x1a, 0x86, 0xfe, 0xf7, 0x41, 0x1e, 0x5e, 0x59, 0x93, 0xd9, 0x38, 0xe2, 0xd3, 0x31, 0x93, 0x87,
	0x68, 0x4d, 0x22, 0x9f, 0x48, 0xaa, 0xf1, 0x21, 0x40, 0xbc, 0xd9, 0x73, 0xd1, 0xd2, 0x6b, 0x07,
	0x0d, 0x31, 0x55, 0x6a, 0xab, 0x77, 0x64, 0x56, 0xa5, 0x00, 0xa1, 0x28, 0x79, 0xac, 0xc8, 0x9d,
	0xe7, 0xd2, 0xea, 0xab, 0x48, 0xb9, 0xe4, 0xce, 0x73, 0x8c, 0xdd, 0x68, 0x05, 0x96, 0x67, 0x4f,
	0x18, 0x9a, 0x7b, 0xd5, 0x04, 0x22, 0x9d, 0xda, 0x94, 0xb0, 0xb4, 0x10, 0xd3, 0xca, 0xc0, 0xc7,
	0xee, 0xa7, 0xd0, 0xd2, 0x56, 0x08, 0xc3, 0xe3, 0xdd, 0x54, 0x78, 0x6c, 0x65, 0x16, 0x51, 0x06,
	0xc7, 0x7f, 0xa8, 0x22, 0x5a, 0x45, 0xdb, 0x95, 0xf1, 0xd5, 0xf1, 0x03, 0xf7, 0x75, 0x68, 0x35,
	0x31, 0xe7, 0xe2, 0x8d, 0xe6, 0x9c, 0x0a, 0xaf, 0xa5, 0xd7, 0x87, 0x57, 0x01, 0x1f, 0xa6, 0x2c,
	0x3e, 0x23, 0x5c, 0x92, 0xf0, 0x61, 0xca, 0xd4, 0x21, 0xa1, 0x12, 0x48, 0x85, 0x4a, 0x14, 0x38,
	0xa4, 0x70, 0x99, 0xc4, 0x2e, 0xa9, 0x83, 0xc0, 0xaa, 0x8c, 0x5d, 0x52, 0x4b, 0x22, 0x24, 0xf5,
	0x94, 0xf5, 0x00, 0x27, 0x35, 0x09, 0x34, 0x28, 0x5e, 0x85, 0xe0, 0xa1, 0x22, 0xcf, 0xbb, 0xa7,
	0xcc, 0x53, 0x27, 0x13, 0xc4, 0xd4, 0x4c, 0xad, 0x2a, 0xcf, 0x89, 0x85, 0x4c, 0x62, 0x6e, 0x07,
	0xd0, 0x40, 0xc9, 0x18, 0xa5, 0x43, 0x2e, 0xb2, 0xc7, 0x61, 0x25, 0x88, 0xbd, 0x11, 0x6b, 0x67,
	0x09, 0x66, 0xab, 0x29, 0xd5, 0x02, 0x3a, 0xbe, 0x07, 0x2d, 0x4d, 0x06, 0x2d, 0x59, 0x9e, 0xdd,
	0xc6, 0x52, 0x68, 0xcb, 0x4a, 0x8e, 0x50, 0x17, 0xca, 0x35, 0x12, 0x39, 0x3c, 0x5f, 0x46, 0xb9,
	0x6d, 0x00, 0x3a, 0x26, 0xc5, 0xf1, 0x36, 0xe9, 0xf4, 0x1f, 0x29, 0x38, 0xe0, 0x7d, 0x58, 0x95,
	0x6c, 0x6d, 0xc4, 0x04, 0xdf, 0x5a, 0x8e, 0xb2, 0x1c, 0x39, 0xe4, 0x4f, 0xa0, 0x49, 0xb2, 0xf1,
	0x98, 0xdb, 0xb9, 0x63, 0xa6, 0xf9, 0x56, 0x83, 0xbe, 0xa7, 0x5a, 0xc5, 0xa3, 0x5e, 0x25, 0x18,
	0x10, 0xab, 0x67, 0x0a, 0x2f, 0x25, 0x52, 0x38, 0x1e, 0x43, 0x1e, 0xac, 0xc7, 0x72, 0x97, 0x32,
	0x2d, 0x93, 0xa4, 0x36, 0xf2, 0x35, 0x4d, 0x32, 0x19, 0xfa, 0x2e, 0xd0, 0x3b, 0x54, 0x4c, 0x5f,
	0x47, 0x6b, 0xa8, 0x21, 0x4d, 0xc6, 0xff, 0x9b, 0x22, 0xda, 0xc6, 0x8d, 0x11, 0xed, 0x11, 0x34,
	0xe2, 0x73, 0x05, 0x7c, 0xf7, 0x2d, 0xcd, 0xfc, 0x25, 0x43, 0xbc, 0xdd, 0xac, 0x3b, 0xda, 0x93,
	0x08, 0x3d, 0xb8, 0x5c, 0x5a, 0xde, 0xdb, 0xa4, 0x84, 0x25, 0xc8, 0x5a, 0xd6, 0x7b, 0xa0, 0x86,
	0xa7, 0x49, 0x76, 0x28, 0x62, 0x22, 0x5d, 0x13, 0x4d, 0x52, 0xf5, 0x56, 0x2a, 0x55, 0x3f, 0x84,
	0x35, 0xee, 0xf1, 0x88, 0xdb, 0x63, 0x4b, 0x77, 0xaa, 0xb7, 0x51, 0x68, 0x55, 0xb2, 0xce, 0x12,
	0xdf, 0xca, 0x09, 0x8b, 0xb7, 0x73, 0xc3, 0x62, 0x4e, 0xd6, 0x7d, 0x27, 0x37, 0xeb, 0xe6, 0x41,
	0xa7, 0xed, 0x5c, 0xe8, 0x94, 0x03, 0x5e, 0xde, 0xcd, 0x03, 0x2f, 0xdd, 0x27, 0xb0, 0x99, 0x13,
	0xcc, 0x30, 0x1a, 0x7e, 0x90, 0x8a, 0x86, 0x9b, 0xd2, 0x1a, 0xb3, 0xa2, 0x32, 0x2a, 0xfe, 0x59,
	0x11, 0x77, 0xa0, 0x04, 0x58, 0x4c, 0xb1, 0x9d, 0xf8, 0x10, 0x2a, 0x6a, 0xb7, 0xa3, 0x43, 0xc5,
	0xbe, 0xa4, 0xe1, 0x62, 0xc6, 0x12, 0x62, 0xd2, 0xb5, 0xf0, 0x58, 0x8d, 0x43, 0x62, 0x07, 0xca,
	0x32, 0x23, 0x48, 0x90, 0xa8, 0x1e, 0x85, 0x03, 0x8c, 0x7d, 0x6f, 0x64, 0x5d, 0xcd, 0xf5, 0xf8,
	0x57, 0x30, 0xeb, 0x82, 0xfa, 0x78, 0x2e, 0x63, 0x97, 0x26, 0x95, 0x0a, 0x82, 0x52, 0x4a, 0x2e,
	0xd5, 0x7b, 0xd0, 0x0a, 0xaf, 0xfd, 0x20, 0xd2, 0x94, 0x51, 0x3a, 0x6d, 0x20, 0x39, 0xd6, 0xa6,
	0xcb, 0xa5, 0x62, 0xa1, 0x92, 0x93, 0xfa, 0x9a, 0x50, 0x94, 0xa1, 0xab, 0x64, 0x16, 0xb9, 0xdb,
	0xfd, 0xab, 0x82, 0x36, 0x3b, 0x83, 0x88, 0x4d, 0x72, 0x7a, 0x5f, 0x78, 0xa3, 0xde, 0x17, 0xdf,
	0xac, 0xf7, 0xa5, 0x37, 0xec, 0xfd, 0x52, 0x4e, 0xef, 0xbb, 0x7f, 0x5d, 0xa0, 0x13, 0xae, 0xd8,
	0x25, 0xc4, 0x7a, 0x62, 0xaf, 0x6f, 0x43, 0x35, 0x69, 0x4b, 0x1d, 0xae, 0x5c, 0xcd, 0x93, 0x0c,
	0x90, 0x74, 0xa0, 0xa8, 0x98, 0xf2, 0xdd, 0x1d, 0x28, 0x4f, 0xb8, 0xc7, 0x27, 0xb3, 0x89, 0xec,
	0x9b, 0x7a, 0x34, 0x0e, 0xd2, 0x7b, 0xe0, 0x25, 0x34, 0x95, 0xf8, 0x04, 0x2e, 0xde, 0x0a, 0xa7,
	0xb6, 0xc5, 0x6d, 0x28, 0x45, 0xf6, 0x48, 0x9e, 0x2c, 0x88, 0x9f, 0xdd, 0xbf, 0x2d, 0xc0, 0xea,
	0x42, 0x9f, 0xff, 0xdb, 0x6d, 0xf0, 0x11, 0x54, 0x44, 0x8c, 0xe3, 0xde, 0x28, 0xec, 0x2c, 0xa1,
	0x9b, 0x6c, 0x29, 0x37, 0x59, 0x98, 0x3c, 0x33, 0x16, 0x95, 0xe6, 0xb1, 0x1c, 0x9b, 0xc7, 0x1f,
	0x2f, 0x43, 0x53, 0xee, 0xc3, 0xb8, 0x37, 0xc2, 0x9d, 0xe9, 0x9b, 0xa0, 0xdf, 0x0f, 0xb4, 0xfd,
	0x51, 0x31, 0x1f, 0xb2, 0x24, 0x1b, 0xa6, 0x1f, 0x41, 0x4b, 0xee, 0xaf, 0xb9, 0xf7, 0xdc, 0x42,
	0xc7, 0x2e, 0x61, 0x9b, 0xb6, 0x9e, 0x66, 0x8e, 0xb9, 0xf7, 0xdc, 0x6c, 0xf8, 0xea, 0x27, 0xc6,
	0x81, 0x01, 0xac, 0xc7, 0xb1, 0xc4, 0x65, 0x91, 0xcd, 0xc7, 0xd4, 0x7c, 0xe9, 0xd5, 0x71, 0xc1,
	0x50, 0x8d, 0x8e, 0xb0, 0x0d, 0xaa, 0x3a, 0x84, 0xf6, 0x35, 0x0f, 0x23, 0x3f, 0x98, 0x5b, 0x4e,
	0x14, 0x90, 0x9a, 0xe5, 0x57, 0xab, 0x69, 0xca, 0x06, 0xbd, 0x88, 0xce, 0x83, 0x7f, 0x0e, 0x86,
	0x52, 0xa1, 0xc6, 0x83, 0xdb, 0xbd, 0x1b, 0xce, 0x6d, 0xd5, 0xfb, 0x92, 0x03, 0x65, 0x4d, 0x01,
	0x25, 0x45, 0x54, 0x50, 0xbe, 0x69, 0x47, 0xac, 0x14, 0x20, 0x09, 0x15, 0xa4, 0x11, 0x35, 0x64,
	0x11, 0xf5, 0x47, 0xb0, 0x8e, 0xec, 0x89, 0x1b, 0x5a, 0xfa, 0x85, 0x4e, 0x0d, 0x97, 0x7b, 0x55,
	0xf0, 0x4e, 0xdc, 0xf0, 0x59, 0x72, 0xaf, 0x93, 0xc6, 0xb9, 0xf5, 0x2c, 0xce, 0xcd, 0x49, 0x23,
	0x8d, 0xdc, 0x34, 0x72, 0x1f, 0x8a, 0x4e, 0x80, 0x50, 0xa4, 0x76, 0xb0, 0x91, 0x6b, 0x86, 0x66,
	0xd1, 0x09, 0x8c, 0x5d, 0x28, 0x4e, 0x02, 0xc4, 0x22, 0xc9, 0x78, 0x93, 0xb0, 0x6d, 0x16, 0x27,
	0x41, 0x77, 0x82, 0xfe, 0x9f, 0xdc, 0x9a, 0x88, 0x6e, 0x9a, 0xb3, 0x31, 0x9e, 0x5c, 0x86, 0x91,
	0x1d, 0x44, 0xb2, 0x16, 0x82, 0x1e, 0x84, 0x37, 0x32, 0x4f, 0x95, 0x40, 0x88, 0x9f, 0xc6, 0x87,
	0x60, 0xb8, 0x3c, 0x14, 0xdb, 0x68, 0x4a, 0x95, 0xd4, 0x88, 0xaa, 0x20, 0xda, 0x92, 0x23, 0x32,
	0xe5, 0x85, 0xa0, 0x77, 0xff, 0xbe, 0x8c, 0xc7, 0x0d, 0x9a, 0xf9, 0x9f, 0x4d, 0xd1, 0x66, 0x7f,
	0x08, 0x1d, 0xed, 0x12, 0xdf, 0xd2, 0x55, 0x62, 0x0f, 0x96, 0xcd, 0x8d, 0xe4, 0x46, 0xff, 0x28,
	0x51, 0x6b, 0x3c, 0x82, 0x4d, 0xbd, 0xa1, 0x7e, 0x2d, 0x44, 0x47, 0x11, 0xeb, 0x49, 0x3b, 0xed,
	0x72, 0x68, 0x00, 0xbb, 0x02, 0xb6, 0x24, 0x99, 0x93, 0x05, 0x0e, 0xf3, 0x22, 0x5b, 0xe0, 0xa1,
	0xeb, 0x80, 0x85, 0xd7, 0xfe, 0xd8, 0x95, 0xe1, 0xeb, 0xdd, 0x69, 0xc0, 0x94, 0x97, 0x9d, 0xc7,
	0x62, 0x97, 0x4a, 0xca, 0xf8, 0x04, 0x6e, 0xa5, 0x54, 0x25, 0xed, 0x29, 0xe4, 0xae, 0x6b, 0xed,
	0x93, 0x56, 0x7d, 0xb8, 0x23, 0x5a, 0xc9, 0xf5, 0xce, 0x7d, 0x3d, 0xa5, 0xaf, 0x77, 0xa6, 0x01,
	0xa3, 0xc8, 0x9a, 0xf7, 0x72, 0x09, 0xbf, 0xd4, 0xbd, 0x67, 0xdc, 0x76, 0x25, 0x86, 0x5f, 0xd4,
	0x36, 0x69, 0xf1, 0x7f, 0xa1, 0x1b, 0x72, 0x6f, 0x34, 0x66, 0xf1, 0x6d, 0x1c, 0x81, 0x1e, 0xeb,
	0x25, 0xe3, 0xa3, 0xeb, 0xc8, 0xc2, 0xe9, 0x92, 0xb9, 0xee, 0x5d, 0x92, 0x94, 0x7b, 0x36, 0x32,
	0x9d, 0xcf, 0x51, 0xec, 0x58, 0x48, 0x19, 0x9f, 0x40, 0x65, 0xe8, 0x48, 0xbf, 0xac, 0xa4, 0x82,
	0xe2, 0xa2, 0x45, 0x99, 0xe5, 0xa1, 0x43, 0x6e, 0xb9, 0x0b, 0xf5, 0xd4, 0xfa, 0x56, 0xe9, 0x76,
	0x4b, 0x33, 0x16, 0xe3, 0x27, 0x50, 0x73, 0x02, 0x2b, 0x0e, 0xb8, 0xf0, 0xba, 0x80, 0x0b, 0x4e,
	0x70, 0xa1, 0x42, 0xee, 0x01, 0xd4, 0xe4, 0x88, 0x02, 0x3b, 0x22, 0x67, 0xcc, 0x9a, 0x3f, 0xb5,
	0x99, 0x24, 0x08, 0xe6, 0x23, 0x58, 0x0b, 0x23, 0x7f, 0x3a, 0xf6, 0xc3, 0xd0, 0x72, 0x6c, 0xcf,
	0xe5, 0xc2, 0x65, 0xc3, 0x4e, 0x7d, 0xa7, 0xb4, 0xb7, 0x6c, 0x1a, 0x8a, 0xd5, 0x8b, 0x39, 0x62,
	0xd1, 0x23, 0xfb, 0xb9, 0x02, 0xc6, 0x7a, 0x9b, 0x06, 0xb6, 0x59, 0x17, 0x5c, 0x02, 0x5e, 0x5a,
	0xab, 0x0f, 0x60, 0x55, 0xd5, 0x84, 0x24, 0x0d, 0x9a, 0xd8, 0x40, 0x16, 0x8b, 0x68, 0xc2, 0x3f,
	0x84, 0x4e, 0xda, 0xb3, 0x68, 0x0b, 0x8c, 0x93, 0xdd, 0xda, 0x29, 0xed, 0x55, 0xcd, 0x0d, 0xdd,
	0xbf, 0x90, 0x8b, 0xf3, 0xfb, 0x08, 0x36, 0x53, 0x0d, 0x9d, 0xb1, 0x1d, 0x86, 0xd4, 0xae, 0x8d,
	0xed, 0xd6, 0xb5, 0x76, 0x3d, 0xc1, 0xc4, 0x66, 0x6a, 0x3f, 0xe4, 0xda, 0xf3, 0x50, 0x5a, 0xc1,
	0x6a, 0xb2, 0x1f, 0x3a, 0xb2, 0xe7, 0x21, 0x2e, 0x7a, 0xf7, 0x4f, 0x96, 0xa1, 0x45, 0xd3, 0xd8,
	0xbb, 0x66, 0xce, 0xf3, 0x6f, 0x14, 0x2d, 0xf6, 0x61, 0x55, 0x2f, 0x3c, 0xa1, 0xdb, 0xcd, 0x12,
	0x6d, 0x96, 0x92, 0xba, 0x13, 0xba, 0x13, 0xba, 0x0b, 0x8d, 0x97, 0x76, 0xe0, 0x89, 0x2d, 0xd5,
	0x98, 0xbd, 0x60, 0x63, 0x05, 0xfa, 0x24, 0xf1, 0x58, 0xd0, 0xb2, 0x0a, 0x49, 0x90, 0x1c, 0x47,
	0x53, 0x48, 0xb2, 0x9f, 0xc2, 0x26, 0x15, 0x80, 0x59, 0x57, 0xf6, 0xd8, 0xf6, 0x1c, 0x2d, 0xcc,
	0x92, 0xbb, 0x6c, 0x10, 0xfb, 0x31, 0x71, 0xe3, 0x68, 0xfb, 0x04, 0x76, 0x52, 0xf3, 0x39, 0xf3,
	0x44, 0x32, 0x4a, 0xf7, 0xad, 0x8c, 0x36, 0xfc, 0x8e, 0x36, 0xb1, 0xcf, 0x84, 0xd4, 0xe7, 0x7a,
	0x5f, 0xff, 0x0f, 0x6c, 0xa7, 0x1a, 0x09, 0x70, 0x36, 0x0d, 0xd8, 0x90, 0x05, 0xc2, 0x52, 0xb9,
	0x8f, 0x7b, 0xe9, 0x82, 0xb9, 0xa5, 0x0f, 0xf0, 0xf1, 0xfc, 0x1c, 0x25, 0x4c, 0x21, 0x60, 0x3c,
	0x85, 0xdd, 0x85, 0xd1, 0x2e, 0x68, 0xa1, 0xa3, 0xcb, 0x77, 0x32, 0xa3, 0x4f, 0x2b, 0x7a, 0x04,
	0x9b, 0x0b, 0x5d, 0x91, 0x3b, 0x21, 0xca, 0x72, 0xeb, 0xe9, 0x4e, 0xc8, 0xd3, 0xc9, 0x9f, 0xc1,
	0xed, 0xdc, 0xf7, 0xa7, 0xce, 0x3b, 0x37, 0x17, 0xde, 0x2c, 0x5b, 0xdf, 0x87, 0xa6, 0x74, 0x4c,
	0x87, 0xf1, 0x31, 0xf7, 0x46, 0x32, 0x03, 0x36, 0x88, 0xda, 0x23, 0xa2, 0x58, 0xa6, 0x38, 0x96,
	0x12, 0xfe, 0x8c, 0xe5, 0xe9, 0x64, 0x68, 0x43, 0xb1, 0x09, 0x8d, 0xca, 0x76, 0xdd, 0x3f, 0x2d,
	0xc2, 0x7a, 0xb2, 0xd7, 0xd4, 0x72, 0x0b, 0x61, 0xb0, 0x82, 0xc2, 0x60, 0x02, 0xe4, 0x89, 0x85,
	0x66, 0x12, 0x63, 0x57, 0x4d, 0xf5, 0x98, 0x39, 0x6c, 0x1b, 0x05, 0xfe, 0x6c, 0xaa, 0xac, 0x33,
	0xa1, 0x3f, 0x15, 0x64, 0xe3, 0x00, 0x36, 0xe2, 0x03, 0x64, 0xcb, 0x11, 0x8e, 0xa0, 0x59, 0xe9,
	0xb2, 0xb9, 0x16, 0x33, 0xd1, 0x49, 0xc8, 0x00, 0xee, 0x41, 0x33, 0x65, 0xfd, 0x1e, 0x5a, 0x6a,
	0xc5, 0xac, 0x6b, 0xa6, 0x2f, 0x36, 0x9f, 0x95, 0x89, 0x93, 0x02, 0x3b, 0x6b, 0x22, 0x78, 0x65,
	0x5c, 0xce, 0x2c, 0x4f, 0x6e, 0x08, 0xa7, 0xe5, 0x85, 0x70, 0xda, 0xfd, 0x6d, 0x11, 0x21, 0xb3,
	0x4c, 0xbb, 0x72, 0xef, 0x68, 0x7c, 0x0c, 0x65, 0x3c, 0xcd, 0x0c, 0xe6, 0x12, 0x79, 0x22, 0x32,
	0x93, 0xdc, 0x13, 0xdf, 0x63, 0x74, 0x70, 0x19, 0xcc, 0x4d, 0x25, 0x67, 0x1c, 0x40, 0x65, 0xa2,
	0xd0, 0x5c, 0x31, 0x41, 0x73, 0x28, 0x7c, 0x19, 0xd8, 0x5e, 0x28, 0x2c, 0x8c, 0xd0, 0x5c, 0x79,
	0x22, 0x61, 0xdc, 0x07, 0x50, 0x8e, 0x66, 0x3a, 0x0c, 0x35, 0x34, 0xe8, 0x25, 0x51, 0x80, 0xb9,
	0x12, 0xcd, 0x50, 0x78, 0x0f, 0xda, 0x08, 0xa9, 0x68, 0xba, 0xe9, 0xfa, 0x8a, 0x66, 0xb4, 0x29,
	0xe8, 0xb4, 0xbe, 0x78, 0x87, 0x75, 0x00, 0x65, 0x1f, 0xd7, 0x37, 0xc4, 0x59, 0x94, 0x27, 0xb1,
	0x79, 0x06, 0x60, 0x2a, 0xc1, 0xee, 0xd7, 0xb0, 0xb5, 0x30, 0x0d, 0x17, 0x9e, 0x3d, 0x0d, 0xaf,
	0xfd, 0xc8, 0xf8, 0x08, 0xca, 0x72, 0xb3, 0x2d, 0xa7, 0x63, 0x23, 0xdd, 0x4f, 0x29, 0x6f, 0x2a,
	0x29, 0xbc, 0xf2, 0xe0, 0x72, 0x03, 0x54, 0x32, 0xf1, 0xb7, 0x6e, 0x5b, 0xa5, 0x94, 0x6d, 0x75,
	0xff, 0x10, 0x6b, 0x02, 0xcc, 0x70, 0x8a, 0x55, 0x2e, 0x5b, 0x50, 0xa1, 0x7b, 0x63, 0x69, 0x99,
	0xcb, 0x66, 0x19, 0x9f, 0xe9, 0x4e, 0x92, 0x58, 0x93, 0x70, 0x84, 0xba, 0xeb, 0x26, 0xc9, 0x9e,
	0x84, 0xa3, 0xcc, 0x75, 0x74, 0x29, 0x7b, 0x1d, 0xbd, 0x09, 0x65, 0x1e, 0x5a, 0x62, 0xa6, 0x70,
	0xd6, 0x2a, 0xe6, 0x0a, 0x0f, 0x8f, 0xed, 0x30, 0xea, 0xfe, 0x4d, 0x01, 0x3a, 0xbd, 0x68, 0x6a,
	0xb2, 0x2f, 0x7f, 0x19, 0xcc, 0xd5, 0x48, 0xd8, 0x88, 0x87, 0x91, 0xaa, 0x25, 0xb9, 0xe9, 0x06,
	0x39, 0x7d, 0xd8, 0x59, 0xcc, 0x1e, 0x76, 0x6e, 0x42, 0xf9, 0xca, 0xf6, 0x9e, 0x27, 0x57, 0x3b,
	0x2b, 0xe2, 0x91, 0x4e, 0xad, 0x90, 0x91, 0x54, 0xa9, 0x2c, 0xc9, 0x6b, 0x39, 0xdb, 0x7b, 0xfe,
	0x58, 0x55, 0xaa, 0x64, 0x8a, 0x4c, 0x96, 0xb3, 0x45, 0x26, 0xdd, 0x7f, 0x5e, 0xa6, 0x8e, 0x87,
	0xd3, 0x9c, 0x8e, 0x7f, 0x93, 0x59, 0xac, 0x7e, 0xfb, 0x59, 0xcc, 0x1e, 0xa1, 0xcb, 0xde, 0x6a,
	0x47, 0xe8, 0xda, 0x6c, 0xac, 0xbc, 0x66, 0x36, 0xca, 0x39, 0xb3, 0xb1, 0x0b, 0xf8, 0xac, 0x0e,
	0x7d, 0x64, 0x85, 0x40, 0x4d, 0xd0, 0x94, 0xd3, 0xa6, 0xd6, 0xaa, 0x9a, 0x59, 0xab, 0xe4, 0xf6,
	0x31, 0x79, 0x0f, 0xdd, 0x7b, 0xcb, 0xdb, 0xc7, 0xf8, 0x4d, 0xe9, 0x55, 0xad, 0x65, 0x57, 0x75,
	0x07, 0xea, 0xdc, 0xb5, 0x1c, 0x3b, 0x70, 0xf5, 0x03, 0x54, 0xe0, 0x6e, 0xcf, 0x0e, 0x5c, 0x3c,
	0x8e, 0xfb, 0x10, 0x0c, 0xee, 0x32, 0x2f, 0xe2, 0x43, 0xce, 0xa4, 0xa4, 0xe7, 0xcb, 0xbb, 0xef,
	0x76, 0xc2, 0x11, 0xf2, 0xa7, 0x3e, 0x9e, 0x2b, 0xcf, 0xc2, 0xc8, 0x9f, 0xb0, 0x40, 0x3f, 0xc3,
	0xaf, 0x2b, 0x22, 0x9e, 0xe2, 0x67, 0x6c, 0xa1, 0xb5, 0x50, 0x70, 0xa4, 0x10, 0x8a, 0x1f, 0x58,
	0x2e, 0xd6, 0x2f, 0xcc, 0x65, 0x0d, 0x6c, 0x83, 0xce, 0x88, 0x8f, 0x88, 0x28, 0xcc, 0x22, 0x60,
	0x23, 0x0a, 0x1e, 0x74, 0x54, 0x5a, 0x0e, 0xd8, 0x08, 0xa3, 0xc6, 0x16, 0x54, 0xfc, 0x59, 0xa4,
	0x5f, 0x8b, 0x97, 0xfd, 0x19, 0x95, 0xfe, 0xb5, 0xa1, 0x14, 0x71, 0x57, 0x9e, 0x84, 0x8a, 0x9f,
	0x58, 0x1d, 0x30, 0x0b, 0x23, 0xfd, 0x1a, 0xbc, 0x22, 0x08, 0x38, 0x01, 0x5d, 0x68, 0xa8, 0xb5,
	0x22, 0x01, 0x79, 0x0d, 0x2e, 0x17, 0x4b, 0x4d, 0x12, 0x1e, 0xea, 0xa4, 0xc7, 0x4e, 0xf7, 0xe1,
	0x6d, 0xc1, 0xe9, 0x69, 0xe3, 0xef, 0x0e, 0xa0, 0x4d, 0x2e, 0x7a, 0x38, 0x8b, 0xae, 0x99, 0xe7,
	0x88, 0x4e, 0xdd, 0x86, 0xaa, 0x3d, 0x8b, 0xae, 0x2d, 0xc7, 0x77, 0x99, 0x72, 0x4d, 0x41, 0xe8,
	0xf9, 0x2e, 0xd3, 0x4f, 0x2b, 0x8a, 0xa9, 0xd3, 0x8a, 0xee, 0x3f, 0x15, 0x48, 0x57, 0x38, 0xd5,
	0x74, 0xfd, 0xbe, 0xbd, 0x25, 0x65, 0xaa, 0xcb, 0x19, 0x53, 0xd5, 0xaa, 0x46, 0x56, 0x52, 0x55,
	0x23, 0xb9, 0xb5, 0x82, 0xe5, 0xdc, 0x5a, 0xc1, 0xae, 0x0b, 0x2d, 0x9a, 0xb1, 0x67, 0x21, 0x0b,
	0x8e, 0x7d, 0x01, 0x32, 0x5e, 0x19, 0xcb, 0x3a, 0x49, 0x88, 0x97, 0x13, 0xa6, 0x62, 0xf9, 0xdb,
	0x50, 0x99, 0xda, 0x61, 0xf8, 0xd2, 0x0f, 0x54, 0x1c, 0x8b, 0x9f, 0xbb, 0xbf, 0x5d, 0xa2, 0xd7,
	0x84, 0xd3, 0xe4, 0x35, 0xdf, 0xb9, 0xc8, 0xb3, 0x0d, 0x30, 0x16, 0x3d, 0xa3, 0x13, 0x08, 0x9a,
	0xd2, 0x2a, 0x52, 0xf0, 0xe4, 0x21, 0x35, 0x2d, 0xe5, 0x9b, 0xd7, 0xa2, 0x92, 0xad, 0xe0, 0x09,
	0xe7, 0x61, 0xc4, 0x26, 0x64, 0xb8, 0x55, 0x75, 0xf1, 0x26, 0x48, 0xe8, 0xb2, 0x7a, 0xd5, 0x19,
	0xbc, 0xaa, 0xea, 0xac, 0x96, 0xad, 0x3a, 0xeb, 0x42, 0x63, 0x62, 0x7f, 0x65, 0x25, 0x65, 0x45,
	0x75, 0x8a, 0x75, 0x13, 0xfb, 0xab, 0x33, 0xfd, 0xdb, 0x89, 0xeb, 0xa1, 0x3c, 0x54, 0x69, 0xc8,
	0x6f, 0x27, 0xae, 0x87, 0x74, 0x96, 0xb2, 0x05, 0x15, 0xd7, 0xd1, 0x2e, 0x65, 0xaa, 0x66, 0xd9,
	0x75, 0x98, 0x1a, 0xac, 0xf3, 0xb5, 0xe2, 0xb5, 0x64, 0x55, 0xcf, 0xd7, 0x4e, 0x7c, 0x06, 0xe3,
	0x0c, 0x87, 0xec, 0x2b, 0xe2, 0xb6, 0x69, 0xa2, 0x90, 0xa2, 0xd4, 0x72, 0x4f, 0x36, 0x95, 0xb1,
	0x83, 0x7b, 0xd8, 0xb2, 0x6b, 0x43, 0x83, 0xac, 0xad, 0xe7, 0x7b, 0x1e, 0x73, 0x22, 0x34, 0x27,
	0x59, 0xdd, 0x58, 0x90, 0xe6, 0x24, 0x6b, 0x1f, 0x6f, 0x36, 0xb4, 0xb8, 0xb0, 0x49, 0x44, 0x2f,
	0xb2, 0xb4, 0x84, 0xd0, 0xdd, 0x80, 0xb5, 0x5e, 0x34, 0x3d, 0xf3, 0x9e, 0x88, 0x49, 0x94, 0xaf,
	0x61, 0x6e, 0xb7, 0x03, 0xb7, 0x12, 0xf2, 0x11, 0x0f, 0x9d, 0x98, 0xf3, 0xff, 0xe1, 0x36, 0xf5,
	0x29, 0x01, 0x3e, 0xc2, 0x33, 0x7a, 0xbe, 0x37, 0xe4, 0xc1, 0xe4, 0xdb, 0xd5, 0x86, 0x75, 0xff,
	0xad, 0x08, 0xdb, 0xf8, 0x5e, 0x33, 0x9c, 0xe6, 0xeb, 0xff, 0x4e, 0x85, 0x94, 0xcc, 0x78, 0x56,
	0x16, 0x6a, 0xdd, 0x76, 0xa1, 0xee, 0x50, 0xc7, 0x29, 0x01, 0x90, 0x1f, 0xd4, 0x24, 0x0d, 0x93,
	0x80, 0x26, 0x12, 0x5f, 0x6f, 0x26, 0x22, 0x68, 0x21, 0x0b, 0x75, 0x40, 0xd5, 0x9c, 0x3a, 0xa0,
	0x74, 0x7e, 0x85, 0xd7, 0xd4, 0xd6, 0xd6, 0x16, 0x60, 0xcf, 0x1a, 0xac, 0xc6, 0x70, 0x6d, 0x20,
	0x47, 0xd0, 0xfd, 0xf7, 0x12, 0x51, 0x11, 0x0b, 0x29, 0xea, 0xff, 0x44, 0x28, 0xd2, 0xa7, 0x79,
	0x79, 0x61, 0x9a, 0x53, 0x8b, 0xb4, 0x92, 0x59, 0xa4, 0x7d, 0x58, 0x8d, 0x5b, 0xe3, 0x06, 0x4b,
	0xab, 0x36, 0x55, 0x0c, 0xdc, 0x61, 0xa9, 0xda, 0x44, 0x29, 0x8b, 0x01, 0xa8, 0xa2, 0x97, 0x3f,
	0xf9, 0x84, 0x1a, 0xbe, 0x0f, 0xeb, 0x59, 0x20, 0xa2, 0x55, 0x2f, 0x18, 0x69, 0x28, 0xf2, 0x0a,
	0xe8, 0x02, 0x37, 0x40, 0x97, 0xdb, 0x50, 0xe5, 0xa1, 0x45, 0x35, 0xe3, 0xb8, 0x50, 0x15, 0xb3,
	0xc2, 0xc3, 0x43, 0x7c, 0x16, 0x69, 0x23, 0x62, 0xe3, 0xe9, 0xb5, 0xef, 0x31, 0x19, 0xc0, 0xe2,
	0x67, 0x3d, 0x3a, 0x34, 0xd2, 0xd1, 0x41, 0x5d, 0xa0, 0xa3, 0x11, 0x36, 0x65, 0x39, 0x25, 0x9e,
	0xb1, 0x44, 0x78, 0x35, 0x31, 0xf1, 0xaf, 0xf8, 0x58, 0x45, 0x2e, 0xf9, 0xd4, 0x7d, 0x06, 0x1b,
	0xb1, 0x45, 0xa8, 0xad, 0xd6, 0x63, 0xdb, 0x7b, 0xfe, 0x2d, 0x7d, 0xfc, 0x37, 0x45, 0xd2, 0x8b,
	0x36, 0x95, 0xd2, 0xfb, 0x5d, 0x83, 0x0b, 0xdf, 0x06, 0x58, 0x0b, 0xdd, 0x42, 0x4a, 0xb3, 0xa2,
	0x8a, 0x20, 0x20, 0xee, 0xfa, 0x5d, 0x0d, 0x9a, 0x34, 0xb5, 0x6a, 0xfc, 0x49, 0x05, 0xa4, 0x86,
	0xbb, 0xa8, 0xa2, 0x11, 0x81, 0x97, 0xd6, 0x9b, 0xe2, 0x6b, 0x7a, 0x53, 0xba, 0xa1, 0x37, 0xf1,
	0x48, 0x97, 0xde, 0x00, 0xc3, 0x2f, 0xdf, 0x84, 0xe1, 0xb5, 0x22, 0xcf, 0x95, 0x57, 0x17, 0x79,
	0x96, 0xb3, 0x45, 0x9e, 0x77, 0x00, 0xa1, 0xaa, 0x15, 0xb2, 0x80, 0xdb, 0x63, 0x39, 0x29, 0x20,
	0x48, 0x17, 0x48, 0xc9, 0x42, 0x8e, 0xea, 0x02, 0xe4, 0xb8, 0x0b, 0x8d, 0xe9, 0xd8, 0x8e, 0x18,
	0xaa, 0x60, 0xf6, 0x58, 0x22, 0x80, 0x3a, 0x12, 0x2f, 0x88, 0x26, 0x84, 0x70, 0x43, 0x3f, 0x0c,
	0xec, 0x11, 0x6e, 0x8b, 0x29, 0xd6, 0xd5, 0x05, 0xf1, 0x89, 0xa4, 0x65, 0xb0, 0x42, 0x3d, 0x8b,
	0x15, 0x16, 0x76, 0x0f, 0x8d, 0x9c, 0xdd, 0x43, 0x76, 0xcb, 0xd2, 0x7c, 0xc3, 0x2d, 0x4b, 0xeb,
	0x66, 0xbf, 0x4f, 0xc0, 0x7f, 0x5b, 0x82, 0x08, 0x05, 0xfe, 0xb3, 0x1b, 0xb5, 0xd5, 0xc5, 0x8d,
	0xda, 0x5d, 0xb9, 0x3f, 0x88, 0x61, 0xa5, 0x91, 0x58, 0xc2, 0xb9, 0xa4, 0x65, 0xd2, 0xc4, 0x5a,
	0x36, 0x4d, 0xe8, 0xa8, 0x74, 0x3d, 0x8d, 0x4a, 0x33, 0xdf, 0x95, 0x6d, 0x64, 0xbf, 0x2b, 0xbb,
	0x0b, 0x8d, 0xe1, 0x2c, 0x9a, 0x05, 0x4c, 0x2d, 0xf0, 0x2d, 0x5a, 0x1c, 0x22, 0xca, 0x25, 0xd6,
	0x80, 0xdf, 0x66, 0x0a, 0xf8, 0x7d, 0x0f, 0xd6, 0x5e, 0xb0, 0x80, 0x0f, 0xe7, 0x96, 0xc3, 0x82,
	0xc8, 0xf2, 0x7c, 0xba, 0xb1, 0xa5, 0xfa, 0xdb, 0x36, 0xb1, 0x7a, 0x2c, 0x88, 0x4e, 0x7d, 0xf5,
	0x09, 0xa6, 0x9e, 0xce, 0xb6, 0x16, 0x76, 0x6e, 0x71, 0xb1, 0x6b, 0xaa, 0x92, 0x82, 0x8a, 0x5d,
	0xe5, 0x9d, 0xf2, 0x43, 0x58, 0x93, 0x1d, 0x1e, 0xb2, 0xc8, 0xb9, 0x56, 0x92, 0xb7, 0xa9, 0xe6,
	0x82, 0x58, 0x4f, 0x04, 0x47, 0xca, 0xef, 0x40, 0x7d, 0xc8, 0x98, 0x35, 0xb5, 0xe7, 0xd4, 0x37,
	0xaa, 0xc6, 0x85, 0x21, 0x63, 0xe7, 0xf6, 0x1c, 0x7b, 0xb5, 0x05, 0xb8, 0x60, 0xd6, 0x90, 0x31,
	0xac, 0x9d, 0x28, 0x98, 0x65, 0xf1, 0xfc, 0x84, 0xa1, 0x6f, 0x48, 0x27, 0x13, 0x4c, 0xaa, 0x97,
	0x90, 0x3e, 0x29, 0xd8, 0x1d, 0x28, 0x4f, 0x58, 0x18, 0xda, 0x23, 0x26, 0x2b, 0x6e, 0xd5, 0xa3,
	0x88, 0xce, 0x2e, 0x1f, 0xb1, 0x30, 0xc2, 0xaf, 0xe5, 0xaa, 0xa6, 0x7c, 0x5a, 0xdc, 0x0d, 0xee,
	0x2e, 0xee, 0x06, 0x6f, 0x43, 0xd5, 0x65, 0x2f, 0xb8, 0x83, 0x25, 0x3c, 0x5d, 0x5a, 0x4e, 0x22,
	0x10, 0x1e, 0x96, 0xee, 0xe8, 0xcc, 0x84, 0x16, 0xfc, 0x48, 0x4e, 0x9a, 0xd4, 0x05, 0x73, 0x66,
	0x87, 0x8e, 0x13, 0xcb, 0x4c, 0x5f, 0xba, 0x34, 0xe6, 0x7b, 0x89, 0xcc, 0xf9, 0x4b, 0x17, 0x07,
	0xdd, 0x15, 0xe8, 0xc4, 0x99, 0x25, 0x32, 0xf7, 0xe5, 0xf7, 0x67, 0xcc, 0x99, 0x29, 0x99, 0x4d,
	0x28, 0xfb, 0x53, 0xe1, 0x4b, 0x3e, 0x7e, 0x23, 0x57, 0x35, 0x57, 0xc4, 0xe3, 0xa9, 0x9f, 0x09,
	0xdd, 0xef, 0x67, 0x43, 0xb7, 0xdc, 0x21, 0xef, 0x25, 0x3b, 0xe4, 0xf7, 0xa1, 0x15, 0xc9, 0x98,
	0xa9, 0x3e, 0xee, 0xa3, 0x2f, 0xe2, 0x9a, 0x8a, 0x2c, 0xbf, 0xef, 0xcb, 0xdf, 0x09, 0xef, 0xdf,
	0xb0, 0x13, 0xfe, 0xf3, 0x02, 0x45, 0xe4, 0x70, 0x1a, 0x47, 0xe4, 0xdf, 0x77, 0x36, 0xba, 0x07,
	0xa5, 0x80, 0x7d, 0x29, 0x8f, 0x16, 0xe9, 0xc4, 0x32, 0x95, 0x22, 0x4c, 0xc1, 0xee, 0x7e, 0x84,
	0x07, 0x8a, 0x02, 0x7e, 0xcf, 0xae, 0x42, 0x27, 0xe0, 0x57, 0xec, 0xc4, 0x0e, 0x9e, 0xb3, 0xe8,
	0xc8, 0x8e, 0x6c, 0xc3, 0xd0, 0xaa, 0x6a, 0xaa, 0xb2, 0x78, 0xe6, 0x36, 0x35, 0x08, 0xa7, 0x17,
	0xb3, 0xf0, 0x2a, 0xd3, 0x20, 0xd1, 0xf6, 0xcc, 0x13, 0xec, 0x6f, 0xa0, 0x2d, 0xa7, 0x41, 0xf7,
	0x0f, 0xd4, 0xa7, 0x36, 0x21, 0x7d, 0x32, 0x36, 0xc0, 0x8f, 0x18, 0xff, 0xcb, 0x27, 0x8f, 0x0b,
	0x5f, 0xb9, 0x6b, 0xdf, 0x80, 0x74, 0xff, 0x08, 0xb0, 0x08, 0x7d, 0x10, 0x7f, 0x34, 0x42, 0x9f,
	0xa6, 0x2c, 0x7c, 0x5c, 0x52, 0xc8, 0xf9, 0xb8, 0x24, 0xf3, 0x99, 0x48, 0x71, 0xe1, 0x33, 0x91,
	0xf7, 0xa1, 0xa5, 0x69, 0x41, 0xc3, 0x29, 0x61, 0xe7, 0x9a, 0x09, 0x19, 0x53, 0x40, 0xde, 0xd7,
	0x18, 0x4b, 0xb9, 0x5f, 0x63, 0x6c, 0xa7, 0xca, 0x53, 0x29, 0xbd, 0x6a, 0xf5, 0xa8, 0x22, 0xb3,
	0x49, 0x36, 0x5e, 0x9e, 0xa9, 0x5a, 0x49, 0x49, 0xc4, 0x3b, 0x33, 0x21, 0xe4, 0xb2, 0x31, 0x7f,
	0xc1, 0x82, 0xb9, 0x35, 0x67, 0xb6, 0xfa, 0xc6, 0xa7, 0xae, 0x88, 0x5f, 0x30, 0x3b, 0x30, 0xee,
	0x43, 0x33, 0x16, 0x9a, 0xf8, 0x5e, 0x74, 0x2d, 0xeb, 0x6e, 0xe3, 0xa6, 0x27, 0x82, 0x68, 0x3c,
	0x82, 0x4d, 0xb1, 0x1b, 0x9e, 0xe0, 0xea, 0xc9, 0x4d, 0xb1, 0x2c, 0xaf, 0x21, 0x1c, 0xbb, 0x3e,
	0xb1, 0xbf, 0xa2, 0xb5, 0xc5, 0xb5, 0x94, 0xa5, 0x36, 0xa2, 0x19, 0xf7, 0x72, 0x9b, 0x81, 0x6c,
	0xc6, 0xbd, 0xc5, 0x66, 0x3f, 0x80, 0x5b, 0xe2, 0x6d, 0x74, 0x6f, 0x9e, 0x6a, 0x25, 0xbf, 0x88,
	0x9f, 0xd8, 0x5f, 0xe1, 0x5d, 0x5f, 0xb6, 0x11, 0xf7, 0xf2, 0x1a, 0xd5, 0x65, 0x23, 0xee, 0x2d,
	0x34, 0x7a, 0xe3, 0x8a, 0x86, 0x74, 0x65, 0x44, 0x33, 0xa7, 0x02, 0xd8, 0x09, 0x98, 0xc0, 0x1a,
	0x88, 0x75, 0xd4, 0xd1, 0x20, 0x92, 0x8e, 0xe4, 0x39, 0x59, 0x02, 0xa9, 0xdb, 0x19, 0x48, 0x8d,
	0x16, 0x36, 0xe5, 0x01, 0xd3, 0x8f, 0x04, 0x81, 0x48, 0x28, 0xb0, 0x07, 0x6d, 0xbc, 0xb1, 0xb4,
	0x70, 0x55, 0xf4, 0xd3, 0xc1, 0x26, 0xd2, 0x8f, 0x04, 0x19, 0x25, 0xef, 0x41, 0x93, 0x79, 0xae,
	0x2e, 0x47, 0x49, 0xbb, 0xce, 0x3c, 0x37, 0x91, 0x7a, 0x8f, 0x2c, 0xd6, 0x1a, 0xf3, 0x21, 0xb3,
	0xa6, 0xd7, 0x76, 0xa8, 0x8e, 0x0f, 0xd1, 0x1d, 0x8e, 0xf9, 0x90, 0x9d, 0x0b, 0x22, 0xe6, 0xf0,
	0x50, 0x15, 0x8e, 0x62, 0x1a, 0xaa, 0x98, 0x55, 0x1e, 0xca, 0x0b, 0x07, 0x34, 0xc3, 0xb8, 0xaa,
	0x40, 0x24, 0x95, 0x3b, 0xd2, 0x0c, 0x55, 0x35, 0x81, 0x44, 0x35, 0x49, 0xcd, 0x0e, 0x96, 0xa0,
	0x08, 0x49, 0xfa, 0x96, 0xbb, 0x1d, 0x17, 0xe6, 0xd8, 0x11, 0x55, 0x74, 0xee, 0xc3, 0x2a, 0xc6,
	0xe1, 0xe4, 0x86, 0x9c, 0xfb, 0x98, 0xab, 0x0a, 0x66, 0x4b, 0x30, 0xe2, 0xf2, 0x10, 0xee, 0x0b,
	0xcd, 0x54, 0x44, 0x96, 0x12, 0xee, 0xd2, 0xc7, 0x06, 0xc8, 0xd1, 0xa5, 0x7f, 0x0c, 0x5b, 0xd2,
	0x84, 0x85, 0x6c, 0xc8, 0x45, 0xb2, 0x1f, 0x8f, 0xfc, 0x80, 0x47, 0xd7, 0x13, 0x4c, 0x66, 0x15,
	0xf3, 0x16, 0x19, 0xf1, 0x88, 0x7b, 0x17, 0xdc, 0x65, 0x87, 0x8a, 0x2b, 0x5e, 0x84, 0x77, 0xaa,
	0xe3, 0x39, 0xfe, 0x4f, 0x86, 0xf4, 0x5c, 0x4a, 0x6e, 0xed, 0x84, 0x23, 0x7d, 0x77, 0x17, 0xea,
	0x61, 0x14, 0x70, 0xbc, 0x7c, 0xe7, 0x0e, 0xc3, 0x04, 0x57, 0x30, 0x6b, 0x44, 0xa3, 0xc2, 0x9c,
	0x5d, 0xa8, 0xcb, 0x2b, 0x1f, 0x9a, 0x0d, 0xf9, 0x25, 0xb8, 0xa4, 0xe1, 0x44, 0x7c, 0x04, 0x6b,
	0xda, 0x3b, 0x63, 0xeb, 0xa4, 0x9c, 0xa7, 0x75, 0x27, 0xb6, 0xd0, 0x07, 0xf4, 0xc7, 0x15, 0xdc,
	0xb3, 0x93, 0xf5, 0xd8, 0x93, 0x65, 0xbe, 0x09, 0x5d, 0xe8, 0xee, 0xfa, 0x58, 0x54, 0x83, 0x91,
	0x17, 0x37, 0xea, 0x2a, 0x48, 0x19, 0xfb, 0xb0, 0x24, 0x46, 0x27, 0xef, 0x97, 0x6e, 0xc9, 0xfb,
	0xa5, 0x4c, 0xd4, 0x34, 0x51, 0xc6, 0xd8, 0x87, 0x4a, 0xc0, 0xc2, 0xa9, 0xef, 0xc9, 0x4a, 0x96,
	0xa4, 0x4a, 0x58, 0xde, 0x21, 0x99, 0x31, 0x7f, 0xff, 0x2e, 0x7e, 0x12, 0x1b, 0x17, 0x8e, 0x1b,
	0x15, 0x58, 0x3a, 0x3e, 0x3b, 0x7d, 0xda, 0x7e, 0xcb, 0xa8, 0xc2, 0xf2, 0xc5, 0x67, 0x67, 0xe6,
	0x65, 0xbb, 0xb0, 0xff, 0x97, 0x05, 0x2c, 0x3d, 0x3b, 0xd3, 0xbe, 0xba, 0x6f, 0xe1, 0x77, 0x18,
	0xd6, 0xd9, 0x85, 0x75, 0x74, 0x76, 0xda, 0x6f, 0xbf, 0x65, 0xdc, 0x83, 0x1d, 0x49, 0x38, 0xef,
	0x9f, 0x1e, 0x0d, 0x4e, 0x9f, 0x5a, 0x9f, 0x0f, 0x2e, 0x3f, 0xb3, 0xce, 0x0f, 0xcd, 0xcb, 0xc1,
	0xe1, 0x31, 0x49, 0x15, 0x8c, 0xfb, 0xb0, 0x2b, 0xa5, 0x7a, 0x87, 0xa7, 0xbd, 0xfe, 0x71, 0xff,
	0x28, 0x47, 0xac, 0x68, 0x18, 0xf8, 0x3e, 0x4d, 0x59, 0xbb, 0x64, 0xac, 0x61, 0x29, 0xbe, 0xde,
	0xb4, 0xbd, 0x64, 0xd0, 0xbf, 0xa0, 0x08, 0xe2, 0xb3, 0xd3, 0x5f, 0x9c, 0x7d, 0x7e, 0xda, 0x5e,
	0xde, 0xff, 0x25, 0x8e, 0x28, 0xf9, 0x53, 0x91, 0x16, 0xd4, 0x8e, 0x07, 0x27, 0x83, 0x4b, 0xeb,
	0xdc, 0x1c, 0xf4, 0x44, 0x4f, 0xdb, 0x50, 0x3f, 0x39, 0x34, 0x7f, 0xd1, 0x57, 0x94, 0x82, 0xd1,
	0x04, 0x78, 0xdc, 0xbf, 0x50, 0xcf, 0x45, 0xf1, 0x7c, 0x7c, 0x18, 0x3f, 0x97, 0xf6, 0x19, 0xfd,
	0xd7, 0x4a, 0x52, 0x5a, 0x58, 0x81, 0xa5, 0x53, 0x1a, 0x76, 0x05, 0x96, 0xce, 0xce, 0xfb, 0xa7,
	0xed, 0x82, 0x98, 0xaf, 0xde, 0xf1, 0xd9, 0x85, 0x68, 0xdf, 0x82, 0xda, 0x93, 0x33, 0xb3, 0xd7,
	0xb7, 0x88, 0x50, 0xc2, 0xd9, 0x12, 0x3f, 0xad, 0xcb, 0xb3, 0xa3, 0xc3, 0x2f, 0xda, 0x4b, 0x38,
	0x18, 0x24, 0x7c, 0xd1, 0xbf, 0xb8, 0xec, 0x9b, 0x82, 0xb8, 0xbc, 0xff, 0x63, 0xec, 0x79, 0x52,
	0x43, 0xdd, 0x82, 0xda, 0xc5, 0x79, 0xbf, 0xf7, 0xec, 0xf8, 0xf0, 0x72, 0x70, 0x76, 0xda, 0x7e,
	0xcb, 0x68, 0x40, 0xf5, 0xd0, 0x7c, 0x3c, 0xb8, 0x34, 0x0f, 0x9f, 0xf6, 0xe9, 0x8d, 0x9f, 0xf5,
	0x8f, 0x9e, 0xf6, 0xdb, 0xc5, 0xfd, 0xbf, 0x28, 0x60, 0xdb, 0xa4, 0x52, 0x1b, 0x60, 0xe5, 0xf4,
	0xcc, 0x3c, 0x39, 0x3c, 0x6e, 0xbf, 0x65, 0x6c, 0xc0, 0xea, 0xd9, 0xb9, 0x50, 0x71, 0x61, 0xf5,
	0xff, 0x5f, 0xbf, 0xf7, 0x0c, 0xb5, 0x15, 0x8c, 0x32, 0x94, 0xce, 0x2e, 0x7b, 0xd4, 0xdd, 0xfe,
	0x93, 0x73, 0xeb, 0xa8, 0x6f, 0x0e, 0x7e, 0xd5, 0x3f, 0x6a, 0x97, 0x8c, 0x4d, 0x58, 0xeb, 0x9d,
	0x9d, 0x3c, 0x1e, 0x9c, 0xe2, 0x8b, 0x63, 0xc6, 0x92, 0x58, 0x97, 0xa3, 0xfe, 0xf1, 0xe0, 0x57,
	0x7d, 0xf3, 0x0b, 0x39, 0xb6, 0x65, 0xe3, 0x16, 0x18, 0x17, 0xfd, 0xcb, 0xcb, 0xe3, 0xfe, 0x49,
	0xff, 0xf4, 0x32, 0x96, 0x5d, 0x11, 0x6f, 0x3d, 0x3f, 0x3e, 0xec, 0xa5, 0xc9, 0xe5, 0xab, 0x15,
	0xfc, 0x0b, 0x9d, 0x1f, 0xfc, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0xca, 0x83, 0x2b, 0x61,
	0x47, 0x00, 0x00,
}
