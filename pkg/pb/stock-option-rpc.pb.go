// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stock-option-rpc.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StockOptionNode service

type StockOptionNodeClient interface {
	ReqQuote(ctx context.Context, in *ReqOptionQuote, opts ...grpc.CallOption) (*RspOptionQuote, error)
}

type stockOptionNodeClient struct {
	cc *grpc.ClientConn
}

func NewStockOptionNodeClient(cc *grpc.ClientConn) StockOptionNodeClient {
	return &stockOptionNodeClient{cc}
}

func (c *stockOptionNodeClient) ReqQuote(ctx context.Context, in *ReqOptionQuote, opts ...grpc.CallOption) (*RspOptionQuote, error) {
	out := new(RspOptionQuote)
	err := grpc.Invoke(ctx, "/pb.StockOptionNode/ReqQuote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StockOptionNode service

type StockOptionNodeServer interface {
	ReqQuote(context.Context, *ReqOptionQuote) (*RspOptionQuote, error)
}

func RegisterStockOptionNodeServer(s *grpc.Server, srv StockOptionNodeServer) {
	s.RegisterService(&_StockOptionNode_serviceDesc, srv)
}

func _StockOptionNode_ReqQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOptionQuote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockOptionNodeServer).ReqQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.StockOptionNode/ReqQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockOptionNodeServer).ReqQuote(ctx, req.(*ReqOptionQuote))
	}
	return interceptor(ctx, in, info, handler)
}

var _StockOptionNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StockOptionNode",
	HandlerType: (*StockOptionNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReqQuote",
			Handler:    _StockOptionNode_ReqQuote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock-option-rpc.proto",
}

func init() { proto.RegisterFile("stock-option-rpc.proto", fileDescriptorStockOptionRpc) }

var fileDescriptorStockOptionRpc = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x2e, 0xc9, 0x4f,
	0xce, 0xd6, 0xcd, 0x2f, 0x28, 0xc9, 0xcc, 0xcf, 0xd3, 0x2d, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0x12, 0x42, 0x96, 0x83, 0x88, 0x1b, 0xb9, 0x73, 0xf1,
	0x07, 0x83, 0x44, 0xfd, 0xc1, 0x82, 0x7e, 0xf9, 0x29, 0xa9, 0x42, 0x26, 0x5c, 0x1c, 0x41, 0xa9,
	0x85, 0x81, 0xa5, 0xf9, 0x25, 0xa9, 0x42, 0x42, 0x7a, 0x05, 0x49, 0x7a, 0x41, 0xa9, 0x85, 0x10,
	0x69, 0xb0, 0x98, 0x14, 0x44, 0xac, 0xb8, 0x00, 0x49, 0x4c, 0x89, 0xc1, 0x49, 0xe0, 0xc4, 0x23,
	0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0x21, 0x89,
	0x0d, 0x6c, 0x83, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x46, 0xdc, 0x2a, 0x10, 0x93, 0x00, 0x00,
	0x00,
}
