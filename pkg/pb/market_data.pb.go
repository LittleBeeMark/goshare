// Code generated by protoc-gen-go. DO NOT EDIT.
// source: market_data.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OrderBook struct {
	// / 卖价
	Ask float64 `protobuf:"fixed64,1,opt,name=ask" json:"ask,omitempty"`
	// / 卖量
	AskVolume float64 `protobuf:"fixed64,2,opt,name=ask_volume,json=askVolume" json:"ask_volume,omitempty"`
	// / 买价
	Bid float64 `protobuf:"fixed64,3,opt,name=bid" json:"bid,omitempty"`
	// / 买量
	BidVolume float64 `protobuf:"fixed64,4,opt,name=bid_volume,json=bidVolume" json:"bid_volume,omitempty"`
}

func (m *OrderBook) Reset()                    { *m = OrderBook{} }
func (m *OrderBook) String() string            { return proto.CompactTextString(m) }
func (*OrderBook) ProtoMessage()               {}
func (*OrderBook) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *OrderBook) GetAsk() float64 {
	if m != nil {
		return m.Ask
	}
	return 0
}

func (m *OrderBook) GetAskVolume() float64 {
	if m != nil {
		return m.AskVolume
	}
	return 0
}

func (m *OrderBook) GetBid() float64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *OrderBook) GetBidVolume() float64 {
	if m != nil {
		return m.BidVolume
	}
	return 0
}

// 深度行情
type MarketDataSnapshot struct {
	// 合约
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// 时间time_t
	Time int64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	// 毫秒
	Milliseconds int32 `protobuf:"varint,3,opt,name=milliseconds" json:"milliseconds,omitempty"`
	// 开盘
	Open float64 `protobuf:"fixed64,4,opt,name=open" json:"open,omitempty"`
	// 最高
	High float64 `protobuf:"fixed64,5,opt,name=high" json:"high,omitempty"`
	// 最低
	Low float64 `protobuf:"fixed64,6,opt,name=low" json:"low,omitempty"`
	// 收盘
	Close float64 `protobuf:"fixed64,7,opt,name=close" json:"close,omitempty"`
	// 成交量
	Volume float64 `protobuf:"fixed64,8,opt,name=volume" json:"volume,omitempty"`
	// 成交金额
	Amount float64 `protobuf:"fixed64,9,opt,name=amount" json:"amount,omitempty"`
	// 持仓
	Position float64 `protobuf:"fixed64,10,opt,name=position" json:"position,omitempty"`
	// 最新价格
	Price float64 `protobuf:"fixed64,11,opt,name=price" json:"price,omitempty"`
	// 昨收
	PreClose float64 `protobuf:"fixed64,12,opt,name=pre_close,json=preClose" json:"pre_close,omitempty"`
	// 昨结
	PreSettlementPrice float64 `protobuf:"fixed64,13,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	// 昨持仓
	PrePosition float64 `protobuf:"fixed64,14,opt,name=pre_position,json=prePosition" json:"pre_position,omitempty"`
	// 结算价
	SettlementPrice float64 `protobuf:"fixed64,15,opt,name=settlement_price,json=settlementPrice" json:"settlement_price,omitempty"`
	// 涨停
	UpperLimitPrice float64 `protobuf:"fixed64,16,opt,name=upper_limit_price,json=upperLimitPrice" json:"upper_limit_price,omitempty"`
	// 跌停
	LowerLimitPrice float64 `protobuf:"fixed64,17,opt,name=lower_limit_price,json=lowerLimitPrice" json:"lower_limit_price,omitempty"`
	// 昨虚实
	PreDelta float64 `protobuf:"fixed64,18,opt,name=pre_delta,json=preDelta" json:"pre_delta,omitempty"`
	// 今虚实
	Delta float64 `protobuf:"fixed64,19,opt,name=delta" json:"delta,omitempty"`
	// 均价
	AveragePrice float64 `protobuf:"fixed64,20,opt,name=average_price,json=averagePrice" json:"average_price,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,21,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	// 盘口
	OrderBookList []*OrderBook `protobuf:"bytes,22,rep,name=order_book_list,json=orderBookList" json:"order_book_list,omitempty"`
	// 合约名称
	Name string `protobuf:"bytes,23,opt,name=name" json:"name,omitempty"`
	// 执行价
	ExercisePrice float64 `protobuf:"fixed64,24,opt,name=exercise_price,json=exercisePrice" json:"exercise_price,omitempty"`
	// 成交增量
	VolumeDelta float64 `protobuf:"fixed64,25,opt,name=volume_delta,json=volumeDelta" json:"volume_delta,omitempty"`
}

func (m *MarketDataSnapshot) Reset()                    { *m = MarketDataSnapshot{} }
func (m *MarketDataSnapshot) String() string            { return proto.CompactTextString(m) }
func (*MarketDataSnapshot) ProtoMessage()               {}
func (*MarketDataSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *MarketDataSnapshot) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *MarketDataSnapshot) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MarketDataSnapshot) GetMilliseconds() int32 {
	if m != nil {
		return m.Milliseconds
	}
	return 0
}

func (m *MarketDataSnapshot) GetOpen() float64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *MarketDataSnapshot) GetHigh() float64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *MarketDataSnapshot) GetLow() float64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *MarketDataSnapshot) GetClose() float64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *MarketDataSnapshot) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *MarketDataSnapshot) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MarketDataSnapshot) GetPosition() float64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *MarketDataSnapshot) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *MarketDataSnapshot) GetPreClose() float64 {
	if m != nil {
		return m.PreClose
	}
	return 0
}

func (m *MarketDataSnapshot) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetPrePosition() float64 {
	if m != nil {
		return m.PrePosition
	}
	return 0
}

func (m *MarketDataSnapshot) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetUpperLimitPrice() float64 {
	if m != nil {
		return m.UpperLimitPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetLowerLimitPrice() float64 {
	if m != nil {
		return m.LowerLimitPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetPreDelta() float64 {
	if m != nil {
		return m.PreDelta
	}
	return 0
}

func (m *MarketDataSnapshot) GetDelta() float64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *MarketDataSnapshot) GetAveragePrice() float64 {
	if m != nil {
		return m.AveragePrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *MarketDataSnapshot) GetOrderBookList() []*OrderBook {
	if m != nil {
		return m.OrderBookList
	}
	return nil
}

func (m *MarketDataSnapshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MarketDataSnapshot) GetExercisePrice() float64 {
	if m != nil {
		return m.ExercisePrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetVolumeDelta() float64 {
	if m != nil {
		return m.VolumeDelta
	}
	return 0
}

// MdsList 行情列表
type MdsList struct {
	List []*MarketDataSnapshot `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *MdsList) Reset()                    { *m = MdsList{} }
func (m *MdsList) String() string            { return proto.CompactTextString(m) }
func (*MdsList) ProtoMessage()               {}
func (*MdsList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *MdsList) GetList() []*MarketDataSnapshot {
	if m != nil {
		return m.List
	}
	return nil
}

// 期权T型
type OptionTMarket struct {
	// call报价
	CallTk *MarketDataSnapshot `protobuf:"bytes,1,opt,name=callTk" json:"callTk,omitempty"`
	// put报价
	PutTk *MarketDataSnapshot `protobuf:"bytes,2,opt,name=putTk" json:"putTk,omitempty"`
}

func (m *OptionTMarket) Reset()                    { *m = OptionTMarket{} }
func (m *OptionTMarket) String() string            { return proto.CompactTextString(m) }
func (*OptionTMarket) ProtoMessage()               {}
func (*OptionTMarket) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *OptionTMarket) GetCallTk() *MarketDataSnapshot {
	if m != nil {
		return m.CallTk
	}
	return nil
}

func (m *OptionTMarket) GetPutTk() *MarketDataSnapshot {
	if m != nil {
		return m.PutTk
	}
	return nil
}

// 简易期权T型报价
type SimpleTickForTQuote struct {
	Symbol             *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Price              float64 `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
	UpDownRatio        float64 `protobuf:"fixed64,3,opt,name=up_down_ratio,json=upDownRatio" json:"up_down_ratio,omitempty"`
	PreSettlementPrice float64 `protobuf:"fixed64,4,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	Name               string  `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *SimpleTickForTQuote) Reset()                    { *m = SimpleTickForTQuote{} }
func (m *SimpleTickForTQuote) String() string            { return proto.CompactTextString(m) }
func (*SimpleTickForTQuote) ProtoMessage()               {}
func (*SimpleTickForTQuote) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *SimpleTickForTQuote) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *SimpleTickForTQuote) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SimpleTickForTQuote) GetUpDownRatio() float64 {
	if m != nil {
		return m.UpDownRatio
	}
	return 0
}

func (m *SimpleTickForTQuote) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *SimpleTickForTQuote) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// T型报价的一行
type OptionTQuoteItem struct {
	ExercisePrice     float64              `protobuf:"fixed64,1,opt,name=exercise_price,json=exercisePrice" json:"exercise_price,omitempty"`
	Call              *SimpleTickForTQuote `protobuf:"bytes,2,opt,name=call" json:"call,omitempty"`
	Put               *SimpleTickForTQuote `protobuf:"bytes,3,opt,name=put" json:"put,omitempty"`
	ExercisePriceFlag string               `protobuf:"bytes,4,opt,name=exercise_price_flag,json=exercisePriceFlag" json:"exercise_price_flag,omitempty"`
}

func (m *OptionTQuoteItem) Reset()                    { *m = OptionTQuoteItem{} }
func (m *OptionTQuoteItem) String() string            { return proto.CompactTextString(m) }
func (*OptionTQuoteItem) ProtoMessage()               {}
func (*OptionTQuoteItem) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *OptionTQuoteItem) GetExercisePrice() float64 {
	if m != nil {
		return m.ExercisePrice
	}
	return 0
}

func (m *OptionTQuoteItem) GetCall() *SimpleTickForTQuote {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *OptionTQuoteItem) GetPut() *SimpleTickForTQuote {
	if m != nil {
		return m.Put
	}
	return nil
}

func (m *OptionTQuoteItem) GetExercisePriceFlag() string {
	if m != nil {
		return m.ExercisePriceFlag
	}
	return ""
}

// OptionTQuoteItemList 列表
type OptionTQuoteItemList struct {
	Exchange     int32               `protobuf:"varint,1,opt,name=exchange" json:"exchange,omitempty"`
	StrikeSymbol string              `protobuf:"bytes,2,opt,name=strike_symbol,json=strikeSymbol" json:"strike_symbol,omitempty"`
	Month        string              `protobuf:"bytes,3,opt,name=month" json:"month,omitempty"`
	List         []*OptionTQuoteItem `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
}

func (m *OptionTQuoteItemList) Reset()                    { *m = OptionTQuoteItemList{} }
func (m *OptionTQuoteItemList) String() string            { return proto.CompactTextString(m) }
func (*OptionTQuoteItemList) ProtoMessage()               {}
func (*OptionTQuoteItemList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *OptionTQuoteItemList) GetExchange() int32 {
	if m != nil {
		return m.Exchange
	}
	return 0
}

func (m *OptionTQuoteItemList) GetStrikeSymbol() string {
	if m != nil {
		return m.StrikeSymbol
	}
	return ""
}

func (m *OptionTQuoteItemList) GetMonth() string {
	if m != nil {
		return m.Month
	}
	return ""
}

func (m *OptionTQuoteItemList) GetList() []*OptionTQuoteItem {
	if m != nil {
		return m.List
	}
	return nil
}

// K线
type Kline struct {
	// 时间
	Time int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	// 开盘
	Open float64 `protobuf:"fixed64,2,opt,name=open" json:"open,omitempty"`
	// 最高
	High float64 `protobuf:"fixed64,3,opt,name=high" json:"high,omitempty"`
	// 最低
	Low float64 `protobuf:"fixed64,4,opt,name=low" json:"low,omitempty"`
	// 收盘
	Close float64 `protobuf:"fixed64,5,opt,name=close" json:"close,omitempty"`
	// 成交量
	Volume float64 `protobuf:"fixed64,6,opt,name=volume" json:"volume,omitempty"`
	// 成交额
	Amount float64 `protobuf:"fixed64,7,opt,name=amount" json:"amount,omitempty"`
	// 持仓量
	Position float64 `protobuf:"fixed64,8,opt,name=position" json:"position,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,9,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
}

func (m *Kline) Reset()                    { *m = Kline{} }
func (m *Kline) String() string            { return proto.CompactTextString(m) }
func (*Kline) ProtoMessage()               {}
func (*Kline) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *Kline) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Kline) GetOpen() float64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *Kline) GetHigh() float64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *Kline) GetLow() float64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *Kline) GetClose() float64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *Kline) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Kline) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Kline) GetPosition() float64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Kline) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

// KlineSeries K线序列
type KlineSeries struct {
	Symbol          *Symbol    `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Period          PeriodType `protobuf:"varint,2,opt,name=period,enum=pb.PeriodType" json:"period,omitempty"`
	PeriodInSeconds int32      `protobuf:"varint,3,opt,name=period_in_seconds,json=periodInSeconds" json:"period_in_seconds,omitempty"`
	List            []*Kline   `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
}

func (m *KlineSeries) Reset()                    { *m = KlineSeries{} }
func (m *KlineSeries) String() string            { return proto.CompactTextString(m) }
func (*KlineSeries) ProtoMessage()               {}
func (*KlineSeries) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *KlineSeries) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *KlineSeries) GetPeriod() PeriodType {
	if m != nil {
		return m.Period
	}
	return PeriodType_TICK
}

func (m *KlineSeries) GetPeriodInSeconds() int32 {
	if m != nil {
		return m.PeriodInSeconds
	}
	return 0
}

func (m *KlineSeries) GetList() []*Kline {
	if m != nil {
		return m.List
	}
	return nil
}

// 订阅行情
type ReqSubscribeMarketData struct {
	// 合约代码
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// 订阅的K线周期
	PeriodList []PeriodType `protobuf:"varint,2,rep,packed,name=periodList,enum=pb.PeriodType" json:"periodList,omitempty"`
}

func (m *ReqSubscribeMarketData) Reset()                    { *m = ReqSubscribeMarketData{} }
func (m *ReqSubscribeMarketData) String() string            { return proto.CompactTextString(m) }
func (*ReqSubscribeMarketData) ProtoMessage()               {}
func (*ReqSubscribeMarketData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *ReqSubscribeMarketData) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *ReqSubscribeMarketData) GetPeriodList() []PeriodType {
	if m != nil {
		return m.PeriodList
	}
	return nil
}

// 返回订阅行情
type RspSubscribeMarketData struct {
}

func (m *RspSubscribeMarketData) Reset()                    { *m = RspSubscribeMarketData{} }
func (m *RspSubscribeMarketData) String() string            { return proto.CompactTextString(m) }
func (*RspSubscribeMarketData) ProtoMessage()               {}
func (*RspSubscribeMarketData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

// 推送订阅行情更新事件
type RtnMarketDataUpdate struct {
	// 最新盘口
	Tick *MarketDataSnapshot `protobuf:"bytes,1,opt,name=tick" json:"tick,omitempty"`
	// 最新一根K线
	KlineList []*Kline `protobuf:"bytes,2,rep,name=kline_list,json=klineList" json:"kline_list,omitempty"`
}

func (m *RtnMarketDataUpdate) Reset()                    { *m = RtnMarketDataUpdate{} }
func (m *RtnMarketDataUpdate) String() string            { return proto.CompactTextString(m) }
func (*RtnMarketDataUpdate) ProtoMessage()               {}
func (*RtnMarketDataUpdate) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *RtnMarketDataUpdate) GetTick() *MarketDataSnapshot {
	if m != nil {
		return m.Tick
	}
	return nil
}

func (m *RtnMarketDataUpdate) GetKlineList() []*Kline {
	if m != nil {
		return m.KlineList
	}
	return nil
}

// tick序列
type TickSeries struct {
	Symbol     *Symbol               `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	TradingDay int32                 `protobuf:"varint,2,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	List       []*MarketDataSnapshot `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
}

func (m *TickSeries) Reset()                    { *m = TickSeries{} }
func (m *TickSeries) String() string            { return proto.CompactTextString(m) }
func (*TickSeries) ProtoMessage()               {}
func (*TickSeries) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *TickSeries) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *TickSeries) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *TickSeries) GetList() []*MarketDataSnapshot {
	if m != nil {
		return m.List
	}
	return nil
}

type SimpleTick struct {
	Time   int64   `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Price  float64 `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
	Volume float64 `protobuf:"fixed64,3,opt,name=volume" json:"volume,omitempty"`
}

func (m *SimpleTick) Reset()                    { *m = SimpleTick{} }
func (m *SimpleTick) String() string            { return proto.CompactTextString(m) }
func (*SimpleTick) ProtoMessage()               {}
func (*SimpleTick) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *SimpleTick) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SimpleTick) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SimpleTick) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type SimpleTickSeries struct {
	Symbol     *Symbol       `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	TradingDay int32         `protobuf:"varint,2,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	List       []*SimpleTick `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
}

func (m *SimpleTickSeries) Reset()                    { *m = SimpleTickSeries{} }
func (m *SimpleTickSeries) String() string            { return proto.CompactTextString(m) }
func (*SimpleTickSeries) ProtoMessage()               {}
func (*SimpleTickSeries) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *SimpleTickSeries) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *SimpleTickSeries) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *SimpleTickSeries) GetList() []*SimpleTick {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*OrderBook)(nil), "pb.OrderBook")
	proto.RegisterType((*MarketDataSnapshot)(nil), "pb.MarketDataSnapshot")
	proto.RegisterType((*MdsList)(nil), "pb.MdsList")
	proto.RegisterType((*OptionTMarket)(nil), "pb.OptionTMarket")
	proto.RegisterType((*SimpleTickForTQuote)(nil), "pb.SimpleTickForTQuote")
	proto.RegisterType((*OptionTQuoteItem)(nil), "pb.OptionTQuoteItem")
	proto.RegisterType((*OptionTQuoteItemList)(nil), "pb.OptionTQuoteItemList")
	proto.RegisterType((*Kline)(nil), "pb.Kline")
	proto.RegisterType((*KlineSeries)(nil), "pb.KlineSeries")
	proto.RegisterType((*ReqSubscribeMarketData)(nil), "pb.ReqSubscribeMarketData")
	proto.RegisterType((*RspSubscribeMarketData)(nil), "pb.RspSubscribeMarketData")
	proto.RegisterType((*RtnMarketDataUpdate)(nil), "pb.RtnMarketDataUpdate")
	proto.RegisterType((*TickSeries)(nil), "pb.TickSeries")
	proto.RegisterType((*SimpleTick)(nil), "pb.SimpleTick")
	proto.RegisterType((*SimpleTickSeries)(nil), "pb.SimpleTickSeries")
}

func init() { proto.RegisterFile("market_data.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1019 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xeb, 0x8e, 0xe3, 0x34,
	0x14, 0x56, 0x7a, 0xdb, 0xc9, 0x69, 0x3b, 0x17, 0x4f, 0xe9, 0x86, 0x41, 0x2b, 0x86, 0x20, 0x50,
	0x77, 0x41, 0x15, 0x1a, 0xb4, 0x2f, 0x00, 0xa3, 0x95, 0x56, 0xec, 0xb2, 0x43, 0x5a, 0xf8, 0x1b,
	0x39, 0x89, 0x69, 0xad, 0x5c, 0x6c, 0x12, 0x77, 0xbb, 0x23, 0xc4, 0x73, 0xf0, 0x02, 0xf0, 0x10,
	0xfc, 0xe4, 0x2d, 0x78, 0x1c, 0xe4, 0x63, 0x37, 0xbd, 0xc3, 0x20, 0xf1, 0xcf, 0x3e, 0xe7, 0xb3,
	0xcf, 0xf9, 0x7c, 0xce, 0xf9, 0x12, 0xb8, 0xc8, 0x69, 0x99, 0x32, 0x15, 0x26, 0x54, 0xd1, 0xb1,
	0x2c, 0x85, 0x12, 0xa4, 0x21, 0xa3, 0xab, 0x5e, 0x2c, 0xf2, 0x5c, 0x14, 0xc6, 0xe2, 0xe7, 0xe0,
	0xbe, 0x29, 0x13, 0x56, 0x7e, 0x25, 0x44, 0x4a, 0xce, 0xa1, 0x49, 0xab, 0xd4, 0x73, 0xae, 0x9d,
	0x91, 0x13, 0xe8, 0x25, 0x79, 0x02, 0x40, 0xab, 0x34, 0x7c, 0x2b, 0xb2, 0x45, 0xce, 0xbc, 0x06,
	0x3a, 0x5c, 0x5a, 0xa5, 0x3f, 0xa0, 0x41, 0x1f, 0x88, 0x78, 0xe2, 0x35, 0xcd, 0x81, 0x88, 0x27,
	0xfa, 0x40, 0xc4, 0x93, 0xd5, 0x81, 0x96, 0x39, 0x10, 0xf1, 0xc4, 0x1c, 0xf0, 0x7f, 0xef, 0x00,
	0x79, 0x8d, 0x69, 0xdd, 0x52, 0x45, 0x27, 0x05, 0x95, 0xd5, 0x5c, 0x28, 0xe2, 0x43, 0xa7, 0xba,
	0xcf, 0x23, 0x91, 0x61, 0xec, 0xee, 0x0d, 0x8c, 0x65, 0x34, 0x9e, 0xa0, 0x25, 0xb0, 0x1e, 0x42,
	0xa0, 0xa5, 0xb8, 0x4d, 0xa2, 0x19, 0xe0, 0x9a, 0xf8, 0xd0, 0xcb, 0x79, 0x96, 0xf1, 0x8a, 0xc5,
	0xa2, 0x48, 0x2a, 0x4c, 0xa4, 0x1d, 0x6c, 0xd9, 0xf4, 0x39, 0x21, 0x59, 0x61, 0x73, 0xc1, 0xb5,
	0xb6, 0xcd, 0xf9, 0x6c, 0xee, 0xb5, 0x8d, 0x4d, 0xaf, 0x35, 0x97, 0x4c, 0x2c, 0xbd, 0x8e, 0xe1,
	0x92, 0x89, 0x25, 0x19, 0x40, 0x3b, 0xce, 0x44, 0xc5, 0xbc, 0x47, 0x68, 0x33, 0x1b, 0x32, 0x84,
	0x8e, 0x65, 0x77, 0x82, 0x66, 0xbb, 0xd3, 0x76, 0x9a, 0x8b, 0x45, 0xa1, 0x3c, 0xd7, 0xd8, 0xcd,
	0x8e, 0x5c, 0xc1, 0x89, 0x14, 0x15, 0x57, 0x5c, 0x14, 0x1e, 0xa0, 0xa7, 0xde, 0xeb, 0x08, 0xb2,
	0xe4, 0x31, 0xf3, 0xba, 0x26, 0x02, 0x6e, 0xc8, 0x07, 0xe0, 0xca, 0x92, 0x85, 0x26, 0x76, 0xcf,
	0x1e, 0x29, 0xd9, 0xd7, 0x18, 0xfe, 0x0b, 0x18, 0x68, 0x67, 0xc5, 0x94, 0xca, 0x58, 0xce, 0x0a,
	0x15, 0x9a, 0x1b, 0xfa, 0x88, 0x23, 0xb2, 0x64, 0x93, 0xda, 0x75, 0x87, 0xd7, 0x7d, 0x04, 0x3d,
	0x7d, 0xa2, 0x4e, 0xe2, 0x14, 0x91, 0x5d, 0x59, 0xb2, 0xbb, 0x55, 0x1e, 0x4f, 0xe1, 0x7c, 0xef,
	0xc2, 0x33, 0x84, 0x9d, 0x55, 0x3b, 0xb7, 0x3d, 0x83, 0x8b, 0x85, 0x94, 0xac, 0x0c, 0x33, 0x9e,
	0xf3, 0x15, 0xf6, 0xdc, 0x60, 0xd1, 0xf1, 0x4a, 0xdb, 0x6b, 0x6c, 0x26, 0x96, 0x3b, 0xd8, 0x0b,
	0x83, 0x45, 0xc7, 0x06, 0xd6, 0x92, 0x4e, 0x58, 0xa6, 0xa8, 0x47, 0x6a, 0xd2, 0xb7, 0x7a, 0xaf,
	0xdf, 0xc9, 0x38, 0x2e, 0xcd, 0x3b, 0xe1, 0x86, 0x7c, 0x0c, 0x7d, 0xfa, 0x96, 0x95, 0x74, 0xc6,
	0xec, 0xd5, 0x03, 0xf4, 0xf6, 0xac, 0xd1, 0xdc, 0xfb, 0x21, 0x74, 0x55, 0x49, 0x13, 0x5e, 0xcc,
	0xc2, 0x84, 0xde, 0x7b, 0xef, 0x61, 0x87, 0x80, 0x35, 0xdd, 0xd2, 0x7b, 0xf2, 0x1c, 0xce, 0x84,
	0x9e, 0x80, 0x30, 0x12, 0x22, 0x0d, 0x33, 0x5e, 0x29, 0x6f, 0x78, 0xdd, 0x1c, 0x75, 0x6f, 0xfa,
	0xba, 0x09, 0xeb, 0xe1, 0x08, 0xfa, 0x62, 0xb5, 0x7c, 0xc5, 0x2b, 0xa5, 0x5b, 0xa8, 0xa0, 0x39,
	0xf3, 0x1e, 0x5f, 0x3b, 0x23, 0x37, 0xc0, 0x35, 0xf9, 0x04, 0x4e, 0xd9, 0x3b, 0x56, 0xc6, 0xbc,
	0x5a, 0x65, 0xe4, 0x61, 0x46, 0xfd, 0x95, 0xb5, 0x2e, 0x88, 0xe9, 0x19, 0xcb, 0xf6, 0x7d, 0x53,
	0x10, 0x63, 0x43, 0xc2, 0xfe, 0x73, 0x78, 0xf4, 0x3a, 0xa9, 0x30, 0xd0, 0x33, 0x68, 0x61, 0x52,
	0x0e, 0x26, 0x35, 0xd4, 0x49, 0xed, 0x4f, 0x50, 0x80, 0x18, 0x3f, 0x87, 0xfe, 0x1b, 0xa9, 0x2b,
	0x3a, 0x35, 0x10, 0x32, 0x86, 0x4e, 0x4c, 0xb3, 0x6c, 0x9a, 0xda, 0xc1, 0x3a, 0x76, 0xdc, 0xa2,
	0xc8, 0xe7, 0xd0, 0x96, 0x0b, 0x35, 0x4d, 0x71, 0xca, 0x8e, 0xc3, 0x0d, 0xc8, 0xff, 0xc3, 0x81,
	0xcb, 0x09, 0xcf, 0x65, 0xc6, 0xa6, 0x3c, 0x4e, 0x5f, 0x88, 0x72, 0xfa, 0xdd, 0x42, 0x28, 0xf6,
	0xa0, 0x71, 0xae, 0x5b, 0xbf, 0xb1, 0xd9, 0xfa, 0x3e, 0xf4, 0x17, 0x32, 0x4c, 0xc4, 0xb2, 0x08,
	0x4b, 0xaa, 0xb8, 0xb0, 0xd2, 0xd2, 0x5d, 0xc8, 0x5b, 0xb1, 0x2c, 0x02, 0x6d, 0x3a, 0x3a, 0x01,
	0xad, 0xa3, 0x13, 0xb0, 0xaa, 0x55, 0x7b, 0x5d, 0x2b, 0xff, 0x4f, 0x07, 0xce, 0xed, 0x5b, 0x61,
	0xd2, 0x2f, 0x15, 0xcb, 0x0f, 0x14, 0xd0, 0x39, 0x54, 0xc0, 0xcf, 0xa0, 0xa5, 0xdf, 0xcb, 0x3e,
	0xd2, 0x63, 0x64, 0xb7, 0xff, 0x0c, 0x01, 0x82, 0xc8, 0x53, 0x68, 0xca, 0x85, 0x42, 0x22, 0xff,
	0x80, 0xd5, 0x18, 0x32, 0x86, 0xcb, 0xed, 0xf0, 0xe1, 0x8f, 0x19, 0x9d, 0x21, 0x31, 0x37, 0xb8,
	0xd8, 0xca, 0xe1, 0x45, 0x46, 0x67, 0xfe, 0xaf, 0x0e, 0x0c, 0x76, 0x39, 0x60, 0xcf, 0x5c, 0xc1,
	0x09, 0x7b, 0x17, 0xcf, 0x69, 0x31, 0x33, 0x0c, 0xda, 0x41, 0xbd, 0xd7, 0x53, 0x53, 0xa9, 0x92,
	0xa7, 0x2c, 0xb4, 0x35, 0x6a, 0xe0, 0xf5, 0x3d, 0x63, 0x9c, 0xd4, 0xd5, 0xc9, 0x45, 0xa1, 0xe6,
	0x98, 0xb6, 0x1b, 0x98, 0x0d, 0x19, 0xd9, 0x56, 0x6c, 0x61, 0x2b, 0x0e, 0x70, 0x3e, 0x76, 0xc2,
	0xdb, 0x46, 0xfc, 0xcb, 0x81, 0xf6, 0x37, 0x19, 0x2f, 0x58, 0x2d, 0xdb, 0xce, 0x86, 0x6c, 0xaf,
	0x24, 0xb9, 0x71, 0x40, 0x92, 0x9b, 0xfb, 0x92, 0xdc, 0x3a, 0x20, 0xc9, 0xed, 0xc3, 0x92, 0xdc,
	0x39, 0x22, 0xc9, 0x8f, 0x8e, 0x4a, 0xf2, 0xc9, 0x8e, 0x24, 0xef, 0xe8, 0x85, 0xbb, 0xab, 0x17,
	0xfe, 0x6f, 0x0e, 0x74, 0x91, 0xda, 0x84, 0x95, 0x9c, 0x55, 0x0f, 0x6a, 0xf6, 0x4f, 0xa1, 0x23,
	0x59, 0xc9, 0x45, 0x82, 0x94, 0x4f, 0x6f, 0x4e, 0x35, 0xe6, 0x0e, 0x2d, 0xd3, 0x7b, 0xc9, 0x02,
	0xeb, 0xd5, 0x82, 0x69, 0x56, 0x21, 0x2f, 0xc2, 0xed, 0x8f, 0xda, 0x99, 0x71, 0xbc, 0x2c, 0x26,
	0xf6, 0xbb, 0xf6, 0x64, 0xab, 0x18, 0xae, 0xbe, 0x11, 0xd3, 0xb2, 0x15, 0xc8, 0x60, 0x18, 0xb0,
	0x9f, 0x26, 0x8b, 0xa8, 0x8a, 0x4b, 0x1e, 0xb1, 0xf5, 0x10, 0x3f, 0x28, 0xe1, 0x31, 0x80, 0x89,
	0xa7, 0xdb, 0xc9, 0x6b, 0x5c, 0x37, 0x0f, 0x24, 0xbd, 0x81, 0xf0, 0x3d, 0x18, 0x06, 0x95, 0x3c,
	0x10, 0xcd, 0x4f, 0xe1, 0x32, 0x50, 0xc5, 0xda, 0xf0, 0xbd, 0x4c, 0xa8, 0xd2, 0x9f, 0x86, 0x96,
	0xe2, 0xf1, 0xbf, 0xc9, 0x12, 0x62, 0xc8, 0x08, 0x20, 0xd5, 0xcc, 0x8c, 0x38, 0x37, 0x76, 0xf9,
	0xba, 0xe8, 0xc4, 0x34, 0x7e, 0x01, 0xd0, 0x63, 0xf5, 0x1f, 0x2a, 0xb3, 0x53, 0xee, 0xc6, 0xde,
	0xe7, 0x61, 0x25, 0xbf, 0xcd, 0x07, 0xc8, 0xef, 0xb7, 0x00, 0xeb, 0xd9, 0x3e, 0xd8, 0xf9, 0x87,
	0x55, 0x6f, 0xdd, 0xbf, 0xcd, 0xcd, 0xfe, 0xf5, 0x7f, 0x86, 0xf3, 0xf5, 0x7d, 0xff, 0x27, 0x29,
	0x7f, 0x8b, 0xd4, 0xe9, 0xb6, 0x28, 0x19, 0x32, 0x51, 0x07, 0x7f, 0x10, 0xbf, 0xfc, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x79, 0xdb, 0x8b, 0xa8, 0x47, 0x0a, 0x00, 0x00,
}
