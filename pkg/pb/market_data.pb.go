// Code generated by protoc-gen-go. DO NOT EDIT.
// source: market_data.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OrderBook struct {
	// / 卖价
	Ask float64 `protobuf:"fixed64,1,opt,name=ask" json:"ask,omitempty"`
	// / 卖量
	AskVolume float64 `protobuf:"fixed64,2,opt,name=ask_volume,json=askVolume" json:"ask_volume,omitempty"`
	// / 买价
	Bid float64 `protobuf:"fixed64,3,opt,name=bid" json:"bid,omitempty"`
	// / 买量
	BidVolume float64 `protobuf:"fixed64,4,opt,name=bid_volume,json=bidVolume" json:"bid_volume,omitempty"`
}

func (m *OrderBook) Reset()                    { *m = OrderBook{} }
func (m *OrderBook) String() string            { return proto.CompactTextString(m) }
func (*OrderBook) ProtoMessage()               {}
func (*OrderBook) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *OrderBook) GetAsk() float64 {
	if m != nil {
		return m.Ask
	}
	return 0
}

func (m *OrderBook) GetAskVolume() float64 {
	if m != nil {
		return m.AskVolume
	}
	return 0
}

func (m *OrderBook) GetBid() float64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *OrderBook) GetBidVolume() float64 {
	if m != nil {
		return m.BidVolume
	}
	return 0
}

// 深度行情
type MarketDataSnapshot struct {
	// 合约
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// 时间time_t
	Time int64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	// 毫秒
	Milliseconds int32 `protobuf:"varint,3,opt,name=milliseconds" json:"milliseconds,omitempty"`
	// 开盘
	Open float64 `protobuf:"fixed64,4,opt,name=open" json:"open,omitempty"`
	// 最高
	High float64 `protobuf:"fixed64,5,opt,name=high" json:"high,omitempty"`
	// 最低
	Low float64 `protobuf:"fixed64,6,opt,name=low" json:"low,omitempty"`
	// 收盘
	Close float64 `protobuf:"fixed64,7,opt,name=close" json:"close,omitempty"`
	// 成交量
	Volume float64 `protobuf:"fixed64,8,opt,name=volume" json:"volume,omitempty"`
	// 成交金额
	Amount float64 `protobuf:"fixed64,9,opt,name=amount" json:"amount,omitempty"`
	// 持仓
	Position float64 `protobuf:"fixed64,10,opt,name=position" json:"position,omitempty"`
	// 最新价格
	Price float64 `protobuf:"fixed64,11,opt,name=price" json:"price,omitempty"`
	// 昨收
	PreClose float64 `protobuf:"fixed64,12,opt,name=pre_close,json=preClose" json:"pre_close,omitempty"`
	// 昨结
	PreSettlementPrice float64 `protobuf:"fixed64,13,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	// 昨持仓
	PrePosition float64 `protobuf:"fixed64,14,opt,name=pre_position,json=prePosition" json:"pre_position,omitempty"`
	// 结算价
	SettlementPrice float64 `protobuf:"fixed64,15,opt,name=settlement_price,json=settlementPrice" json:"settlement_price,omitempty"`
	// 涨停
	UpperLimitPrice float64 `protobuf:"fixed64,16,opt,name=upper_limit_price,json=upperLimitPrice" json:"upper_limit_price,omitempty"`
	// 跌停
	LowerLimitPrice float64 `protobuf:"fixed64,17,opt,name=lower_limit_price,json=lowerLimitPrice" json:"lower_limit_price,omitempty"`
	// 昨虚实
	PreDelta float64 `protobuf:"fixed64,18,opt,name=pre_delta,json=preDelta" json:"pre_delta,omitempty"`
	// 今虚实
	Delta float64 `protobuf:"fixed64,19,opt,name=delta" json:"delta,omitempty"`
	// 均价
	AveragePrice float64 `protobuf:"fixed64,20,opt,name=average_price,json=averagePrice" json:"average_price,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,21,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	// 盘口
	OrderBookList []*OrderBook `protobuf:"bytes,22,rep,name=order_book_list,json=orderBookList" json:"order_book_list,omitempty"`
	// 合约名称
	Name string `protobuf:"bytes,23,opt,name=name" json:"name,omitempty"`
	// 执行价
	ExercisePrice float64 `protobuf:"fixed64,24,opt,name=exercise_price,json=exercisePrice" json:"exercise_price,omitempty"`
}

func (m *MarketDataSnapshot) Reset()                    { *m = MarketDataSnapshot{} }
func (m *MarketDataSnapshot) String() string            { return proto.CompactTextString(m) }
func (*MarketDataSnapshot) ProtoMessage()               {}
func (*MarketDataSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *MarketDataSnapshot) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *MarketDataSnapshot) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MarketDataSnapshot) GetMilliseconds() int32 {
	if m != nil {
		return m.Milliseconds
	}
	return 0
}

func (m *MarketDataSnapshot) GetOpen() float64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *MarketDataSnapshot) GetHigh() float64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *MarketDataSnapshot) GetLow() float64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *MarketDataSnapshot) GetClose() float64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *MarketDataSnapshot) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *MarketDataSnapshot) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MarketDataSnapshot) GetPosition() float64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *MarketDataSnapshot) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *MarketDataSnapshot) GetPreClose() float64 {
	if m != nil {
		return m.PreClose
	}
	return 0
}

func (m *MarketDataSnapshot) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetPrePosition() float64 {
	if m != nil {
		return m.PrePosition
	}
	return 0
}

func (m *MarketDataSnapshot) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetUpperLimitPrice() float64 {
	if m != nil {
		return m.UpperLimitPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetLowerLimitPrice() float64 {
	if m != nil {
		return m.LowerLimitPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetPreDelta() float64 {
	if m != nil {
		return m.PreDelta
	}
	return 0
}

func (m *MarketDataSnapshot) GetDelta() float64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *MarketDataSnapshot) GetAveragePrice() float64 {
	if m != nil {
		return m.AveragePrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *MarketDataSnapshot) GetOrderBookList() []*OrderBook {
	if m != nil {
		return m.OrderBookList
	}
	return nil
}

func (m *MarketDataSnapshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MarketDataSnapshot) GetExercisePrice() float64 {
	if m != nil {
		return m.ExercisePrice
	}
	return 0
}

// MdsList 行情列表
type MdsList struct {
	List []*MarketDataSnapshot `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *MdsList) Reset()                    { *m = MdsList{} }
func (m *MdsList) String() string            { return proto.CompactTextString(m) }
func (*MdsList) ProtoMessage()               {}
func (*MdsList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *MdsList) GetList() []*MarketDataSnapshot {
	if m != nil {
		return m.List
	}
	return nil
}

// 期权T型
type OptionTMarket struct {
	// call报价
	CallTk *MarketDataSnapshot `protobuf:"bytes,1,opt,name=callTk" json:"callTk,omitempty"`
	// put报价
	PutTk *MarketDataSnapshot `protobuf:"bytes,2,opt,name=putTk" json:"putTk,omitempty"`
}

func (m *OptionTMarket) Reset()                    { *m = OptionTMarket{} }
func (m *OptionTMarket) String() string            { return proto.CompactTextString(m) }
func (*OptionTMarket) ProtoMessage()               {}
func (*OptionTMarket) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *OptionTMarket) GetCallTk() *MarketDataSnapshot {
	if m != nil {
		return m.CallTk
	}
	return nil
}

func (m *OptionTMarket) GetPutTk() *MarketDataSnapshot {
	if m != nil {
		return m.PutTk
	}
	return nil
}

// 简易期权T型报价
type SimpleTickForTQuote struct {
	Symbol             *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Price              float64 `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
	UpDownRatio        float64 `protobuf:"fixed64,3,opt,name=up_down_ratio,json=upDownRatio" json:"up_down_ratio,omitempty"`
	PreSettlementPrice float64 `protobuf:"fixed64,4,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	Name               string  `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *SimpleTickForTQuote) Reset()                    { *m = SimpleTickForTQuote{} }
func (m *SimpleTickForTQuote) String() string            { return proto.CompactTextString(m) }
func (*SimpleTickForTQuote) ProtoMessage()               {}
func (*SimpleTickForTQuote) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *SimpleTickForTQuote) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *SimpleTickForTQuote) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SimpleTickForTQuote) GetUpDownRatio() float64 {
	if m != nil {
		return m.UpDownRatio
	}
	return 0
}

func (m *SimpleTickForTQuote) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *SimpleTickForTQuote) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// T型报价的一行
type OptionTQuoteItem struct {
	ExercisePrice     float64              `protobuf:"fixed64,1,opt,name=exercise_price,json=exercisePrice" json:"exercise_price,omitempty"`
	Call              *SimpleTickForTQuote `protobuf:"bytes,2,opt,name=call" json:"call,omitempty"`
	Put               *SimpleTickForTQuote `protobuf:"bytes,3,opt,name=put" json:"put,omitempty"`
	ExercisePriceFlag string               `protobuf:"bytes,4,opt,name=exercise_price_flag,json=exercisePriceFlag" json:"exercise_price_flag,omitempty"`
}

func (m *OptionTQuoteItem) Reset()                    { *m = OptionTQuoteItem{} }
func (m *OptionTQuoteItem) String() string            { return proto.CompactTextString(m) }
func (*OptionTQuoteItem) ProtoMessage()               {}
func (*OptionTQuoteItem) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *OptionTQuoteItem) GetExercisePrice() float64 {
	if m != nil {
		return m.ExercisePrice
	}
	return 0
}

func (m *OptionTQuoteItem) GetCall() *SimpleTickForTQuote {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *OptionTQuoteItem) GetPut() *SimpleTickForTQuote {
	if m != nil {
		return m.Put
	}
	return nil
}

func (m *OptionTQuoteItem) GetExercisePriceFlag() string {
	if m != nil {
		return m.ExercisePriceFlag
	}
	return ""
}

// OptionTQuoteItemList 列表
type OptionTQuoteItemList struct {
	Exchange     int32               `protobuf:"varint,1,opt,name=exchange" json:"exchange,omitempty"`
	StrikeSymbol string              `protobuf:"bytes,2,opt,name=strike_symbol,json=strikeSymbol" json:"strike_symbol,omitempty"`
	Month        string              `protobuf:"bytes,3,opt,name=month" json:"month,omitempty"`
	List         []*OptionTQuoteItem `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
}

func (m *OptionTQuoteItemList) Reset()                    { *m = OptionTQuoteItemList{} }
func (m *OptionTQuoteItemList) String() string            { return proto.CompactTextString(m) }
func (*OptionTQuoteItemList) ProtoMessage()               {}
func (*OptionTQuoteItemList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *OptionTQuoteItemList) GetExchange() int32 {
	if m != nil {
		return m.Exchange
	}
	return 0
}

func (m *OptionTQuoteItemList) GetStrikeSymbol() string {
	if m != nil {
		return m.StrikeSymbol
	}
	return ""
}

func (m *OptionTQuoteItemList) GetMonth() string {
	if m != nil {
		return m.Month
	}
	return ""
}

func (m *OptionTQuoteItemList) GetList() []*OptionTQuoteItem {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*OrderBook)(nil), "pb.OrderBook")
	proto.RegisterType((*MarketDataSnapshot)(nil), "pb.MarketDataSnapshot")
	proto.RegisterType((*MdsList)(nil), "pb.MdsList")
	proto.RegisterType((*OptionTMarket)(nil), "pb.OptionTMarket")
	proto.RegisterType((*SimpleTickForTQuote)(nil), "pb.SimpleTickForTQuote")
	proto.RegisterType((*OptionTQuoteItem)(nil), "pb.OptionTQuoteItem")
	proto.RegisterType((*OptionTQuoteItemList)(nil), "pb.OptionTQuoteItemList")
}

func init() { proto.RegisterFile("market_data.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x86, 0xe2, 0x9f, 0xc6, 0xc7, 0x76, 0x13, 0x33, 0x5e, 0x2a, 0x64, 0x18, 0x96, 0x69, 0x18,
	0xe0, 0x76, 0x83, 0x31, 0x74, 0xe8, 0x0b, 0x6c, 0x46, 0x81, 0x01, 0x2d, 0xda, 0xc9, 0xc6, 0x6e,
	0x05, 0x4a, 0xe2, 0x6c, 0x42, 0x94, 0x48, 0x90, 0x54, 0xdd, 0xdc, 0xee, 0x25, 0xf6, 0x2c, 0xbb,
	0xdc, 0x9b, 0x0d, 0x3c, 0xa4, 0xb5, 0xc6, 0x89, 0x87, 0xde, 0xf1, 0x7c, 0xe7, 0x3b, 0xff, 0xe7,
	0x48, 0x30, 0xab, 0xa9, 0xae, 0x98, 0xcd, 0x4a, 0x6a, 0xe9, 0x52, 0x69, 0x69, 0x25, 0x39, 0x53,
	0xf9, 0xcd, 0xa4, 0x90, 0x75, 0x2d, 0x1b, 0x8f, 0x24, 0x35, 0x8c, 0xde, 0xe9, 0x92, 0xe9, 0x9f,
	0xa5, 0xac, 0xc8, 0x25, 0xf4, 0xa8, 0xa9, 0xe2, 0xe8, 0x36, 0x5a, 0x44, 0xa9, 0x7b, 0x92, 0xaf,
	0x00, 0xa8, 0xa9, 0xb2, 0x0f, 0x52, 0xb4, 0x35, 0x8b, 0xcf, 0x50, 0x31, 0xa2, 0xa6, 0xfa, 0x1d,
	0x01, 0x67, 0x90, 0xf3, 0x32, 0xee, 0x79, 0x83, 0x9c, 0x97, 0xce, 0x20, 0xe7, 0xe5, 0xc1, 0xa0,
	0xef, 0x0d, 0x72, 0x5e, 0x7a, 0x83, 0xe4, 0xcf, 0x21, 0x90, 0xb7, 0x98, 0xd6, 0x8a, 0x5a, 0xba,
	0x6e, 0xa8, 0x32, 0x3b, 0x69, 0x49, 0x02, 0x43, 0x73, 0x57, 0xe7, 0x52, 0x60, 0xec, 0xf1, 0x4b,
	0x58, 0xaa, 0x7c, 0xb9, 0x46, 0x24, 0x0d, 0x1a, 0x42, 0xa0, 0x6f, 0x79, 0x48, 0xa2, 0x97, 0xe2,
	0x9b, 0x24, 0x30, 0xa9, 0xb9, 0x10, 0xdc, 0xb0, 0x42, 0x36, 0xa5, 0xc1, 0x44, 0x06, 0xe9, 0x3d,
	0xcc, 0xd9, 0x49, 0xc5, 0x9a, 0x90, 0x0b, 0xbe, 0x1d, 0xb6, 0xe3, 0xdb, 0x5d, 0x3c, 0xf0, 0x98,
	0x7b, 0xbb, 0x5a, 0x84, 0xdc, 0xc7, 0x43, 0x5f, 0x8b, 0x90, 0x7b, 0x32, 0x87, 0x41, 0x21, 0xa4,
	0x61, 0xf1, 0x13, 0xc4, 0xbc, 0x40, 0xae, 0x61, 0x18, 0xaa, 0x3b, 0x47, 0x38, 0x48, 0x0e, 0xa7,
	0xb5, 0x6c, 0x1b, 0x1b, 0x8f, 0x3c, 0xee, 0x25, 0x72, 0x03, 0xe7, 0x4a, 0x1a, 0x6e, 0xb9, 0x6c,
	0x62, 0x40, 0x4d, 0x27, 0xbb, 0x08, 0x4a, 0xf3, 0x82, 0xc5, 0x63, 0x1f, 0x01, 0x05, 0xf2, 0x25,
	0x8c, 0x94, 0x66, 0x99, 0x8f, 0x3d, 0x09, 0x26, 0x9a, 0xfd, 0x82, 0xe1, 0x7f, 0x84, 0xb9, 0x53,
	0x1a, 0x66, 0xad, 0x60, 0x35, 0x6b, 0x6c, 0xe6, 0x3d, 0x4c, 0x91, 0x47, 0x94, 0x66, 0xeb, 0x4e,
	0xf5, 0x1e, 0xdd, 0x7d, 0x03, 0x13, 0x67, 0xd1, 0x25, 0xf1, 0x14, 0x99, 0x63, 0xa5, 0xd9, 0xfb,
	0x43, 0x1e, 0xcf, 0xe1, 0xf2, 0x81, 0xc3, 0x0b, 0xa4, 0x5d, 0x98, 0x23, 0x6f, 0x2f, 0x60, 0xd6,
	0x2a, 0xc5, 0x74, 0x26, 0x78, 0xcd, 0x0f, 0xdc, 0x4b, 0xcf, 0x45, 0xc5, 0x1b, 0x87, 0x77, 0x5c,
	0x21, 0xf7, 0x47, 0xdc, 0x99, 0xe7, 0xa2, 0xe2, 0x13, 0x6e, 0x28, 0xba, 0x64, 0xc2, 0xd2, 0x98,
	0x74, 0x45, 0xaf, 0x9c, 0xec, 0xfa, 0xe4, 0x15, 0x57, 0xbe, 0x4f, 0x28, 0x90, 0x6f, 0x61, 0x4a,
	0x3f, 0x30, 0x4d, 0xb7, 0x2c, 0xb8, 0x9e, 0xa3, 0x76, 0x12, 0x40, 0xef, 0xf7, 0x6b, 0x18, 0x5b,
	0x4d, 0x4b, 0xde, 0x6c, 0xb3, 0x92, 0xde, 0xc5, 0x5f, 0xe0, 0x86, 0x40, 0x80, 0x56, 0xf4, 0x8e,
	0xbc, 0x82, 0x0b, 0xe9, 0x2e, 0x20, 0xcb, 0xa5, 0xac, 0x32, 0xc1, 0x8d, 0x8d, 0xaf, 0x6f, 0x7b,
	0x8b, 0xf1, 0xcb, 0xa9, 0x5b, 0xc2, 0xee, 0x38, 0xd2, 0xa9, 0x3c, 0x3c, 0xdf, 0x70, 0x63, 0xdd,
	0x0a, 0x35, 0xb4, 0x66, 0xf1, 0xb3, 0xdb, 0x68, 0x31, 0x4a, 0xf1, 0x4d, 0xbe, 0x83, 0xa7, 0xec,
	0x23, 0xd3, 0x05, 0x37, 0x87, 0x8c, 0x62, 0xcc, 0x68, 0x7a, 0x40, 0x31, 0xa5, 0xe4, 0x15, 0x3c,
	0x79, 0x5b, 0x1a, 0xf4, 0xf2, 0x02, 0xfa, 0x18, 0x31, 0xc2, 0x88, 0xd7, 0x2e, 0xe2, 0xc3, 0xf3,
	0x48, 0x91, 0x93, 0xd4, 0x30, 0x7d, 0xa7, 0xdc, 0xb8, 0x36, 0x9e, 0x42, 0x96, 0x30, 0x2c, 0xa8,
	0x10, 0x9b, 0x2a, 0x5c, 0xcd, 0x29, 0xf3, 0xc0, 0x22, 0x3f, 0xc0, 0x40, 0xb5, 0x76, 0x53, 0xe1,
	0x09, 0x9d, 0xa6, 0x7b, 0x52, 0xf2, 0x77, 0x04, 0x57, 0x6b, 0x5e, 0x2b, 0xc1, 0x36, 0xbc, 0xa8,
	0x5e, 0x4b, 0xbd, 0xf9, 0xad, 0x95, 0x96, 0x7d, 0xd6, 0xad, 0x76, 0x7b, 0x7d, 0xf6, 0xe9, 0x5e,
	0x27, 0x30, 0x6d, 0x55, 0x56, 0xca, 0x7d, 0x93, 0x69, 0x6a, 0xb9, 0x0c, 0xdf, 0x8d, 0x71, 0xab,
	0x56, 0x72, 0xdf, 0xa4, 0x0e, 0x3a, 0xb9, 0xde, 0xfd, 0x93, 0xeb, 0x7d, 0x18, 0xc4, 0xe0, 0xbf,
	0x41, 0x24, 0xff, 0x44, 0x70, 0x19, 0x7a, 0x85, 0x49, 0xff, 0x6a, 0x59, 0xfd, 0xc8, 0x74, 0xa2,
	0x47, 0xa6, 0x43, 0xbe, 0x87, 0xbe, 0xeb, 0x57, 0x68, 0xd2, 0x33, 0xac, 0xee, 0x61, 0x1b, 0x52,
	0x24, 0x91, 0xe7, 0xd0, 0x53, 0xad, 0xc5, 0x42, 0xfe, 0x87, 0xeb, 0x38, 0x64, 0x09, 0x57, 0xf7,
	0xc3, 0x67, 0x7f, 0x08, 0xba, 0xc5, 0xc2, 0x46, 0xe9, 0xec, 0x5e, 0x0e, 0xaf, 0x05, 0xdd, 0x26,
	0x7f, 0x45, 0x30, 0x3f, 0xae, 0x01, 0x77, 0xe6, 0x06, 0xce, 0xd9, 0xc7, 0x62, 0x47, 0x9b, 0xad,
	0xaf, 0x60, 0x90, 0x76, 0xb2, 0x3b, 0x09, 0x63, 0x35, 0xaf, 0x58, 0x16, 0x66, 0x74, 0x86, 0xee,
	0x27, 0x1e, 0x5c, 0x77, 0xd3, 0xa9, 0x65, 0x63, 0x77, 0x98, 0xf6, 0x28, 0xf5, 0x02, 0x59, 0x84,
	0x55, 0xec, 0xe3, 0x2a, 0xce, 0x71, 0xf9, 0x8f, 0xc2, 0xfb, 0x45, 0xcc, 0x87, 0xf8, 0xeb, 0xf8,
	0xe9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0xf3, 0xf7, 0xa4, 0x61, 0x06, 0x00, 0x00,
}
