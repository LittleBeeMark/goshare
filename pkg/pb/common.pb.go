// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExchangeType int32

const (
	/// 上海期货交易所
	ExchangeType_SHFE ExchangeType = 0
	/// 郑州商品交易所
	ExchangeType_CZCE ExchangeType = 1
	/// 大连商品期货交易所
	ExchangeType_DCE ExchangeType = 2
	/// 中金所
	ExchangeType_CFFEX ExchangeType = 3
	/// 上海证券交易所
	ExchangeType_SSE ExchangeType = 4
	/// 深圳证券交易所
	ExchangeType_SZE ExchangeType = 5
	/// 香港证券交易所
	ExchangeType_HKG ExchangeType = 6
	/// 香港期货交易所
	ExchangeType_HKFE ExchangeType = 7
	/// 各类指数
	ExchangeType_INDEX ExchangeType = 8
	/// 上证期权
	ExchangeType_OPTION_SSE ExchangeType = 9
	/// NEW YORK MERCANTILE EXCHANGE
	ExchangeType_NYME ExchangeType = 10
	/// CME GLOBEX
	ExchangeType_GLBX ExchangeType = 11
	/// cbot
	ExchangeType_CBOT ExchangeType = 12
	/// cme
	ExchangeType_CME ExchangeType = 13
	/// comex
	ExchangeType_COMEX ExchangeType = 14
	/// eurex
	ExchangeType_EUREX ExchangeType = 15
	///
	ExchangeType_IPE ExchangeType = 16
	/// liffe
	ExchangeType_LIFFE ExchangeType = 17
	/// LME
	ExchangeType_LME ExchangeType = 18
	/// SGX
	ExchangeType_SGX ExchangeType = 19
	// demo ex
	ExchangeType_DEMO ExchangeType = 20
	// INE
	ExchangeType_INE ExchangeType = 21
	/// 未知
	ExchangeType_INVALIDEX ExchangeType = 22
)

var ExchangeType_name = map[int32]string{
	0:  "SHFE",
	1:  "CZCE",
	2:  "DCE",
	3:  "CFFEX",
	4:  "SSE",
	5:  "SZE",
	6:  "HKG",
	7:  "HKFE",
	8:  "INDEX",
	9:  "OPTION_SSE",
	10: "NYME",
	11: "GLBX",
	12: "CBOT",
	13: "CME",
	14: "COMEX",
	15: "EUREX",
	16: "IPE",
	17: "LIFFE",
	18: "LME",
	19: "SGX",
	20: "DEMO",
	21: "INE",
	22: "INVALIDEX",
}

var ExchangeType_value = map[string]int32{
	"SHFE":       0,
	"CZCE":       1,
	"DCE":        2,
	"CFFEX":      3,
	"SSE":        4,
	"SZE":        5,
	"HKG":        6,
	"HKFE":       7,
	"INDEX":      8,
	"OPTION_SSE": 9,
	"NYME":       10,
	"GLBX":       11,
	"CBOT":       12,
	"CME":        13,
	"COMEX":      14,
	"EUREX":      15,
	"IPE":        16,
	"LIFFE":      17,
	"LME":        18,
	"SGX":        19,
	"DEMO":       20,
	"INE":        21,
	"INVALIDEX":  22,
}

func (x ExchangeType) String() string {
	return proto.EnumName(ExchangeType_name, int32(x))
}

func (ExchangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

type ProductType int32

const (
	// 未知
	ProductType_PT_UNKOWN ProductType = 0
	// 期货
	ProductType_PT_FUTURE ProductType = 1
	// 股票
	ProductType_PT_STOCK ProductType = 2
	// 债券
	ProductType_PT_BOND ProductType = 3
	// 组合
	ProductType_PT_COMBINATION ProductType = 4
	// 期权
	ProductType_PT_OPTION ProductType = 5
	// 期货期权
	ProductType_PT_FUTURE_OPTION ProductType = 6
	// 股票期权
	ProductType_PT_STOCK_OPTION ProductType = 7
	// 上证50ETF期权
	ProductType_PT_SSE_ETF_OPTION ProductType = 8
)

var ProductType_name = map[int32]string{
	0: "PT_UNKOWN",
	1: "PT_FUTURE",
	2: "PT_STOCK",
	3: "PT_BOND",
	4: "PT_COMBINATION",
	5: "PT_OPTION",
	6: "PT_FUTURE_OPTION",
	7: "PT_STOCK_OPTION",
	8: "PT_SSE_ETF_OPTION",
}

var ProductType_value = map[string]int32{
	"PT_UNKOWN":         0,
	"PT_FUTURE":         1,
	"PT_STOCK":          2,
	"PT_BOND":           3,
	"PT_COMBINATION":    4,
	"PT_OPTION":         5,
	"PT_FUTURE_OPTION":  6,
	"PT_STOCK_OPTION":   7,
	"PT_SSE_ETF_OPTION": 8,
}

func (x ProductType) String() string {
	return proto.EnumName(ProductType_name, int32(x))
}

func (ProductType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

type PeriodType int32

const (
	// Tick
	PeriodType_TICK PeriodType = 0
	// 分钟
	PeriodType_M1 PeriodType = 1
	// 3分钟
	PeriodType_M3 PeriodType = 2
	// 5分钟
	PeriodType_M5 PeriodType = 3
	// 10分钟
	PeriodType_M10 PeriodType = 4
	// 15分钟
	PeriodType_M15 PeriodType = 5
	// 30分钟
	PeriodType_M30 PeriodType = 6
	// 小时
	PeriodType_H1 PeriodType = 7
	// 3小时
	PeriodType_H3 PeriodType = 8
	// 日线
	PeriodType_D1 PeriodType = 9
	// 周线
	PeriodType_W1 PeriodType = 10
	// 月线
	PeriodType_MON1 PeriodType = 11
)

var PeriodType_name = map[int32]string{
	0:  "TICK",
	1:  "M1",
	2:  "M3",
	3:  "M5",
	4:  "M10",
	5:  "M15",
	6:  "M30",
	7:  "H1",
	8:  "H3",
	9:  "D1",
	10: "W1",
	11: "MON1",
}

var PeriodType_value = map[string]int32{
	"TICK": 0,
	"M1":   1,
	"M3":   2,
	"M5":   3,
	"M10":  4,
	"M15":  5,
	"M30":  6,
	"H1":   7,
	"H3":   8,
	"D1":   9,
	"W1":   10,
	"MON1": 11,
}

func (x PeriodType) String() string {
	return proto.EnumName(PeriodType_name, int32(x))
}

func (PeriodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

// OptionCallPutType 期权call or put 类型
type OptionCallPutType int32

const (
	OptionCallPutType_OCPT_CALL OptionCallPutType = 0
	OptionCallPutType_OCPT_PUT  OptionCallPutType = 1
)

var OptionCallPutType_name = map[int32]string{
	0: "OCPT_CALL",
	1: "OCPT_PUT",
}

var OptionCallPutType_value = map[string]int32{
	"OCPT_CALL": 0,
	"OCPT_PUT":  1,
}

func (x OptionCallPutType) String() string {
	return proto.EnumName(OptionCallPutType_name, int32(x))
}

func (OptionCallPutType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}

// 行权日类型
type OptionDeliveryDateType int32

const (
	OptionDeliveryDateType_ODDT_EUR OptionDeliveryDateType = 0
)

var OptionDeliveryDateType_name = map[int32]string{
	0: "ODDT_EUR",
}

var OptionDeliveryDateType_value = map[string]int32{
	"ODDT_EUR": 0,
}

func (x OptionDeliveryDateType) String() string {
	return proto.EnumName(OptionDeliveryDateType_name, int32(x))
}

func (OptionDeliveryDateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}

// 平仓手续费算法
type CloseCommissionAlgorithim int32

const (
	// 普通
	CloseCommissionAlgorithim_CCA_NORMAL CloseCommissionAlgorithim = 0
	// 收一次
	CloseCommissionAlgorithim_CCA_ONCE CloseCommissionAlgorithim = 1
	// 隔夜日期
	CloseCommissionAlgorithim_CCA_MULTIPLE_BY_DATE CloseCommissionAlgorithim = 2
)

var CloseCommissionAlgorithim_name = map[int32]string{
	0: "CCA_NORMAL",
	1: "CCA_ONCE",
	2: "CCA_MULTIPLE_BY_DATE",
}

var CloseCommissionAlgorithim_value = map[string]int32{
	"CCA_NORMAL":           0,
	"CCA_ONCE":             1,
	"CCA_MULTIPLE_BY_DATE": 2,
}

func (x CloseCommissionAlgorithim) String() string {
	return proto.EnumName(CloseCommissionAlgorithim_name, int32(x))
}

func (CloseCommissionAlgorithim) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}

type AccountType int32

const (
	AccountType_CN_FUTURE AccountType = 0
	AccountType_CN_STOCK  AccountType = 1
)

var AccountType_name = map[int32]string{
	0: "CN_FUTURE",
	1: "CN_STOCK",
}

var AccountType_value = map[string]int32{
	"CN_FUTURE": 0,
	"CN_STOCK":  1,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}

func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}

type CurrencyType int32

const (
	CurrencyType_CNY CurrencyType = 0
	CurrencyType_USD CurrencyType = 1
)

var CurrencyType_name = map[int32]string{
	0: "CNY",
	1: "USD",
}

var CurrencyType_value = map[string]int32{
	"CNY": 0,
	"USD": 1,
}

func (x CurrencyType) String() string {
	return proto.EnumName(CurrencyType_name, int32(x))
}

func (CurrencyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}

// 交易账号类型
type TradingAccountType int32

const (
	TradingAccountType_TAT_NORMAL     TradingAccountType = 0
	TradingAccountType_TAT_TRAINNING  TradingAccountType = 1
	TradingAccountType_TAT_CTP_MIRROR TradingAccountType = 2
)

var TradingAccountType_name = map[int32]string{
	0: "TAT_NORMAL",
	1: "TAT_TRAINNING",
	2: "TAT_CTP_MIRROR",
}

var TradingAccountType_value = map[string]int32{
	"TAT_NORMAL":     0,
	"TAT_TRAINNING":  1,
	"TAT_CTP_MIRROR": 2,
}

func (x TradingAccountType) String() string {
	return proto.EnumName(TradingAccountType_name, int32(x))
}

func (TradingAccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}

// 合约代码
type Symbol struct {
	Exchange             ExchangeType `protobuf:"varint,1,opt,name=exchange,proto3,enum=pb.ExchangeType" json:"exchange"`
	Code                 string       `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Symbol) Reset()         { *m = Symbol{} }
func (m *Symbol) String() string { return proto.CompactTextString(m) }
func (*Symbol) ProtoMessage()    {}
func (*Symbol) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *Symbol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Symbol.Unmarshal(m, b)
}
func (m *Symbol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Symbol.Marshal(b, m, deterministic)
}
func (m *Symbol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Symbol.Merge(m, src)
}
func (m *Symbol) XXX_Size() int {
	return xxx_messageInfo_Symbol.Size(m)
}
func (m *Symbol) XXX_DiscardUnknown() {
	xxx_messageInfo_Symbol.DiscardUnknown(m)
}

var xxx_messageInfo_Symbol proto.InternalMessageInfo

func (m *Symbol) GetExchange() ExchangeType {
	if m != nil {
		return m.Exchange
	}
	return ExchangeType_SHFE
}

func (m *Symbol) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type SymbolList struct {
	List                 []*Symbol `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SymbolList) Reset()         { *m = SymbolList{} }
func (m *SymbolList) String() string { return proto.CompactTextString(m) }
func (*SymbolList) ProtoMessage()    {}
func (*SymbolList) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

func (m *SymbolList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SymbolList.Unmarshal(m, b)
}
func (m *SymbolList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SymbolList.Marshal(b, m, deterministic)
}
func (m *SymbolList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SymbolList.Merge(m, src)
}
func (m *SymbolList) XXX_Size() int {
	return xxx_messageInfo_SymbolList.Size(m)
}
func (m *SymbolList) XXX_DiscardUnknown() {
	xxx_messageInfo_SymbolList.DiscardUnknown(m)
}

var xxx_messageInfo_SymbolList proto.InternalMessageInfo

func (m *SymbolList) GetList() []*Symbol {
	if m != nil {
		return m.List
	}
	return nil
}

// 品种
type ProductID struct {
	Exchange             ExchangeType `protobuf:"varint,1,opt,name=exchange,proto3,enum=pb.ExchangeType" json:"exchange"`
	Code                 string       `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ProductID) Reset()         { *m = ProductID{} }
func (m *ProductID) String() string { return proto.CompactTextString(m) }
func (*ProductID) ProtoMessage()    {}
func (*ProductID) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

func (m *ProductID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductID.Unmarshal(m, b)
}
func (m *ProductID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductID.Marshal(b, m, deterministic)
}
func (m *ProductID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductID.Merge(m, src)
}
func (m *ProductID) XXX_Size() int {
	return xxx_messageInfo_ProductID.Size(m)
}
func (m *ProductID) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductID.DiscardUnknown(m)
}

var xxx_messageInfo_ProductID proto.InternalMessageInfo

func (m *ProductID) GetExchange() ExchangeType {
	if m != nil {
		return m.Exchange
	}
	return ExchangeType_SHFE
}

func (m *ProductID) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// 经纪商通道
type BrokerRoute struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	MdFrontList          []string `protobuf:"bytes,4,rep,name=md_front_list,json=mdFrontList,proto3" json:"mdFrontList"`
	TradeFrontList       []string `protobuf:"bytes,5,rep,name=trade_front_list,json=tradeFrontList,proto3" json:"tradeFrontList"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrokerRoute) Reset()         { *m = BrokerRoute{} }
func (m *BrokerRoute) String() string { return proto.CompactTextString(m) }
func (*BrokerRoute) ProtoMessage()    {}
func (*BrokerRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}

func (m *BrokerRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrokerRoute.Unmarshal(m, b)
}
func (m *BrokerRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrokerRoute.Marshal(b, m, deterministic)
}
func (m *BrokerRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerRoute.Merge(m, src)
}
func (m *BrokerRoute) XXX_Size() int {
	return xxx_messageInfo_BrokerRoute.Size(m)
}
func (m *BrokerRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerRoute.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerRoute proto.InternalMessageInfo

func (m *BrokerRoute) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BrokerRoute) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BrokerRoute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BrokerRoute) GetMdFrontList() []string {
	if m != nil {
		return m.MdFrontList
	}
	return nil
}

func (m *BrokerRoute) GetTradeFrontList() []string {
	if m != nil {
		return m.TradeFrontList
	}
	return nil
}

type BrokerRouteList struct {
	List                 []*BrokerRoute `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BrokerRouteList) Reset()         { *m = BrokerRouteList{} }
func (m *BrokerRouteList) String() string { return proto.CompactTextString(m) }
func (*BrokerRouteList) ProtoMessage()    {}
func (*BrokerRouteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}

func (m *BrokerRouteList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrokerRouteList.Unmarshal(m, b)
}
func (m *BrokerRouteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrokerRouteList.Marshal(b, m, deterministic)
}
func (m *BrokerRouteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerRouteList.Merge(m, src)
}
func (m *BrokerRouteList) XXX_Size() int {
	return xxx_messageInfo_BrokerRouteList.Size(m)
}
func (m *BrokerRouteList) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerRouteList.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerRouteList proto.InternalMessageInfo

func (m *BrokerRouteList) GetList() []*BrokerRoute {
	if m != nil {
		return m.List
	}
	return nil
}

// 合约行情信息
type InstrumentInfo struct {
	/// 合约名称.
	SymbolName string `protobuf:"bytes,1,opt,name=symbol_name,json=symbolName,proto3" json:"symbolName"`
	/// 是否单边大保
	PositionRank int32 `protobuf:"varint,2,opt,name=position_rank,json=positionRank,proto3" json:"positionRank"`
	/// 更新时间.
	UpdateTime int64 `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"updateTime"`
	// 交易日
	UpdateTradingDay int32 `protobuf:"varint,4,opt,name=update_trading_day,json=updateTradingDay,proto3" json:"updateTradingDay"`
	/// 涨停价.
	UpperLimitPrice float64 `protobuf:"fixed64,5,opt,name=upper_limit_price,json=upperLimitPrice,proto3" json:"upperLimitPrice"`
	/// 跌停价.
	LowerLimitPrice float64 `protobuf:"fixed64,6,opt,name=lower_limit_price,json=lowerLimitPrice,proto3" json:"lowerLimitPrice"`
	// 昨收
	PreClosePrice float64 `protobuf:"fixed64,7,opt,name=pre_close_price,json=preClosePrice,proto3" json:"preClosePrice"`
	// 昨结
	PreSettlementPrice float64 `protobuf:"fixed64,8,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"preSettlementPrice"`
	// 昨成交
	PreVolume int32 `protobuf:"varint,9,opt,name=pre_volume,json=preVolume,proto3" json:"preVolume"`
	// 昨持仓
	PrePosition int32 `protobuf:"varint,10,opt,name=pre_position,json=prePosition,proto3" json:"prePosition"`
	// 今天结算价
	SettlementPrice float64 `protobuf:"fixed64,11,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlementPrice"`
	// 创建日期
	CreateDate int32 `protobuf:"varint,12,opt,name=create_date,json=createDate,proto3" json:"createDate"`
	// 上市日期
	OpenDate int32 `protobuf:"varint,13,opt,name=open_date,json=openDate,proto3" json:"openDate"`
	// 到期日期
	ExpireDate int32 `protobuf:"varint,14,opt,name=expire_date,json=expireDate,proto3" json:"expireDate"`
	// 开始交割日期
	StartDeliverDate int32 `protobuf:"varint,15,opt,name=start_deliver_date,json=startDeliverDate,proto3" json:"startDeliverDate"`
	// 结束交割日期
	EndDeliverDate int32 `protobuf:"varint,16,opt,name=end_deliver_date,json=endDeliverDate,proto3" json:"endDeliverDate"`
	// 是否T+0
	IsCloseTodayAllowed int32 `protobuf:"varint,17,opt,name=is_close_today_allowed,json=isCloseTodayAllowed,proto3" json:"isCloseTodayAllowed"`
	// 市价最大下单量
	MaxMarketOrderVolume int32 `protobuf:"varint,18,opt,name=max_market_order_volume,json=maxMarketOrderVolume,proto3" json:"maxMarketOrderVolume"`
	// 市价最小下单量
	MinMarketOrderVolume int32 `protobuf:"varint,19,opt,name=min_market_order_volume,json=minMarketOrderVolume,proto3" json:"minMarketOrderVolume"`
	// 限价最大下单量
	MaxLimitOrderVolume int32 `protobuf:"varint,20,opt,name=max_limit_order_volume,json=maxLimitOrderVolume,proto3" json:"maxLimitOrderVolume"`
	// 限价最小下单量
	MinLimitOrderVolume int32 `protobuf:"varint,21,opt,name=min_limit_order_volume,json=minLimitOrderVolume,proto3" json:"minLimitOrderVolume"`
	// 基础合约
	BaseSymbol *Symbol `protobuf:"bytes,22,opt,name=base_symbol,json=baseSymbol,proto3" json:"baseSymbol"`
	// 行权价
	StrikePrice float64 `protobuf:"fixed64,23,opt,name=strike_price,json=strikePrice,proto3" json:"strikePrice"`
	///期权类型
	CallPutType OptionCallPutType `protobuf:"varint,24,opt,name=call_put_type,json=callPutType,proto3,enum=pb.OptionCallPutType" json:"callPutType"`
	///合约基础商品乘数
	UnderlyingMultiple float64 `protobuf:"fixed64,25,opt,name=underlying_multiple,json=underlyingMultiple,proto3" json:"underlyingMultiple"`
	///组合类型
	CombinationType int32 `protobuf:"varint,26,opt,name=combination_type,json=combinationType,proto3" json:"combinationType"`
	///最小买下单单位
	MinBuyVolume int32 `protobuf:"varint,27,opt,name=min_buy_volume,json=minBuyVolume,proto3" json:"minBuyVolume"`
	///最小卖下单单位
	MinSellVolume int32 `protobuf:"varint,28,opt,name=min_sell_volume,json=minSellVolume,proto3" json:"minSellVolume"`
	///合约标识码
	InstrumentCode *Symbol `protobuf:"bytes,29,opt,name=instrument_code,json=instrumentCode,proto3" json:"instrumentCode"`
	// 是否在交易
	IsTrading bool `protobuf:"varint,30,opt,name=is_trading,json=isTrading,proto3" json:"isTrading"`
	// 行权方式类型
	DeliveryDateType     OptionDeliveryDateType `protobuf:"varint,31,opt,name=delivery_date_type,json=deliveryDateType,proto3,enum=pb.OptionDeliveryDateType" json:"deliveryDateType"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *InstrumentInfo) Reset()         { *m = InstrumentInfo{} }
func (m *InstrumentInfo) String() string { return proto.CompactTextString(m) }
func (*InstrumentInfo) ProtoMessage()    {}
func (*InstrumentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}

func (m *InstrumentInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentInfo.Unmarshal(m, b)
}
func (m *InstrumentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentInfo.Marshal(b, m, deterministic)
}
func (m *InstrumentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentInfo.Merge(m, src)
}
func (m *InstrumentInfo) XXX_Size() int {
	return xxx_messageInfo_InstrumentInfo.Size(m)
}
func (m *InstrumentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentInfo proto.InternalMessageInfo

func (m *InstrumentInfo) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *InstrumentInfo) GetPositionRank() int32 {
	if m != nil {
		return m.PositionRank
	}
	return 0
}

func (m *InstrumentInfo) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *InstrumentInfo) GetUpdateTradingDay() int32 {
	if m != nil {
		return m.UpdateTradingDay
	}
	return 0
}

func (m *InstrumentInfo) GetUpperLimitPrice() float64 {
	if m != nil {
		return m.UpperLimitPrice
	}
	return 0
}

func (m *InstrumentInfo) GetLowerLimitPrice() float64 {
	if m != nil {
		return m.LowerLimitPrice
	}
	return 0
}

func (m *InstrumentInfo) GetPreClosePrice() float64 {
	if m != nil {
		return m.PreClosePrice
	}
	return 0
}

func (m *InstrumentInfo) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *InstrumentInfo) GetPreVolume() int32 {
	if m != nil {
		return m.PreVolume
	}
	return 0
}

func (m *InstrumentInfo) GetPrePosition() int32 {
	if m != nil {
		return m.PrePosition
	}
	return 0
}

func (m *InstrumentInfo) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *InstrumentInfo) GetCreateDate() int32 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

func (m *InstrumentInfo) GetOpenDate() int32 {
	if m != nil {
		return m.OpenDate
	}
	return 0
}

func (m *InstrumentInfo) GetExpireDate() int32 {
	if m != nil {
		return m.ExpireDate
	}
	return 0
}

func (m *InstrumentInfo) GetStartDeliverDate() int32 {
	if m != nil {
		return m.StartDeliverDate
	}
	return 0
}

func (m *InstrumentInfo) GetEndDeliverDate() int32 {
	if m != nil {
		return m.EndDeliverDate
	}
	return 0
}

func (m *InstrumentInfo) GetIsCloseTodayAllowed() int32 {
	if m != nil {
		return m.IsCloseTodayAllowed
	}
	return 0
}

func (m *InstrumentInfo) GetMaxMarketOrderVolume() int32 {
	if m != nil {
		return m.MaxMarketOrderVolume
	}
	return 0
}

func (m *InstrumentInfo) GetMinMarketOrderVolume() int32 {
	if m != nil {
		return m.MinMarketOrderVolume
	}
	return 0
}

func (m *InstrumentInfo) GetMaxLimitOrderVolume() int32 {
	if m != nil {
		return m.MaxLimitOrderVolume
	}
	return 0
}

func (m *InstrumentInfo) GetMinLimitOrderVolume() int32 {
	if m != nil {
		return m.MinLimitOrderVolume
	}
	return 0
}

func (m *InstrumentInfo) GetBaseSymbol() *Symbol {
	if m != nil {
		return m.BaseSymbol
	}
	return nil
}

func (m *InstrumentInfo) GetStrikePrice() float64 {
	if m != nil {
		return m.StrikePrice
	}
	return 0
}

func (m *InstrumentInfo) GetCallPutType() OptionCallPutType {
	if m != nil {
		return m.CallPutType
	}
	return OptionCallPutType_OCPT_CALL
}

func (m *InstrumentInfo) GetUnderlyingMultiple() float64 {
	if m != nil {
		return m.UnderlyingMultiple
	}
	return 0
}

func (m *InstrumentInfo) GetCombinationType() int32 {
	if m != nil {
		return m.CombinationType
	}
	return 0
}

func (m *InstrumentInfo) GetMinBuyVolume() int32 {
	if m != nil {
		return m.MinBuyVolume
	}
	return 0
}

func (m *InstrumentInfo) GetMinSellVolume() int32 {
	if m != nil {
		return m.MinSellVolume
	}
	return 0
}

func (m *InstrumentInfo) GetInstrumentCode() *Symbol {
	if m != nil {
		return m.InstrumentCode
	}
	return nil
}

func (m *InstrumentInfo) GetIsTrading() bool {
	if m != nil {
		return m.IsTrading
	}
	return false
}

func (m *InstrumentInfo) GetDeliveryDateType() OptionDeliveryDateType {
	if m != nil {
		return m.DeliveryDateType
	}
	return OptionDeliveryDateType_ODDT_EUR
}

type SimpleTimePeriod struct {
	Start                int32    `protobuf:"varint,1,opt,name=start,proto3" json:"start"`
	End                  int32    `protobuf:"varint,2,opt,name=end,proto3" json:"end"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleTimePeriod) Reset()         { *m = SimpleTimePeriod{} }
func (m *SimpleTimePeriod) String() string { return proto.CompactTextString(m) }
func (*SimpleTimePeriod) ProtoMessage()    {}
func (*SimpleTimePeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}

func (m *SimpleTimePeriod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleTimePeriod.Unmarshal(m, b)
}
func (m *SimpleTimePeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleTimePeriod.Marshal(b, m, deterministic)
}
func (m *SimpleTimePeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleTimePeriod.Merge(m, src)
}
func (m *SimpleTimePeriod) XXX_Size() int {
	return xxx_messageInfo_SimpleTimePeriod.Size(m)
}
func (m *SimpleTimePeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleTimePeriod.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleTimePeriod proto.InternalMessageInfo

func (m *SimpleTimePeriod) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SimpleTimePeriod) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

type MarketTimeRule struct {
	SendRule             []*SimpleTimePeriod `protobuf:"bytes,1,rep,name=send_rule,json=sendRule,proto3" json:"sendRule"`
	CancelRule           []*SimpleTimePeriod `protobuf:"bytes,2,rep,name=cancel_rule,json=cancelRule,proto3" json:"cancelRule"`
	MatchingRule         []*SimpleTimePeriod `protobuf:"bytes,3,rep,name=matching_rule,json=matchingRule,proto3" json:"matchingRule"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MarketTimeRule) Reset()         { *m = MarketTimeRule{} }
func (m *MarketTimeRule) String() string { return proto.CompactTextString(m) }
func (*MarketTimeRule) ProtoMessage()    {}
func (*MarketTimeRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}

func (m *MarketTimeRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketTimeRule.Unmarshal(m, b)
}
func (m *MarketTimeRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketTimeRule.Marshal(b, m, deterministic)
}
func (m *MarketTimeRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketTimeRule.Merge(m, src)
}
func (m *MarketTimeRule) XXX_Size() int {
	return xxx_messageInfo_MarketTimeRule.Size(m)
}
func (m *MarketTimeRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketTimeRule.DiscardUnknown(m)
}

var xxx_messageInfo_MarketTimeRule proto.InternalMessageInfo

func (m *MarketTimeRule) GetSendRule() []*SimpleTimePeriod {
	if m != nil {
		return m.SendRule
	}
	return nil
}

func (m *MarketTimeRule) GetCancelRule() []*SimpleTimePeriod {
	if m != nil {
		return m.CancelRule
	}
	return nil
}

func (m *MarketTimeRule) GetMatchingRule() []*SimpleTimePeriod {
	if m != nil {
		return m.MatchingRule
	}
	return nil
}

// 品种信息.
type ProductInfo struct {
	// 品种代码.
	ProductId *ProductID `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"productId"`
	// 子类型
	ProductGroupId *ProductID `protobuf:"bytes,2,opt,name=product_group_id,json=productGroupId,proto3" json:"productGroupId"`
	// 类型
	Type ProductType `protobuf:"varint,3,opt,name=type,proto3,enum=pb.ProductType" json:"type"`
	/// 品种名称
	ProductName string `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"productName"`
	// 最小变动价位.
	PriceTick float64 `protobuf:"fixed64,5,opt,name=price_tick,json=priceTick,proto3" json:"priceTick"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,6,opt,name=volume_multiple,json=volumeMultiple,proto3" json:"volumeMultiple"`
	// 昨总成交
	PreVolume int32 `protobuf:"varint,7,opt,name=pre_volume,json=preVolume,proto3" json:"preVolume"`
	// 昨持仓
	PrePosition int32 `protobuf:"varint,8,opt,name=pre_position,json=prePosition,proto3" json:"prePosition"`
	// 币种
	CurrencyType int32 `protobuf:"varint,9,opt,name=currency_type,json=currencyType,proto3" json:"currencyType"`
	// 结算组
	SettlementGroup int32 `protobuf:"varint,10,opt,name=settlement_group,json=settlementGroup,proto3" json:"settlementGroup"`
	// 时间
	TimeRule *MarketTimeRule `protobuf:"bytes,11,opt,name=time_rule,json=timeRule,proto3" json:"timeRule"`
	// 区分昨仓今仓
	DistinguishPositionTime bool     `protobuf:"varint,12,opt,name=distinguish_position_time,json=distinguishPositionTime,proto3" json:"distinguishPositionTime"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *ProductInfo) Reset()         { *m = ProductInfo{} }
func (m *ProductInfo) String() string { return proto.CompactTextString(m) }
func (*ProductInfo) ProtoMessage()    {}
func (*ProductInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}

func (m *ProductInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductInfo.Unmarshal(m, b)
}
func (m *ProductInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductInfo.Marshal(b, m, deterministic)
}
func (m *ProductInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductInfo.Merge(m, src)
}
func (m *ProductInfo) XXX_Size() int {
	return xxx_messageInfo_ProductInfo.Size(m)
}
func (m *ProductInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProductInfo proto.InternalMessageInfo

func (m *ProductInfo) GetProductId() *ProductID {
	if m != nil {
		return m.ProductId
	}
	return nil
}

func (m *ProductInfo) GetProductGroupId() *ProductID {
	if m != nil {
		return m.ProductGroupId
	}
	return nil
}

func (m *ProductInfo) GetType() ProductType {
	if m != nil {
		return m.Type
	}
	return ProductType_PT_UNKOWN
}

func (m *ProductInfo) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ProductInfo) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *ProductInfo) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *ProductInfo) GetPreVolume() int32 {
	if m != nil {
		return m.PreVolume
	}
	return 0
}

func (m *ProductInfo) GetPrePosition() int32 {
	if m != nil {
		return m.PrePosition
	}
	return 0
}

func (m *ProductInfo) GetCurrencyType() int32 {
	if m != nil {
		return m.CurrencyType
	}
	return 0
}

func (m *ProductInfo) GetSettlementGroup() int32 {
	if m != nil {
		return m.SettlementGroup
	}
	return 0
}

func (m *ProductInfo) GetTimeRule() *MarketTimeRule {
	if m != nil {
		return m.TimeRule
	}
	return nil
}

func (m *ProductInfo) GetDistinguishPositionTime() bool {
	if m != nil {
		return m.DistinguishPositionTime
	}
	return false
}

// 交易合约
type TradingInstrument struct {
	/// 合约编码
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol"`
	// 合约信息
	InstrumentInfo *InstrumentInfo `protobuf:"bytes,2,opt,name=instrument_info,json=instrumentInfo,proto3" json:"instrumentInfo"`
	// 品种信息
	ProductInfo          *ProductInfo `protobuf:"bytes,3,opt,name=product_info,json=productInfo,proto3" json:"productInfo"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TradingInstrument) Reset()         { *m = TradingInstrument{} }
func (m *TradingInstrument) String() string { return proto.CompactTextString(m) }
func (*TradingInstrument) ProtoMessage()    {}
func (*TradingInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{9}
}

func (m *TradingInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingInstrument.Unmarshal(m, b)
}
func (m *TradingInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingInstrument.Marshal(b, m, deterministic)
}
func (m *TradingInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingInstrument.Merge(m, src)
}
func (m *TradingInstrument) XXX_Size() int {
	return xxx_messageInfo_TradingInstrument.Size(m)
}
func (m *TradingInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_TradingInstrument proto.InternalMessageInfo

func (m *TradingInstrument) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *TradingInstrument) GetInstrumentInfo() *InstrumentInfo {
	if m != nil {
		return m.InstrumentInfo
	}
	return nil
}

func (m *TradingInstrument) GetProductInfo() *ProductInfo {
	if m != nil {
		return m.ProductInfo
	}
	return nil
}

type TradingInstrumentList struct {
	List                 []*TradingInstrument `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TradingInstrumentList) Reset()         { *m = TradingInstrumentList{} }
func (m *TradingInstrumentList) String() string { return proto.CompactTextString(m) }
func (*TradingInstrumentList) ProtoMessage()    {}
func (*TradingInstrumentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{10}
}

func (m *TradingInstrumentList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingInstrumentList.Unmarshal(m, b)
}
func (m *TradingInstrumentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingInstrumentList.Marshal(b, m, deterministic)
}
func (m *TradingInstrumentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingInstrumentList.Merge(m, src)
}
func (m *TradingInstrumentList) XXX_Size() int {
	return xxx_messageInfo_TradingInstrumentList.Size(m)
}
func (m *TradingInstrumentList) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingInstrumentList.DiscardUnknown(m)
}

var xxx_messageInfo_TradingInstrumentList proto.InternalMessageInfo

func (m *TradingInstrumentList) GetList() []*TradingInstrument {
	if m != nil {
		return m.List
	}
	return nil
}

type ProductInfoList struct {
	List                 []*ProductInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProductInfoList) Reset()         { *m = ProductInfoList{} }
func (m *ProductInfoList) String() string { return proto.CompactTextString(m) }
func (*ProductInfoList) ProtoMessage()    {}
func (*ProductInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{11}
}

func (m *ProductInfoList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductInfoList.Unmarshal(m, b)
}
func (m *ProductInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductInfoList.Marshal(b, m, deterministic)
}
func (m *ProductInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductInfoList.Merge(m, src)
}
func (m *ProductInfoList) XXX_Size() int {
	return xxx_messageInfo_ProductInfoList.Size(m)
}
func (m *ProductInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_ProductInfoList proto.InternalMessageInfo

func (m *ProductInfoList) GetList() []*ProductInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type ReqSetTradingInstrumentList struct {
	OpCode               string               `protobuf:"bytes,1,opt,name=op_code,json=opCode,proto3" json:"opCode"`
	Exchange             int32                `protobuf:"varint,2,opt,name=exchange,proto3" json:"exchange"`
	List                 []*TradingInstrument `protobuf:"bytes,3,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReqSetTradingInstrumentList) Reset()         { *m = ReqSetTradingInstrumentList{} }
func (m *ReqSetTradingInstrumentList) String() string { return proto.CompactTextString(m) }
func (*ReqSetTradingInstrumentList) ProtoMessage()    {}
func (*ReqSetTradingInstrumentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{12}
}

func (m *ReqSetTradingInstrumentList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSetTradingInstrumentList.Unmarshal(m, b)
}
func (m *ReqSetTradingInstrumentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSetTradingInstrumentList.Marshal(b, m, deterministic)
}
func (m *ReqSetTradingInstrumentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSetTradingInstrumentList.Merge(m, src)
}
func (m *ReqSetTradingInstrumentList) XXX_Size() int {
	return xxx_messageInfo_ReqSetTradingInstrumentList.Size(m)
}
func (m *ReqSetTradingInstrumentList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSetTradingInstrumentList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSetTradingInstrumentList proto.InternalMessageInfo

func (m *ReqSetTradingInstrumentList) GetOpCode() string {
	if m != nil {
		return m.OpCode
	}
	return ""
}

func (m *ReqSetTradingInstrumentList) GetExchange() int32 {
	if m != nil {
		return m.Exchange
	}
	return 0
}

func (m *ReqSetTradingInstrumentList) GetList() []*TradingInstrument {
	if m != nil {
		return m.List
	}
	return nil
}

type ReqSetProductInfoList struct {
	OpCode               string         `protobuf:"bytes,1,opt,name=op_code,json=opCode,proto3" json:"opCode"`
	Exchange             int32          `protobuf:"varint,2,opt,name=exchange,proto3" json:"exchange"`
	List                 []*ProductInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReqSetProductInfoList) Reset()         { *m = ReqSetProductInfoList{} }
func (m *ReqSetProductInfoList) String() string { return proto.CompactTextString(m) }
func (*ReqSetProductInfoList) ProtoMessage()    {}
func (*ReqSetProductInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{13}
}

func (m *ReqSetProductInfoList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSetProductInfoList.Unmarshal(m, b)
}
func (m *ReqSetProductInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSetProductInfoList.Marshal(b, m, deterministic)
}
func (m *ReqSetProductInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSetProductInfoList.Merge(m, src)
}
func (m *ReqSetProductInfoList) XXX_Size() int {
	return xxx_messageInfo_ReqSetProductInfoList.Size(m)
}
func (m *ReqSetProductInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSetProductInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSetProductInfoList proto.InternalMessageInfo

func (m *ReqSetProductInfoList) GetOpCode() string {
	if m != nil {
		return m.OpCode
	}
	return ""
}

func (m *ReqSetProductInfoList) GetExchange() int32 {
	if m != nil {
		return m.Exchange
	}
	return 0
}

func (m *ReqSetProductInfoList) GetList() []*ProductInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type ReqUpdateTIOpenDate struct {
	Symbol               *Symbol  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol"`
	OpenDate             int32    `protobuf:"varint,2,opt,name=open_date,json=openDate,proto3" json:"openDate"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUpdateTIOpenDate) Reset()         { *m = ReqUpdateTIOpenDate{} }
func (m *ReqUpdateTIOpenDate) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateTIOpenDate) ProtoMessage()    {}
func (*ReqUpdateTIOpenDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{14}
}

func (m *ReqUpdateTIOpenDate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqUpdateTIOpenDate.Unmarshal(m, b)
}
func (m *ReqUpdateTIOpenDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqUpdateTIOpenDate.Marshal(b, m, deterministic)
}
func (m *ReqUpdateTIOpenDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpdateTIOpenDate.Merge(m, src)
}
func (m *ReqUpdateTIOpenDate) XXX_Size() int {
	return xxx_messageInfo_ReqUpdateTIOpenDate.Size(m)
}
func (m *ReqUpdateTIOpenDate) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpdateTIOpenDate.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpdateTIOpenDate proto.InternalMessageInfo

func (m *ReqUpdateTIOpenDate) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *ReqUpdateTIOpenDate) GetOpenDate() int32 {
	if m != nil {
		return m.OpenDate
	}
	return 0
}

type ReqUpdateTIOpenDateList struct {
	Exchange             int32                  `protobuf:"varint,1,opt,name=exchange,proto3" json:"exchange"`
	List                 []*ReqUpdateTIOpenDate `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	OpCode               string                 `protobuf:"bytes,3,opt,name=op_code,json=opCode,proto3" json:"opCode"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ReqUpdateTIOpenDateList) Reset()         { *m = ReqUpdateTIOpenDateList{} }
func (m *ReqUpdateTIOpenDateList) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateTIOpenDateList) ProtoMessage()    {}
func (*ReqUpdateTIOpenDateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{15}
}

func (m *ReqUpdateTIOpenDateList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqUpdateTIOpenDateList.Unmarshal(m, b)
}
func (m *ReqUpdateTIOpenDateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqUpdateTIOpenDateList.Marshal(b, m, deterministic)
}
func (m *ReqUpdateTIOpenDateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUpdateTIOpenDateList.Merge(m, src)
}
func (m *ReqUpdateTIOpenDateList) XXX_Size() int {
	return xxx_messageInfo_ReqUpdateTIOpenDateList.Size(m)
}
func (m *ReqUpdateTIOpenDateList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUpdateTIOpenDateList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUpdateTIOpenDateList proto.InternalMessageInfo

func (m *ReqUpdateTIOpenDateList) GetExchange() int32 {
	if m != nil {
		return m.Exchange
	}
	return 0
}

func (m *ReqUpdateTIOpenDateList) GetList() []*ReqUpdateTIOpenDate {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ReqUpdateTIOpenDateList) GetOpCode() string {
	if m != nil {
		return m.OpCode
	}
	return ""
}

// 结算账户资金信息
type AccountMoneySummary struct {
	// 账号
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// 结算组（可能单个结算组给个摘要)
	Type AccountType `protobuf:"varint,2,opt,name=type,proto3,enum=pb.AccountType" json:"type"`
	// 币种
	CurrencyType CurrencyType `protobuf:"varint,3,opt,name=currency_type,json=currencyType,proto3,enum=pb.CurrencyType" json:"currencyType"`
	/// 余额
	Balance float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance"`
	/// 手续费
	Commission float64 `protobuf:"fixed64,5,opt,name=commission,proto3" json:"commission"`
	/// 占用保证金
	CurMargin float64 `protobuf:"fixed64,6,opt,name=cur_margin,json=curMargin,proto3" json:"curMargin"`
	/// 持仓市值.
	NetPositionAmount float64 `protobuf:"fixed64,7,opt,name=net_position_amount,json=netPositionAmount,proto3" json:"netPositionAmount"`
	/// 上次余额
	PreBalance float64 `protobuf:"fixed64,8,opt,name=pre_balance,json=preBalance,proto3" json:"preBalance"`
	/// 利息收入
	InterestIn float64 `protobuf:"fixed64,9,opt,name=interest_in,json=interestIn,proto3" json:"interestIn"`
	/// 存款
	Deposit float64 `protobuf:"fixed64,10,opt,name=deposit,proto3" json:"deposit"`
	/// 取款
	Withdraw float64 `protobuf:"fixed64,11,opt,name=withdraw,proto3" json:"withdraw"`
	/// 冻结保证金
	FrozenMargin float64 `protobuf:"fixed64,12,opt,name=frozen_margin,json=frozenMargin,proto3" json:"frozenMargin"`
	/// 冻结手续费
	FrozenCommission float64 `protobuf:"fixed64,13,opt,name=frozen_commission,json=frozenCommission,proto3" json:"frozenCommission"`
	/// 可用资金
	Available float64 `protobuf:"fixed64,14,opt,name=available,proto3" json:"available"`
	/// 平仓盈亏
	CloseProfit float64 `protobuf:"fixed64,15,opt,name=close_profit,json=closeProfit,proto3" json:"closeProfit"`
	/// 持仓盈亏
	PositionProfit float64 `protobuf:"fixed64,16,opt,name=position_profit,json=positionProfit,proto3" json:"positionProfit"`
	// 上次质押金额
	PreMortgate float64 `protobuf:"fixed64,17,opt,name=pre_mortgate,json=preMortgate,proto3" json:"preMortgate"`
	// 上次信用额度
	PreCredit float64 `protobuf:"fixed64,18,opt,name=pre_credit,json=preCredit,proto3" json:"preCredit"`
	// 利息基数
	InterestBase float64 `protobuf:"fixed64,19,opt,name=interest_base,json=interestBase,proto3" json:"interestBase"`
	// 可取资金
	WithdrawAvailable float64 `protobuf:"fixed64,20,opt,name=withdraw_available,json=withdrawAvailable,proto3" json:"withdrawAvailable"`
	// 基本准备金
	Reserve float64 `protobuf:"fixed64,21,opt,name=reserve,proto3" json:"reserve"`
	// 交易日
	TradingDay int32 `protobuf:"varint,22,opt,name=trading_day,json=tradingDay,proto3" json:"tradingDay"`
	// 信用额度
	Credit float64 `protobuf:"fixed64,23,opt,name=credit,proto3" json:"credit"`
	// 质押金额
	Mortgate float64 `protobuf:"fixed64,24,opt,name=mortgate,proto3" json:"mortgate"`
	// 交易所保证金
	ExchangeMargin float64 `protobuf:"fixed64,25,opt,name=exchange_margin,json=exchangeMargin,proto3" json:"exchangeMargin"`
	// 交割保证金
	DeliveryMargin float64 `protobuf:"fixed64,26,opt,name=delivery_margin,json=deliveryMargin,proto3" json:"deliveryMargin"`
	// 交易所交割保证金
	ExchangeDeliveryMargin float64 `protobuf:"fixed64,27,opt,name=exchange_delivery_margin,json=exchangeDeliveryMargin,proto3" json:"exchangeDeliveryMargin"`
	// 保底期货结算准备金
	ReserveBalance float64 `protobuf:"fixed64,28,opt,name=reserve_balance,json=reserveBalance,proto3" json:"reserveBalance"`
	// 交割手续费
	DeliveryCommission float64 `protobuf:"fixed64,29,opt,name=delivery_commission,json=deliveryCommission,proto3" json:"deliveryCommission"`
	// 冻结过户费
	FrozenTransferFee float64 `protobuf:"fixed64,30,opt,name=frozen_transfer_fee,json=frozenTransferFee,proto3" json:"frozenTransferFee"`
	// 冻结的印花税
	FrozenStampTax float64 `protobuf:"fixed64,31,opt,name=frozen_stamp_tax,json=frozenStampTax,proto3" json:"frozenStampTax"`
	// 过户费
	TransferFee float64 `protobuf:"fixed64,32,opt,name=transfer_fee,json=transferFee,proto3" json:"transferFee"`
	// 印花税
	StampTax float64 `protobuf:"fixed64,33,opt,name=stamp_tax,json=stampTax,proto3" json:"stampTax"`
	/// 盯市盈亏
	MtmProfit float64 `protobuf:"fixed64,34,opt,name=mtm_profit,json=mtmProfit,proto3" json:"mtmProfit"`
	///授信额度
	PreMtmProfit float64 `protobuf:"fixed64,35,opt,name=pre_mtm_profit,json=preMtmProfit,proto3" json:"preMtmProfit"`
	///证券总价值
	StockValue float64 `protobuf:"fixed64,36,opt,name=stock_value,json=stockValue,proto3" json:"stockValue"`
	///国债回购占用资金
	BondRepurchaseAmount float64 `protobuf:"fixed64,37,opt,name=bond_repurchase_amount,json=bondRepurchaseAmount,proto3" json:"bondRepurchaseAmount"`
	///国债逆回购占用资金
	ReverseRepurchaseAmount float64 `protobuf:"fixed64,38,opt,name=reverse_repurchase_amount,json=reverseRepurchaseAmount,proto3" json:"reverseRepurchaseAmount"`
	///融资买入金额
	MarginTradeAmount float64 `protobuf:"fixed64,39,opt,name=margin_trade_amount,json=marginTradeAmount,proto3" json:"marginTradeAmount"`
	///融券卖出金额
	ShortSellAmount float64 `protobuf:"fixed64,40,opt,name=short_sell_amount,json=shortSellAmount,proto3" json:"shortSellAmount"`
	///融资持仓盈亏
	MarginTradeProfit float64 `protobuf:"fixed64,41,opt,name=margin_trade_profit,json=marginTradeProfit,proto3" json:"marginTradeProfit"`
	///融券持仓盈亏
	ShortSellProfit float64 `protobuf:"fixed64,42,opt,name=short_sell_profit,json=shortSellProfit,proto3" json:"shortSellProfit"`
	// 冻结平仓所需要费用
	FrozenCloseCommission float64 `protobuf:"fixed64,43,opt,name=frozen_close_commission,json=frozenCloseCommission,proto3" json:"frozenCloseCommission"`
	// 劣后
	CommonBalance float64 `protobuf:"fixed64,44,opt,name=common_balance,json=commonBalance,proto3" json:"commonBalance"`
	// 优先资金
	PreferedBalance float64 `protobuf:"fixed64,45,opt,name=prefered_balance,json=preferedBalance,proto3" json:"preferedBalance"`
	// 兑换基础货币汇率
	BaseExchangeRate float64 `protobuf:"fixed64,46,opt,name=base_exchange_rate,json=baseExchangeRate,proto3" json:"baseExchangeRate"`
	// 报警
	WarningLevel float64 `protobuf:"fixed64,47,opt,name=warning_level,json=warningLevel,proto3" json:"warningLevel"`
	// 强平
	ForceCloseLevel float64 `protobuf:"fixed64,48,opt,name=force_close_level,json=forceCloseLevel,proto3" json:"forceCloseLevel"`
	// 进入清算的平仓盈亏
	ClearedClosedProfit float64 `protobuf:"fixed64,49,opt,name=cleared_closed_profit,json=clearedClosedProfit,proto3" json:"clearedClosedProfit"`
	// 名称
	Name string `protobuf:"bytes,50,opt,name=name,proto3" json:"name"`
	// 利息
	Interest float64 `protobuf:"fixed64,51,opt,name=interest,proto3" json:"interest"`
	// 冻结利息
	FrozenInterest       float64  `protobuf:"fixed64,52,opt,name=frozen_interest,json=frozenInterest,proto3" json:"frozenInterest"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountMoneySummary) Reset()         { *m = AccountMoneySummary{} }
func (m *AccountMoneySummary) String() string { return proto.CompactTextString(m) }
func (*AccountMoneySummary) ProtoMessage()    {}
func (*AccountMoneySummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{16}
}

func (m *AccountMoneySummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountMoneySummary.Unmarshal(m, b)
}
func (m *AccountMoneySummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountMoneySummary.Marshal(b, m, deterministic)
}
func (m *AccountMoneySummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMoneySummary.Merge(m, src)
}
func (m *AccountMoneySummary) XXX_Size() int {
	return xxx_messageInfo_AccountMoneySummary.Size(m)
}
func (m *AccountMoneySummary) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMoneySummary.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMoneySummary proto.InternalMessageInfo

func (m *AccountMoneySummary) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountMoneySummary) GetType() AccountType {
	if m != nil {
		return m.Type
	}
	return AccountType_CN_FUTURE
}

func (m *AccountMoneySummary) GetCurrencyType() CurrencyType {
	if m != nil {
		return m.CurrencyType
	}
	return CurrencyType_CNY
}

func (m *AccountMoneySummary) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *AccountMoneySummary) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *AccountMoneySummary) GetCurMargin() float64 {
	if m != nil {
		return m.CurMargin
	}
	return 0
}

func (m *AccountMoneySummary) GetNetPositionAmount() float64 {
	if m != nil {
		return m.NetPositionAmount
	}
	return 0
}

func (m *AccountMoneySummary) GetPreBalance() float64 {
	if m != nil {
		return m.PreBalance
	}
	return 0
}

func (m *AccountMoneySummary) GetInterestIn() float64 {
	if m != nil {
		return m.InterestIn
	}
	return 0
}

func (m *AccountMoneySummary) GetDeposit() float64 {
	if m != nil {
		return m.Deposit
	}
	return 0
}

func (m *AccountMoneySummary) GetWithdraw() float64 {
	if m != nil {
		return m.Withdraw
	}
	return 0
}

func (m *AccountMoneySummary) GetFrozenMargin() float64 {
	if m != nil {
		return m.FrozenMargin
	}
	return 0
}

func (m *AccountMoneySummary) GetFrozenCommission() float64 {
	if m != nil {
		return m.FrozenCommission
	}
	return 0
}

func (m *AccountMoneySummary) GetAvailable() float64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *AccountMoneySummary) GetCloseProfit() float64 {
	if m != nil {
		return m.CloseProfit
	}
	return 0
}

func (m *AccountMoneySummary) GetPositionProfit() float64 {
	if m != nil {
		return m.PositionProfit
	}
	return 0
}

func (m *AccountMoneySummary) GetPreMortgate() float64 {
	if m != nil {
		return m.PreMortgate
	}
	return 0
}

func (m *AccountMoneySummary) GetPreCredit() float64 {
	if m != nil {
		return m.PreCredit
	}
	return 0
}

func (m *AccountMoneySummary) GetInterestBase() float64 {
	if m != nil {
		return m.InterestBase
	}
	return 0
}

func (m *AccountMoneySummary) GetWithdrawAvailable() float64 {
	if m != nil {
		return m.WithdrawAvailable
	}
	return 0
}

func (m *AccountMoneySummary) GetReserve() float64 {
	if m != nil {
		return m.Reserve
	}
	return 0
}

func (m *AccountMoneySummary) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *AccountMoneySummary) GetCredit() float64 {
	if m != nil {
		return m.Credit
	}
	return 0
}

func (m *AccountMoneySummary) GetMortgate() float64 {
	if m != nil {
		return m.Mortgate
	}
	return 0
}

func (m *AccountMoneySummary) GetExchangeMargin() float64 {
	if m != nil {
		return m.ExchangeMargin
	}
	return 0
}

func (m *AccountMoneySummary) GetDeliveryMargin() float64 {
	if m != nil {
		return m.DeliveryMargin
	}
	return 0
}

func (m *AccountMoneySummary) GetExchangeDeliveryMargin() float64 {
	if m != nil {
		return m.ExchangeDeliveryMargin
	}
	return 0
}

func (m *AccountMoneySummary) GetReserveBalance() float64 {
	if m != nil {
		return m.ReserveBalance
	}
	return 0
}

func (m *AccountMoneySummary) GetDeliveryCommission() float64 {
	if m != nil {
		return m.DeliveryCommission
	}
	return 0
}

func (m *AccountMoneySummary) GetFrozenTransferFee() float64 {
	if m != nil {
		return m.FrozenTransferFee
	}
	return 0
}

func (m *AccountMoneySummary) GetFrozenStampTax() float64 {
	if m != nil {
		return m.FrozenStampTax
	}
	return 0
}

func (m *AccountMoneySummary) GetTransferFee() float64 {
	if m != nil {
		return m.TransferFee
	}
	return 0
}

func (m *AccountMoneySummary) GetStampTax() float64 {
	if m != nil {
		return m.StampTax
	}
	return 0
}

func (m *AccountMoneySummary) GetMtmProfit() float64 {
	if m != nil {
		return m.MtmProfit
	}
	return 0
}

func (m *AccountMoneySummary) GetPreMtmProfit() float64 {
	if m != nil {
		return m.PreMtmProfit
	}
	return 0
}

func (m *AccountMoneySummary) GetStockValue() float64 {
	if m != nil {
		return m.StockValue
	}
	return 0
}

func (m *AccountMoneySummary) GetBondRepurchaseAmount() float64 {
	if m != nil {
		return m.BondRepurchaseAmount
	}
	return 0
}

func (m *AccountMoneySummary) GetReverseRepurchaseAmount() float64 {
	if m != nil {
		return m.ReverseRepurchaseAmount
	}
	return 0
}

func (m *AccountMoneySummary) GetMarginTradeAmount() float64 {
	if m != nil {
		return m.MarginTradeAmount
	}
	return 0
}

func (m *AccountMoneySummary) GetShortSellAmount() float64 {
	if m != nil {
		return m.ShortSellAmount
	}
	return 0
}

func (m *AccountMoneySummary) GetMarginTradeProfit() float64 {
	if m != nil {
		return m.MarginTradeProfit
	}
	return 0
}

func (m *AccountMoneySummary) GetShortSellProfit() float64 {
	if m != nil {
		return m.ShortSellProfit
	}
	return 0
}

func (m *AccountMoneySummary) GetFrozenCloseCommission() float64 {
	if m != nil {
		return m.FrozenCloseCommission
	}
	return 0
}

func (m *AccountMoneySummary) GetCommonBalance() float64 {
	if m != nil {
		return m.CommonBalance
	}
	return 0
}

func (m *AccountMoneySummary) GetPreferedBalance() float64 {
	if m != nil {
		return m.PreferedBalance
	}
	return 0
}

func (m *AccountMoneySummary) GetBaseExchangeRate() float64 {
	if m != nil {
		return m.BaseExchangeRate
	}
	return 0
}

func (m *AccountMoneySummary) GetWarningLevel() float64 {
	if m != nil {
		return m.WarningLevel
	}
	return 0
}

func (m *AccountMoneySummary) GetForceCloseLevel() float64 {
	if m != nil {
		return m.ForceCloseLevel
	}
	return 0
}

func (m *AccountMoneySummary) GetClearedClosedProfit() float64 {
	if m != nil {
		return m.ClearedClosedProfit
	}
	return 0
}

func (m *AccountMoneySummary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccountMoneySummary) GetInterest() float64 {
	if m != nil {
		return m.Interest
	}
	return 0
}

func (m *AccountMoneySummary) GetFrozenInterest() float64 {
	if m != nil {
		return m.FrozenInterest
	}
	return 0
}

type AccountMoneySummaryList struct {
	List                 []*AccountMoneySummary `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AccountMoneySummaryList) Reset()         { *m = AccountMoneySummaryList{} }
func (m *AccountMoneySummaryList) String() string { return proto.CompactTextString(m) }
func (*AccountMoneySummaryList) ProtoMessage()    {}
func (*AccountMoneySummaryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{17}
}

func (m *AccountMoneySummaryList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountMoneySummaryList.Unmarshal(m, b)
}
func (m *AccountMoneySummaryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountMoneySummaryList.Marshal(b, m, deterministic)
}
func (m *AccountMoneySummaryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMoneySummaryList.Merge(m, src)
}
func (m *AccountMoneySummaryList) XXX_Size() int {
	return xxx_messageInfo_AccountMoneySummaryList.Size(m)
}
func (m *AccountMoneySummaryList) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMoneySummaryList.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMoneySummaryList proto.InternalMessageInfo

func (m *AccountMoneySummaryList) GetList() []*AccountMoneySummary {
	if m != nil {
		return m.List
	}
	return nil
}

// 出入金操作
type MoneyTransferRecord struct {
	// ID
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 出入
	Direction int32 `protobuf:"varint,2,opt,name=direction,proto3" json:"direction"`
	// 币种
	CurrencyType int32 `protobuf:"varint,3,opt,name=currency_type,json=currencyType,proto3" json:"currencyType"`
	// 结算组
	SettlementGroup int32 `protobuf:"varint,4,opt,name=settlement_group,json=settlementGroup,proto3" json:"settlementGroup"`
	// 是否确认
	Confirmed int32 `protobuf:"varint,5,opt,name=confirmed,proto3" json:"confirmed"`
	// 优先
	IsPrefered int32 `protobuf:"varint,6,opt,name=is_prefered,json=isPrefered,proto3" json:"isPrefered"`
	// 金额
	Amount float64 `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount"`
	// 账户
	AccountId string `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"accountId"`
	// 操作员
	OperatorId string `protobuf:"bytes,9,opt,name=operator_id,json=operatorId,proto3" json:"operatorId"`
	// 会话编号
	SessionId int32 `protobuf:"varint,10,opt,name=session_id,json=sessionId,proto3" json:"sessionId"`
	// 请求时间
	Time int64 `protobuf:"varint,11,opt,name=time,proto3" json:"time"`
	// 备注
	Comment string `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment"`
	// 第三方单号
	BankTradeId string `protobuf:"bytes,13,opt,name=bank_trade_id,json=bankTradeId,proto3" json:"bankTradeId"`
	// 配置编号，用于出金
	PaymentConfigId int64 `protobuf:"varint,14,opt,name=payment_config_id,json=paymentConfigId,proto3" json:"paymentConfigId"`
	// 原始金额
	OriginalAmount float64 `protobuf:"fixed64,15,opt,name=original_amount,json=originalAmount,proto3" json:"originalAmount"`
	// 费用
	Fee float64 `protobuf:"fixed64,16,opt,name=fee,proto3" json:"fee"`
	// 通道
	PaymentPath string `protobuf:"bytes,17,opt,name=payment_path,json=paymentPath,proto3" json:"paymentPath"`
	// 身份证号
	IdentityNumber string `protobuf:"bytes,18,opt,name=identity_number,json=identityNumber,proto3" json:"identityNumber"`
	// 电话
	PhoneNumber string `protobuf:"bytes,19,opt,name=phone_number,json=phoneNumber,proto3" json:"phoneNumber"`
	// 银行名称
	BankName string `protobuf:"bytes,20,opt,name=bank_name,json=bankName,proto3" json:"bankName"`
	// 支行名称
	BankBranchName string `protobuf:"bytes,21,opt,name=bank_branch_name,json=bankBranchName,proto3" json:"bankBranchName"`
	// 银行卡号
	BankCardNo string `protobuf:"bytes,22,opt,name=bank_card_no,json=bankCardNo,proto3" json:"bankCardNo"`
	// 省份
	Province string `protobuf:"bytes,23,opt,name=province,proto3" json:"province"`
	// 城市
	City string `protobuf:"bytes,24,opt,name=city,proto3" json:"city"`
	// 支付方式代码
	PayType string `protobuf:"bytes,25,opt,name=pay_type,json=payType,proto3" json:"payType"`
	// 支付时间
	PayedTime int64 `protobuf:"varint,26,opt,name=payed_time,json=payedTime,proto3" json:"payedTime"`
	// 确认时间
	ConfirmedTime int64 `protobuf:"varint,27,opt,name=confirmed_time,json=confirmedTime,proto3" json:"confirmedTime"`
	// 名称
	Name                 string   `protobuf:"bytes,28,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoneyTransferRecord) Reset()         { *m = MoneyTransferRecord{} }
func (m *MoneyTransferRecord) String() string { return proto.CompactTextString(m) }
func (*MoneyTransferRecord) ProtoMessage()    {}
func (*MoneyTransferRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{18}
}

func (m *MoneyTransferRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoneyTransferRecord.Unmarshal(m, b)
}
func (m *MoneyTransferRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoneyTransferRecord.Marshal(b, m, deterministic)
}
func (m *MoneyTransferRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoneyTransferRecord.Merge(m, src)
}
func (m *MoneyTransferRecord) XXX_Size() int {
	return xxx_messageInfo_MoneyTransferRecord.Size(m)
}
func (m *MoneyTransferRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MoneyTransferRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MoneyTransferRecord proto.InternalMessageInfo

func (m *MoneyTransferRecord) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *MoneyTransferRecord) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *MoneyTransferRecord) GetCurrencyType() int32 {
	if m != nil {
		return m.CurrencyType
	}
	return 0
}

func (m *MoneyTransferRecord) GetSettlementGroup() int32 {
	if m != nil {
		return m.SettlementGroup
	}
	return 0
}

func (m *MoneyTransferRecord) GetConfirmed() int32 {
	if m != nil {
		return m.Confirmed
	}
	return 0
}

func (m *MoneyTransferRecord) GetIsPrefered() int32 {
	if m != nil {
		return m.IsPrefered
	}
	return 0
}

func (m *MoneyTransferRecord) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MoneyTransferRecord) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *MoneyTransferRecord) GetOperatorId() string {
	if m != nil {
		return m.OperatorId
	}
	return ""
}

func (m *MoneyTransferRecord) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *MoneyTransferRecord) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MoneyTransferRecord) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *MoneyTransferRecord) GetBankTradeId() string {
	if m != nil {
		return m.BankTradeId
	}
	return ""
}

func (m *MoneyTransferRecord) GetPaymentConfigId() int64 {
	if m != nil {
		return m.PaymentConfigId
	}
	return 0
}

func (m *MoneyTransferRecord) GetOriginalAmount() float64 {
	if m != nil {
		return m.OriginalAmount
	}
	return 0
}

func (m *MoneyTransferRecord) GetFee() float64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *MoneyTransferRecord) GetPaymentPath() string {
	if m != nil {
		return m.PaymentPath
	}
	return ""
}

func (m *MoneyTransferRecord) GetIdentityNumber() string {
	if m != nil {
		return m.IdentityNumber
	}
	return ""
}

func (m *MoneyTransferRecord) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *MoneyTransferRecord) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *MoneyTransferRecord) GetBankBranchName() string {
	if m != nil {
		return m.BankBranchName
	}
	return ""
}

func (m *MoneyTransferRecord) GetBankCardNo() string {
	if m != nil {
		return m.BankCardNo
	}
	return ""
}

func (m *MoneyTransferRecord) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *MoneyTransferRecord) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *MoneyTransferRecord) GetPayType() string {
	if m != nil {
		return m.PayType
	}
	return ""
}

func (m *MoneyTransferRecord) GetPayedTime() int64 {
	if m != nil {
		return m.PayedTime
	}
	return 0
}

func (m *MoneyTransferRecord) GetConfirmedTime() int64 {
	if m != nil {
		return m.ConfirmedTime
	}
	return 0
}

func (m *MoneyTransferRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MTRList struct {
	List                 []*MoneyTransferRecord `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MTRList) Reset()         { *m = MTRList{} }
func (m *MTRList) String() string { return proto.CompactTextString(m) }
func (*MTRList) ProtoMessage()    {}
func (*MTRList) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{19}
}

func (m *MTRList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MTRList.Unmarshal(m, b)
}
func (m *MTRList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MTRList.Marshal(b, m, deterministic)
}
func (m *MTRList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MTRList.Merge(m, src)
}
func (m *MTRList) XXX_Size() int {
	return xxx_messageInfo_MTRList.Size(m)
}
func (m *MTRList) XXX_DiscardUnknown() {
	xxx_messageInfo_MTRList.DiscardUnknown(m)
}

var xxx_messageInfo_MTRList proto.InternalMessageInfo

func (m *MTRList) GetList() []*MoneyTransferRecord {
	if m != nil {
		return m.List
	}
	return nil
}

// SSEStockOption 上证交易所ETF期权
type SSEStockOption struct {
	// 行权价
	ExercisePrice        string   `protobuf:"bytes,1,opt,name=exercise_price,json=exercisePrice,proto3" json:"exercisePrice"`
	UpdateVersion        string   `protobuf:"bytes,2,opt,name=update_version,json=updateVersion,proto3" json:"updateVersion"`
	OptionType           string   `protobuf:"bytes,3,opt,name=option_type,json=optionType,proto3" json:"optionType"`
	DailyPriceUpLimit    string   `protobuf:"bytes,4,opt,name=daily_price_up_limit,json=dailyPriceUpLimit,proto3" json:"dailyPriceUpLimit"`
	TimeSave             string   `protobuf:"bytes,5,opt,name=time_save,json=timeSave,proto3" json:"timeSave"`
	DELIST_Flag          string   `protobuf:"bytes,6,opt,name=DELIST_Flag,json=DELISTFlag,proto3" json:"DELISTFlag"`
	StartDate            string   `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"startDate"`
	ExpireDate           string   `protobuf:"bytes,8,opt,name=expire_date,json=expireDate,proto3" json:"expireDate"`
	ContractUnit         string   `protobuf:"bytes,9,opt,name=contract_unit,json=contractUnit,proto3" json:"contractUnit"`
	CallOrPut            string   `protobuf:"bytes,10,opt,name=call_or_put,json=callOrPut,proto3" json:"callOrPut"`
	LmtOrdMaxFloor       string   `protobuf:"bytes,11,opt,name=lmt_ord_max_floor,json=lmtOrdMaxFloor,proto3" json:"lmtOrdMaxFloor"`
	DeliveryDate         string   `protobuf:"bytes,12,opt,name=delivery_date,json=deliveryDate,proto3" json:"deliveryDate"`
	ChangeFlag           string   `protobuf:"bytes,13,opt,name=change_flag,json=changeFlag,proto3" json:"changeFlag"`
	MktOrdMaxFloor       string   `protobuf:"bytes,14,opt,name=mkt_ord_max_floor,json=mktOrdMaxFloor,proto3" json:"mktOrdMaxFloor"`
	UnderlyingType       string   `protobuf:"bytes,15,opt,name=underlying_type,json=underlyingType,proto3" json:"underlyingType"`
	DailyPriceDownLimit  string   `protobuf:"bytes,16,opt,name=daily_price_down_limit,json=dailyPriceDownLimit,proto3" json:"dailyPriceDownLimit"`
	RoundLot             string   `protobuf:"bytes,17,opt,name=round_lot,json=roundLot,proto3" json:"roundLot"`
	SecurityClosePX      string   `protobuf:"bytes,18,opt,name=security_closePX,json=securityClosePX,proto3" json:"securityClosePX"`
	SettlPrice           string   `protobuf:"bytes,19,opt,name=settl_price,json=settlPrice,proto3" json:"settlPrice"`
	ContractSymbol       string   `protobuf:"bytes,20,opt,name=contract_symbol,json=contractSymbol,proto3" json:"contractSymbol"`
	Num                  string   `protobuf:"bytes,21,opt,name=num,proto3" json:"num"`
	ContractID           string   `protobuf:"bytes,22,opt,name=contractID,proto3" json:"contractID"`
	MarginRatioParam1    string   `protobuf:"bytes,23,opt,name=margin_ratio_param1,json=marginRatioParam1,proto3" json:"marginRatioParam1"`
	MarginRatioParam2    string   `protobuf:"bytes,24,opt,name=margin_ratio_param2,json=marginRatioParam2,proto3" json:"marginRatioParam2"`
	LmtOrdMinFloor       string   `protobuf:"bytes,25,opt,name=lmt_ord_min_floor,json=lmtOrdMinFloor,proto3" json:"lmtOrdMinFloor"`
	MktOrdMinFloor       string   `protobuf:"bytes,26,opt,name=mkt_ord_min_floor,json=mktOrdMinFloor,proto3" json:"mktOrdMinFloor"`
	EndDate              string   `protobuf:"bytes,27,opt,name=end_date,json=endDate,proto3" json:"endDate"`
	PriceLimitType       string   `protobuf:"bytes,28,opt,name=price_limit_type,json=priceLimitType,proto3" json:"priceLimitType"`
	ExerciseDate         string   `protobuf:"bytes,29,opt,name=exercise_date,json=exerciseDate,proto3" json:"exerciseDate"`
	MarginUnit           string   `protobuf:"bytes,30,opt,name=margin_unit,json=marginUnit,proto3" json:"marginUnit"`
	SecurityID           string   `protobuf:"bytes,31,opt,name=securityID,proto3" json:"securityID"`
	SecurityNameByID     string   `protobuf:"bytes,32,opt,name=security_name_byID,json=securityNameByID,proto3" json:"securityNameByID"`
	ContractFlag         string   `protobuf:"bytes,33,opt,name=contract_flag,json=contractFlag,proto3" json:"contractFlag"`
	UnderlyingClosePX    string   `protobuf:"bytes,34,opt,name=underlying_closePX,json=underlyingClosePX,proto3" json:"underlyingClosePX"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSEStockOption) Reset()         { *m = SSEStockOption{} }
func (m *SSEStockOption) String() string { return proto.CompactTextString(m) }
func (*SSEStockOption) ProtoMessage()    {}
func (*SSEStockOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{20}
}

func (m *SSEStockOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSEStockOption.Unmarshal(m, b)
}
func (m *SSEStockOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSEStockOption.Marshal(b, m, deterministic)
}
func (m *SSEStockOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSEStockOption.Merge(m, src)
}
func (m *SSEStockOption) XXX_Size() int {
	return xxx_messageInfo_SSEStockOption.Size(m)
}
func (m *SSEStockOption) XXX_DiscardUnknown() {
	xxx_messageInfo_SSEStockOption.DiscardUnknown(m)
}

var xxx_messageInfo_SSEStockOption proto.InternalMessageInfo

func (m *SSEStockOption) GetExercisePrice() string {
	if m != nil {
		return m.ExercisePrice
	}
	return ""
}

func (m *SSEStockOption) GetUpdateVersion() string {
	if m != nil {
		return m.UpdateVersion
	}
	return ""
}

func (m *SSEStockOption) GetOptionType() string {
	if m != nil {
		return m.OptionType
	}
	return ""
}

func (m *SSEStockOption) GetDailyPriceUpLimit() string {
	if m != nil {
		return m.DailyPriceUpLimit
	}
	return ""
}

func (m *SSEStockOption) GetTimeSave() string {
	if m != nil {
		return m.TimeSave
	}
	return ""
}

func (m *SSEStockOption) GetDELIST_Flag() string {
	if m != nil {
		return m.DELIST_Flag
	}
	return ""
}

func (m *SSEStockOption) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *SSEStockOption) GetExpireDate() string {
	if m != nil {
		return m.ExpireDate
	}
	return ""
}

func (m *SSEStockOption) GetContractUnit() string {
	if m != nil {
		return m.ContractUnit
	}
	return ""
}

func (m *SSEStockOption) GetCallOrPut() string {
	if m != nil {
		return m.CallOrPut
	}
	return ""
}

func (m *SSEStockOption) GetLmtOrdMaxFloor() string {
	if m != nil {
		return m.LmtOrdMaxFloor
	}
	return ""
}

func (m *SSEStockOption) GetDeliveryDate() string {
	if m != nil {
		return m.DeliveryDate
	}
	return ""
}

func (m *SSEStockOption) GetChangeFlag() string {
	if m != nil {
		return m.ChangeFlag
	}
	return ""
}

func (m *SSEStockOption) GetMktOrdMaxFloor() string {
	if m != nil {
		return m.MktOrdMaxFloor
	}
	return ""
}

func (m *SSEStockOption) GetUnderlyingType() string {
	if m != nil {
		return m.UnderlyingType
	}
	return ""
}

func (m *SSEStockOption) GetDailyPriceDownLimit() string {
	if m != nil {
		return m.DailyPriceDownLimit
	}
	return ""
}

func (m *SSEStockOption) GetRoundLot() string {
	if m != nil {
		return m.RoundLot
	}
	return ""
}

func (m *SSEStockOption) GetSecurityClosePX() string {
	if m != nil {
		return m.SecurityClosePX
	}
	return ""
}

func (m *SSEStockOption) GetSettlPrice() string {
	if m != nil {
		return m.SettlPrice
	}
	return ""
}

func (m *SSEStockOption) GetContractSymbol() string {
	if m != nil {
		return m.ContractSymbol
	}
	return ""
}

func (m *SSEStockOption) GetNum() string {
	if m != nil {
		return m.Num
	}
	return ""
}

func (m *SSEStockOption) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

func (m *SSEStockOption) GetMarginRatioParam1() string {
	if m != nil {
		return m.MarginRatioParam1
	}
	return ""
}

func (m *SSEStockOption) GetMarginRatioParam2() string {
	if m != nil {
		return m.MarginRatioParam2
	}
	return ""
}

func (m *SSEStockOption) GetLmtOrdMinFloor() string {
	if m != nil {
		return m.LmtOrdMinFloor
	}
	return ""
}

func (m *SSEStockOption) GetMktOrdMinFloor() string {
	if m != nil {
		return m.MktOrdMinFloor
	}
	return ""
}

func (m *SSEStockOption) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *SSEStockOption) GetPriceLimitType() string {
	if m != nil {
		return m.PriceLimitType
	}
	return ""
}

func (m *SSEStockOption) GetExerciseDate() string {
	if m != nil {
		return m.ExerciseDate
	}
	return ""
}

func (m *SSEStockOption) GetMarginUnit() string {
	if m != nil {
		return m.MarginUnit
	}
	return ""
}

func (m *SSEStockOption) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *SSEStockOption) GetSecurityNameByID() string {
	if m != nil {
		return m.SecurityNameByID
	}
	return ""
}

func (m *SSEStockOption) GetContractFlag() string {
	if m != nil {
		return m.ContractFlag
	}
	return ""
}

func (m *SSEStockOption) GetUnderlyingClosePX() string {
	if m != nil {
		return m.UnderlyingClosePX
	}
	return ""
}

// 期权月份
type OptionMonth struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	Short                string   `protobuf:"bytes,3,opt,name=short,proto3" json:"short"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptionMonth) Reset()         { *m = OptionMonth{} }
func (m *OptionMonth) String() string { return proto.CompactTextString(m) }
func (*OptionMonth) ProtoMessage()    {}
func (*OptionMonth) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{21}
}

func (m *OptionMonth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionMonth.Unmarshal(m, b)
}
func (m *OptionMonth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionMonth.Marshal(b, m, deterministic)
}
func (m *OptionMonth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionMonth.Merge(m, src)
}
func (m *OptionMonth) XXX_Size() int {
	return xxx_messageInfo_OptionMonth.Size(m)
}
func (m *OptionMonth) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionMonth.DiscardUnknown(m)
}

var xxx_messageInfo_OptionMonth proto.InternalMessageInfo

func (m *OptionMonth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OptionMonth) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *OptionMonth) GetShort() string {
	if m != nil {
		return m.Short
	}
	return ""
}

// 期权月份列表
type OptionMonthList struct {
	List                 []*OptionMonth `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *OptionMonthList) Reset()         { *m = OptionMonthList{} }
func (m *OptionMonthList) String() string { return proto.CompactTextString(m) }
func (*OptionMonthList) ProtoMessage()    {}
func (*OptionMonthList) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{22}
}

func (m *OptionMonthList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionMonthList.Unmarshal(m, b)
}
func (m *OptionMonthList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionMonthList.Marshal(b, m, deterministic)
}
func (m *OptionMonthList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionMonthList.Merge(m, src)
}
func (m *OptionMonthList) XXX_Size() int {
	return xxx_messageInfo_OptionMonthList.Size(m)
}
func (m *OptionMonthList) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionMonthList.DiscardUnknown(m)
}

var xxx_messageInfo_OptionMonthList proto.InternalMessageInfo

func (m *OptionMonthList) GetList() []*OptionMonth {
	if m != nil {
		return m.List
	}
	return nil
}

type EmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{23}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

type EmptyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{24}
}

func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResponse.Unmarshal(m, b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return xxx_messageInfo_EmptyResponse.Size(m)
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

type CommonRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonRequest) Reset()         { *m = CommonRequest{} }
func (m *CommonRequest) String() string { return proto.CompactTextString(m) }
func (*CommonRequest) ProtoMessage()    {}
func (*CommonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{25}
}

func (m *CommonRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonRequest.Unmarshal(m, b)
}
func (m *CommonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonRequest.Marshal(b, m, deterministic)
}
func (m *CommonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRequest.Merge(m, src)
}
func (m *CommonRequest) XXX_Size() int {
	return xxx_messageInfo_CommonRequest.Size(m)
}
func (m *CommonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRequest proto.InternalMessageInfo

type CommonResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResponse) Reset()         { *m = CommonResponse{} }
func (m *CommonResponse) String() string { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()    {}
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{26}
}

func (m *CommonResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonResponse.Unmarshal(m, b)
}
func (m *CommonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonResponse.Marshal(b, m, deterministic)
}
func (m *CommonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResponse.Merge(m, src)
}
func (m *CommonResponse) XXX_Size() int {
	return xxx_messageInfo_CommonResponse.Size(m)
}
func (m *CommonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResponse proto.InternalMessageInfo

func (m *CommonResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CommonResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CommonResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.ExchangeType", ExchangeType_name, ExchangeType_value)
	proto.RegisterEnum("pb.ProductType", ProductType_name, ProductType_value)
	proto.RegisterEnum("pb.PeriodType", PeriodType_name, PeriodType_value)
	proto.RegisterEnum("pb.OptionCallPutType", OptionCallPutType_name, OptionCallPutType_value)
	proto.RegisterEnum("pb.OptionDeliveryDateType", OptionDeliveryDateType_name, OptionDeliveryDateType_value)
	proto.RegisterEnum("pb.CloseCommissionAlgorithim", CloseCommissionAlgorithim_name, CloseCommissionAlgorithim_value)
	proto.RegisterEnum("pb.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("pb.CurrencyType", CurrencyType_name, CurrencyType_value)
	proto.RegisterEnum("pb.TradingAccountType", TradingAccountType_name, TradingAccountType_value)
	proto.RegisterType((*Symbol)(nil), "pb.Symbol")
	proto.RegisterType((*SymbolList)(nil), "pb.SymbolList")
	proto.RegisterType((*ProductID)(nil), "pb.ProductID")
	proto.RegisterType((*BrokerRoute)(nil), "pb.BrokerRoute")
	proto.RegisterType((*BrokerRouteList)(nil), "pb.BrokerRouteList")
	proto.RegisterType((*InstrumentInfo)(nil), "pb.InstrumentInfo")
	proto.RegisterType((*SimpleTimePeriod)(nil), "pb.SimpleTimePeriod")
	proto.RegisterType((*MarketTimeRule)(nil), "pb.MarketTimeRule")
	proto.RegisterType((*ProductInfo)(nil), "pb.ProductInfo")
	proto.RegisterType((*TradingInstrument)(nil), "pb.TradingInstrument")
	proto.RegisterType((*TradingInstrumentList)(nil), "pb.TradingInstrumentList")
	proto.RegisterType((*ProductInfoList)(nil), "pb.ProductInfoList")
	proto.RegisterType((*ReqSetTradingInstrumentList)(nil), "pb.ReqSetTradingInstrumentList")
	proto.RegisterType((*ReqSetProductInfoList)(nil), "pb.ReqSetProductInfoList")
	proto.RegisterType((*ReqUpdateTIOpenDate)(nil), "pb.ReqUpdateTIOpenDate")
	proto.RegisterType((*ReqUpdateTIOpenDateList)(nil), "pb.ReqUpdateTIOpenDateList")
	proto.RegisterType((*AccountMoneySummary)(nil), "pb.AccountMoneySummary")
	proto.RegisterType((*AccountMoneySummaryList)(nil), "pb.AccountMoneySummaryList")
	proto.RegisterType((*MoneyTransferRecord)(nil), "pb.MoneyTransferRecord")
	proto.RegisterType((*MTRList)(nil), "pb.MTRList")
	proto.RegisterType((*SSEStockOption)(nil), "pb.SSEStockOption")
	proto.RegisterType((*OptionMonth)(nil), "pb.OptionMonth")
	proto.RegisterType((*OptionMonthList)(nil), "pb.OptionMonthList")
	proto.RegisterType((*EmptyRequest)(nil), "pb.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "pb.EmptyResponse")
	proto.RegisterType((*CommonRequest)(nil), "pb.CommonRequest")
	proto.RegisterType((*CommonResponse)(nil), "pb.CommonResponse")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 3708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xdd, 0x72, 0xdb, 0x48,
	0x76, 0x36, 0x45, 0xfd, 0x10, 0x87, 0x7f, 0x10, 0x24, 0x4b, 0xb4, 0x3d, 0x63, 0x6b, 0xe8, 0x9d,
	0xb1, 0x2c, 0x7b, 0x6c, 0xcb, 0x5e, 0x3b, 0xd9, 0xc9, 0x95, 0x44, 0x51, 0x36, 0x63, 0x91, 0x54,
	0x81, 0x94, 0xd7, 0xb3, 0x37, 0x28, 0x08, 0x68, 0x49, 0x28, 0xe1, 0x6f, 0x00, 0xd0, 0x16, 0x93,
	0xca, 0x45, 0x2a, 0x8f, 0x90, 0x3c, 0x44, 0xaa, 0x72, 0x9d, 0xa7, 0xc9, 0x13, 0xe4, 0x19, 0x72,
	0x93, 0x3a, 0xe7, 0x74, 0x83, 0xa0, 0x24, 0xef, 0x6e, 0xa5, 0x72, 0x25, 0xf4, 0xd7, 0xdf, 0xe9,
	0x9f, 0xf3, 0xd7, 0xa7, 0x9b, 0x82, 0x9a, 0x13, 0x05, 0x41, 0x14, 0xbe, 0x88, 0x93, 0x28, 0x8b,
	0x8c, 0x85, 0xf8, 0xb4, 0xfd, 0xf7, 0xb0, 0x3c, 0x9a, 0x06, 0xa7, 0x91, 0x6f, 0x3c, 0x87, 0x8a,
	0xb8, 0x72, 0x2e, 0xec, 0xf0, 0x5c, 0xb4, 0x4a, 0x5b, 0xa5, 0xed, 0xc6, 0x6b, 0xfd, 0x45, 0x7c,
	0xfa, 0xa2, 0x2b, 0xb1, 0xf1, 0x34, 0x16, 0x66, 0xce, 0x30, 0x0c, 0x58, 0x74, 0x22, 0x57, 0xb4,
	0x16, 0xb6, 0x4a, 0xdb, 0x9a, 0x49, 0xdf, 0xed, 0xe7, 0x00, 0x3c, 0xd6, 0x91, 0x97, 0x66, 0xc6,
	0x43, 0x58, 0xf4, 0xbd, 0x34, 0x6b, 0x95, 0xb6, 0xca, 0xdb, 0xd5, 0xd7, 0x80, 0x63, 0x71, 0xaf,
	0x49, 0x78, 0xbb, 0x0f, 0xda, 0x71, 0x12, 0xb9, 0x13, 0x27, 0xeb, 0x1d, 0xfc, 0x3f, 0x4c, 0xfe,
	0xaf, 0x25, 0xa8, 0xee, 0x27, 0xd1, 0xa5, 0x48, 0xcc, 0x68, 0x92, 0x09, 0xa3, 0x01, 0x0b, 0x9e,
	0x4b, 0x63, 0x69, 0xe6, 0x82, 0xe7, 0xa2, 0x4c, 0x36, 0x8d, 0x59, 0x66, 0xc9, 0xa4, 0x6f, 0xc4,
	0x42, 0x3b, 0x10, 0xad, 0x32, 0x8f, 0x83, 0xdf, 0x46, 0x1b, 0xea, 0x81, 0x6b, 0x9d, 0x25, 0x51,
	0x98, 0x59, 0xb4, 0xfe, 0xc5, 0xad, 0xf2, 0xb6, 0x66, 0x56, 0x03, 0xf7, 0x10, 0x31, 0xda, 0xda,
	0x36, 0xe8, 0x59, 0x62, 0xbb, 0xa2, 0x48, 0x5b, 0x22, 0x5a, 0x83, 0xf0, 0x9c, 0xd9, 0x7e, 0x07,
	0xcd, 0xc2, 0xa2, 0x48, 0xf8, 0xf1, 0x9c, 0x5e, 0x9a, 0xb8, 0xcd, 0x02, 0x45, 0x2a, 0xe7, 0xbf,
	0x00, 0x1a, 0xbd, 0x30, 0xcd, 0x92, 0x49, 0x20, 0xc2, 0xac, 0x17, 0x9e, 0x45, 0xc6, 0x23, 0xa8,
	0xa6, 0xa4, 0x3f, 0x8b, 0xd6, 0xcc, 0x3b, 0x03, 0x86, 0x06, 0xb8, 0xf2, 0xc7, 0x50, 0x8f, 0xa3,
	0xd4, 0xcb, 0xbc, 0x28, 0xb4, 0x12, 0x3b, 0xbc, 0x94, 0x5b, 0xad, 0x29, 0xd0, 0xb4, 0xc3, 0x4b,
	0x1c, 0x65, 0x12, 0xbb, 0x76, 0x26, 0xac, 0xcc, 0x93, 0x3b, 0x2f, 0x9b, 0xc0, 0xd0, 0xd8, 0x0b,
	0x84, 0xf1, 0x1c, 0x0c, 0x45, 0x48, 0x6c, 0xd7, 0x0b, 0xcf, 0x2d, 0xd7, 0x9e, 0xb6, 0x16, 0x69,
	0x28, 0x5d, 0xf2, 0xb8, 0xe3, 0xc0, 0x9e, 0x1a, 0x3b, 0xb0, 0x3a, 0x89, 0x63, 0x91, 0x58, 0xbe,
	0x17, 0x78, 0x99, 0x15, 0x27, 0x9e, 0x23, 0x5a, 0x4b, 0x5b, 0xa5, 0xed, 0x92, 0xd9, 0xa4, 0x8e,
	0x23, 0xc4, 0x8f, 0x11, 0x46, 0xae, 0x1f, 0x7d, 0xbd, 0xc6, 0x5d, 0x66, 0x2e, 0x75, 0x14, 0xb8,
	0x3f, 0x41, 0x33, 0x4e, 0x84, 0xe5, 0xf8, 0x51, 0x2a, 0x24, 0x73, 0x85, 0x98, 0xf5, 0x38, 0x11,
	0x1d, 0x44, 0x99, 0xf7, 0x0a, 0xd6, 0x91, 0x97, 0x8a, 0x2c, 0xf3, 0x05, 0xaa, 0x4a, 0x92, 0x2b,
	0x44, 0x36, 0xe2, 0x44, 0x8c, 0xf2, 0x2e, 0x96, 0xf8, 0x1e, 0x00, 0x25, 0xbe, 0x44, 0xfe, 0x24,
	0x10, 0x2d, 0x8d, 0xf6, 0xa5, 0xc5, 0x89, 0xf8, 0x44, 0x80, 0xf1, 0x03, 0xd4, 0xb0, 0x5b, 0xe9,
	0xac, 0x05, 0x44, 0xa8, 0xc6, 0x89, 0x38, 0x96, 0x90, 0xf1, 0x14, 0xf4, 0x1b, 0xf3, 0x55, 0x79,
	0x1b, 0xe9, 0xb5, 0xc9, 0x1e, 0x41, 0xd5, 0x49, 0x04, 0x2a, 0x13, 0xf5, 0xd6, 0xaa, 0xd1, 0x60,
	0xc0, 0xd0, 0x81, 0x9d, 0x09, 0xe3, 0x01, 0x68, 0x51, 0x2c, 0x42, 0xee, 0xae, 0x53, 0x77, 0x05,
	0x01, 0xea, 0x7c, 0x04, 0x55, 0x71, 0x15, 0x7b, 0x89, 0x94, 0x6e, 0xb0, 0x34, 0x43, 0x44, 0x78,
	0x0e, 0x46, 0x9a, 0xd9, 0x49, 0x66, 0xb9, 0xc2, 0xf7, 0xbe, 0x88, 0x84, 0x79, 0x4d, 0xb6, 0x15,
	0xf5, 0x1c, 0x70, 0x07, 0xb1, 0xb7, 0x41, 0x17, 0xa1, 0x3b, 0xcf, 0xd5, 0x89, 0xdb, 0x10, 0xa1,
	0x5b, 0x64, 0xbe, 0x81, 0x0d, 0x2f, 0x95, 0xca, 0xcf, 0x22, 0xd7, 0x9e, 0x5a, 0xb6, 0x8f, 0x16,
	0x72, 0x5b, 0xab, 0xc4, 0x5f, 0xf3, 0x52, 0xb2, 0xc1, 0x18, 0xfb, 0xf6, 0xb8, 0xcb, 0x78, 0x0b,
	0x9b, 0x81, 0x7d, 0x65, 0x05, 0x76, 0x72, 0x29, 0x32, 0x2b, 0x4a, 0x5c, 0x91, 0x28, 0x2d, 0x1b,
	0x24, 0xb5, 0x1e, 0xd8, 0x57, 0x7d, 0xea, 0x1d, 0x62, 0xa7, 0x54, 0x38, 0x8a, 0x79, 0xe1, 0xad,
	0x62, 0x6b, 0x52, 0xcc, 0x0b, 0x6f, 0x8a, 0xbd, 0x81, 0x0d, 0x9c, 0x8d, 0x5d, 0x69, 0x4e, 0x6a,
	0x9d, 0x97, 0x18, 0xd8, 0x57, 0xe4, 0x4f, 0xd7, 0x85, 0xbc, 0xf0, 0x36, 0xa1, 0xbb, 0x52, 0xc8,
	0x0b, 0x6f, 0x08, 0x3d, 0x83, 0xea, 0xa9, 0x9d, 0x0a, 0x8b, 0x23, 0xad, 0xb5, 0xb1, 0x55, 0xba,
	0x96, 0xce, 0x00, 0xbb, 0x65, 0x12, 0xfd, 0x01, 0x6a, 0x69, 0x96, 0x78, 0x97, 0xca, 0x69, 0x37,
	0xc9, 0x2f, 0xaa, 0x8c, 0xb1, 0x4f, 0xfc, 0x01, 0xea, 0x8e, 0xed, 0xfb, 0x56, 0x3c, 0xc9, 0x2c,
	0xca, 0x48, 0x2d, 0xca, 0x77, 0x77, 0x71, 0xc4, 0x61, 0x8c, 0x1e, 0xd6, 0xb1, 0x7d, 0xff, 0x78,
	0x92, 0x51, 0xd2, 0xab, 0x3a, 0xb3, 0x86, 0xf1, 0x12, 0xd6, 0x26, 0xa1, 0x2b, 0x12, 0x7f, 0x8a,
	0x71, 0x19, 0x4c, 0xfc, 0xcc, 0x8b, 0x7d, 0xd1, 0xba, 0xc7, 0xce, 0x3e, 0xeb, 0xea, 0xcb, 0x1e,
	0x74, 0x55, 0x27, 0x0a, 0x4e, 0xbd, 0xd0, 0xa6, 0xac, 0x40, 0xd3, 0xdd, 0xa7, 0xad, 0x36, 0x0b,
	0x38, 0x8d, 0xfd, 0x3b, 0x68, 0xa0, 0x6e, 0x4e, 0x27, 0x53, 0xa5, 0x93, 0x07, 0x9c, 0x3e, 0x02,
	0x2f, 0xdc, 0x9f, 0x4c, 0xa5, 0x32, 0x7e, 0x82, 0x26, 0xb2, 0x52, 0xe1, 0xfb, 0x8a, 0xf6, 0x1d,
	0xd1, 0xea, 0x81, 0x17, 0x8e, 0x84, 0xef, 0xe7, 0x9a, 0x6e, 0x7a, 0x79, 0xfa, 0xb2, 0x28, 0x59,
	0x7f, 0x7f, 0x43, 0x71, 0x8d, 0x19, 0xa5, 0x13, 0xb9, 0x14, 0x9a, 0x5e, 0xaa, 0xd2, 0x4e, 0xeb,
	0xe1, 0x56, 0x69, 0xbb, 0x62, 0x6a, 0x5e, 0x2a, 0xd3, 0x8d, 0xf1, 0x01, 0x0c, 0xe9, 0xbb, 0x53,
	0x8b, 0x13, 0x14, 0x6e, 0xe7, 0x11, 0x69, 0xef, 0xfe, 0x4c, 0x7b, 0xd2, 0x91, 0xa7, 0xe8, 0xc9,
	0xa4, 0x42, 0xdd, 0xbd, 0x86, 0xb4, 0x7f, 0x01, 0x7d, 0xe4, 0x05, 0xb1, 0x4f, 0x19, 0xef, 0x58,
	0x24, 0x5e, 0xe4, 0x1a, 0xeb, 0xb0, 0x44, 0x11, 0x43, 0x89, 0x75, 0xc9, 0xe4, 0x86, 0xa1, 0x43,
	0x59, 0x84, 0xae, 0xcc, 0xa4, 0xf8, 0xd9, 0xfe, 0xcf, 0x12, 0x34, 0xd8, 0x1d, 0x51, 0xd8, 0x9c,
	0xf8, 0xc2, 0xd8, 0x05, 0x2d, 0xc5, 0xc8, 0x4a, 0x26, 0xbe, 0x90, 0x69, 0x7d, 0x9d, 0xb6, 0x79,
	0x6d, 0x0e, 0xb3, 0x82, 0x34, 0x12, 0x79, 0x0b, 0x55, 0xc7, 0x0e, 0x1d, 0xe1, 0xb3, 0xd0, 0xc2,
	0x9f, 0x11, 0x02, 0x26, 0x92, 0xd8, 0x1f, 0xa0, 0x1e, 0xd8, 0x99, 0x73, 0x81, 0xe6, 0x27, 0xc1,
	0xf2, 0x9f, 0x11, 0xac, 0x29, 0x2a, 0x8a, 0xb6, 0xff, 0x65, 0x11, 0xaa, 0xea, 0xbc, 0xc5, 0xe3,
	0xe4, 0x39, 0xe6, 0x41, 0x6a, 0x5a, 0xf2, 0x9c, 0xac, 0xbe, 0xae, 0xe3, 0x38, 0xf9, 0xa1, 0x8c,
	0x69, 0x91, 0x3f, 0x5d, 0xe3, 0x6f, 0x40, 0x57, 0xec, 0xf3, 0x24, 0x9a, 0xc4, 0x28, 0xb3, 0x70,
	0x9b, 0x4c, 0x43, 0xd2, 0xde, 0x23, 0xab, 0xe7, 0xe2, 0x69, 0x47, 0x66, 0x2a, 0x93, 0x99, 0x9a,
	0x05, 0x32, 0xd9, 0x86, 0xcf, 0x61, 0x4a, 0xba, 0x3c, 0x3a, 0x9d, 0x6d, 0x8b, 0x74, 0xb6, 0x55,
	0x25, 0x46, 0x87, 0x1b, 0xa5, 0x6d, 0xcf, 0xc1, 0x63, 0xcb, 0xb9, 0x94, 0x27, 0x8c, 0x46, 0xc8,
	0xd8, 0x73, 0x2e, 0x8d, 0x27, 0xd0, 0x64, 0x77, 0x9c, 0x45, 0xc5, 0x32, 0xa7, 0x36, 0x86, 0xf3,
	0x88, 0x98, 0x4f, 0xff, 0x2b, 0x7f, 0x29, 0xfd, 0x57, 0x6e, 0xa6, 0xff, 0xc7, 0x50, 0x77, 0x26,
	0x49, 0x22, 0x42, 0x67, 0xca, 0x1e, 0xc8, 0x67, 0x48, 0x4d, 0x81, 0x14, 0x4d, 0xf3, 0x67, 0x04,
	0xa9, 0x4c, 0x1e, 0x25, 0x85, 0x33, 0x82, 0x74, 0x64, 0xbc, 0x04, 0x0d, 0x8f, 0x62, 0xb6, 0x67,
	0x95, 0x74, 0x6a, 0xa0, 0x9a, 0xe6, 0x9d, 0xcc, 0xac, 0x64, 0xca, 0xdd, 0x7e, 0x81, 0x7b, 0xae,
	0x97, 0x66, 0x5e, 0x78, 0x3e, 0xf1, 0xd2, 0x8b, 0x7c, 0xad, 0x7c, 0xa0, 0xd7, 0x28, 0x6a, 0x36,
	0x0b, 0x04, 0xb5, 0x70, 0x1c, 0xa9, 0xfd, 0xef, 0x25, 0x58, 0x95, 0xf1, 0x34, 0x2b, 0x2f, 0x8c,
	0x36, 0x2c, 0xcb, 0xec, 0x56, 0xba, 0x11, 0xa4, 0xb2, 0xc7, 0xf8, 0xbb, 0xb9, 0x88, 0xf6, 0xc2,
	0xb3, 0x48, 0x3a, 0x00, 0x2d, 0x76, 0xbe, 0x56, 0x29, 0x46, 0x36, 0x39, 0xdb, 0xeb, 0x99, 0x81,
	0x49, 0xb2, 0x4c, 0x92, 0x45, 0x6f, 0x20, 0x31, 0x65, 0x71, 0x6c, 0xb4, 0xf7, 0xe1, 0xee, 0x8d,
	0x95, 0x52, 0x01, 0xf5, 0x74, 0xae, 0x80, 0xa2, 0xbc, 0x79, 0x83, 0x28, 0xcb, 0xa8, 0x77, 0xd0,
	0x2c, 0x8c, 0xff, 0xad, 0xf2, 0xab, 0xb8, 0x04, 0x96, 0xfb, 0x27, 0x78, 0x60, 0x8a, 0xdf, 0x46,
	0x22, 0xbb, 0x7d, 0x05, 0x9b, 0xb0, 0x12, 0xc5, 0x9c, 0xd5, 0xb8, 0x0c, 0x5b, 0x8e, 0x62, 0xca,
	0x60, 0xf7, 0x0b, 0x65, 0x2c, 0xe7, 0x8c, 0x59, 0xd1, 0xaa, 0x96, 0x5d, 0xfe, 0xcb, 0xcb, 0xfe,
	0x0d, 0xee, 0xf2, 0xf4, 0xd7, 0x17, 0xff, 0x7f, 0x9a, 0xf8, 0xf1, 0xdc, 0xc4, 0xdf, 0xd8, 0xf1,
	0x27, 0x58, 0x33, 0xc5, 0x6f, 0x27, 0x5c, 0xdf, 0xf5, 0x86, 0xaa, 0x04, 0xf9, 0x6b, 0x3c, 0x63,
	0xae, 0x86, 0x59, 0x98, 0xaf, 0x61, 0xda, 0xff, 0x08, 0x9b, 0xb7, 0x8c, 0x4b, 0x9b, 0xb9, 0x7f,
	0xad, 0xe6, 0x2f, 0xae, 0xf9, 0x99, 0x5c, 0x33, 0x27, 0xc6, 0x4d, 0x9c, 0xf5, 0x96, 0x61, 0x78,
	0xed, 0x45, 0xad, 0x94, 0x8b, 0x5a, 0x69, 0xff, 0x77, 0x13, 0xd6, 0xf6, 0x1c, 0x27, 0x9a, 0x84,
	0x59, 0x3f, 0x0a, 0xc5, 0x74, 0x34, 0x09, 0x02, 0x3b, 0x99, 0xde, 0xb8, 0x1b, 0x3c, 0x2e, 0xdc,
	0x0d, 0x64, 0x92, 0x92, 0x62, 0x85, 0x24, 0xf5, 0xf6, 0x7a, 0xdc, 0x97, 0x67, 0xf7, 0x94, 0x4e,
	0x21, 0xf6, 0xaf, 0x65, 0x82, 0x16, 0xac, 0x9c, 0xda, 0x3e, 0xa6, 0x70, 0x4a, 0x6b, 0x25, 0x53,
	0x35, 0x8d, 0x87, 0x00, 0x78, 0x1d, 0xf3, 0xd2, 0x14, 0x33, 0x0d, 0xa7, 0xb4, 0x02, 0x82, 0xa9,
	0xca, 0x99, 0x24, 0x58, 0x19, 0x9d, 0x7b, 0xa1, 0x2c, 0x94, 0x35, 0x67, 0x92, 0xf4, 0x09, 0x30,
	0x5e, 0xc0, 0x5a, 0x28, 0xb2, 0x59, 0xf8, 0xdb, 0x01, 0x2e, 0x58, 0x96, 0xc9, 0xab, 0xa1, 0xc8,
	0x54, 0xe0, 0xef, 0x51, 0x07, 0x56, 0x93, 0x98, 0xda, 0xd4, 0x62, 0xb8, 0x42, 0xc6, 0x64, 0xb8,
	0x2f, 0xd7, 0xf3, 0x08, 0xaa, 0x5e, 0x98, 0x89, 0x44, 0xa4, 0x18, 0xa5, 0x94, 0xd6, 0x4a, 0x26,
	0x28, 0xa8, 0x17, 0xe2, 0x56, 0x5c, 0x41, 0xf3, 0x51, 0x2e, 0x2b, 0x99, 0xaa, 0x89, 0xa6, 0xfc,
	0xea, 0x65, 0x17, 0x6e, 0x62, 0x7f, 0x95, 0xa5, 0x70, 0xde, 0xc6, 0x7c, 0x79, 0x96, 0x44, 0xff,
	0x20, 0x42, 0xb5, 0x93, 0x1a, 0x11, 0x6a, 0x0c, 0xca, 0xcd, 0x3c, 0x83, 0x55, 0x49, 0x2a, 0xa8,
	0xa4, 0x4e, 0x44, 0x9d, 0x3b, 0x3a, 0x33, 0xc5, 0x7c, 0x07, 0x9a, 0xfd, 0xc5, 0xf6, 0x7c, 0xfb,
	0xd4, 0xe7, 0xaa, 0xb8, 0x64, 0xce, 0x00, 0x4c, 0xe1, 0xea, 0xda, 0x10, 0x9d, 0x79, 0x19, 0x95,
	0xc3, 0x25, 0xb3, 0xea, 0xf0, 0xa5, 0x01, 0x21, 0x3c, 0x2d, 0x72, 0xb5, 0x49, 0x96, 0x4e, 0xac,
	0x86, 0x82, 0x25, 0x51, 0x1e, 0x07, 0x41, 0x94, 0x64, 0xe7, 0xe8, 0xdd, 0xab, 0x3c, 0x56, 0x9c,
	0x88, 0xbe, 0x84, 0xd4, 0x81, 0xe2, 0x24, 0xc2, 0xf5, 0x32, 0xaa, 0x74, 0xe9, 0x60, 0x12, 0x1d,
	0x02, 0x70, 0xf7, 0xb9, 0x52, 0xb1, 0x4e, 0xa4, 0xa2, 0xb6, 0x64, 0xd6, 0x14, 0xb8, 0x6f, 0xa7,
	0xc2, 0xf8, 0x19, 0x0c, 0xa5, 0x2e, 0x6b, 0xb6, 0xb3, 0x75, 0xb6, 0xa4, 0xea, 0xd9, 0xcb, 0x77,
	0xd8, 0x82, 0x95, 0x44, 0xa4, 0x22, 0xf9, 0xc2, 0x75, 0x6b, 0xc9, 0x54, 0x4d, 0x34, 0x61, 0xf1,
	0xd6, 0xb6, 0xc1, 0x37, 0x86, 0x6c, 0x76, 0x5f, 0xdb, 0x80, 0x65, 0xb9, 0x52, 0xae, 0x4c, 0x65,
	0x0b, 0x0d, 0x98, 0x6f, 0xb2, 0xc5, 0x06, 0x54, 0x6d, 0xd4, 0x96, 0x8a, 0x4b, 0x65, 0x42, 0xae,
	0x38, 0x1b, 0x0a, 0x96, 0x46, 0x7c, 0x02, 0xcd, 0xbc, 0x40, 0x93, 0xc4, 0xfb, 0x4c, 0x54, 0xb0,
	0x24, 0xfe, 0x2d, 0xb4, 0xf2, 0x11, 0xaf, 0x4b, 0x3c, 0x20, 0x89, 0x0d, 0xd5, 0x7f, 0x30, 0x2f,
	0xf9, 0x04, 0x9a, 0x72, 0xaf, 0xb9, 0x23, 0x7f, 0xc7, 0x53, 0x48, 0x58, 0x39, 0xf3, 0x4b, 0x58,
	0xcb, 0x47, 0x2e, 0xb8, 0xd4, 0xf7, 0x5c, 0x2a, 0xab, 0xae, 0x82, 0x53, 0xbd, 0x80, 0x35, 0xe9,
	0x81, 0x59, 0x62, 0x87, 0xe9, 0x99, 0x48, 0xac, 0x33, 0x21, 0xa8, 0x0a, 0x2d, 0x99, 0xd2, 0x39,
	0xc7, 0xb2, 0xe7, 0x50, 0xd0, 0x6d, 0x4a, 0xf2, 0xd3, 0xcc, 0x0e, 0x62, 0x2b, 0xb3, 0xaf, 0xa8,
	0x16, 0x2d, 0x99, 0x0d, 0xc6, 0x47, 0x08, 0x8f, 0xed, 0x2b, 0x74, 0xa2, 0xb9, 0x21, 0xb7, 0xd8,
	0x89, 0xb2, 0xc2, 0x60, 0x0f, 0x40, 0x9b, 0x8d, 0xf2, 0x03, 0xeb, 0x3f, 0x55, 0xf2, 0xdf, 0x03,
	0x04, 0x59, 0xa0, 0x1c, 0xb5, 0xcd, 0x1e, 0x16, 0x64, 0x81, 0xf4, 0xd1, 0xdf, 0x41, 0x83, 0x7c,
	0x74, 0x46, 0x79, 0xcc, 0x2e, 0x86, 0x5e, 0x9a, 0xb3, 0x1e, 0x41, 0x35, 0xcd, 0x22, 0xe7, 0xd2,
	0xfa, 0x62, 0xfb, 0x13, 0xd1, 0xfa, 0x1d, 0x07, 0x37, 0x41, 0x9f, 0x10, 0x31, 0x7e, 0x0f, 0x1b,
	0xa7, 0x11, 0x16, 0xb1, 0x22, 0x9e, 0x24, 0xce, 0x05, 0xde, 0x78, 0x64, 0x46, 0xf9, 0x91, 0xb8,
	0xeb, 0xd8, 0x6b, 0xe6, 0x9d, 0x32, 0xa9, 0xfc, 0x02, 0xf7, 0x12, 0xf1, 0x45, 0x24, 0xa9, 0xb8,
	0x45, 0xf0, 0x27, 0x12, 0xdc, 0x94, 0x84, 0x1b, 0xb2, 0x2f, 0x60, 0x8d, 0x6d, 0x6e, 0xf1, 0x63,
	0x8a, 0x94, 0x7a, 0xc2, 0x1a, 0xe7, 0x2e, 0x3c, 0x21, 0x15, 0x7f, 0x07, 0x56, 0xd3, 0x8b, 0x28,
	0xc9, 0xf8, 0xf6, 0x21, 0xd9, 0xdb, 0xf2, 0xe2, 0x8d, 0x1d, 0x78, 0xff, 0xf8, 0xc6, 0xd8, 0x52,
	0x33, 0x4f, 0x6f, 0x8c, 0x2d, 0xd5, 0x33, 0x3f, 0xb6, 0x64, 0xef, 0x5c, 0x1b, 0x5b, 0x72, 0xdf,
	0xc1, 0xa6, 0xca, 0x55, 0x94, 0x67, 0x0a, 0xee, 0xf5, 0x8c, 0x24, 0xee, 0xca, 0x8c, 0x85, 0xbd,
	0x05, 0x0f, 0xfb, 0x11, 0x1a, 0xfc, 0xfc, 0x96, 0xbb, 0xee, 0x73, 0x7e, 0xd2, 0x60, 0x54, 0x79,
	0xee, 0x53, 0x2c, 0xb5, 0xc5, 0x99, 0x48, 0x84, 0x9b, 0x13, 0x7f, 0xe6, 0x95, 0x28, 0x5c, 0x51,
	0x9f, 0x83, 0x41, 0x57, 0xd3, 0x3c, 0x98, 0x12, 0x8c, 0xdf, 0x17, 0x9c, 0x36, 0xb1, 0x47, 0xbd,
	0x9f, 0x99, 0x18, 0xc7, 0x8f, 0xa1, 0xfe, 0xd5, 0x4e, 0x42, 0x4c, 0x0e, 0xbe, 0xf8, 0x22, 0xfc,
	0xd6, 0x4b, 0xf6, 0x13, 0x09, 0x1e, 0x21, 0x86, 0x8a, 0x38, 0x8b, 0x12, 0x47, 0x3d, 0xbd, 0x30,
	0xf1, 0x15, 0x4f, 0x4f, 0x1d, 0xb4, 0x2b, 0xe6, 0xbe, 0x86, 0xbb, 0x8e, 0x2f, 0x6c, 0x5c, 0x28,
	0xb1, 0x5d, 0xa5, 0xb8, 0x5d, 0xe2, 0xaf, 0xc9, 0x4e, 0x92, 0x70, 0xa5, 0xf2, 0xd4, 0x93, 0xdb,
	0xeb, 0xc2, 0x93, 0xdb, 0x7d, 0xa8, 0xa8, 0x74, 0xd8, 0x7a, 0xc3, 0xce, 0xaf, 0xda, 0x18, 0xf0,
	0x52, 0xd9, 0x39, 0xe5, 0xf7, 0xc5, 0x28, 0xeb, 0x49, 0xb4, 0x7d, 0x08, 0x9b, 0xb7, 0x1c, 0xf5,
	0x54, 0x68, 0x3c, 0x9b, 0x2b, 0xf9, 0x36, 0x0b, 0xc7, 0x7b, 0x91, 0x2a, 0x0b, 0xa1, 0x7f, 0x5e,
	0x81, 0x35, 0x82, 0x55, 0xb0, 0x9b, 0xc2, 0x89, 0x12, 0x17, 0x6f, 0x82, 0x13, 0x59, 0x34, 0x94,
	0x4d, 0xfc, 0xc4, 0x63, 0xc8, 0xf5, 0x12, 0xe1, 0xd0, 0x45, 0x81, 0xeb, 0x9e, 0x19, 0x70, 0xf3,
	0x9a, 0x50, 0xfe, 0x2b, 0xaf, 0x09, 0x8b, 0xb7, 0x5f, 0x13, 0xbe, 0x03, 0xcd, 0x89, 0xc2, 0x33,
	0x2f, 0x09, 0x84, 0x4b, 0xc5, 0xc2, 0x92, 0x39, 0x03, 0xe8, 0xec, 0x4e, 0x2d, 0xe5, 0x1f, 0xf2,
	0xee, 0x03, 0x5e, 0x7a, 0x2c, 0x11, 0x4c, 0xfc, 0x73, 0x05, 0x82, 0x6c, 0x61, 0x72, 0xb1, 0x59,
	0x17, 0x78, 0xa5, 0xab, 0x90, 0x55, 0x34, 0x89, 0xf4, 0x68, 0xdc, 0x28, 0x16, 0x89, 0x9d, 0x45,
	0x09, 0xf6, 0x6b, 0xfc, 0xe8, 0xa8, 0xa0, 0x9e, 0x8b, 0xf2, 0xa9, 0x20, 0xff, 0xc6, 0x7e, 0xbe,
	0xe2, 0x68, 0x12, 0xe9, 0xf1, 0xab, 0x2b, 0x5e, 0x4b, 0xaa, 0xa4, 0x36, 0xfa, 0xc6, 0xe3, 0x0b,
	0x3d, 0x5e, 0x84, 0x19, 0x95, 0x02, 0x9a, 0xa9, 0x9a, 0x46, 0x1b, 0xea, 0xa7, 0x76, 0x78, 0x29,
	0x63, 0xd6, 0x73, 0xa9, 0x02, 0xd0, 0xcc, 0x2a, 0x82, 0x14, 0xad, 0x3d, 0x17, 0x1d, 0x34, 0xb6,
	0xa7, 0xf2, 0x59, 0x21, 0x3c, 0xf3, 0xce, 0x91, 0xd7, 0xa0, 0xe1, 0x9b, 0xb2, 0xa3, 0x43, 0x78,
	0xcf, 0x45, 0xe7, 0x89, 0x12, 0xef, 0xdc, 0x0b, 0xed, 0x3c, 0x5f, 0x70, 0x35, 0xd0, 0x50, 0xb0,
	0x4c, 0x17, 0x3a, 0x94, 0x31, 0x33, 0x73, 0x11, 0x80, 0x9f, 0x74, 0xf2, 0xcb, 0x69, 0x62, 0x3b,
	0xbb, 0xa0, 0x93, 0x1f, 0xaf, 0xa4, 0x8c, 0x1d, 0xdb, 0xd9, 0x05, 0x8e, 0xee, 0xb9, 0x22, 0xcc,
	0xbc, 0x6c, 0x6a, 0x85, 0x93, 0xe0, 0x54, 0x24, 0x74, 0xfc, 0x6b, 0x66, 0x43, 0xc1, 0x03, 0x42,
	0x69, 0xac, 0x8b, 0x28, 0x14, 0x8a, 0xb5, 0x26, 0xc7, 0x42, 0x4c, 0x52, 0x1e, 0x80, 0x46, 0x3b,
	0xa7, 0xd8, 0x58, 0xa7, 0xfe, 0x0a, 0x02, 0x74, 0xf7, 0xdd, 0x06, 0x9d, 0x3a, 0x4f, 0x13, 0x3b,
	0x74, 0x2e, 0x98, 0x73, 0x97, 0x67, 0x42, 0x7c, 0x9f, 0x60, 0x62, 0x6e, 0x41, 0x8d, 0x98, 0x8e,
	0x9d, 0xb8, 0x56, 0x18, 0x51, 0x01, 0xa0, 0x99, 0x80, 0x58, 0xc7, 0x4e, 0xdc, 0x41, 0x84, 0xb1,
	0x16, 0x27, 0xd1, 0x17, 0x2f, 0x94, 0x8f, 0x53, 0x9a, 0x99, 0xb7, 0xe9, 0x59, 0xdd, 0xcb, 0xa6,
	0x54, 0x00, 0x68, 0x26, 0x7d, 0x1b, 0xf7, 0xa0, 0x12, 0xdb, 0xd2, 0x83, 0xef, 0xb1, 0xb5, 0x62,
	0x9b, 0x9d, 0x17, 0x2b, 0x1f, 0x7b, 0x2a, 0x5c, 0xbe, 0x78, 0xde, 0x27, 0x13, 0x68, 0x84, 0xd0,
	0x43, 0x32, 0xa5, 0x3b, 0xe9, 0x9f, 0x4c, 0x79, 0x40, 0x94, 0x7a, 0x8e, 0x12, 0x4d, 0x25, 0x84,
	0xef, 0x66, 0x09, 0xa1, 0xfd, 0x0e, 0x56, 0xfa, 0x63, 0xf3, 0x5b, 0xb1, 0x7b, 0x4b, 0x74, 0xca,
	0xd8, 0xfd, 0x37, 0x80, 0xc6, 0x68, 0xd4, 0x1d, 0xe1, 0xa9, 0xc6, 0x8f, 0x41, 0xb8, 0x0a, 0x71,
	0x25, 0x12, 0xc7, 0xcb, 0xdf, 0x91, 0xb9, 0xec, 0xaf, 0x2b, 0x94, 0x1f, 0xe5, 0x7e, 0x84, 0x86,
	0x7c, 0xf5, 0xc6, 0xb3, 0x4a, 0x05, 0xb4, 0x66, 0xd6, 0x19, 0xfd, 0xc4, 0x20, 0x87, 0xc3, 0xec,
	0x29, 0xad, 0xac, 0xc2, 0x21, 0x7f, 0x45, 0x7b, 0x09, 0xeb, 0xae, 0xed, 0xf9, 0x53, 0x9e, 0xcb,
	0x9a, 0xc4, 0xfc, 0xd8, 0x28, 0x5f, 0x34, 0x56, 0xa9, 0x8f, 0x66, 0x3c, 0x89, 0xe9, 0xa1, 0x11,
	0x0d, 0x4f, 0xb7, 0xff, 0xd4, 0xfe, 0xc2, 0x0f, 0xe7, 0x1a, 0xdf, 0xf4, 0x47, 0x36, 0x97, 0x73,
	0x07, 0xdd, 0xa3, 0xde, 0x68, 0x6c, 0x1d, 0xfa, 0xf6, 0x39, 0x45, 0xb5, 0x66, 0x02, 0x43, 0x88,
	0x50, 0xf4, 0xf1, 0x03, 0x30, 0x26, 0xfe, 0x15, 0x8e, 0x5e, 0x7e, 0xf8, 0xbd, 0xe5, 0x01, 0x99,
	0xa3, 0xbb, 0xf8, 0x80, 0x8c, 0x49, 0x2a, 0x0a, 0xb3, 0xc4, 0x76, 0x32, 0x6b, 0x12, 0x7a, 0x99,
	0x0c, 0xf0, 0x9a, 0x02, 0x4f, 0x42, 0x2f, 0x33, 0x1e, 0x02, 0x3d, 0x42, 0x5a, 0x51, 0x62, 0xc5,
	0x13, 0x2e, 0xfd, 0x35, 0x53, 0x43, 0x68, 0x98, 0x1c, 0x4f, 0xf0, 0x3e, 0xbe, 0xea, 0x07, 0xf4,
	0x9e, 0x6a, 0x05, 0xf6, 0x95, 0x75, 0xe6, 0x47, 0x51, 0x42, 0x01, 0xaf, 0x99, 0x0d, 0x3f, 0xc8,
	0x86, 0x89, 0xdb, 0xb7, 0xaf, 0x0e, 0x11, 0xc5, 0xf9, 0xe6, 0x9e, 0xf0, 0x64, 0x02, 0xa8, 0x15,
	0x5f, 0xe8, 0xe8, 0xd1, 0x9c, 0x8f, 0xb3, 0x33, 0xdc, 0x35, 0xe7, 0x00, 0x60, 0x88, 0x76, 0xfd,
	0x14, 0x56, 0x83, 0xcb, 0xeb, 0x13, 0x36, 0x78, 0xc2, 0xe0, 0x72, 0x6e, 0xc2, 0x27, 0xd0, 0x2c,
	0xbc, 0x98, 0x92, 0xd1, 0x9a, 0x4c, 0x9c, 0xc1, 0x64, 0xb8, 0x37, 0xb0, 0x51, 0x34, 0x9c, 0x1b,
	0x7d, 0x95, 0xef, 0xc4, 0x94, 0x14, 0x34, 0x73, 0x6d, 0x66, 0xba, 0x83, 0xe8, 0x6b, 0x98, 0x1b,
	0x2f, 0x89, 0x26, 0xa1, 0x6b, 0xf9, 0x51, 0x26, 0x33, 0x44, 0x85, 0x80, 0xa3, 0x28, 0xe3, 0xdc,
	0xee, 0x4c, 0x12, 0x4c, 0x0f, 0x7c, 0xf9, 0xf8, 0x2c, 0xf3, 0x43, 0x53, 0xe1, 0xfc, 0x43, 0xc6,
	0x67, 0x2a, 0xce, 0x30, 0xdd, 0x4b, 0x0f, 0x5d, 0x93, 0x3f, 0xed, 0x20, 0xc4, 0xee, 0xf9, 0x04,
	0x9a, 0xb9, 0x9d, 0xe4, 0x7d, 0x9c, 0x93, 0x44, 0x43, 0xc1, 0xf2, 0xfd, 0x59, 0x87, 0x72, 0x38,
	0x09, 0x64, 0x76, 0xc0, 0x4f, 0xbe, 0x65, 0x32, 0xa7, 0x77, 0xa0, 0x12, 0xc2, 0x0c, 0x29, 0x54,
	0x4a, 0x89, 0x9d, 0x79, 0x91, 0x15, 0xdb, 0x89, 0x1d, 0xec, 0xca, 0xdc, 0x20, 0x2b, 0x25, 0x13,
	0x7b, 0x8e, 0xa9, 0xe3, 0x76, 0xfe, 0x6b, 0x99, 0x33, 0x6e, 0xf0, 0x5f, 0xcf, 0x79, 0x87, 0x17,
	0x4a, 0x63, 0xdd, 0x9b, 0xf3, 0x0e, 0x2f, 0x64, 0x63, 0x15, 0xed, 0x9a, 0x53, 0xef, 0xcf, 0xd9,
	0x55, 0x51, 0xef, 0x41, 0x85, 0x7e, 0xcb, 0x40, 0x1f, 0x7a, 0xc0, 0x69, 0x49, 0x84, 0xae, 0xfa,
	0x99, 0x83, 0x6d, 0xc8, 0xcf, 0xfc, 0x64, 0x73, 0x4e, 0x2e, 0x0d, 0xc2, 0xc9, 0x74, 0x64, 0xf3,
	0xc7, 0x90, 0x67, 0x01, 0x1e, 0xe9, 0x7b, 0xf6, 0x46, 0x05, 0x2a, 0x6f, 0x94, 0xfb, 0xa5, 0x00,
	0x79, 0xc8, 0x0a, 0x64, 0x48, 0x86, 0x07, 0x28, 0x7b, 0xf6, 0x0e, 0xe8, 0x0a, 0x40, 0xb6, 0x53,
	0x08, 0xfd, 0x48, 0xa3, 0xfc, 0x00, 0xb3, 0x9b, 0x75, 0x8a, 0xbc, 0x2d, 0xe2, 0xe5, 0x1e, 0x82,
	0xd9, 0x7b, 0x1f, 0xd9, 0xc5, 0x88, 0x24, 0xf7, 0xff, 0x61, 0x3e, 0x22, 0x29, 0x00, 0x7e, 0x86,
	0xc2, 0x63, 0x7f, 0xee, 0x5c, 0x6d, 0x36, 0xc1, 0xac, 0x47, 0xba, 0x57, 0xbb, 0x0f, 0x55, 0xce,
	0x86, 0xfd, 0x28, 0xcc, 0x2e, 0xf2, 0x8c, 0x5b, 0x2a, 0x94, 0x60, 0xeb, 0xb0, 0xc4, 0x17, 0x03,
	0x4e, 0x7b, 0xdc, 0xa0, 0x37, 0x71, 0x2c, 0x7e, 0x65, 0xa2, 0xe3, 0x46, 0xfb, 0x1d, 0x34, 0x0b,
	0xc3, 0x7d, 0xeb, 0x51, 0xad, 0x40, 0x91, 0xd9, 0xb9, 0x01, 0xb5, 0x6e, 0x10, 0x67, 0x53, 0x53,
	0xfc, 0x36, 0xc1, 0x8a, 0xad, 0x09, 0x75, 0xd9, 0x4e, 0xe3, 0x28, 0x4c, 0x05, 0x02, 0x1d, 0x2a,
	0x85, 0x15, 0xe3, 0x33, 0x34, 0x14, 0xc0, 0x14, 0xac, 0x1d, 0xd2, 0x89, 0xe3, 0x88, 0x34, 0xa5,
	0xe5, 0x57, 0x4c, 0xd5, 0x9c, 0xfb, 0x4d, 0x78, 0x89, 0x7f, 0x13, 0x46, 0x76, 0x20, 0xd2, 0xd4,
	0x3e, 0x57, 0xa9, 0x5a, 0x35, 0x77, 0xfe, 0xa7, 0x04, 0xb5, 0xe2, 0x8f, 0xcb, 0x46, 0x05, 0x16,
	0x47, 0x1f, 0x0e, 0xbb, 0xfa, 0x1d, 0xfc, 0xea, 0xfc, 0xa9, 0xd3, 0xd5, 0x4b, 0xc6, 0x0a, 0x94,
	0x0f, 0x3a, 0x5d, 0x7d, 0xc1, 0xd0, 0x60, 0xa9, 0x73, 0x78, 0xd8, 0xfd, 0xac, 0x97, 0x11, 0x1b,
	0x8d, 0xba, 0xfa, 0x22, 0x7d, 0xfc, 0xa9, 0xab, 0x2f, 0xe1, 0xc7, 0x87, 0x8f, 0xef, 0xf5, 0x65,
	0x14, 0xfc, 0xf0, 0xf1, 0xb0, 0xab, 0xaf, 0x20, 0xbf, 0x37, 0x38, 0xe8, 0x7e, 0xd6, 0x2b, 0x46,
	0x03, 0x60, 0x78, 0x3c, 0xee, 0x0d, 0x07, 0x16, 0x8a, 0x69, 0x48, 0x1a, 0xfc, 0xda, 0xef, 0xea,
	0x80, 0x5f, 0xef, 0x8f, 0xf6, 0x3f, 0xeb, 0x55, 0x9a, 0x71, 0x7f, 0x38, 0xd6, 0x6b, 0x38, 0x56,
	0xa7, 0xdf, 0xd5, 0xeb, 0x34, 0xe3, 0xb0, 0xdf, 0xfd, 0xac, 0x37, 0xf0, 0xb3, 0x7b, 0x62, 0x76,
	0x3f, 0xeb, 0x4d, 0xec, 0xee, 0x1d, 0x77, 0x75, 0x1d, 0xb1, 0xa3, 0xde, 0xe1, 0x61, 0x57, 0x5f,
	0x45, 0xec, 0xa8, 0xdf, 0xd5, 0x0d, 0x5a, 0xd0, 0xfb, 0xcf, 0xfa, 0x1a, 0x0e, 0x77, 0xd0, 0xed,
	0x0f, 0xf5, 0x75, 0xe2, 0x0f, 0xba, 0xfa, 0x5d, 0xa3, 0x0e, 0x5a, 0x6f, 0xf0, 0x69, 0xef, 0xa8,
	0x87, 0x8b, 0xda, 0xd8, 0xf9, 0x8f, 0x52, 0xfe, 0x5b, 0x00, 0x6d, 0xbe, 0x0e, 0xda, 0xf1, 0xd8,
	0x3a, 0x19, 0x7c, 0x1c, 0xfe, 0x71, 0xa0, 0xdf, 0x91, 0xcd, 0xc3, 0x93, 0xf1, 0x89, 0x89, 0x6a,
	0xa8, 0x41, 0xe5, 0x78, 0x6c, 0x8d, 0xc6, 0xc3, 0xce, 0x47, 0x7d, 0xc1, 0xa8, 0xc2, 0xca, 0xf1,
	0xd8, 0xda, 0x1f, 0x0e, 0x0e, 0xf4, 0xb2, 0x61, 0x40, 0xe3, 0x78, 0x6c, 0x75, 0x86, 0xfd, 0xfd,
	0xde, 0x60, 0x0f, 0x77, 0xa9, 0x2f, 0x4a, 0x69, 0xde, 0xb4, 0xbe, 0x64, 0xac, 0x83, 0x9e, 0x0f,
	0xa6, 0xd0, 0x65, 0x63, 0x0d, 0x9a, 0x6a, 0x4c, 0x05, 0xae, 0x18, 0x77, 0x61, 0x15, 0xc1, 0x51,
	0xd7, 0xea, 0x8e, 0x0f, 0x15, 0x5c, 0xd9, 0x49, 0x01, 0xf8, 0x17, 0x0d, 0x65, 0xa8, 0x71, 0xaf,
	0xf3, 0x51, 0xbf, 0x63, 0x2c, 0xc3, 0x42, 0x7f, 0x57, 0x2f, 0xd1, 0xdf, 0x37, 0xfa, 0x02, 0xfd,
	0x7d, 0xcb, 0x26, 0xea, 0xef, 0xbe, 0x62, 0x13, 0xf5, 0x77, 0xdf, 0xb2, 0x89, 0xfa, 0x6f, 0x5e,
	0xe9, 0xcb, 0x48, 0xf9, 0xb0, 0xab, 0xaf, 0xd0, 0xdf, 0x37, 0x7a, 0x05, 0xff, 0x1e, 0xec, 0xea,
	0x1a, 0xfe, 0xfd, 0xe3, 0x2e, 0xdb, 0xa4, 0x3f, 0x1c, 0xec, 0xea, 0xd5, 0x9d, 0x57, 0xb0, 0x7a,
	0xe3, 0xc7, 0x38, 0xdc, 0xda, 0xb0, 0x83, 0x1b, 0xde, 0x3b, 0x3a, 0xd2, 0xef, 0xa0, 0x62, 0xa8,
	0x79, 0x7c, 0x32, 0xd6, 0x4b, 0x3b, 0x3f, 0xc1, 0xc6, 0xed, 0x3f, 0x40, 0x11, 0xef, 0xe0, 0x60,
	0x6c, 0x75, 0x4f, 0x4c, 0xfd, 0xce, 0xce, 0x08, 0xee, 0x5d, 0xbb, 0x19, 0xee, 0xf9, 0xe7, 0x51,
	0xe2, 0x65, 0x17, 0x5e, 0x80, 0xee, 0xd2, 0xe9, 0xec, 0x59, 0x83, 0xa1, 0xd9, 0xdf, 0x93, 0x53,
	0x60, 0x7b, 0x38, 0x20, 0x87, 0x6c, 0xc1, 0x3a, 0xb6, 0xfa, 0x27, 0x47, 0xe3, 0xde, 0xf1, 0x51,
	0xd7, 0xda, 0xff, 0xd5, 0x3a, 0xd8, 0x1b, 0x77, 0xf5, 0x85, 0x9d, 0x1d, 0xa8, 0x16, 0x5e, 0x2c,
	0x71, 0xa1, 0x9d, 0x81, 0xb2, 0x20, 0x8f, 0x32, 0x90, 0x16, 0x2c, 0xed, 0x6c, 0x41, 0xad, 0xf8,
	0x5e, 0x49, 0x4e, 0x37, 0xf8, 0x55, 0xbf, 0x83, 0x1f, 0x27, 0xa3, 0x03, 0xbd, 0xb4, 0xf3, 0x11,
	0x0c, 0xf9, 0x34, 0x5d, 0x1c, 0xb4, 0x01, 0x30, 0xde, 0x1b, 0xcf, 0xd6, 0xb6, 0x0a, 0x75, 0x6c,
	0x8f, 0xcd, 0xbd, 0xde, 0x60, 0xd0, 0x1b, 0xbc, 0xd7, 0x4b, 0xe8, 0x0f, 0x08, 0x75, 0xc6, 0xc7,
	0x56, 0xbf, 0x67, 0x9a, 0x43, 0x53, 0x5f, 0x38, 0x5d, 0xa6, 0x7f, 0x36, 0x79, 0xf3, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x0c, 0xea, 0xdd, 0x40, 0x7c, 0x22, 0x00, 0x00,
}
