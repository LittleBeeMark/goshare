// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trading.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 接口类型
type RouteType int32

const (
	// CTP 期货
	RouteType_RT_CTP_FUTURE RouteType = 0
	// CTP 股票
	RouteType_RT_CTP_STOCK RouteType = 1
	// IB
	RouteType_RT_INTERACTIVE_BROKER RouteType = 2
	// LTS
	RouteType_RT_LTS RouteType = 3
	// CATS
	RouteType_RT_CATS RouteType = 4
	// CTP 个股期权
	RouteType_RT_CTP_STOCK_OPTION RouteType = 5
	// 金仕达个股
	RouteType_RT_KSOP RouteType = 7
)

var RouteType_name = map[int32]string{
	0: "RT_CTP_FUTURE",
	1: "RT_CTP_STOCK",
	2: "RT_INTERACTIVE_BROKER",
	3: "RT_LTS",
	4: "RT_CATS",
	5: "RT_CTP_STOCK_OPTION",
	7: "RT_KSOP",
}
var RouteType_value = map[string]int32{
	"RT_CTP_FUTURE":         0,
	"RT_CTP_STOCK":          1,
	"RT_INTERACTIVE_BROKER": 2,
	"RT_LTS":                3,
	"RT_CATS":               4,
	"RT_CTP_STOCK_OPTION":   5,
	"RT_KSOP":               7,
}

func (x RouteType) String() string {
	return proto.EnumName(RouteType_name, int32(x))
}
func (RouteType) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

// TradingRoute 交易通道
type TradingRoute struct {
	Id                  int64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Comment             string    `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	BrokerId            string    `protobuf:"bytes,4,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	RouteType           RouteType `protobuf:"varint,5,opt,name=route_type,json=routeType,enum=pb.RouteType" json:"route_type,omitempty"`
	TradingFrontList    []string  `protobuf:"bytes,6,rep,name=trading_front_list,json=tradingFrontList" json:"trading_front_list,omitempty"`
	MarketDataFrontList []string  `protobuf:"bytes,7,rep,name=market_data_front_list,json=marketDataFrontList" json:"market_data_front_list,omitempty"`
	UserProductInfo     string    `protobuf:"bytes,8,opt,name=user_product_info,json=userProductInfo" json:"user_product_info,omitempty"`
	AuthCode            string    `protobuf:"bytes,9,opt,name=auth_code,json=authCode" json:"auth_code,omitempty"`
	User                string    `protobuf:"bytes,10,opt,name=user" json:"user,omitempty"`
}

func (m *TradingRoute) Reset()                    { *m = TradingRoute{} }
func (m *TradingRoute) String() string            { return proto.CompactTextString(m) }
func (*TradingRoute) ProtoMessage()               {}
func (*TradingRoute) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *TradingRoute) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TradingRoute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TradingRoute) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *TradingRoute) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *TradingRoute) GetRouteType() RouteType {
	if m != nil {
		return m.RouteType
	}
	return RouteType_RT_CTP_FUTURE
}

func (m *TradingRoute) GetTradingFrontList() []string {
	if m != nil {
		return m.TradingFrontList
	}
	return nil
}

func (m *TradingRoute) GetMarketDataFrontList() []string {
	if m != nil {
		return m.MarketDataFrontList
	}
	return nil
}

func (m *TradingRoute) GetUserProductInfo() string {
	if m != nil {
		return m.UserProductInfo
	}
	return ""
}

func (m *TradingRoute) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

func (m *TradingRoute) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type TradingRouteList struct {
	List []*TradingRoute `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *TradingRouteList) Reset()                    { *m = TradingRouteList{} }
func (m *TradingRouteList) String() string            { return proto.CompactTextString(m) }
func (*TradingRouteList) ProtoMessage()               {}
func (*TradingRouteList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *TradingRouteList) GetList() []*TradingRoute {
	if m != nil {
		return m.List
	}
	return nil
}

// TradingAccount 交易账号
type TradingAccount struct {
	// id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 备注
	Comment string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	// 通道
	TradingRoute *TradingRoute `protobuf:"bytes,4,opt,name=trading_route,json=tradingRoute" json:"trading_route,omitempty"`
	// 账号
	Account string `protobuf:"bytes,5,opt,name=account" json:"account,omitempty"`
	// 密码
	Password string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	// 密码2
	Password2 string `protobuf:"bytes,7,opt,name=password2" json:"password2,omitempty"`
	// 密码3
	Password3 string `protobuf:"bytes,8,opt,name=password3" json:"password3,omitempty"`
	// 防止自成交
	PreventSelfMatching bool `protobuf:"varint,9,opt,name=prevent_self_matching,json=preventSelfMatching" json:"prevent_self_matching,omitempty"`
	// 期权限仓数量
	StockOptionPositionLimit int32 `protobuf:"varint,10,opt,name=stock_option_position_limit,json=stockOptionPositionLimit" json:"stock_option_position_limit,omitempty"`
	// 撤单次数限制
	CancelLimit int32 `protobuf:"varint,11,opt,name=cancel_limit,json=cancelLimit" json:"cancel_limit,omitempty"`
	// 用户
	User string `protobuf:"bytes,12,opt,name=user" json:"user,omitempty"`
}

func (m *TradingAccount) Reset()                    { *m = TradingAccount{} }
func (m *TradingAccount) String() string            { return proto.CompactTextString(m) }
func (*TradingAccount) ProtoMessage()               {}
func (*TradingAccount) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *TradingAccount) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TradingAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TradingAccount) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *TradingAccount) GetTradingRoute() *TradingRoute {
	if m != nil {
		return m.TradingRoute
	}
	return nil
}

func (m *TradingAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *TradingAccount) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TradingAccount) GetPassword2() string {
	if m != nil {
		return m.Password2
	}
	return ""
}

func (m *TradingAccount) GetPassword3() string {
	if m != nil {
		return m.Password3
	}
	return ""
}

func (m *TradingAccount) GetPreventSelfMatching() bool {
	if m != nil {
		return m.PreventSelfMatching
	}
	return false
}

func (m *TradingAccount) GetStockOptionPositionLimit() int32 {
	if m != nil {
		return m.StockOptionPositionLimit
	}
	return 0
}

func (m *TradingAccount) GetCancelLimit() int32 {
	if m != nil {
		return m.CancelLimit
	}
	return 0
}

func (m *TradingAccount) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type TradingAccountList struct {
	List []*TradingAccount `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *TradingAccountList) Reset()                    { *m = TradingAccountList{} }
func (m *TradingAccountList) String() string            { return proto.CompactTextString(m) }
func (*TradingAccountList) ProtoMessage()               {}
func (*TradingAccountList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *TradingAccountList) GetList() []*TradingAccount {
	if m != nil {
		return m.List
	}
	return nil
}

type ReqDeleteTradingRoute struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReqDeleteTradingRoute) Reset()                    { *m = ReqDeleteTradingRoute{} }
func (m *ReqDeleteTradingRoute) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteTradingRoute) ProtoMessage()               {}
func (*ReqDeleteTradingRoute) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *ReqDeleteTradingRoute) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// TradingAccountSummary 资金信息
type TradingAccountSummary struct {
	// 账号
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// 结算组（可能单个结算组给个摘要)
	User string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	// 币种
	Currency string `protobuf:"bytes,3,opt,name=currency" json:"currency,omitempty"`
	// / 余额
	Balance float64 `protobuf:"fixed64,4,opt,name=balance" json:"balance,omitempty"`
	// / 手续费
	Commission float64 `protobuf:"fixed64,5,opt,name=commission" json:"commission,omitempty"`
	// / 占用保证金
	CurMargin float64 `protobuf:"fixed64,6,opt,name=cur_margin,json=curMargin" json:"cur_margin,omitempty"`
	// / 持仓市值
	NetPositionAmount float64 `protobuf:"fixed64,7,opt,name=net_position_amount,json=netPositionAmount" json:"net_position_amount,omitempty"`
	// / 上次余额
	PreBalance float64 `protobuf:"fixed64,8,opt,name=pre_balance,json=preBalance" json:"pre_balance,omitempty"`
	// / 利息收入
	InterestIn float64 `protobuf:"fixed64,9,opt,name=interest_in,json=interestIn" json:"interest_in,omitempty"`
	// / 存款
	Deposit float64 `protobuf:"fixed64,10,opt,name=deposit" json:"deposit,omitempty"`
	// / 取款
	Withdraw float64 `protobuf:"fixed64,11,opt,name=withdraw" json:"withdraw,omitempty"`
	// / 冻结保证金
	FrozenMargin float64 `protobuf:"fixed64,12,opt,name=frozen_margin,json=frozenMargin" json:"frozen_margin,omitempty"`
	// / 冻结手续费
	FrozenCommission float64 `protobuf:"fixed64,13,opt,name=frozen_commission,json=frozenCommission" json:"frozen_commission,omitempty"`
	// / 可用资金
	Available float64 `protobuf:"fixed64,14,opt,name=available" json:"available,omitempty"`
	// / 平仓盈亏
	CloseProfit float64 `protobuf:"fixed64,15,opt,name=close_profit,json=closeProfit" json:"close_profit,omitempty"`
	// / 持仓盈亏
	PositionProfit float64 `protobuf:"fixed64,16,opt,name=position_profit,json=positionProfit" json:"position_profit,omitempty"`
	// 上次质押金额
	PreMortgate float64 `protobuf:"fixed64,17,opt,name=pre_mortgate,json=preMortgate" json:"pre_mortgate,omitempty"`
	// 上次信用额度
	PreCredit float64 `protobuf:"fixed64,18,opt,name=pre_credit,json=preCredit" json:"pre_credit,omitempty"`
	// 利息基数
	InterestBase float64 `protobuf:"fixed64,19,opt,name=interest_base,json=interestBase" json:"interest_base,omitempty"`
	// 可取资金
	WithdrawAvailable float64 `protobuf:"fixed64,20,opt,name=withdraw_available,json=withdrawAvailable" json:"withdraw_available,omitempty"`
	// 基本准备金
	Reserve float64 `protobuf:"fixed64,21,opt,name=reserve" json:"reserve,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,22,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	// 信用额度
	Credit float64 `protobuf:"fixed64,23,opt,name=credit" json:"credit,omitempty"`
	// 质押金额
	Mortgate float64 `protobuf:"fixed64,24,opt,name=mortgate" json:"mortgate,omitempty"`
	// 交易所保证金
	ExchangeMargin float64 `protobuf:"fixed64,25,opt,name=exchange_margin,json=exchangeMargin" json:"exchange_margin,omitempty"`
	// 交割保证金
	DeliveryMargin float64 `protobuf:"fixed64,26,opt,name=delivery_margin,json=deliveryMargin" json:"delivery_margin,omitempty"`
	// 交易所交割保证金
	ExchangeDeliveryMargin float64 `protobuf:"fixed64,27,opt,name=exchange_delivery_margin,json=exchangeDeliveryMargin" json:"exchange_delivery_margin,omitempty"`
	// 保底期货结算准备金
	ReserveBalance float64 `protobuf:"fixed64,28,opt,name=reserve_balance,json=reserveBalance" json:"reserve_balance,omitempty"`
	// 交割手续费
	DeliveryCommission float64 `protobuf:"fixed64,29,opt,name=delivery_commission,json=deliveryCommission" json:"delivery_commission,omitempty"`
	// 冻结过户费
	FrozenTransferFee float64 `protobuf:"fixed64,30,opt,name=frozen_transfer_fee,json=frozenTransferFee" json:"frozen_transfer_fee,omitempty"`
	// 冻结的印花税
	FrozenStampTax float64 `protobuf:"fixed64,31,opt,name=frozen_stamp_tax,json=frozenStampTax" json:"frozen_stamp_tax,omitempty"`
	// 过户费
	TransferFee float64 `protobuf:"fixed64,32,opt,name=transfer_fee,json=transferFee" json:"transfer_fee,omitempty"`
	// 印花税
	StampTax float64 `protobuf:"fixed64,33,opt,name=stamp_tax,json=stampTax" json:"stamp_tax,omitempty"`
	// / 盯市盈亏
	MtmProfit float64 `protobuf:"fixed64,34,opt,name=mtm_profit,json=mtmProfit" json:"mtm_profit,omitempty"`
	// / 盯市权益
	MtmBalance float64 `protobuf:"fixed64,35,opt,name=mtm_balance,json=mtmBalance" json:"mtm_balance,omitempty"`
	// /证券总价值
	StockValue float64 `protobuf:"fixed64,36,opt,name=stock_value,json=stockValue" json:"stock_value,omitempty"`
	// /国债回购占用资金
	BondRepurchaseAmount float64 `protobuf:"fixed64,37,opt,name=bond_repurchase_amount,json=bondRepurchaseAmount" json:"bond_repurchase_amount,omitempty"`
	// /国债逆回购占用资金
	ReverseRepurchaseAmount float64 `protobuf:"fixed64,38,opt,name=reverse_repurchase_amount,json=reverseRepurchaseAmount" json:"reverse_repurchase_amount,omitempty"`
	// /融资买入金额
	MarginTradeAmount float64 `protobuf:"fixed64,39,opt,name=margin_trade_amount,json=marginTradeAmount" json:"margin_trade_amount,omitempty"`
	// /融券卖出金额
	ShortSellAmount float64 `protobuf:"fixed64,40,opt,name=short_sell_amount,json=shortSellAmount" json:"short_sell_amount,omitempty"`
	// /融资持仓盈亏
	MarginTradeProfit float64 `protobuf:"fixed64,41,opt,name=margin_trade_profit,json=marginTradeProfit" json:"margin_trade_profit,omitempty"`
	// /融券持仓盈亏
	PrePreferedBalance float64 `protobuf:"fixed64,42,opt,name=pre_prefered_balance,json=prePreferedBalance" json:"pre_prefered_balance,omitempty"`
	// 冻结平仓所需要费用
	FrozenCloseCommission float64 `protobuf:"fixed64,43,opt,name=frozen_close_commission,json=frozenCloseCommission" json:"frozen_close_commission,omitempty"`
	// 劣后
	CommonBalance float64 `protobuf:"fixed64,44,opt,name=common_balance,json=commonBalance" json:"common_balance,omitempty"`
	// 优先资金
	PreferedBalance float64 `protobuf:"fixed64,45,opt,name=prefered_balance,json=preferedBalance" json:"prefered_balance,omitempty"`
	// 兑换基础货币汇率
	BaseExchangeRate float64 `protobuf:"fixed64,46,opt,name=base_exchange_rate,json=baseExchangeRate" json:"base_exchange_rate,omitempty"`
	// 报警
	WarningLevel float64 `protobuf:"fixed64,47,opt,name=warning_level,json=warningLevel" json:"warning_level,omitempty"`
	// 强平
	ForceCloseLevel float64 `protobuf:"fixed64,48,opt,name=force_close_level,json=forceCloseLevel" json:"force_close_level,omitempty"`
	// 进入清算的平仓盈亏
	ClearedClosedProfit float64 `protobuf:"fixed64,49,opt,name=cleared_closed_profit,json=clearedClosedProfit" json:"cleared_closed_profit,omitempty"`
	// 名称
	AccountName string `protobuf:"bytes,50,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// 利息
	Interest float64 `protobuf:"fixed64,51,opt,name=interest" json:"interest,omitempty"`
	// 冻结利息
	FrozenInterest float64 `protobuf:"fixed64,52,opt,name=frozen_interest,json=frozenInterest" json:"frozen_interest,omitempty"`
	// 风控方案
	OptionsId int64 `protobuf:"varint,53,opt,name=options_id,json=optionsId" json:"options_id,omitempty"`
	// 方案名称
	OptionsName string `protobuf:"bytes,54,opt,name=options_name,json=optionsName" json:"options_name,omitempty"`
	// 是否激活
	Activated bool `protobuf:"varint,55,opt,name=activated" json:"activated,omitempty"`
	// 隔夜费
	OvernightFee float64 `protobuf:"fixed64,56,opt,name=overnight_fee,json=overnightFee" json:"overnight_fee,omitempty"`
	// 运营手续费
	CommissionL0 float64 `protobuf:"fixed64,57,opt,name=commission_l0,json=commissionL0" json:"commission_l0,omitempty"`
	// 多头持仓市值
	LongPositionMarketValue float64 `protobuf:"fixed64,58,opt,name=long_position_market_value,json=longPositionMarketValue" json:"long_position_market_value,omitempty"`
	// 空头持仓市值
	ShortPositionMarketValue float64 `protobuf:"fixed64,59,opt,name=short_position_market_value,json=shortPositionMarketValue" json:"short_position_market_value,omitempty"`
	// 优先入金
	PreferedDeposit float64 `protobuf:"fixed64,60,opt,name=prefered_deposit,json=preferedDeposit" json:"prefered_deposit,omitempty"`
	// 劣后入金
	CommonDeposit float64 `protobuf:"fixed64,61,opt,name=common_deposit,json=commonDeposit" json:"common_deposit,omitempty"`
	// 优先出金
	PreferedWithdraw float64 `protobuf:"fixed64,62,opt,name=prefered_withdraw,json=preferedWithdraw" json:"prefered_withdraw,omitempty"`
	// 劣后出金
	CommonWithdraw float64 `protobuf:"fixed64,63,opt,name=common_withdraw,json=commonWithdraw" json:"common_withdraw,omitempty"`
	// 部门
	Branch string `protobuf:"bytes,64,opt,name=branch" json:"branch,omitempty"`
	// 部门名称
	BranchName string `protobuf:"bytes,65,opt,name=branch_name,json=branchName" json:"branch_name,omitempty"`
}

func (m *TradingAccountSummary) Reset()                    { *m = TradingAccountSummary{} }
func (m *TradingAccountSummary) String() string            { return proto.CompactTextString(m) }
func (*TradingAccountSummary) ProtoMessage()               {}
func (*TradingAccountSummary) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

func (m *TradingAccountSummary) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *TradingAccountSummary) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *TradingAccountSummary) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *TradingAccountSummary) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *TradingAccountSummary) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *TradingAccountSummary) GetCurMargin() float64 {
	if m != nil {
		return m.CurMargin
	}
	return 0
}

func (m *TradingAccountSummary) GetNetPositionAmount() float64 {
	if m != nil {
		return m.NetPositionAmount
	}
	return 0
}

func (m *TradingAccountSummary) GetPreBalance() float64 {
	if m != nil {
		return m.PreBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetInterestIn() float64 {
	if m != nil {
		return m.InterestIn
	}
	return 0
}

func (m *TradingAccountSummary) GetDeposit() float64 {
	if m != nil {
		return m.Deposit
	}
	return 0
}

func (m *TradingAccountSummary) GetWithdraw() float64 {
	if m != nil {
		return m.Withdraw
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenMargin() float64 {
	if m != nil {
		return m.FrozenMargin
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenCommission() float64 {
	if m != nil {
		return m.FrozenCommission
	}
	return 0
}

func (m *TradingAccountSummary) GetAvailable() float64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *TradingAccountSummary) GetCloseProfit() float64 {
	if m != nil {
		return m.CloseProfit
	}
	return 0
}

func (m *TradingAccountSummary) GetPositionProfit() float64 {
	if m != nil {
		return m.PositionProfit
	}
	return 0
}

func (m *TradingAccountSummary) GetPreMortgate() float64 {
	if m != nil {
		return m.PreMortgate
	}
	return 0
}

func (m *TradingAccountSummary) GetPreCredit() float64 {
	if m != nil {
		return m.PreCredit
	}
	return 0
}

func (m *TradingAccountSummary) GetInterestBase() float64 {
	if m != nil {
		return m.InterestBase
	}
	return 0
}

func (m *TradingAccountSummary) GetWithdrawAvailable() float64 {
	if m != nil {
		return m.WithdrawAvailable
	}
	return 0
}

func (m *TradingAccountSummary) GetReserve() float64 {
	if m != nil {
		return m.Reserve
	}
	return 0
}

func (m *TradingAccountSummary) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *TradingAccountSummary) GetCredit() float64 {
	if m != nil {
		return m.Credit
	}
	return 0
}

func (m *TradingAccountSummary) GetMortgate() float64 {
	if m != nil {
		return m.Mortgate
	}
	return 0
}

func (m *TradingAccountSummary) GetExchangeMargin() float64 {
	if m != nil {
		return m.ExchangeMargin
	}
	return 0
}

func (m *TradingAccountSummary) GetDeliveryMargin() float64 {
	if m != nil {
		return m.DeliveryMargin
	}
	return 0
}

func (m *TradingAccountSummary) GetExchangeDeliveryMargin() float64 {
	if m != nil {
		return m.ExchangeDeliveryMargin
	}
	return 0
}

func (m *TradingAccountSummary) GetReserveBalance() float64 {
	if m != nil {
		return m.ReserveBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetDeliveryCommission() float64 {
	if m != nil {
		return m.DeliveryCommission
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenTransferFee() float64 {
	if m != nil {
		return m.FrozenTransferFee
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenStampTax() float64 {
	if m != nil {
		return m.FrozenStampTax
	}
	return 0
}

func (m *TradingAccountSummary) GetTransferFee() float64 {
	if m != nil {
		return m.TransferFee
	}
	return 0
}

func (m *TradingAccountSummary) GetStampTax() float64 {
	if m != nil {
		return m.StampTax
	}
	return 0
}

func (m *TradingAccountSummary) GetMtmProfit() float64 {
	if m != nil {
		return m.MtmProfit
	}
	return 0
}

func (m *TradingAccountSummary) GetMtmBalance() float64 {
	if m != nil {
		return m.MtmBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetStockValue() float64 {
	if m != nil {
		return m.StockValue
	}
	return 0
}

func (m *TradingAccountSummary) GetBondRepurchaseAmount() float64 {
	if m != nil {
		return m.BondRepurchaseAmount
	}
	return 0
}

func (m *TradingAccountSummary) GetReverseRepurchaseAmount() float64 {
	if m != nil {
		return m.ReverseRepurchaseAmount
	}
	return 0
}

func (m *TradingAccountSummary) GetMarginTradeAmount() float64 {
	if m != nil {
		return m.MarginTradeAmount
	}
	return 0
}

func (m *TradingAccountSummary) GetShortSellAmount() float64 {
	if m != nil {
		return m.ShortSellAmount
	}
	return 0
}

func (m *TradingAccountSummary) GetMarginTradeProfit() float64 {
	if m != nil {
		return m.MarginTradeProfit
	}
	return 0
}

func (m *TradingAccountSummary) GetPrePreferedBalance() float64 {
	if m != nil {
		return m.PrePreferedBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenCloseCommission() float64 {
	if m != nil {
		return m.FrozenCloseCommission
	}
	return 0
}

func (m *TradingAccountSummary) GetCommonBalance() float64 {
	if m != nil {
		return m.CommonBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetPreferedBalance() float64 {
	if m != nil {
		return m.PreferedBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetBaseExchangeRate() float64 {
	if m != nil {
		return m.BaseExchangeRate
	}
	return 0
}

func (m *TradingAccountSummary) GetWarningLevel() float64 {
	if m != nil {
		return m.WarningLevel
	}
	return 0
}

func (m *TradingAccountSummary) GetForceCloseLevel() float64 {
	if m != nil {
		return m.ForceCloseLevel
	}
	return 0
}

func (m *TradingAccountSummary) GetClearedClosedProfit() float64 {
	if m != nil {
		return m.ClearedClosedProfit
	}
	return 0
}

func (m *TradingAccountSummary) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *TradingAccountSummary) GetInterest() float64 {
	if m != nil {
		return m.Interest
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenInterest() float64 {
	if m != nil {
		return m.FrozenInterest
	}
	return 0
}

func (m *TradingAccountSummary) GetOptionsId() int64 {
	if m != nil {
		return m.OptionsId
	}
	return 0
}

func (m *TradingAccountSummary) GetOptionsName() string {
	if m != nil {
		return m.OptionsName
	}
	return ""
}

func (m *TradingAccountSummary) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *TradingAccountSummary) GetOvernightFee() float64 {
	if m != nil {
		return m.OvernightFee
	}
	return 0
}

func (m *TradingAccountSummary) GetCommissionL0() float64 {
	if m != nil {
		return m.CommissionL0
	}
	return 0
}

func (m *TradingAccountSummary) GetLongPositionMarketValue() float64 {
	if m != nil {
		return m.LongPositionMarketValue
	}
	return 0
}

func (m *TradingAccountSummary) GetShortPositionMarketValue() float64 {
	if m != nil {
		return m.ShortPositionMarketValue
	}
	return 0
}

func (m *TradingAccountSummary) GetPreferedDeposit() float64 {
	if m != nil {
		return m.PreferedDeposit
	}
	return 0
}

func (m *TradingAccountSummary) GetCommonDeposit() float64 {
	if m != nil {
		return m.CommonDeposit
	}
	return 0
}

func (m *TradingAccountSummary) GetPreferedWithdraw() float64 {
	if m != nil {
		return m.PreferedWithdraw
	}
	return 0
}

func (m *TradingAccountSummary) GetCommonWithdraw() float64 {
	if m != nil {
		return m.CommonWithdraw
	}
	return 0
}

func (m *TradingAccountSummary) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *TradingAccountSummary) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

type RspTradingAccountLogin struct {
	ErrorId     int32  `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg    []byte `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	RequestId   int32  `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	IsLast      bool   `protobuf:"varint,4,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	TradingDay  int32  `protobuf:"varint,5,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	LoginTime   string `protobuf:"bytes,6,opt,name=login_time,json=loginTime" json:"login_time,omitempty"`
	BrokerId    string `protobuf:"bytes,7,opt,name=broker_id,json=brokerId" json:"broker_id,omitempty"`
	UserId      string `protobuf:"bytes,8,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SystemName  string `protobuf:"bytes,9,opt,name=system_name,json=systemName" json:"system_name,omitempty"`
	FrontId     int32  `protobuf:"varint,10,opt,name=front_id,json=frontId" json:"front_id,omitempty"`
	SessionId   int32  `protobuf:"varint,11,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	MaxOrderRef string `protobuf:"bytes,12,opt,name=max_order_ref,json=maxOrderRef" json:"max_order_ref,omitempty"`
	SHFETime    string `protobuf:"bytes,13,opt,name=SHFE_time,json=SHFETime" json:"SHFE_time,omitempty"`
	DCETime     string `protobuf:"bytes,14,opt,name=DCE_time,json=DCETime" json:"DCE_time,omitempty"`
	CZCETime    string `protobuf:"bytes,15,opt,name=CZCE_time,json=CZCETime" json:"CZCE_time,omitempty"`
	FFEXTime    string `protobuf:"bytes,16,opt,name=FFEX_time,json=FFEXTime" json:"FFEX_time,omitempty"`
	INETime     string `protobuf:"bytes,17,opt,name=INE_time,json=INETime" json:"INE_time,omitempty"`
}

func (m *RspTradingAccountLogin) Reset()                    { *m = RspTradingAccountLogin{} }
func (m *RspTradingAccountLogin) String() string            { return proto.CompactTextString(m) }
func (*RspTradingAccountLogin) ProtoMessage()               {}
func (*RspTradingAccountLogin) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

func (m *RspTradingAccountLogin) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *RspTradingAccountLogin) GetErrorMsg() []byte {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

func (m *RspTradingAccountLogin) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *RspTradingAccountLogin) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func (m *RspTradingAccountLogin) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *RspTradingAccountLogin) GetLoginTime() string {
	if m != nil {
		return m.LoginTime
	}
	return ""
}

func (m *RspTradingAccountLogin) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *RspTradingAccountLogin) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RspTradingAccountLogin) GetSystemName() string {
	if m != nil {
		return m.SystemName
	}
	return ""
}

func (m *RspTradingAccountLogin) GetFrontId() int32 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *RspTradingAccountLogin) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *RspTradingAccountLogin) GetMaxOrderRef() string {
	if m != nil {
		return m.MaxOrderRef
	}
	return ""
}

func (m *RspTradingAccountLogin) GetSHFETime() string {
	if m != nil {
		return m.SHFETime
	}
	return ""
}

func (m *RspTradingAccountLogin) GetDCETime() string {
	if m != nil {
		return m.DCETime
	}
	return ""
}

func (m *RspTradingAccountLogin) GetCZCETime() string {
	if m != nil {
		return m.CZCETime
	}
	return ""
}

func (m *RspTradingAccountLogin) GetFFEXTime() string {
	if m != nil {
		return m.FFEXTime
	}
	return ""
}

func (m *RspTradingAccountLogin) GetINETime() string {
	if m != nil {
		return m.INETime
	}
	return ""
}

type RspOrderInsert struct {
	ErrorId  int32  `protobuf:"varint,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorMsg []byte `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	OrderRef string `protobuf:"bytes,3,opt,name=order_ref,json=orderRef" json:"order_ref,omitempty"`
}

func (m *RspOrderInsert) Reset()                    { *m = RspOrderInsert{} }
func (m *RspOrderInsert) String() string            { return proto.CompactTextString(m) }
func (*RspOrderInsert) ProtoMessage()               {}
func (*RspOrderInsert) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{7} }

func (m *RspOrderInsert) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *RspOrderInsert) GetErrorMsg() []byte {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

func (m *RspOrderInsert) GetOrderRef() string {
	if m != nil {
		return m.OrderRef
	}
	return ""
}

func init() {
	proto.RegisterType((*TradingRoute)(nil), "pb.TradingRoute")
	proto.RegisterType((*TradingRouteList)(nil), "pb.TradingRouteList")
	proto.RegisterType((*TradingAccount)(nil), "pb.TradingAccount")
	proto.RegisterType((*TradingAccountList)(nil), "pb.TradingAccountList")
	proto.RegisterType((*ReqDeleteTradingRoute)(nil), "pb.ReqDeleteTradingRoute")
	proto.RegisterType((*TradingAccountSummary)(nil), "pb.TradingAccountSummary")
	proto.RegisterType((*RspTradingAccountLogin)(nil), "pb.RspTradingAccountLogin")
	proto.RegisterType((*RspOrderInsert)(nil), "pb.RspOrderInsert")
	proto.RegisterEnum("pb.RouteType", RouteType_name, RouteType_value)
}

func init() { proto.RegisterFile("trading.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 1861 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xeb, 0x76, 0x1b, 0xb7,
	0x11, 0x2e, 0x75, 0x23, 0x77, 0x28, 0x4a, 0x14, 0x68, 0x49, 0x2b, 0xcb, 0x8a, 0x65, 0x39, 0x89,
	0x14, 0xdb, 0x51, 0x5c, 0x39, 0x49, 0xdd, 0x5c, 0xda, 0xca, 0x94, 0x74, 0xca, 0x63, 0xdd, 0xce,
	0x92, 0x49, 0x7b, 0xfa, 0x67, 0x0f, 0xb8, 0x3b, 0xa4, 0xf6, 0x78, 0x6f, 0xc1, 0x82, 0xb2, 0xd4,
	0x47, 0xc8, 0x5b, 0xf4, 0xa9, 0xfa, 0xb7, 0x8f, 0xd2, 0x83, 0x01, 0xb0, 0x5c, 0xc9, 0x6e, 0x7f,
	0xe4, 0x1f, 0xf1, 0xcd, 0x37, 0xc0, 0xdc, 0x30, 0x98, 0x25, 0xb4, 0xa4, 0xe0, 0x61, 0x94, 0x8e,
	0xf7, 0x73, 0x91, 0xc9, 0x8c, 0xcd, 0xe4, 0xc3, 0x9d, 0x7f, 0xcf, 0xc0, 0xe2, 0x40, 0xa3, 0x5e,
	0x36, 0x91, 0xc8, 0x96, 0x60, 0x26, 0x0a, 0xdd, 0xda, 0x76, 0x6d, 0x6f, 0xd6, 0x9b, 0x89, 0x42,
	0xc6, 0x60, 0x2e, 0xe5, 0x09, 0xba, 0x33, 0xdb, 0xb5, 0x3d, 0xc7, 0xa3, 0xdf, 0xcc, 0x85, 0x7a,
	0x90, 0x25, 0x09, 0xa6, 0xd2, 0x9d, 0x25, 0xd8, 0x2e, 0xd9, 0x26, 0x38, 0x43, 0x91, 0xbd, 0x43,
	0xe1, 0x47, 0xa1, 0x3b, 0x47, 0xb2, 0x86, 0x06, 0x7a, 0x21, 0x7b, 0x01, 0x20, 0xd4, 0x19, 0xbe,
	0xbc, 0xcd, 0xd1, 0x9d, 0xdf, 0xae, 0xed, 0x2d, 0x1d, 0xb4, 0xf6, 0xf3, 0xe1, 0x3e, 0x9d, 0x3c,
	0xb8, 0xcd, 0xd1, 0x73, 0x84, 0xfd, 0xc9, 0x5e, 0x00, 0x33, 0xe6, 0xfa, 0x23, 0x91, 0xa5, 0xd2,
	0x8f, 0xa3, 0x42, 0xba, 0x0b, 0xdb, 0xb3, 0x7b, 0x8e, 0xd7, 0x36, 0x92, 0x13, 0x25, 0x38, 0x8d,
	0x0a, 0xc9, 0x5e, 0xc1, 0x5a, 0xc2, 0xc5, 0x3b, 0x94, 0x7e, 0xc8, 0x25, 0xaf, 0x6a, 0xd4, 0x49,
	0xa3, 0xa3, 0xa5, 0x47, 0x5c, 0xf2, 0xa9, 0xd2, 0x33, 0x58, 0x99, 0x14, 0x28, 0xfc, 0x5c, 0x64,
	0xe1, 0x24, 0x90, 0x7e, 0x94, 0x8e, 0x32, 0xb7, 0x41, 0x56, 0x2f, 0x2b, 0xc1, 0xa5, 0xc6, 0x7b,
	0xe9, 0x28, 0x53, 0x9e, 0xf1, 0x89, 0xbc, 0xf2, 0x83, 0x2c, 0x44, 0xd7, 0xd1, 0x9e, 0x29, 0xa0,
	0x9b, 0x85, 0xa8, 0x82, 0xa4, 0xf8, 0x2e, 0xe8, 0x20, 0xa9, 0xdf, 0x3b, 0xaf, 0xa1, 0x5d, 0x0d,
	0x2c, 0x1d, 0xf8, 0x29, 0xcc, 0x91, 0x4d, 0xb5, 0xed, 0xd9, 0xbd, 0xe6, 0x41, 0x5b, 0xf9, 0x5e,
	0xe5, 0x78, 0x24, 0xdd, 0xf9, 0xd7, 0x2c, 0x2c, 0x19, 0xf8, 0x30, 0x08, 0xb2, 0x49, 0x2a, 0x2b,
	0x59, 0x71, 0x7e, 0x43, 0x56, 0xbe, 0x29, 0x33, 0xef, 0x53, 0x7c, 0x29, 0x33, 0x1f, 0x3b, 0x7f,
	0x51, 0x56, 0x4b, 0xc1, 0x85, 0x3a, 0xd7, 0xe7, 0x53, 0xb2, 0x1c, 0xcf, 0x2e, 0xd9, 0x43, 0x68,
	0xe4, 0xbc, 0x28, 0xde, 0x67, 0x22, 0x74, 0x17, 0x74, 0x2c, 0xec, 0x9a, 0x3d, 0x02, 0xc7, 0xfe,
	0x3e, 0x70, 0xeb, 0x24, 0x9c, 0x02, 0x55, 0xe9, 0x2b, 0x13, 0xea, 0x29, 0xc0, 0x0e, 0x60, 0x35,
	0x17, 0x78, 0x8d, 0xa9, 0xf4, 0x0b, 0x8c, 0x47, 0x7e, 0xc2, 0x65, 0x70, 0x15, 0xa5, 0x63, 0x0a,
	0x78, 0xc3, 0xeb, 0x18, 0x61, 0x1f, 0xe3, 0xd1, 0x99, 0x11, 0xb1, 0x1f, 0x61, 0xb3, 0x90, 0x59,
	0xf0, 0xce, 0xcf, 0x72, 0x19, 0x65, 0xa9, 0x9f, 0x67, 0x45, 0x44, 0x3f, 0xe2, 0x28, 0x89, 0x24,
	0xa5, 0x64, 0xde, 0x73, 0x89, 0x72, 0x41, 0x8c, 0x4b, 0x43, 0x38, 0x55, 0x72, 0xf6, 0x04, 0x16,
	0x03, 0x9e, 0x06, 0x18, 0x1b, 0x7e, 0x93, 0xf8, 0x4d, 0x8d, 0x69, 0x8a, 0xcd, 0xee, 0x62, 0x25,
	0xbb, 0x3f, 0x00, 0xbb, 0x9b, 0x22, 0xca, 0xef, 0xe7, 0x77, 0xf2, 0xcb, 0x2a, 0xf1, 0x35, 0x2c,
	0x93, 0xe1, 0x5d, 0x58, 0xf5, 0xf0, 0x97, 0x23, 0x8c, 0x51, 0xe2, 0xff, 0xbb, 0x7d, 0x3b, 0xff,
	0xe9, 0xc0, 0xea, 0xdd, 0x1d, 0xfa, 0x93, 0x24, 0xe1, 0xe2, 0xb6, 0x9a, 0x9c, 0xda, 0xdd, 0xe4,
	0x58, 0x73, 0x67, 0xa6, 0xe6, 0xaa, 0x84, 0x05, 0x13, 0x21, 0x30, 0x0d, 0x6e, 0x4d, 0x71, 0x94,
	0x6b, 0xb5, 0xd3, 0x90, 0xc7, 0xca, 0x5f, 0xaa, 0x8b, 0x9a, 0x67, 0x97, 0xec, 0x13, 0x00, 0x55,
	0x42, 0x51, 0x51, 0x44, 0x59, 0x4a, 0x35, 0x50, 0xf3, 0x2a, 0x08, 0xdb, 0x02, 0x08, 0x26, 0xc2,
	0x4f, 0xb8, 0x18, 0x47, 0x29, 0x15, 0x42, 0xcd, 0x73, 0x82, 0x89, 0x38, 0x23, 0x80, 0xed, 0x43,
	0x27, 0x45, 0x39, 0x4d, 0x08, 0x4f, 0xc8, 0xdc, 0x3a, 0xf1, 0x56, 0x52, 0x94, 0x36, 0x13, 0x87,
	0x24, 0x60, 0x8f, 0xa1, 0x99, 0x0b, 0xf4, 0xad, 0x31, 0x0d, 0x7d, 0x5e, 0x2e, 0xf0, 0x8d, 0xb1,
	0xe7, 0x31, 0x34, 0xa3, 0x54, 0xa2, 0xc0, 0x42, 0xdd, 0x55, 0x2a, 0x8a, 0x9a, 0x07, 0x16, 0xea,
	0xa5, 0xca, 0x95, 0x10, 0xe9, 0x3c, 0xca, 0x7b, 0xcd, 0xb3, 0x4b, 0x15, 0x80, 0xf7, 0x91, 0xbc,
	0x0a, 0x05, 0x7f, 0x4f, 0x29, 0xae, 0x79, 0xe5, 0x9a, 0x3d, 0x85, 0xd6, 0x48, 0x64, 0xff, 0xc4,
	0xd4, 0x7a, 0xb2, 0x48, 0x84, 0x45, 0x0d, 0x1a, 0x67, 0x9e, 0xc3, 0x8a, 0x21, 0x55, 0x42, 0xd2,
	0x22, 0x62, 0x5b, 0x0b, 0xba, 0xd3, 0xc0, 0x3c, 0x02, 0x87, 0x5f, 0xf3, 0x28, 0xe6, 0xc3, 0x18,
	0xdd, 0x25, 0x1d, 0x97, 0x12, 0xa0, 0x92, 0x8b, 0xb3, 0x02, 0x55, 0xdf, 0x19, 0x45, 0xd2, 0x5d,
	0x26, 0x42, 0x93, 0xb0, 0x4b, 0x82, 0xd8, 0x2e, 0x2c, 0x97, 0x61, 0x33, 0xac, 0x36, 0xb1, 0x96,
	0x2c, 0x6c, 0x88, 0x4f, 0x60, 0x51, 0xc5, 0x2c, 0xc9, 0x84, 0x1c, 0x73, 0x89, 0xee, 0x8a, 0xde,
	0x2b, 0x17, 0x78, 0x66, 0x20, 0x95, 0x25, 0x45, 0x09, 0x04, 0x86, 0x91, 0x74, 0x99, 0xb6, 0x26,
	0x17, 0xd8, 0x25, 0x40, 0x79, 0x5f, 0x06, 0x75, 0xc8, 0x0b, 0x74, 0x3b, 0xda, 0x7b, 0x0b, 0xbe,
	0xe1, 0x05, 0xb2, 0x2f, 0x81, 0xd9, 0x70, 0xf9, 0x53, 0xcf, 0x1e, 0xe8, 0x4c, 0x5a, 0xc9, 0x61,
	0xe9, 0xa1, 0x0b, 0x75, 0x81, 0x05, 0x8a, 0x6b, 0x74, 0x57, 0x75, 0x1e, 0xcc, 0x52, 0xa5, 0xd0,
	0xb6, 0xa2, 0x90, 0xdf, 0xba, 0x6b, 0x74, 0xdb, 0xc0, 0x40, 0x47, 0xfc, 0x96, 0xad, 0xc1, 0x82,
	0xb1, 0x74, 0x9d, 0x34, 0xcd, 0x4a, 0x25, 0xb0, 0x74, 0xd2, 0xd5, 0x09, 0xb4, 0x6b, 0x15, 0x2d,
	0xbc, 0x09, 0xae, 0x78, 0x3a, 0x46, 0x9b, 0xc2, 0x0d, 0x1d, 0x2d, 0x0b, 0x9b, 0x24, 0xee, 0xc2,
	0x72, 0x88, 0x71, 0x74, 0x8d, 0xe2, 0xd6, 0x12, 0x1f, 0x6a, 0xa2, 0x85, 0x0d, 0xf1, 0x35, 0xb8,
	0xe5, 0x8e, 0xf7, 0x35, 0x36, 0x49, 0x63, 0xcd, 0xca, 0x8f, 0xee, 0x6a, 0xee, 0xc2, 0xb2, 0xf1,
	0xb5, 0x2c, 0xe4, 0x47, 0xfa, 0x08, 0x03, 0xdb, 0x62, 0xfe, 0x0a, 0x3a, 0xe5, 0xce, 0x95, 0x92,
	0xda, 0x22, 0x32, 0xb3, 0xa2, 0x4a, 0x51, 0xed, 0x43, 0xc7, 0x54, 0xa0, 0x14, 0x3c, 0x2d, 0x46,
	0x28, 0xfc, 0x11, 0xa2, 0xfb, 0x89, 0x4e, 0x82, 0x16, 0x0d, 0x8c, 0xe4, 0x04, 0x91, 0xed, 0x81,
	0x29, 0x4c, 0xbf, 0x90, 0x3c, 0xc9, 0x7d, 0xc9, 0x6f, 0xdc, 0xc7, 0xda, 0x14, 0x8d, 0xf7, 0x15,
	0x3c, 0xe0, 0x37, 0xaa, 0x88, 0xee, 0x6c, 0xb9, 0xad, 0x8b, 0x48, 0x56, 0x36, 0xdb, 0x04, 0x67,
	0xba, 0xcb, 0x13, 0x1d, 0xff, 0xc2, 0xea, 0x6f, 0x01, 0x24, 0x32, 0xb1, 0x85, 0xba, 0xa3, 0x2b,
	0x2c, 0x91, 0x89, 0xa9, 0xd1, 0xc7, 0xd0, 0x54, 0x62, 0x1b, 0x8e, 0xa7, 0xfa, 0xda, 0x26, 0x32,
	0xa9, 0xdc, 0x6b, 0xdd, 0xc2, 0xaf, 0x79, 0x3c, 0x41, 0xf7, 0x53, 0x4d, 0x20, 0xe8, 0x67, 0x85,
	0xb0, 0xaf, 0x61, 0x6d, 0x98, 0xa5, 0xa1, 0x2f, 0x30, 0x9f, 0x88, 0xe0, 0x8a, 0x17, 0x68, 0x9b,
	0xc9, 0x67, 0xc4, 0x7d, 0xa0, 0xa4, 0x5e, 0x29, 0x34, 0xfd, 0xe4, 0x3b, 0xd8, 0x50, 0xef, 0x85,
	0x28, 0xf0, 0x23, 0x8a, 0x9f, 0x93, 0xe2, 0xba, 0x21, 0x7c, 0xa0, 0xbb, 0x0f, 0x1d, 0x9d, 0x6e,
	0x15, 0xec, 0xb0, 0xd4, 0xda, 0xd5, 0xc1, 0xd6, 0x22, 0xd5, 0x98, 0x2d, 0xff, 0x19, 0xac, 0x14,
	0x57, 0x99, 0xa0, 0x77, 0x2b, 0xb6, 0xec, 0x3d, 0x62, 0x2f, 0x93, 0xa0, 0x8f, 0x71, 0xfc, 0x3f,
	0xf6, 0x36, 0x71, 0xfb, 0xe2, 0x83, 0xbd, 0x4d, 0xfc, 0x5e, 0xc2, 0x03, 0x75, 0x81, 0x73, 0x81,
	0x23, 0x14, 0x18, 0x96, 0x81, 0x7c, 0xa6, 0x4b, 0x25, 0x17, 0x78, 0x69, 0x44, 0x36, 0xa0, 0xdf,
	0xc2, 0xba, 0x6d, 0x56, 0xd4, 0x68, 0x2a, 0xf5, 0xf5, 0x9c, 0x94, 0x56, 0x4d, 0xcb, 0x52, 0xd2,
	0x4a, 0x89, 0x7d, 0x06, 0x4b, 0x8a, 0x9a, 0xa5, 0xe5, 0x19, 0x2f, 0x88, 0xde, 0xd2, 0xa8, 0xdd,
	0xfe, 0x0b, 0x68, 0x7f, 0x60, 0xcc, 0x97, 0xda, 0xd7, 0xfc, 0x9e, 0x25, 0x2f, 0x80, 0xa9, 0xa6,
	0xe2, 0x97, 0xb7, 0x49, 0xa8, 0x0b, 0xbc, 0xaf, 0xfb, 0xa6, 0x92, 0x1c, 0x1b, 0x81, 0xa7, 0x2e,
	0xf2, 0x53, 0x68, 0xbd, 0xe7, 0x22, 0x55, 0xdd, 0x21, 0xc6, 0x6b, 0x8c, 0xdd, 0xaf, 0x74, 0x2f,
	0x32, 0xe0, 0xa9, 0xc2, 0x54, 0xa8, 0x47, 0x99, 0x08, 0xd0, 0xf8, 0xa6, 0x89, 0x2f, 0xf5, 0xf1,
	0x24, 0x20, 0xaf, 0x34, 0xf7, 0x00, 0x56, 0x83, 0x18, 0xb9, 0x32, 0x94, 0xd8, 0xa1, 0x0d, 0xf6,
	0xef, 0x89, 0xdf, 0x31, 0x42, 0xd2, 0x08, 0xa7, 0x2d, 0xd5, 0x3c, 0xa5, 0x3e, 0xcd, 0x58, 0x07,
	0xf4, 0x5e, 0x36, 0x0d, 0x76, 0xae, 0x46, 0xad, 0x87, 0xd0, 0xb0, 0xed, 0xd1, 0x7d, 0xa5, 0x2f,
	0x83, 0x5d, 0xab, 0x06, 0x60, 0x62, 0x5f, 0x52, 0xbe, 0xae, 0xde, 0xba, 0x9e, 0x25, 0x6e, 0x01,
	0xe8, 0x91, 0xa5, 0x50, 0xc3, 0xf2, 0x37, 0xf4, 0xe6, 0x3b, 0x06, 0xe9, 0x85, 0xca, 0x0c, 0x2b,
	0x26, 0x33, 0xbe, 0xd5, 0x66, 0x18, 0x8c, 0xcc, 0x50, 0xcf, 0x4c, 0x20, 0xa3, 0x6b, 0x2e, 0x31,
	0x74, 0xff, 0x40, 0x23, 0xd2, 0x14, 0x50, 0xc1, 0xcc, 0xae, 0x51, 0xa4, 0xd1, 0xf8, 0x4a, 0xd2,
	0xb5, 0x7e, 0xad, 0x83, 0x59, 0x82, 0xea, 0x5e, 0x3f, 0x85, 0xd6, 0xb4, 0x38, 0xfc, 0xf8, 0xa5,
	0xfb, 0x47, 0x4d, 0x9a, 0x82, 0xa7, 0x2f, 0xd9, 0xf7, 0xf0, 0x30, 0xce, 0xd2, 0xf1, 0xf4, 0x25,
	0x37, 0xa3, 0xb6, 0xbe, 0xae, 0xdf, 0xe9, 0x9b, 0xa4, 0x18, 0xf6, 0x41, 0x3f, 0x23, 0xb9, 0xbe,
	0xbb, 0x6a, 0x3e, 0xa3, 0x9b, 0xf1, 0x71, 0xed, 0xef, 0x49, 0xdb, 0x25, 0xca, 0xc7, 0xd4, 0xab,
	0xb5, 0x66, 0xdf, 0xf6, 0x1f, 0xee, 0xd6, 0xda, 0x91, 0x79, 0xe3, 0xa7, 0xd5, 0x6b, 0x89, 0x3f,
	0x56, 0xab, 0xd7, 0xd2, 0x9e, 0xc3, 0x4a, 0xb9, 0x63, 0x39, 0x13, 0xfc, 0x49, 0x57, 0xa4, 0x15,
	0xfc, 0xcd, 0xce, 0x06, 0xbb, 0xb0, 0x6c, 0xf6, 0x2c, 0xa9, 0x7f, 0xd6, 0xd9, 0xd4, 0x70, 0x49,
	0x5c, 0x83, 0x85, 0xa1, 0xe0, 0x69, 0x70, 0xe5, 0xfe, 0x85, 0x12, 0x65, 0x56, 0xaa, 0xb7, 0xe9,
	0x5f, 0x3a, 0x8b, 0x87, 0x24, 0x04, 0x0d, 0xa9, 0x24, 0xee, 0xfc, 0x3a, 0x07, 0x6b, 0x5e, 0x91,
	0xdf, 0x9b, 0x26, 0x33, 0xf5, 0x96, 0x6c, 0x40, 0x03, 0x85, 0xc8, 0xe8, 0x63, 0xaa, 0x46, 0x2f,
	0x65, 0x9d, 0xd6, 0xbd, 0x50, 0xf5, 0x63, 0x2d, 0x4a, 0x8a, 0x31, 0x4d, 0x7a, 0x8b, 0x9e, 0xe6,
	0x9e, 0x15, 0x63, 0x55, 0x59, 0x02, 0x7f, 0x99, 0xd0, 0x98, 0x14, 0xd2, 0xbc, 0x37, 0xef, 0x39,
	0x06, 0xe9, 0x85, 0x6c, 0x1d, 0xea, 0x51, 0xe1, 0xc7, 0xbc, 0x90, 0x34, 0xf0, 0x35, 0xbc, 0x85,
	0xa8, 0x38, 0xe5, 0x85, 0xbc, 0xff, 0x38, 0xcf, 0x7f, 0xf0, 0x38, 0x6f, 0x01, 0xc4, 0x19, 0x35,
	0xae, 0x28, 0x41, 0x33, 0xf9, 0x3b, 0x84, 0x0c, 0xa2, 0x04, 0xef, 0x7e, 0xfd, 0xd5, 0xef, 0x7d,
	0xfd, 0xad, 0x43, 0x9d, 0x3e, 0xb6, 0xa2, 0xd0, 0xcc, 0xfd, 0x0b, 0x6a, 0xd9, 0x0b, 0xa9, 0xfb,
	0xdf, 0x16, 0x12, 0x13, 0x1d, 0x21, 0xfd, 0x6d, 0x05, 0x1a, 0xa2, 0x32, 0xdf, 0x80, 0x86, 0xfe,
	0x9e, 0x8b, 0x42, 0x33, 0xce, 0xd7, 0x69, 0xdd, 0x0b, 0x95, 0x41, 0x05, 0xea, 0xda, 0x8d, 0x42,
	0x33, 0xbb, 0x3b, 0x06, 0xe9, 0x85, 0x6c, 0x07, 0x5a, 0x09, 0xbf, 0xf1, 0x33, 0x11, 0xa2, 0xf0,
	0x05, 0x8e, 0xcc, 0x08, 0xdf, 0x4c, 0xf8, 0xcd, 0x85, 0xc2, 0x3c, 0x1c, 0x29, 0xa3, 0xfb, 0x7f,
	0x3d, 0x39, 0xd6, 0x2e, 0xb5, 0xb4, 0xd1, 0x0a, 0x20, 0x8f, 0x36, 0xa0, 0x71, 0xd4, 0x35, 0xb2,
	0x25, 0x3d, 0x66, 0x1f, 0x75, 0x8f, 0xad, 0xb3, 0xdd, 0x7f, 0x58, 0xd9, 0xb2, 0xd6, 0x53, 0x80,
	0x15, 0x9e, 0x9c, 0x1c, 0xff, 0x5d, 0x0b, 0xdb, 0x5a, 0xa8, 0x00, 0xbb, 0x69, 0xef, 0xdc, 0x28,
	0xae, 0xe8, 0x4d, 0x7b, 0xe7, 0xa4, 0xb7, 0x83, 0xb0, 0xe4, 0x15, 0x39, 0xd9, 0xd6, 0x4b, 0x0b,
	0x14, 0xf2, 0x37, 0xd7, 0xc0, 0x26, 0x38, 0x53, 0xb7, 0xcd, 0xc8, 0x9f, 0x19, 0x9f, 0x9f, 0xfd,
	0x5a, 0x03, 0xa7, 0xfc, 0xe8, 0x66, 0x2b, 0xd0, 0xf2, 0x06, 0x7e, 0x77, 0x70, 0xe9, 0x9f, 0xfc,
	0x34, 0xf8, 0xc9, 0x3b, 0x6e, 0xff, 0x8e, 0xb5, 0x61, 0xd1, 0x40, 0xfd, 0xc1, 0x45, 0xf7, 0x6d,
	0xbb, 0xc6, 0x36, 0x60, 0xd5, 0x1b, 0xf8, 0xbd, 0xf3, 0xc1, 0xb1, 0x77, 0xd8, 0x1d, 0xf4, 0x7e,
	0x3e, 0xf6, 0xdf, 0x78, 0x17, 0x6f, 0x8f, 0xbd, 0xf6, 0x0c, 0x03, 0x58, 0xf0, 0x06, 0xfe, 0xe9,
	0xa0, 0xdf, 0x9e, 0x65, 0x4d, 0xa8, 0x2b, 0xc5, 0xc3, 0x41, 0xbf, 0x3d, 0xc7, 0xd6, 0xa1, 0x53,
	0xdd, 0xc5, 0xbf, 0xb8, 0x1c, 0xf4, 0x2e, 0xce, 0xdb, 0xf3, 0x86, 0xf5, 0xb6, 0x7f, 0x71, 0xd9,
	0xae, 0x0f, 0x17, 0xe8, 0xdf, 0x88, 0x57, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x68, 0x82,
	0x8e, 0x9e, 0x10, 0x00, 0x00,
}
