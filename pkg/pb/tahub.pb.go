// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tahub.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReqGetAccountList struct {
}

func (m *ReqGetAccountList) Reset()                    { *m = ReqGetAccountList{} }
func (m *ReqGetAccountList) String() string            { return proto.CompactTextString(m) }
func (*ReqGetAccountList) ProtoMessage()               {}
func (*ReqGetAccountList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type RspGetAccountList struct {
}

func (m *RspGetAccountList) Reset()                    { *m = RspGetAccountList{} }
func (m *RspGetAccountList) String() string            { return proto.CompactTextString(m) }
func (*RspGetAccountList) ProtoMessage()               {}
func (*RspGetAccountList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

type ReqAddAccount struct {
}

func (m *ReqAddAccount) Reset()                    { *m = ReqAddAccount{} }
func (m *ReqAddAccount) String() string            { return proto.CompactTextString(m) }
func (*ReqAddAccount) ProtoMessage()               {}
func (*ReqAddAccount) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

type RspAddAccount struct {
}

func (m *RspAddAccount) Reset()                    { *m = RspAddAccount{} }
func (m *RspAddAccount) String() string            { return proto.CompactTextString(m) }
func (*RspAddAccount) ProtoMessage()               {}
func (*RspAddAccount) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

type ReqDeleteAccount struct {
}

func (m *ReqDeleteAccount) Reset()                    { *m = ReqDeleteAccount{} }
func (m *ReqDeleteAccount) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteAccount) ProtoMessage()               {}
func (*ReqDeleteAccount) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

type RspDeleteAccount struct {
}

func (m *RspDeleteAccount) Reset()                    { *m = RspDeleteAccount{} }
func (m *RspDeleteAccount) String() string            { return proto.CompactTextString(m) }
func (*RspDeleteAccount) ProtoMessage()               {}
func (*RspDeleteAccount) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

type ReqGetTradingRouteList struct {
}

func (m *ReqGetTradingRouteList) Reset()                    { *m = ReqGetTradingRouteList{} }
func (m *ReqGetTradingRouteList) String() string            { return proto.CompactTextString(m) }
func (*ReqGetTradingRouteList) ProtoMessage()               {}
func (*ReqGetTradingRouteList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

type RspGetTradingRouteList struct {
	List []*TradingRoute `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *RspGetTradingRouteList) Reset()                    { *m = RspGetTradingRouteList{} }
func (m *RspGetTradingRouteList) String() string            { return proto.CompactTextString(m) }
func (*RspGetTradingRouteList) ProtoMessage()               {}
func (*RspGetTradingRouteList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{7} }

func (m *RspGetTradingRouteList) GetList() []*TradingRoute {
	if m != nil {
		return m.List
	}
	return nil
}

type ReqCreateTradingRoute struct {
}

func (m *ReqCreateTradingRoute) Reset()                    { *m = ReqCreateTradingRoute{} }
func (m *ReqCreateTradingRoute) String() string            { return proto.CompactTextString(m) }
func (*ReqCreateTradingRoute) ProtoMessage()               {}
func (*ReqCreateTradingRoute) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{8} }

type RspCreateTradingRoute struct {
}

func (m *RspCreateTradingRoute) Reset()                    { *m = RspCreateTradingRoute{} }
func (m *RspCreateTradingRoute) String() string            { return proto.CompactTextString(m) }
func (*RspCreateTradingRoute) ProtoMessage()               {}
func (*RspCreateTradingRoute) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{9} }

type ReqDeleteTradingRoute struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReqDeleteTradingRoute) Reset()                    { *m = ReqDeleteTradingRoute{} }
func (m *ReqDeleteTradingRoute) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteTradingRoute) ProtoMessage()               {}
func (*ReqDeleteTradingRoute) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{10} }

func (m *ReqDeleteTradingRoute) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RspDeleteTradingRoute struct {
}

func (m *RspDeleteTradingRoute) Reset()                    { *m = RspDeleteTradingRoute{} }
func (m *RspDeleteTradingRoute) String() string            { return proto.CompactTextString(m) }
func (*RspDeleteTradingRoute) ProtoMessage()               {}
func (*RspDeleteTradingRoute) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{11} }

func init() {
	proto.RegisterType((*ReqGetAccountList)(nil), "pb.ReqGetAccountList")
	proto.RegisterType((*RspGetAccountList)(nil), "pb.RspGetAccountList")
	proto.RegisterType((*ReqAddAccount)(nil), "pb.ReqAddAccount")
	proto.RegisterType((*RspAddAccount)(nil), "pb.RspAddAccount")
	proto.RegisterType((*ReqDeleteAccount)(nil), "pb.ReqDeleteAccount")
	proto.RegisterType((*RspDeleteAccount)(nil), "pb.RspDeleteAccount")
	proto.RegisterType((*ReqGetTradingRouteList)(nil), "pb.ReqGetTradingRouteList")
	proto.RegisterType((*RspGetTradingRouteList)(nil), "pb.RspGetTradingRouteList")
	proto.RegisterType((*ReqCreateTradingRoute)(nil), "pb.ReqCreateTradingRoute")
	proto.RegisterType((*RspCreateTradingRoute)(nil), "pb.RspCreateTradingRoute")
	proto.RegisterType((*ReqDeleteTradingRoute)(nil), "pb.ReqDeleteTradingRoute")
	proto.RegisterType((*RspDeleteTradingRoute)(nil), "pb.RspDeleteTradingRoute")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TAHub service

type TAHubClient interface {
	// 账号列表
	GetAccountList(ctx context.Context, in *ReqGetAccountList, opts ...grpc.CallOption) (*RspGetAccountList, error)
	// 添加账号
	AddAccount(ctx context.Context, in *ReqAddAccount, opts ...grpc.CallOption) (*RspAddAccount, error)
	// 删除账号
	DeleteAccount(ctx context.Context, in *ReqDeleteAccount, opts ...grpc.CallOption) (*RspDeleteAccount, error)
	// 经纪商列表
	GetTradingRouteList(ctx context.Context, in *ReqGetTradingRouteList, opts ...grpc.CallOption) (*RspGetTradingRouteList, error)
	// 添加经纪商
	CreateTradingRoute(ctx context.Context, in *ReqCreateTradingRoute, opts ...grpc.CallOption) (*RspCreateTradingRoute, error)
	// 删除经纪商
	DeleteTradingRoute(ctx context.Context, in *ReqDeleteTradingRoute, opts ...grpc.CallOption) (*RspDeleteTradingRoute, error)
}

type tAHubClient struct {
	cc *grpc.ClientConn
}

func NewTAHubClient(cc *grpc.ClientConn) TAHubClient {
	return &tAHubClient{cc}
}

func (c *tAHubClient) GetAccountList(ctx context.Context, in *ReqGetAccountList, opts ...grpc.CallOption) (*RspGetAccountList, error) {
	out := new(RspGetAccountList)
	err := grpc.Invoke(ctx, "/pb.TAHub/GetAccountList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAHubClient) AddAccount(ctx context.Context, in *ReqAddAccount, opts ...grpc.CallOption) (*RspAddAccount, error) {
	out := new(RspAddAccount)
	err := grpc.Invoke(ctx, "/pb.TAHub/AddAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAHubClient) DeleteAccount(ctx context.Context, in *ReqDeleteAccount, opts ...grpc.CallOption) (*RspDeleteAccount, error) {
	out := new(RspDeleteAccount)
	err := grpc.Invoke(ctx, "/pb.TAHub/DeleteAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAHubClient) GetTradingRouteList(ctx context.Context, in *ReqGetTradingRouteList, opts ...grpc.CallOption) (*RspGetTradingRouteList, error) {
	out := new(RspGetTradingRouteList)
	err := grpc.Invoke(ctx, "/pb.TAHub/GetTradingRouteList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAHubClient) CreateTradingRoute(ctx context.Context, in *ReqCreateTradingRoute, opts ...grpc.CallOption) (*RspCreateTradingRoute, error) {
	out := new(RspCreateTradingRoute)
	err := grpc.Invoke(ctx, "/pb.TAHub/CreateTradingRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tAHubClient) DeleteTradingRoute(ctx context.Context, in *ReqDeleteTradingRoute, opts ...grpc.CallOption) (*RspDeleteTradingRoute, error) {
	out := new(RspDeleteTradingRoute)
	err := grpc.Invoke(ctx, "/pb.TAHub/DeleteTradingRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TAHub service

type TAHubServer interface {
	// 账号列表
	GetAccountList(context.Context, *ReqGetAccountList) (*RspGetAccountList, error)
	// 添加账号
	AddAccount(context.Context, *ReqAddAccount) (*RspAddAccount, error)
	// 删除账号
	DeleteAccount(context.Context, *ReqDeleteAccount) (*RspDeleteAccount, error)
	// 经纪商列表
	GetTradingRouteList(context.Context, *ReqGetTradingRouteList) (*RspGetTradingRouteList, error)
	// 添加经纪商
	CreateTradingRoute(context.Context, *ReqCreateTradingRoute) (*RspCreateTradingRoute, error)
	// 删除经纪商
	DeleteTradingRoute(context.Context, *ReqDeleteTradingRoute) (*RspDeleteTradingRoute, error)
}

func RegisterTAHubServer(s *grpc.Server, srv TAHubServer) {
	s.RegisterService(&_TAHub_serviceDesc, srv)
}

func _TAHub_GetAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAccountList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAHubServer).GetAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TAHub/GetAccountList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAHubServer).GetAccountList(ctx, req.(*ReqGetAccountList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAHub_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAHubServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TAHub/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAHubServer).AddAccount(ctx, req.(*ReqAddAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAHub_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAHubServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TAHub/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAHubServer).DeleteAccount(ctx, req.(*ReqDeleteAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAHub_GetTradingRouteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetTradingRouteList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAHubServer).GetTradingRouteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TAHub/GetTradingRouteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAHubServer).GetTradingRouteList(ctx, req.(*ReqGetTradingRouteList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAHub_CreateTradingRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateTradingRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAHubServer).CreateTradingRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TAHub/CreateTradingRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAHubServer).CreateTradingRoute(ctx, req.(*ReqCreateTradingRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _TAHub_DeleteTradingRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteTradingRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TAHubServer).DeleteTradingRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TAHub/DeleteTradingRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TAHubServer).DeleteTradingRoute(ctx, req.(*ReqDeleteTradingRoute))
	}
	return interceptor(ctx, in, info, handler)
}

var _TAHub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TAHub",
	HandlerType: (*TAHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountList",
			Handler:    _TAHub_GetAccountList_Handler,
		},
		{
			MethodName: "AddAccount",
			Handler:    _TAHub_AddAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _TAHub_DeleteAccount_Handler,
		},
		{
			MethodName: "GetTradingRouteList",
			Handler:    _TAHub_GetTradingRouteList_Handler,
		},
		{
			MethodName: "CreateTradingRoute",
			Handler:    _TAHub_CreateTradingRoute_Handler,
		},
		{
			MethodName: "DeleteTradingRoute",
			Handler:    _TAHub_DeleteTradingRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tahub.proto",
}

func init() { proto.RegisterFile("tahub.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x6a, 0xc3, 0x30,
	0x10, 0x84, 0x49, 0xd2, 0xf6, 0xb0, 0x21, 0x69, 0xbc, 0xf9, 0xa9, 0xad, 0x53, 0x08, 0x85, 0xe6,
	0xe4, 0x83, 0x7b, 0x2c, 0x04, 0x4c, 0x0b, 0x2d, 0xa1, 0xbd, 0x88, 0xbc, 0x80, 0x1d, 0x8b, 0xd6,
	0x10, 0x62, 0xd9, 0x92, 0x9f, 0xa7, 0xaf, 0x5a, 0x2a, 0x09, 0x2c, 0x59, 0xbe, 0x7e, 0xb3, 0xb3,
	0x3b, 0x1e, 0x0b, 0xa6, 0x32, 0xfb, 0x69, 0xf3, 0x98, 0x37, 0x95, 0xac, 0x70, 0xcc, 0x73, 0x32,
	0x93, 0x4d, 0x56, 0x94, 0xd7, 0x6f, 0x8d, 0x76, 0x4b, 0x08, 0x28, 0xab, 0xdf, 0x99, 0x4c, 0xcf,
	0xe7, 0xaa, 0xbd, 0xca, 0xcf, 0x52, 0x48, 0x05, 0x05, 0xef, 0xc1, 0x7b, 0x98, 0x51, 0x56, 0xa7,
	0x45, 0x61, 0xa0, 0x02, 0x82, 0x5b, 0x00, 0x61, 0x41, 0x59, 0xfd, 0xc6, 0x2e, 0x4c, 0x32, 0x9b,
	0x09, 0xee, 0xb2, 0x10, 0x36, 0xfa, 0xe6, 0x49, 0x47, 0xa1, 0x55, 0x2b, 0x99, 0xba, 0x71, 0x80,
	0x8d, 0x3e, 0xdc, 0x57, 0xf0, 0x11, 0x6e, 0x2e, 0xa5, 0x90, 0xe1, 0x68, 0x3b, 0xd9, 0x4f, 0x93,
	0x45, 0xcc, 0xf3, 0xd8, 0x9e, 0xa1, 0x4a, 0xdd, 0x3d, 0xc0, 0x9a, 0xb2, 0xfa, 0xb5, 0x61, 0x99,
	0x64, 0xb6, 0xac, 0x04, 0xc1, 0x07, 0x84, 0x27, 0xe5, 0xd0, 0xf9, 0x6c, 0x01, 0xe7, 0x30, 0x2e,
	0x8b, 0x70, 0xb4, 0x1d, 0xed, 0x27, 0x74, 0x5c, 0x16, 0x66, 0x83, 0x3f, 0x98, 0xfc, 0x4e, 0xe0,
	0xf6, 0x94, 0x7e, 0xb4, 0x39, 0x1e, 0x60, 0xee, 0x76, 0x86, 0xeb, 0xff, 0x9c, 0x5e, 0xbf, 0x44,
	0xe3, 0x7e, 0xc3, 0x98, 0x00, 0x74, 0x6d, 0x62, 0x60, 0xbc, 0x1d, 0x22, 0x81, 0xf1, 0x59, 0x53,
	0x2f, 0x30, 0x73, 0xca, 0xc5, 0x95, 0xb1, 0x39, 0x94, 0xac, 0x8c, 0xd3, 0x9d, 0xfd, 0x82, 0xe5,
	0x50, 0xd7, 0xa4, 0x4b, 0xdd, 0xd7, 0x08, 0xe9, 0xa2, 0x7b, 0xbe, 0x23, 0xa0, 0xdf, 0x30, 0x46,
	0x66, 0x9b, 0x2f, 0x91, 0xc8, 0x2c, 0x1b, 0x70, 0x1d, 0x01, 0x07, 0x7e, 0x4a, 0xe4, 0x7c, 0xdc,
	0xe0, 0x2e, 0x5f, 0xca, 0xef, 0xd4, 0x53, 0x7f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xa8,
	0xe5, 0xbb, 0x0c, 0x03, 0x00, 0x00,
}
