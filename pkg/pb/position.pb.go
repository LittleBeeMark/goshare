// Code generated by protoc-gen-go. DO NOT EDIT.
// source: position.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 持仓统计
type PositionSummation struct {
	// 方向
	Direction int32 `protobuf:"varint,1,opt,name=direction" json:"direction,omitempty"`
	// 类型
	Type int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	// 路由分组
	RouteAccount string `protobuf:"bytes,3,opt,name=route_account,json=routeAccount" json:"route_account,omitempty"`
	// 持仓
	Position int32 `protobuf:"varint,4,opt,name=Position" json:"Position,omitempty"`
	// 金额
	Amount float64 `protobuf:"fixed64,5,opt,name=amount" json:"amount,omitempty"`
	// 成本
	Cost float64 `protobuf:"fixed64,6,opt,name=cost" json:"cost,omitempty"`
	// 冻结
	Frozen int32 `protobuf:"varint,7,opt,name=frozen" json:"frozen,omitempty"`
	// 可用
	Available int32 `protobuf:"varint,8,opt,name=available" json:"available,omitempty"`
	// 盈亏
	PositionProfit float64 `protobuf:"fixed64,9,opt,name=position_profit,json=positionProfit" json:"position_profit,omitempty"`
	// 平盈
	ClosedProfit float64 `protobuf:"fixed64,10,opt,name=closed_profit,json=closedProfit" json:"closed_profit,omitempty"`
	// 保证金
	Margin float64 `protobuf:"fixed64,11,opt,name=margin" json:"margin,omitempty"`
	// 冻结保证金
	FrozenMargin float64 `protobuf:"fixed64,12,opt,name=frozen_margin,json=frozenMargin" json:"frozen_margin,omitempty"`
	// 手续费
	Commission float64 `protobuf:"fixed64,13,opt,name=commission" json:"commission,omitempty"`
	// 冻结手续费
	FrozenCommission float64 `protobuf:"fixed64,14,opt,name=frozen_commission,json=frozenCommission" json:"frozen_commission,omitempty"`
	// 利息
	Interest float64 `protobuf:"fixed64,15,opt,name=interest" json:"interest,omitempty"`
	// 冻结利息
	FrozenInterest float64 `protobuf:"fixed64,16,opt,name=frozen_interest,json=frozenInterest" json:"frozen_interest,omitempty"`
	// 盯市盈亏
	MtmProfit float64 `protobuf:"fixed64,17,opt,name=mtm_profit,json=mtmProfit" json:"mtm_profit,omitempty"`
	// 进入清算的平仓盈亏
	ClearedClosedProfit float64 `protobuf:"fixed64,18,opt,name=cleared_closed_profit,json=clearedClosedProfit" json:"cleared_closed_profit,omitempty"`
	// 印花税
	StampTax float64 `protobuf:"fixed64,19,opt,name=stamp_tax,json=stampTax" json:"stamp_tax,omitempty"`
	// 过户费
	TransferFee float64 `protobuf:"fixed64,20,opt,name=transfer_fee,json=transferFee" json:"transfer_fee,omitempty"`
	// 部门
	Branch string `protobuf:"bytes,21,opt,name=branch" json:"branch,omitempty"`
	// 部门名称
	BranchName string `protobuf:"bytes,22,opt,name=branch_name,json=branchName" json:"branch_name,omitempty"`
}

func (m *PositionSummation) Reset()                    { *m = PositionSummation{} }
func (m *PositionSummation) String() string            { return proto.CompactTextString(m) }
func (*PositionSummation) ProtoMessage()               {}
func (*PositionSummation) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *PositionSummation) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *PositionSummation) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PositionSummation) GetRouteAccount() string {
	if m != nil {
		return m.RouteAccount
	}
	return ""
}

func (m *PositionSummation) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *PositionSummation) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PositionSummation) GetCost() float64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *PositionSummation) GetFrozen() int32 {
	if m != nil {
		return m.Frozen
	}
	return 0
}

func (m *PositionSummation) GetAvailable() int32 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *PositionSummation) GetPositionProfit() float64 {
	if m != nil {
		return m.PositionProfit
	}
	return 0
}

func (m *PositionSummation) GetClosedProfit() float64 {
	if m != nil {
		return m.ClosedProfit
	}
	return 0
}

func (m *PositionSummation) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *PositionSummation) GetFrozenMargin() float64 {
	if m != nil {
		return m.FrozenMargin
	}
	return 0
}

func (m *PositionSummation) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *PositionSummation) GetFrozenCommission() float64 {
	if m != nil {
		return m.FrozenCommission
	}
	return 0
}

func (m *PositionSummation) GetInterest() float64 {
	if m != nil {
		return m.Interest
	}
	return 0
}

func (m *PositionSummation) GetFrozenInterest() float64 {
	if m != nil {
		return m.FrozenInterest
	}
	return 0
}

func (m *PositionSummation) GetMtmProfit() float64 {
	if m != nil {
		return m.MtmProfit
	}
	return 0
}

func (m *PositionSummation) GetClearedClosedProfit() float64 {
	if m != nil {
		return m.ClearedClosedProfit
	}
	return 0
}

func (m *PositionSummation) GetStampTax() float64 {
	if m != nil {
		return m.StampTax
	}
	return 0
}

func (m *PositionSummation) GetTransferFee() float64 {
	if m != nil {
		return m.TransferFee
	}
	return 0
}

func (m *PositionSummation) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *PositionSummation) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

// 持仓
type Position struct {
	// / 合约编号
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// 统计
	Summation *PositionSummation `protobuf:"bytes,2,opt,name=summation" json:"summation,omitempty"`
	// 今仓
	TodaySummation *PositionSummation `protobuf:"bytes,3,opt,name=today_summation,json=todaySummation" json:"today_summation,omitempty"`
	// 今仓
	YesterdaySummation *PositionSummation `protobuf:"bytes,4,opt,name=yesterday_summation,json=yesterdaySummation" json:"yesterday_summation,omitempty"`
	// 昨结算
	PreSettlementPrice float64 `protobuf:"fixed64,5,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	// 今结算
	SettlementPrice float64 `protobuf:"fixed64,6,opt,name=settlement_price,json=settlementPrice" json:"settlement_price,omitempty"`
	// 最新价
	LastPrice float64 `protobuf:"fixed64,7,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,8,opt,name=trading_day,json=tradingDay" json:"trading_day,omitempty"`
	// 交易品种类型
	ProductType int32 `protobuf:"varint,9,opt,name=product_type,json=productType" json:"product_type,omitempty"`
	// 结算组
	SettlementGroup int32 `protobuf:"varint,10,opt,name=settlement_group,json=settlementGroup" json:"settlement_group,omitempty"`
	// 合约乘数
	VolumeMultiple int32 `protobuf:"varint,11,opt,name=volume_multiple,json=volumeMultiple" json:"volume_multiple,omitempty"`
	// 产品
	ProductId *ProductID `protobuf:"bytes,12,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	// 最小变动价位
	PriceTick float64 `protobuf:"fixed64,13,opt,name=price_tick,json=priceTick" json:"price_tick,omitempty"`
	// 名称
	SymbolName string `protobuf:"bytes,14,opt,name=symbol_name,json=symbolName" json:"symbol_name,omitempty"`
	// 账号
	Account string `protobuf:"bytes,15,opt,name=account" json:"account,omitempty"`
	// 账号名
	AccountName string `protobuf:"bytes,16,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// 公司
	Company int64 `protobuf:"varint,17,opt,name=company" json:"company,omitempty"`
	// 代理
	Branch string `protobuf:"bytes,18,opt,name=branch" json:"branch,omitempty"`
	// 到期日
	ExpireDate int32 `protobuf:"varint,19,opt,name=expire_date,json=expireDate" json:"expire_date,omitempty"`
	// 部门名称
	BranchName string `protobuf:"bytes,20,opt,name=branch_name,json=branchName" json:"branch_name,omitempty"`
	// 是否允许平今
	IsCloseTodayAllowed bool `protobuf:"varint,21,opt,name=is_close_today_allowed,json=isCloseTodayAllowed" json:"is_close_today_allowed,omitempty"`
	// 用户
	User string `protobuf:"bytes,22,opt,name=user" json:"user,omitempty"`
	// 用户名
	UserName string `protobuf:"bytes,23,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *Position) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *Position) GetSummation() *PositionSummation {
	if m != nil {
		return m.Summation
	}
	return nil
}

func (m *Position) GetTodaySummation() *PositionSummation {
	if m != nil {
		return m.TodaySummation
	}
	return nil
}

func (m *Position) GetYesterdaySummation() *PositionSummation {
	if m != nil {
		return m.YesterdaySummation
	}
	return nil
}

func (m *Position) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *Position) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *Position) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *Position) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *Position) GetProductType() int32 {
	if m != nil {
		return m.ProductType
	}
	return 0
}

func (m *Position) GetSettlementGroup() int32 {
	if m != nil {
		return m.SettlementGroup
	}
	return 0
}

func (m *Position) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *Position) GetProductId() *ProductID {
	if m != nil {
		return m.ProductId
	}
	return nil
}

func (m *Position) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *Position) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *Position) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Position) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *Position) GetCompany() int64 {
	if m != nil {
		return m.Company
	}
	return 0
}

func (m *Position) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Position) GetExpireDate() int32 {
	if m != nil {
		return m.ExpireDate
	}
	return 0
}

func (m *Position) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *Position) GetIsCloseTodayAllowed() bool {
	if m != nil {
		return m.IsCloseTodayAllowed
	}
	return false
}

func (m *Position) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Position) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type PositionList struct {
	List []*Position `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *PositionList) Reset()                    { *m = PositionList{} }
func (m *PositionList) String() string            { return proto.CompactTextString(m) }
func (*PositionList) ProtoMessage()               {}
func (*PositionList) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *PositionList) GetList() []*Position {
	if m != nil {
		return m.List
	}
	return nil
}

// 强平
type ReqForceClosePosition struct {
	User       string         `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Symbol     *Symbol        `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	Direction  OrderDirection `protobuf:"varint,3,opt,name=direction,enum=pb.OrderDirection" json:"direction,omitempty"`
	Price      float64        `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
	Volume     int32          `protobuf:"varint,5,opt,name=volume" json:"volume,omitempty"`
	Account    string         `protobuf:"bytes,6,opt,name=account" json:"account,omitempty"`
	Repurchase bool           `protobuf:"varint,7,opt,name=repurchase" json:"repurchase,omitempty"`
	Comment    string         `protobuf:"bytes,8,opt,name=comment" json:"comment,omitempty"`
}

func (m *ReqForceClosePosition) Reset()                    { *m = ReqForceClosePosition{} }
func (m *ReqForceClosePosition) String() string            { return proto.CompactTextString(m) }
func (*ReqForceClosePosition) ProtoMessage()               {}
func (*ReqForceClosePosition) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *ReqForceClosePosition) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ReqForceClosePosition) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *ReqForceClosePosition) GetDirection() OrderDirection {
	if m != nil {
		return m.Direction
	}
	return OrderDirection_OD_LONG
}

func (m *ReqForceClosePosition) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ReqForceClosePosition) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *ReqForceClosePosition) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ReqForceClosePosition) GetRepurchase() bool {
	if m != nil {
		return m.Repurchase
	}
	return false
}

func (m *ReqForceClosePosition) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func init() {
	proto.RegisterType((*PositionSummation)(nil), "pb.PositionSummation")
	proto.RegisterType((*Position)(nil), "pb.Position")
	proto.RegisterType((*PositionList)(nil), "pb.PositionList")
	proto.RegisterType((*ReqForceClosePosition)(nil), "pb.ReqForceClosePosition")
}

func init() { proto.RegisterFile("position.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 900 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0x4d, 0x6f, 0xe3, 0x36,
	0x10, 0x85, 0x13, 0xdb, 0xb1, 0x46, 0x8e, 0x9d, 0x30, 0x1f, 0x15, 0xd2, 0xee, 0xae, 0x9b, 0x1e,
	0x9a, 0xa2, 0x45, 0x10, 0x38, 0xf7, 0x02, 0x8b, 0x0d, 0x52, 0x04, 0xe8, 0xb6, 0x81, 0x92, 0xbb,
	0x40, 0x4b, 0x93, 0x2c, 0xb1, 0xa2, 0xa8, 0x92, 0xf4, 0x36, 0xee, 0xb5, 0xfd, 0x83, 0xfd, 0x47,
	0x05, 0x87, 0xa4, 0xad, 0x64, 0xd1, 0x3d, 0x89, 0xf3, 0xe6, 0x0d, 0xc9, 0x21, 0xdf, 0x13, 0x61,
	0xd2, 0x2a, 0x23, 0xac, 0x50, 0xcd, 0x79, 0xab, 0x95, 0x55, 0x6c, 0xab, 0x5d, 0x9c, 0x8c, 0x4b,
	0x25, 0x65, 0x44, 0x4e, 0x52, 0xa5, 0x2b, 0xd4, 0x3e, 0x38, 0xfd, 0x77, 0x00, 0xfb, 0xb7, 0xa1,
	0xe2, 0x6e, 0x29, 0x25, 0x77, 0x03, 0xf6, 0x0d, 0x24, 0x95, 0xd0, 0x58, 0xba, 0x20, 0xeb, 0xcd,
	0x7a, 0x67, 0x83, 0x7c, 0x03, 0x30, 0x06, 0x7d, 0xbb, 0x6a, 0x31, 0xdb, 0xa2, 0x04, 0x8d, 0xd9,
	0x77, 0xb0, 0xab, 0xd5, 0xd2, 0x62, 0xc1, 0xcb, 0x52, 0x2d, 0x1b, 0x9b, 0x6d, 0xcf, 0x7a, 0x67,
	0x49, 0x3e, 0x26, 0xf0, 0xad, 0xc7, 0xd8, 0x09, 0x8c, 0xe2, 0x5a, 0x59, 0x9f, 0x8a, 0xd7, 0x31,
	0x3b, 0x86, 0x21, 0x97, 0x54, 0x39, 0x98, 0xf5, 0xce, 0x7a, 0x79, 0x88, 0xdc, 0x62, 0xa5, 0x32,
	0x36, 0x1b, 0x12, 0x4a, 0x63, 0xc7, 0x7d, 0xd0, 0xea, 0x2f, 0x6c, 0xb2, 0x1d, 0x9a, 0x25, 0x44,
	0x6e, 0xdb, 0xfc, 0x13, 0x17, 0x35, 0x5f, 0xd4, 0x98, 0x8d, 0xfc, 0xb6, 0xd7, 0x00, 0xfb, 0x1e,
	0xa6, 0xf1, 0x6c, 0x8a, 0x56, 0xab, 0x07, 0x61, 0xb3, 0x84, 0x26, 0x5d, 0x1f, 0xd9, 0x2d, 0xa1,
	0xae, 0x97, 0xb2, 0x56, 0x06, 0xab, 0x48, 0x03, 0xa2, 0x8d, 0x3d, 0x18, 0x48, 0xc7, 0x30, 0x94,
	0x5c, 0x3f, 0x8a, 0x26, 0x4b, 0xfd, 0x7e, 0x7d, 0xe4, 0x8a, 0xfd, 0x6e, 0x8a, 0x90, 0x1e, 0xfb,
	0x62, 0x0f, 0xbe, 0xf7, 0xa4, 0xd7, 0x00, 0xee, 0x4a, 0x84, 0x31, 0xee, 0x28, 0x76, 0x89, 0xd1,
	0x41, 0xd8, 0x8f, 0xb0, 0x1f, 0x26, 0xe9, 0xd0, 0x26, 0x44, 0xdb, 0xf3, 0x89, 0x77, 0x1b, 0xf2,
	0x09, 0x8c, 0x44, 0x63, 0x51, 0xa3, 0xb1, 0xd9, 0x94, 0x38, 0xeb, 0xd8, 0xf5, 0x1c, 0x26, 0x5a,
	0x53, 0xf6, 0x7c, 0xcf, 0x1e, 0xbe, 0x89, 0xc4, 0x57, 0x00, 0xd2, 0xca, 0xd8, 0xf0, 0x3e, 0x71,
	0x12, 0x69, 0x65, 0xe8, 0x76, 0x0e, 0x47, 0x65, 0x8d, 0x5c, 0x63, 0x55, 0x3c, 0x3f, 0x1a, 0x46,
	0xcc, 0x83, 0x90, 0x7c, 0xd7, 0x3d, 0xa1, 0xaf, 0x21, 0x31, 0x96, 0xcb, 0xb6, 0xb0, 0xfc, 0x29,
	0x3b, 0xf0, 0x1b, 0x23, 0xe0, 0x9e, 0x3f, 0xb1, 0x6f, 0x61, 0x6c, 0x35, 0x6f, 0xcc, 0x03, 0xea,
	0xe2, 0x01, 0x31, 0x3b, 0xa4, 0x7c, 0x1a, 0xb1, 0x6b, 0x44, 0x77, 0xc2, 0x0b, 0xcd, 0x9b, 0xf2,
	0x43, 0x76, 0x44, 0x5a, 0x0a, 0x11, 0x7b, 0x03, 0xa9, 0x1f, 0x15, 0x0d, 0x97, 0x98, 0x1d, 0x53,
	0x12, 0x3c, 0xf4, 0x1b, 0x97, 0x78, 0xfa, 0xcf, 0xce, 0x46, 0x67, 0xec, 0x14, 0x86, 0x66, 0x25,
	0x17, 0xaa, 0x26, 0x1d, 0xa7, 0x73, 0x38, 0x6f, 0x17, 0xe7, 0x77, 0x84, 0xe4, 0x21, 0xc3, 0x2e,
	0x21, 0x31, 0x51, 0xfb, 0xa4, 0xea, 0x74, 0x7e, 0xe4, 0x68, 0x9f, 0x19, 0x23, 0xdf, 0xf0, 0xd8,
	0xcf, 0x30, 0xb5, 0xaa, 0xe2, 0xab, 0x62, 0x53, 0xba, 0xfd, 0xa5, 0xd2, 0x09, 0xb1, 0x37, 0x1e,
	0xbb, 0x86, 0x83, 0x15, 0x1a, 0x8b, 0xfa, 0xf9, 0x1c, 0xfd, 0x2f, 0xcd, 0xc1, 0xd6, 0x15, 0x9b,
	0x79, 0x2e, 0xe0, 0xb0, 0xd5, 0x58, 0x18, 0xb4, 0xb6, 0x46, 0x89, 0x8d, 0x2d, 0x5a, 0x2d, 0x4a,
	0x0c, 0x36, 0x62, 0xad, 0xc6, 0xbb, 0x75, 0xea, 0xd6, 0x65, 0xd8, 0x0f, 0xb0, 0xf7, 0x19, 0xdb,
	0xdb, 0x6b, 0x6a, 0x5e, 0x50, 0x5f, 0x01, 0xd4, 0xdc, 0x44, 0xd2, 0x8e, 0x97, 0x85, 0x43, 0x7c,
	0xfa, 0x0d, 0xb8, 0x1b, 0xab, 0x44, 0xf3, 0x58, 0x54, 0x7c, 0x15, 0x2c, 0x07, 0x01, 0xba, 0xe2,
	0x2b, 0x77, 0xcd, 0xad, 0x56, 0xd5, 0xb2, 0xb4, 0x05, 0xfd, 0x32, 0x12, 0x62, 0xa4, 0x01, 0xbb,
	0x77, 0x7f, 0x8e, 0xe7, 0xbb, 0x79, 0xd4, 0x6a, 0xd9, 0x92, 0xe1, 0x06, 0xdd, 0xdd, 0xfc, 0xe2,
	0x60, 0xa7, 0xe6, 0x4f, 0xaa, 0x5e, 0x4a, 0x2c, 0xe4, 0xb2, 0xb6, 0xa2, 0xad, 0x91, 0xcc, 0x37,
	0xc8, 0x27, 0x1e, 0x7e, 0x1f, 0x50, 0xf6, 0x13, 0x40, 0x5c, 0x56, 0x54, 0xe4, 0xc0, 0x74, 0xbe,
	0x4b, 0x47, 0xea, 0xd1, 0x9b, 0xab, 0x3c, 0x09, 0x84, 0x9b, 0xca, 0x35, 0x49, 0xfd, 0x15, 0x56,
	0x94, 0x1f, 0x83, 0x1b, 0x13, 0x42, 0xee, 0x45, 0xf9, 0xd1, 0x35, 0xe9, 0x75, 0xe2, 0xf5, 0x36,
	0xf1, 0x7a, 0xf3, 0x90, 0xd3, 0x1b, 0xcb, 0x60, 0x27, 0xfe, 0xf5, 0xa6, 0x94, 0x8c, 0xa1, 0x6b,
	0x3f, 0x0c, 0x7d, 0xed, 0x1e, 0xa5, 0xd3, 0x80, 0xc5, 0xe2, 0x52, 0xc9, 0x96, 0x37, 0x2b, 0x72,
	0xdd, 0x76, 0x1e, 0xc3, 0x8e, 0xfe, 0xd9, 0x4b, 0xfd, 0xe3, 0x53, 0x2b, 0x34, 0x16, 0x15, 0xb7,
	0x48, 0xce, 0x1a, 0xe4, 0xe0, 0xa1, 0x2b, 0x6e, 0xf1, 0xa5, 0x41, 0x0e, 0x5f, 0x1a, 0x84, 0x5d,
	0xc2, 0xb1, 0x30, 0xde, 0xc8, 0x85, 0xd7, 0x30, 0xaf, 0x6b, 0xf5, 0x27, 0x56, 0xe4, 0xb4, 0x51,
	0x7e, 0x20, 0x0c, 0x39, 0xf9, 0xde, 0xe5, 0xde, 0xfa, 0x94, 0xfb, 0x11, 0x2f, 0x0d, 0xea, 0xe0,
	0x37, 0x1a, 0x3b, 0x8b, 0xbb, 0xaf, 0x5f, 0xe7, 0x2b, 0x4a, 0x8c, 0x1c, 0x40, 0x36, 0xbc, 0x80,
	0x71, 0x54, 0xf0, 0xaf, 0xc2, 0x58, 0x36, 0x83, 0x7e, 0x2d, 0x8c, 0xcd, 0x7a, 0xb3, 0xed, 0xb3,
	0x74, 0x3e, 0xee, 0x2a, 0x3c, 0xa7, 0xcc, 0xe9, 0xdf, 0x5b, 0x70, 0x94, 0xe3, 0x1f, 0xd7, 0x4a,
	0x97, 0x48, 0x1b, 0x58, 0xbb, 0x38, 0x2e, 0xde, 0xeb, 0x2c, 0xbe, 0x71, 0xf6, 0xd6, 0xff, 0x3a,
	0xfb, 0xa2, 0xfb, 0x90, 0x39, 0x7b, 0x4e, 0xe6, 0xcc, 0xd1, 0x7e, 0x77, 0x4f, 0xe0, 0x55, 0xcc,
	0x74, 0x1f, 0xb7, 0x43, 0x18, 0x78, 0xb1, 0xf7, 0x49, 0x07, 0x3e, 0x70, 0x77, 0xe1, 0x25, 0x46,
	0xb6, 0x1a, 0xe4, 0x21, 0xea, 0x5e, 0xfd, 0xf0, 0xf9, 0xd5, 0xbf, 0x06, 0xd0, 0xd8, 0x2e, 0x75,
	0xf9, 0x81, 0x1b, 0xef, 0x9c, 0x51, 0xde, 0x41, 0xc2, 0xbd, 0x3b, 0x6d, 0x93, 0x6d, 0x92, 0x3c,
	0x86, 0x8b, 0x21, 0xbd, 0xcc, 0x97, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xad, 0x9d, 0x32, 0x3c,
	0xca, 0x07, 0x00, 0x00,
}
