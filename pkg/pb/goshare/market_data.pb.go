// Code generated by protoc-gen-go. DO NOT EDIT.
// source: market_data.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OrderBook struct {
	/// 卖价
	Ask float64 `protobuf:"fixed64,1,opt,name=ask,proto3" json:"ask"`
	/// 卖量
	AskVolume int32 `protobuf:"varint,2,opt,name=ask_volume,json=askVolume,proto3" json:"askVolume"`
	/// 买价
	Bid float64 `protobuf:"fixed64,3,opt,name=bid,proto3" json:"bid"`
	/// 买量
	BidVolume            int32    `protobuf:"varint,4,opt,name=bid_volume,json=bidVolume,proto3" json:"bidVolume"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderBook) Reset()         { *m = OrderBook{} }
func (m *OrderBook) String() string { return proto.CompactTextString(m) }
func (*OrderBook) ProtoMessage()    {}
func (*OrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{0}
}

func (m *OrderBook) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderBook.Unmarshal(m, b)
}
func (m *OrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderBook.Marshal(b, m, deterministic)
}
func (m *OrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBook.Merge(m, src)
}
func (m *OrderBook) XXX_Size() int {
	return xxx_messageInfo_OrderBook.Size(m)
}
func (m *OrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBook proto.InternalMessageInfo

func (m *OrderBook) GetAsk() float64 {
	if m != nil {
		return m.Ask
	}
	return 0
}

func (m *OrderBook) GetAskVolume() int32 {
	if m != nil {
		return m.AskVolume
	}
	return 0
}

func (m *OrderBook) GetBid() float64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *OrderBook) GetBidVolume() int32 {
	if m != nil {
		return m.BidVolume
	}
	return 0
}

// 深度行情
type MarketDataSnapshot struct {
	// 合约
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol"`
	// 时间time_t
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time"`
	// 毫秒
	Milliseconds int32 `protobuf:"varint,3,opt,name=milliseconds,proto3" json:"milliseconds"`
	// 开盘
	Open float64 `protobuf:"fixed64,4,opt,name=open,proto3" json:"open"`
	// 最高
	High float64 `protobuf:"fixed64,5,opt,name=high,proto3" json:"high"`
	// 最低
	Low float64 `protobuf:"fixed64,6,opt,name=low,proto3" json:"low"`
	// 收盘
	Close float64 `protobuf:"fixed64,7,opt,name=close,proto3" json:"close"`
	// 成交量
	Volume int32 `protobuf:"varint,8,opt,name=volume,proto3" json:"volume"`
	// 成交金额
	Amount float64 `protobuf:"fixed64,9,opt,name=amount,proto3" json:"amount"`
	// 持仓
	Position int32 `protobuf:"varint,10,opt,name=position,proto3" json:"position"`
	// 最新价格
	Price float64 `protobuf:"fixed64,11,opt,name=price,proto3" json:"price"`
	// 昨收
	PreClose float64 `protobuf:"fixed64,12,opt,name=pre_close,json=preClose,proto3" json:"preClose"`
	// 昨结
	PreSettlementPrice float64 `protobuf:"fixed64,13,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"preSettlementPrice"`
	// 昨持仓
	PrePosition int32 `protobuf:"varint,14,opt,name=pre_position,json=prePosition,proto3" json:"prePosition"`
	// 结算价
	SettlementPrice float64 `protobuf:"fixed64,15,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlementPrice"`
	// 涨停
	UpperLimitPrice float64 `protobuf:"fixed64,16,opt,name=upper_limit_price,json=upperLimitPrice,proto3" json:"upperLimitPrice"`
	// 跌停
	LowerLimitPrice float64 `protobuf:"fixed64,17,opt,name=lower_limit_price,json=lowerLimitPrice,proto3" json:"lowerLimitPrice"`
	// 昨虚实
	PreDelta float64 `protobuf:"fixed64,18,opt,name=pre_delta,json=preDelta,proto3" json:"preDelta"`
	// 今虚实
	Delta float64 `protobuf:"fixed64,19,opt,name=delta,proto3" json:"delta"`
	// 均价
	AveragePrice float64 `protobuf:"fixed64,20,opt,name=average_price,json=averagePrice,proto3" json:"averagePrice"`
	// 交易日
	TradingDay int32 `protobuf:"varint,21,opt,name=trading_day,json=tradingDay,proto3" json:"tradingDay"`
	// 盘口
	OrderBookList []*OrderBook `protobuf:"bytes,22,rep,name=order_book_list,json=orderBookList,proto3" json:"orderBookList"`
	// 合约名称
	Name string `protobuf:"bytes,23,opt,name=name,proto3" json:"name"`
	// 执行价
	ExercisePrice float64 `protobuf:"fixed64,24,opt,name=exercise_price,json=exercisePrice,proto3" json:"exercisePrice"`
	// 成交增量
	VolumeDelta int32 `protobuf:"varint,25,opt,name=volume_delta,json=volumeDelta,proto3" json:"volumeDelta"`
	// 字符串时间
	Time2 string `protobuf:"bytes,26,opt,name=time2,proto3" json:"time2"`
	// 交易所字符串
	Exchange string `protobuf:"bytes,27,opt,name=exchange,proto3" json:"exchange"`
	// action day
	ActionDay int32 `protobuf:"varint,28,opt,name=action_day,json=actionDay,proto3" json:"actionDay"`
	// volume multiple
	VolumeMultiple int32 `protobuf:"varint,29,opt,name=volume_multiple,json=volumeMultiple,proto3" json:"volumeMultiple"`
	// price tick
	PriceTick            float64  `protobuf:"fixed64,30,opt,name=price_tick,json=priceTick,proto3" json:"priceTick"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDataSnapshot) Reset()         { *m = MarketDataSnapshot{} }
func (m *MarketDataSnapshot) String() string { return proto.CompactTextString(m) }
func (*MarketDataSnapshot) ProtoMessage()    {}
func (*MarketDataSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{1}
}

func (m *MarketDataSnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDataSnapshot.Unmarshal(m, b)
}
func (m *MarketDataSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDataSnapshot.Marshal(b, m, deterministic)
}
func (m *MarketDataSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataSnapshot.Merge(m, src)
}
func (m *MarketDataSnapshot) XXX_Size() int {
	return xxx_messageInfo_MarketDataSnapshot.Size(m)
}
func (m *MarketDataSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataSnapshot proto.InternalMessageInfo

func (m *MarketDataSnapshot) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *MarketDataSnapshot) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MarketDataSnapshot) GetMilliseconds() int32 {
	if m != nil {
		return m.Milliseconds
	}
	return 0
}

func (m *MarketDataSnapshot) GetOpen() float64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *MarketDataSnapshot) GetHigh() float64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *MarketDataSnapshot) GetLow() float64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *MarketDataSnapshot) GetClose() float64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *MarketDataSnapshot) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *MarketDataSnapshot) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MarketDataSnapshot) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *MarketDataSnapshot) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *MarketDataSnapshot) GetPreClose() float64 {
	if m != nil {
		return m.PreClose
	}
	return 0
}

func (m *MarketDataSnapshot) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetPrePosition() int32 {
	if m != nil {
		return m.PrePosition
	}
	return 0
}

func (m *MarketDataSnapshot) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetUpperLimitPrice() float64 {
	if m != nil {
		return m.UpperLimitPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetLowerLimitPrice() float64 {
	if m != nil {
		return m.LowerLimitPrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetPreDelta() float64 {
	if m != nil {
		return m.PreDelta
	}
	return 0
}

func (m *MarketDataSnapshot) GetDelta() float64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *MarketDataSnapshot) GetAveragePrice() float64 {
	if m != nil {
		return m.AveragePrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *MarketDataSnapshot) GetOrderBookList() []*OrderBook {
	if m != nil {
		return m.OrderBookList
	}
	return nil
}

func (m *MarketDataSnapshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MarketDataSnapshot) GetExercisePrice() float64 {
	if m != nil {
		return m.ExercisePrice
	}
	return 0
}

func (m *MarketDataSnapshot) GetVolumeDelta() int32 {
	if m != nil {
		return m.VolumeDelta
	}
	return 0
}

func (m *MarketDataSnapshot) GetTime2() string {
	if m != nil {
		return m.Time2
	}
	return ""
}

func (m *MarketDataSnapshot) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *MarketDataSnapshot) GetActionDay() int32 {
	if m != nil {
		return m.ActionDay
	}
	return 0
}

func (m *MarketDataSnapshot) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *MarketDataSnapshot) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

// MdsList 行情列表
type MdsList struct {
	List                 []*MarketDataSnapshot `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MdsList) Reset()         { *m = MdsList{} }
func (m *MdsList) String() string { return proto.CompactTextString(m) }
func (*MdsList) ProtoMessage()    {}
func (*MdsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{2}
}

func (m *MdsList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MdsList.Unmarshal(m, b)
}
func (m *MdsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MdsList.Marshal(b, m, deterministic)
}
func (m *MdsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MdsList.Merge(m, src)
}
func (m *MdsList) XXX_Size() int {
	return xxx_messageInfo_MdsList.Size(m)
}
func (m *MdsList) XXX_DiscardUnknown() {
	xxx_messageInfo_MdsList.DiscardUnknown(m)
}

var xxx_messageInfo_MdsList proto.InternalMessageInfo

func (m *MdsList) GetList() []*MarketDataSnapshot {
	if m != nil {
		return m.List
	}
	return nil
}

//期权T型
type OptionTMarket struct {
	// call报价
	CallTk *MarketDataSnapshot `protobuf:"bytes,1,opt,name=callTk,proto3" json:"callTk"`
	// put报价
	PutTk                *MarketDataSnapshot `protobuf:"bytes,2,opt,name=putTk,proto3" json:"putTk"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OptionTMarket) Reset()         { *m = OptionTMarket{} }
func (m *OptionTMarket) String() string { return proto.CompactTextString(m) }
func (*OptionTMarket) ProtoMessage()    {}
func (*OptionTMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{3}
}

func (m *OptionTMarket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionTMarket.Unmarshal(m, b)
}
func (m *OptionTMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionTMarket.Marshal(b, m, deterministic)
}
func (m *OptionTMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionTMarket.Merge(m, src)
}
func (m *OptionTMarket) XXX_Size() int {
	return xxx_messageInfo_OptionTMarket.Size(m)
}
func (m *OptionTMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionTMarket.DiscardUnknown(m)
}

var xxx_messageInfo_OptionTMarket proto.InternalMessageInfo

func (m *OptionTMarket) GetCallTk() *MarketDataSnapshot {
	if m != nil {
		return m.CallTk
	}
	return nil
}

func (m *OptionTMarket) GetPutTk() *MarketDataSnapshot {
	if m != nil {
		return m.PutTk
	}
	return nil
}

// 简易期权T型报价
type SimpleTickForTQuote struct {
	Symbol               *Symbol  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol"`
	Price                float64  `protobuf:"fixed64,2,opt,name=price,proto3" json:"price"`
	UpDownRatio          float64  `protobuf:"fixed64,3,opt,name=up_down_ratio,json=upDownRatio,proto3" json:"upDownRatio"`
	PreSettlementPrice   float64  `protobuf:"fixed64,4,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"preSettlementPrice"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleTickForTQuote) Reset()         { *m = SimpleTickForTQuote{} }
func (m *SimpleTickForTQuote) String() string { return proto.CompactTextString(m) }
func (*SimpleTickForTQuote) ProtoMessage()    {}
func (*SimpleTickForTQuote) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{4}
}

func (m *SimpleTickForTQuote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleTickForTQuote.Unmarshal(m, b)
}
func (m *SimpleTickForTQuote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleTickForTQuote.Marshal(b, m, deterministic)
}
func (m *SimpleTickForTQuote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleTickForTQuote.Merge(m, src)
}
func (m *SimpleTickForTQuote) XXX_Size() int {
	return xxx_messageInfo_SimpleTickForTQuote.Size(m)
}
func (m *SimpleTickForTQuote) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleTickForTQuote.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleTickForTQuote proto.InternalMessageInfo

func (m *SimpleTickForTQuote) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *SimpleTickForTQuote) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SimpleTickForTQuote) GetUpDownRatio() float64 {
	if m != nil {
		return m.UpDownRatio
	}
	return 0
}

func (m *SimpleTickForTQuote) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *SimpleTickForTQuote) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// T型报价的一行
type OptionTQuoteItem struct {
	ExercisePrice        float64              `protobuf:"fixed64,1,opt,name=exercise_price,json=exercisePrice,proto3" json:"exercisePrice"`
	Call                 *SimpleTickForTQuote `protobuf:"bytes,2,opt,name=call,proto3" json:"call"`
	Put                  *SimpleTickForTQuote `protobuf:"bytes,3,opt,name=put,proto3" json:"put"`
	ExercisePriceFlag    string               `protobuf:"bytes,4,opt,name=exercise_price_flag,json=exercisePriceFlag,proto3" json:"exercisePriceFlag"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OptionTQuoteItem) Reset()         { *m = OptionTQuoteItem{} }
func (m *OptionTQuoteItem) String() string { return proto.CompactTextString(m) }
func (*OptionTQuoteItem) ProtoMessage()    {}
func (*OptionTQuoteItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{5}
}

func (m *OptionTQuoteItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionTQuoteItem.Unmarshal(m, b)
}
func (m *OptionTQuoteItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionTQuoteItem.Marshal(b, m, deterministic)
}
func (m *OptionTQuoteItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionTQuoteItem.Merge(m, src)
}
func (m *OptionTQuoteItem) XXX_Size() int {
	return xxx_messageInfo_OptionTQuoteItem.Size(m)
}
func (m *OptionTQuoteItem) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionTQuoteItem.DiscardUnknown(m)
}

var xxx_messageInfo_OptionTQuoteItem proto.InternalMessageInfo

func (m *OptionTQuoteItem) GetExercisePrice() float64 {
	if m != nil {
		return m.ExercisePrice
	}
	return 0
}

func (m *OptionTQuoteItem) GetCall() *SimpleTickForTQuote {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *OptionTQuoteItem) GetPut() *SimpleTickForTQuote {
	if m != nil {
		return m.Put
	}
	return nil
}

func (m *OptionTQuoteItem) GetExercisePriceFlag() string {
	if m != nil {
		return m.ExercisePriceFlag
	}
	return ""
}

// OptionTQuoteItemList 列表
type OptionTQuoteItemList struct {
	Exchange             int32               `protobuf:"varint,1,opt,name=exchange,proto3" json:"exchange"`
	StrikeSymbol         string              `protobuf:"bytes,2,opt,name=strike_symbol,json=strikeSymbol,proto3" json:"strikeSymbol"`
	Month                string              `protobuf:"bytes,3,opt,name=month,proto3" json:"month"`
	List                 []*OptionTQuoteItem `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OptionTQuoteItemList) Reset()         { *m = OptionTQuoteItemList{} }
func (m *OptionTQuoteItemList) String() string { return proto.CompactTextString(m) }
func (*OptionTQuoteItemList) ProtoMessage()    {}
func (*OptionTQuoteItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{6}
}

func (m *OptionTQuoteItemList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionTQuoteItemList.Unmarshal(m, b)
}
func (m *OptionTQuoteItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionTQuoteItemList.Marshal(b, m, deterministic)
}
func (m *OptionTQuoteItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionTQuoteItemList.Merge(m, src)
}
func (m *OptionTQuoteItemList) XXX_Size() int {
	return xxx_messageInfo_OptionTQuoteItemList.Size(m)
}
func (m *OptionTQuoteItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionTQuoteItemList.DiscardUnknown(m)
}

var xxx_messageInfo_OptionTQuoteItemList proto.InternalMessageInfo

func (m *OptionTQuoteItemList) GetExchange() int32 {
	if m != nil {
		return m.Exchange
	}
	return 0
}

func (m *OptionTQuoteItemList) GetStrikeSymbol() string {
	if m != nil {
		return m.StrikeSymbol
	}
	return ""
}

func (m *OptionTQuoteItemList) GetMonth() string {
	if m != nil {
		return m.Month
	}
	return ""
}

func (m *OptionTQuoteItemList) GetList() []*OptionTQuoteItem {
	if m != nil {
		return m.List
	}
	return nil
}

// K线
type Kline struct {
	// 时间
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	// 开盘
	Open float64 `protobuf:"fixed64,2,opt,name=open,proto3" json:"open"`
	// 最高
	High float64 `protobuf:"fixed64,3,opt,name=high,proto3" json:"high"`
	// 最低
	Low float64 `protobuf:"fixed64,4,opt,name=low,proto3" json:"low"`
	// 收盘
	Close float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close"`
	// 成交量
	Volume int32 `protobuf:"varint,6,opt,name=volume,proto3" json:"volume"`
	// 成交额
	Amount float64 `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount"`
	// 持仓量
	Position int32 `protobuf:"varint,8,opt,name=position,proto3" json:"position"`
	// 交易日
	TradingDay           int32    `protobuf:"varint,9,opt,name=trading_day,json=tradingDay,proto3" json:"tradingDay"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kline) Reset()         { *m = Kline{} }
func (m *Kline) String() string { return proto.CompactTextString(m) }
func (*Kline) ProtoMessage()    {}
func (*Kline) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{7}
}

func (m *Kline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kline.Unmarshal(m, b)
}
func (m *Kline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kline.Marshal(b, m, deterministic)
}
func (m *Kline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kline.Merge(m, src)
}
func (m *Kline) XXX_Size() int {
	return xxx_messageInfo_Kline.Size(m)
}
func (m *Kline) XXX_DiscardUnknown() {
	xxx_messageInfo_Kline.DiscardUnknown(m)
}

var xxx_messageInfo_Kline proto.InternalMessageInfo

func (m *Kline) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Kline) GetOpen() float64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *Kline) GetHigh() float64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *Kline) GetLow() float64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *Kline) GetClose() float64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *Kline) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Kline) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Kline) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Kline) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

// KlineSeries K线序列
type KlineSeries struct {
	Symbol               *Symbol    `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol"`
	Period               PeriodType `protobuf:"varint,2,opt,name=period,proto3,enum=pb.PeriodType" json:"period"`
	PeriodInSeconds      int32      `protobuf:"varint,3,opt,name=period_in_seconds,json=periodInSeconds,proto3" json:"periodInSeconds"`
	List                 []*Kline   `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *KlineSeries) Reset()         { *m = KlineSeries{} }
func (m *KlineSeries) String() string { return proto.CompactTextString(m) }
func (*KlineSeries) ProtoMessage()    {}
func (*KlineSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{8}
}

func (m *KlineSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KlineSeries.Unmarshal(m, b)
}
func (m *KlineSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KlineSeries.Marshal(b, m, deterministic)
}
func (m *KlineSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KlineSeries.Merge(m, src)
}
func (m *KlineSeries) XXX_Size() int {
	return xxx_messageInfo_KlineSeries.Size(m)
}
func (m *KlineSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_KlineSeries.DiscardUnknown(m)
}

var xxx_messageInfo_KlineSeries proto.InternalMessageInfo

func (m *KlineSeries) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *KlineSeries) GetPeriod() PeriodType {
	if m != nil {
		return m.Period
	}
	return PeriodType_TICK
}

func (m *KlineSeries) GetPeriodInSeconds() int32 {
	if m != nil {
		return m.PeriodInSeconds
	}
	return 0
}

func (m *KlineSeries) GetList() []*Kline {
	if m != nil {
		return m.List
	}
	return nil
}

// 订阅行情
type ReqSubscribeMarketData struct {
	// 合约代码
	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol"`
	// 订阅的K线周期
	PeriodList           []PeriodType `protobuf:"varint,2,rep,packed,name=periodList,proto3,enum=pb.PeriodType" json:"periodList"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqSubscribeMarketData) Reset()         { *m = ReqSubscribeMarketData{} }
func (m *ReqSubscribeMarketData) String() string { return proto.CompactTextString(m) }
func (*ReqSubscribeMarketData) ProtoMessage()    {}
func (*ReqSubscribeMarketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{9}
}

func (m *ReqSubscribeMarketData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSubscribeMarketData.Unmarshal(m, b)
}
func (m *ReqSubscribeMarketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSubscribeMarketData.Marshal(b, m, deterministic)
}
func (m *ReqSubscribeMarketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSubscribeMarketData.Merge(m, src)
}
func (m *ReqSubscribeMarketData) XXX_Size() int {
	return xxx_messageInfo_ReqSubscribeMarketData.Size(m)
}
func (m *ReqSubscribeMarketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSubscribeMarketData.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSubscribeMarketData proto.InternalMessageInfo

func (m *ReqSubscribeMarketData) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *ReqSubscribeMarketData) GetPeriodList() []PeriodType {
	if m != nil {
		return m.PeriodList
	}
	return nil
}

// 返回订阅行情
type RspSubscribeMarketData struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspSubscribeMarketData) Reset()         { *m = RspSubscribeMarketData{} }
func (m *RspSubscribeMarketData) String() string { return proto.CompactTextString(m) }
func (*RspSubscribeMarketData) ProtoMessage()    {}
func (*RspSubscribeMarketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{10}
}

func (m *RspSubscribeMarketData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspSubscribeMarketData.Unmarshal(m, b)
}
func (m *RspSubscribeMarketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspSubscribeMarketData.Marshal(b, m, deterministic)
}
func (m *RspSubscribeMarketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspSubscribeMarketData.Merge(m, src)
}
func (m *RspSubscribeMarketData) XXX_Size() int {
	return xxx_messageInfo_RspSubscribeMarketData.Size(m)
}
func (m *RspSubscribeMarketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RspSubscribeMarketData.DiscardUnknown(m)
}

var xxx_messageInfo_RspSubscribeMarketData proto.InternalMessageInfo

// 推送订阅行情更新事件
type RtnMarketDataUpdate struct {
	// 最新盘口
	Tick *MarketDataSnapshot `protobuf:"bytes,1,opt,name=tick,proto3" json:"tick"`
	// 最新一根K线
	KlineList            []*Kline `protobuf:"bytes,2,rep,name=kline_list,json=klineList,proto3" json:"klineList"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RtnMarketDataUpdate) Reset()         { *m = RtnMarketDataUpdate{} }
func (m *RtnMarketDataUpdate) String() string { return proto.CompactTextString(m) }
func (*RtnMarketDataUpdate) ProtoMessage()    {}
func (*RtnMarketDataUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{11}
}

func (m *RtnMarketDataUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RtnMarketDataUpdate.Unmarshal(m, b)
}
func (m *RtnMarketDataUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RtnMarketDataUpdate.Marshal(b, m, deterministic)
}
func (m *RtnMarketDataUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RtnMarketDataUpdate.Merge(m, src)
}
func (m *RtnMarketDataUpdate) XXX_Size() int {
	return xxx_messageInfo_RtnMarketDataUpdate.Size(m)
}
func (m *RtnMarketDataUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_RtnMarketDataUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_RtnMarketDataUpdate proto.InternalMessageInfo

func (m *RtnMarketDataUpdate) GetTick() *MarketDataSnapshot {
	if m != nil {
		return m.Tick
	}
	return nil
}

func (m *RtnMarketDataUpdate) GetKlineList() []*Kline {
	if m != nil {
		return m.KlineList
	}
	return nil
}

// tick序列
type TickSeries struct {
	Symbol               *Symbol               `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol"`
	TradingDay           int32                 `protobuf:"varint,2,opt,name=trading_day,json=tradingDay,proto3" json:"tradingDay"`
	List                 []*MarketDataSnapshot `protobuf:"bytes,3,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TickSeries) Reset()         { *m = TickSeries{} }
func (m *TickSeries) String() string { return proto.CompactTextString(m) }
func (*TickSeries) ProtoMessage()    {}
func (*TickSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{12}
}

func (m *TickSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TickSeries.Unmarshal(m, b)
}
func (m *TickSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TickSeries.Marshal(b, m, deterministic)
}
func (m *TickSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickSeries.Merge(m, src)
}
func (m *TickSeries) XXX_Size() int {
	return xxx_messageInfo_TickSeries.Size(m)
}
func (m *TickSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_TickSeries.DiscardUnknown(m)
}

var xxx_messageInfo_TickSeries proto.InternalMessageInfo

func (m *TickSeries) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *TickSeries) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *TickSeries) GetList() []*MarketDataSnapshot {
	if m != nil {
		return m.List
	}
	return nil
}

type SimpleTick struct {
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	Price                float64  `protobuf:"fixed64,2,opt,name=price,proto3" json:"price"`
	Volume               int32    `protobuf:"varint,3,opt,name=volume,proto3" json:"volume"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleTick) Reset()         { *m = SimpleTick{} }
func (m *SimpleTick) String() string { return proto.CompactTextString(m) }
func (*SimpleTick) ProtoMessage()    {}
func (*SimpleTick) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{13}
}

func (m *SimpleTick) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleTick.Unmarshal(m, b)
}
func (m *SimpleTick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleTick.Marshal(b, m, deterministic)
}
func (m *SimpleTick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleTick.Merge(m, src)
}
func (m *SimpleTick) XXX_Size() int {
	return xxx_messageInfo_SimpleTick.Size(m)
}
func (m *SimpleTick) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleTick.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleTick proto.InternalMessageInfo

func (m *SimpleTick) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SimpleTick) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SimpleTick) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type SimpleTickSeries struct {
	Symbol               *Symbol       `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol"`
	TradingDay           int32         `protobuf:"varint,2,opt,name=trading_day,json=tradingDay,proto3" json:"tradingDay"`
	List                 []*SimpleTick `protobuf:"bytes,3,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SimpleTickSeries) Reset()         { *m = SimpleTickSeries{} }
func (m *SimpleTickSeries) String() string { return proto.CompactTextString(m) }
func (*SimpleTickSeries) ProtoMessage()    {}
func (*SimpleTickSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe080a1ca5f6ba79, []int{14}
}

func (m *SimpleTickSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleTickSeries.Unmarshal(m, b)
}
func (m *SimpleTickSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleTickSeries.Marshal(b, m, deterministic)
}
func (m *SimpleTickSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleTickSeries.Merge(m, src)
}
func (m *SimpleTickSeries) XXX_Size() int {
	return xxx_messageInfo_SimpleTickSeries.Size(m)
}
func (m *SimpleTickSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleTickSeries.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleTickSeries proto.InternalMessageInfo

func (m *SimpleTickSeries) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *SimpleTickSeries) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *SimpleTickSeries) GetList() []*SimpleTick {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*OrderBook)(nil), "pb.OrderBook")
	proto.RegisterType((*MarketDataSnapshot)(nil), "pb.MarketDataSnapshot")
	proto.RegisterType((*MdsList)(nil), "pb.MdsList")
	proto.RegisterType((*OptionTMarket)(nil), "pb.OptionTMarket")
	proto.RegisterType((*SimpleTickForTQuote)(nil), "pb.SimpleTickForTQuote")
	proto.RegisterType((*OptionTQuoteItem)(nil), "pb.OptionTQuoteItem")
	proto.RegisterType((*OptionTQuoteItemList)(nil), "pb.OptionTQuoteItemList")
	proto.RegisterType((*Kline)(nil), "pb.Kline")
	proto.RegisterType((*KlineSeries)(nil), "pb.KlineSeries")
	proto.RegisterType((*ReqSubscribeMarketData)(nil), "pb.ReqSubscribeMarketData")
	proto.RegisterType((*RspSubscribeMarketData)(nil), "pb.RspSubscribeMarketData")
	proto.RegisterType((*RtnMarketDataUpdate)(nil), "pb.RtnMarketDataUpdate")
	proto.RegisterType((*TickSeries)(nil), "pb.TickSeries")
	proto.RegisterType((*SimpleTick)(nil), "pb.SimpleTick")
	proto.RegisterType((*SimpleTickSeries)(nil), "pb.SimpleTickSeries")
}

func init() { proto.RegisterFile("market_data.proto", fileDescriptor_fe080a1ca5f6ba79) }

var fileDescriptor_fe080a1ca5f6ba79 = []byte{
	// 1091 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x6b, 0x6e, 0xe4, 0x44,
	0x10, 0x96, 0xe7, 0x95, 0xb8, 0xe6, 0x91, 0xa4, 0x13, 0xb2, 0x26, 0x4b, 0x20, 0x78, 0x05, 0xcc,
	0x2e, 0x68, 0x84, 0x82, 0xf6, 0x02, 0x10, 0xad, 0xb4, 0x62, 0xc3, 0x06, 0xcf, 0xc0, 0x5f, 0xab,
	0x6d, 0x37, 0x93, 0x96, 0x1f, 0xdd, 0xd8, 0x3d, 0x9b, 0x8d, 0x10, 0xe7, 0xe0, 0x02, 0x5c, 0x82,
	0x3f, 0x48, 0xdc, 0x82, 0xe3, 0xa0, 0xae, 0xee, 0xf1, 0xbc, 0x57, 0x41, 0xda, 0x7f, 0xee, 0xaf,
	0xaa, 0xab, 0xea, 0xab, 0xae, 0x87, 0xe1, 0x28, 0xa7, 0x65, 0xca, 0x54, 0x98, 0x50, 0x45, 0x47,
	0xb2, 0x14, 0x4a, 0x90, 0x86, 0x8c, 0xce, 0x7a, 0xb1, 0xc8, 0x73, 0x51, 0x18, 0xc4, 0xcf, 0xc1,
	0x7d, 0x5d, 0x26, 0xac, 0xfc, 0x56, 0x88, 0x94, 0x1c, 0x42, 0x93, 0x56, 0xa9, 0xe7, 0x5c, 0x38,
	0x43, 0x27, 0xd0, 0x9f, 0xe4, 0x1c, 0x80, 0x56, 0x69, 0xf8, 0x46, 0x64, 0xb3, 0x9c, 0x79, 0x8d,
	0x0b, 0x67, 0xd8, 0x0e, 0x5c, 0x5a, 0xa5, 0x3f, 0x23, 0xa0, 0x2f, 0x44, 0x3c, 0xf1, 0x9a, 0xe6,
	0x42, 0xc4, 0x13, 0x7d, 0x21, 0xe2, 0xc9, 0xfc, 0x42, 0xcb, 0x5c, 0x88, 0x78, 0x62, 0x2e, 0xf8,
	0x7f, 0xef, 0x01, 0xb9, 0xc6, 0xb0, 0xae, 0xa8, 0xa2, 0xe3, 0x82, 0xca, 0xea, 0x56, 0x28, 0xe2,
	0x43, 0xa7, 0xba, 0xcf, 0x23, 0x91, 0xa1, 0xef, 0xee, 0x25, 0x8c, 0x64, 0x34, 0x1a, 0x23, 0x12,
	0x58, 0x09, 0x21, 0xd0, 0x52, 0xdc, 0x06, 0xd1, 0x0c, 0xf0, 0x9b, 0xf8, 0xd0, 0xcb, 0x79, 0x96,
	0xf1, 0x8a, 0xc5, 0xa2, 0x48, 0x2a, 0x0c, 0xa4, 0x1d, 0xac, 0x60, 0xfa, 0x9e, 0x90, 0xac, 0xc0,
	0x58, 0x9c, 0x00, 0xbf, 0x35, 0x76, 0xcb, 0xa7, 0xb7, 0x5e, 0xdb, 0x60, 0xfa, 0x5b, 0x73, 0xc9,
	0xc4, 0x9d, 0xd7, 0x31, 0x5c, 0x32, 0x71, 0x47, 0x4e, 0xa0, 0x1d, 0x67, 0xa2, 0x62, 0xde, 0x1e,
	0x62, 0xe6, 0x40, 0x4e, 0xa1, 0x63, 0xd9, 0xed, 0xa3, 0x37, 0x7b, 0xd2, 0x38, 0xcd, 0xc5, 0xac,
	0x50, 0x9e, 0x8b, 0xea, 0xf6, 0x44, 0xce, 0x60, 0x5f, 0x8a, 0x8a, 0x2b, 0x2e, 0x0a, 0x0f, 0xf0,
	0x46, 0x7d, 0xd6, 0x1e, 0x64, 0xc9, 0x63, 0xe6, 0x75, 0x8d, 0x07, 0x3c, 0x90, 0xc7, 0xe0, 0xca,
	0x92, 0x85, 0xc6, 0x77, 0x0f, 0x25, 0xfb, 0xb2, 0x64, 0xdf, 0xa1, 0xfb, 0xaf, 0xe1, 0x44, 0x0b,
	0x2b, 0xa6, 0x54, 0xc6, 0x72, 0x56, 0xa8, 0xd0, 0x58, 0xe8, 0xa3, 0x1e, 0x91, 0x25, 0x1b, 0xd7,
	0xa2, 0x1b, 0x34, 0xf7, 0x29, 0xf4, 0xf4, 0x8d, 0x3a, 0x88, 0x01, 0x06, 0xd1, 0x95, 0x25, 0xbb,
	0x99, 0xc7, 0xf1, 0x14, 0x0e, 0x37, 0x0c, 0x1e, 0xa0, 0xc1, 0x83, 0x6a, 0xcd, 0xda, 0x33, 0x38,
	0x9a, 0x49, 0xc9, 0xca, 0x30, 0xe3, 0x39, 0x9f, 0xeb, 0x1e, 0x1a, 0x5d, 0x14, 0xbc, 0xd2, 0x78,
	0xad, 0x9b, 0x89, 0xbb, 0x35, 0xdd, 0x23, 0xa3, 0x8b, 0x82, 0x25, 0x5d, 0x4b, 0x3a, 0x61, 0x99,
	0xa2, 0x1e, 0xa9, 0x49, 0x5f, 0xe9, 0xb3, 0xce, 0x93, 0x11, 0x1c, 0x9b, 0x3c, 0xe1, 0x81, 0x3c,
	0x81, 0x3e, 0x7d, 0xc3, 0x4a, 0x3a, 0x65, 0xd6, 0xf4, 0x09, 0x4a, 0x7b, 0x16, 0x34, 0x76, 0x3f,
	0x81, 0xae, 0x2a, 0x69, 0xc2, 0x8b, 0x69, 0x98, 0xd0, 0x7b, 0xef, 0x03, 0x24, 0x0f, 0x16, 0xba,
	0xa2, 0xf7, 0xe4, 0x39, 0x1c, 0x08, 0xdd, 0x01, 0x61, 0x24, 0x44, 0x1a, 0x66, 0xbc, 0x52, 0xde,
	0xe9, 0x45, 0x73, 0xd8, 0xbd, 0xec, 0xeb, 0x22, 0xac, 0x9b, 0x23, 0xe8, 0x8b, 0xf9, 0xe7, 0x2b,
	0x5e, 0x29, 0x5d, 0x42, 0x05, 0xcd, 0x99, 0xf7, 0xe8, 0xc2, 0x19, 0xba, 0x01, 0x7e, 0x93, 0xcf,
	0x60, 0xc0, 0xde, 0xb2, 0x32, 0xe6, 0xd5, 0x3c, 0x22, 0x0f, 0x23, 0xea, 0xcf, 0xd1, 0xfa, 0x41,
	0x4c, 0xcd, 0x58, 0xb6, 0x1f, 0x9a, 0x07, 0x31, 0x58, 0x4d, 0x58, 0x17, 0xf8, 0xa5, 0x77, 0x86,
	0xe6, 0xcd, 0x41, 0x97, 0x12, 0x7b, 0x1b, 0xdf, 0xd2, 0x62, 0xca, 0xbc, 0xc7, 0x28, 0xa8, 0xcf,
	0xd8, 0xa9, 0xb1, 0x7e, 0x4c, 0xa4, 0xf9, 0x91, 0xed, 0x54, 0x44, 0x34, 0xcb, 0x2f, 0xe0, 0xc0,
	0xfa, 0xcc, 0x67, 0x99, 0xe2, 0x32, 0x63, 0xde, 0x39, 0xea, 0x0c, 0x0c, 0x7c, 0x6d, 0x51, 0x6d,
	0x07, 0x43, 0x0f, 0x15, 0x8f, 0x53, 0xef, 0x63, 0x8c, 0xdf, 0x45, 0x64, 0xc2, 0xe3, 0xd4, 0x7f,
	0x0e, 0x7b, 0xd7, 0x49, 0x85, 0x19, 0x78, 0x06, 0x2d, 0xcc, 0x96, 0x83, 0xd9, 0x3a, 0xd5, 0xd9,
	0xda, 0x6c, 0xed, 0x00, 0x75, 0xfc, 0x1c, 0xfa, 0xaf, 0xa5, 0x8e, 0x65, 0x62, 0x54, 0xc8, 0x08,
	0x3a, 0x31, 0xcd, 0xb2, 0x49, 0x6a, 0x3b, 0x7e, 0xd7, 0x75, 0xab, 0x45, 0xbe, 0x82, 0xb6, 0x9c,
	0xa9, 0x49, 0x8a, 0xed, 0xbf, 0x5b, 0xdd, 0x28, 0xf9, 0x7f, 0x39, 0x70, 0x3c, 0xe6, 0xb9, 0xcc,
	0x30, 0xe8, 0x17, 0xa2, 0x9c, 0xfc, 0x38, 0x13, 0x8a, 0x3d, 0x68, 0xce, 0xd4, 0x3d, 0xd9, 0x58,
	0xee, 0x49, 0x1f, 0xfa, 0x33, 0x19, 0x26, 0xe2, 0xae, 0x08, 0x4b, 0xaa, 0xb8, 0xb0, 0x33, 0xaf,
	0x3b, 0x93, 0x57, 0xe2, 0xae, 0x08, 0x34, 0xb4, 0xb3, 0x35, 0x5b, 0x3b, 0x5b, 0x73, 0x5e, 0x44,
	0xed, 0x45, 0x11, 0xf9, 0xff, 0x38, 0x70, 0x68, 0x73, 0x85, 0x41, 0xbf, 0x54, 0x2c, 0xdf, 0x52,
	0x59, 0xce, 0xb6, 0xca, 0xfa, 0x12, 0x5a, 0x3a, 0x5f, 0x36, 0x49, 0x8f, 0x90, 0xdd, 0x66, 0x1a,
	0x02, 0x54, 0x22, 0x4f, 0xa1, 0x29, 0x67, 0x0a, 0x89, 0xbc, 0x43, 0x57, 0xeb, 0x90, 0x11, 0x1c,
	0xaf, 0xba, 0x0f, 0x7f, 0xc9, 0xe8, 0x14, 0x89, 0xb9, 0xc1, 0xd1, 0x4a, 0x0c, 0x2f, 0x32, 0x3a,
	0xf5, 0xff, 0x70, 0xe0, 0x64, 0x9d, 0x03, 0xd6, 0xcc, 0x72, 0x05, 0x3b, 0x66, 0x18, 0xd6, 0x15,
	0xfc, 0x04, 0xfa, 0x95, 0x2a, 0x79, 0xca, 0x42, 0xfb, 0x46, 0x0d, 0x34, 0xdf, 0x33, 0xe0, 0xb8,
	0x7e, 0x9d, 0x5c, 0x14, 0xea, 0x16, 0xc3, 0x76, 0x03, 0x73, 0x20, 0x43, 0x5b, 0x8a, 0x2d, 0x2c,
	0xc5, 0x13, 0x6c, 0xdc, 0x35, 0xf7, 0xb6, 0x10, 0xff, 0x75, 0xa0, 0xfd, 0x7d, 0xc6, 0x0b, 0x56,
	0xef, 0x13, 0x67, 0x69, 0x9f, 0xcc, 0x77, 0x45, 0x63, 0xcb, 0xae, 0x68, 0x6e, 0xee, 0x8a, 0xd6,
	0x96, 0x5d, 0xd1, 0xde, 0xbe, 0x2b, 0x3a, 0x3b, 0x76, 0xc5, 0xde, 0xce, 0x5d, 0xb1, 0xbf, 0xb6,
	0x2b, 0xd6, 0x06, 0x99, 0xbb, 0x3e, 0xc8, 0xfc, 0x3f, 0x1d, 0xe8, 0x22, 0xb5, 0x31, 0x2b, 0x39,
	0xab, 0x1e, 0x54, 0xec, 0x9f, 0x43, 0x47, 0xb2, 0x92, 0x8b, 0x04, 0x29, 0x0f, 0x2e, 0x07, 0x5a,
	0xe7, 0x06, 0x91, 0xc9, 0xbd, 0x64, 0x81, 0x95, 0xea, 0x49, 0x6e, 0xbe, 0x42, 0x5e, 0x84, 0xab,
	0xdb, 0xf6, 0xc0, 0x08, 0x5e, 0x16, 0x63, 0xbb, 0x70, 0xcf, 0x57, 0x1e, 0xc3, 0xd5, 0x16, 0x31,
	0x2c, 0xfb, 0x02, 0x19, 0x9c, 0x06, 0xec, 0xd7, 0xf1, 0x2c, 0xaa, 0xe2, 0x92, 0x47, 0x6c, 0xd1,
	0xc4, 0x0f, 0x0a, 0x78, 0x04, 0x60, 0xfc, 0xe9, 0x72, 0xf2, 0x1a, 0x17, 0xcd, 0x2d, 0x41, 0x2f,
	0x69, 0xf8, 0x1e, 0x9c, 0x06, 0x95, 0xdc, 0xe2, 0xcd, 0x4f, 0xe1, 0x38, 0x50, 0xc5, 0x02, 0xf8,
	0x49, 0x26, 0x54, 0xe9, 0x9d, 0xd5, 0xc2, 0xc9, 0xf7, 0xee, 0xb1, 0x84, 0x3a, 0x64, 0x08, 0x90,
	0x6a, 0x66, 0x66, 0x6b, 0x34, 0xd6, 0xf9, 0xba, 0x28, 0xc4, 0x30, 0x7e, 0x07, 0xd0, 0x6d, 0xf5,
	0x3f, 0x5e, 0x66, 0xed, 0xb9, 0x1b, 0x1b, 0x7b, 0x6b, 0x3e, 0x7e, 0x9b, 0x0f, 0x18, 0xbf, 0x3f,
	0x00, 0x2c, 0x7a, 0x7b, 0x6b, 0xe5, 0x6f, 0x9f, 0x7a, 0x8b, 0xfa, 0x6d, 0x2e, 0xd7, 0xaf, 0xff,
	0x1b, 0x1c, 0x2e, 0xec, 0xbd, 0x4f, 0x52, 0xfe, 0x0a, 0xa9, 0xc1, 0xea, 0x50, 0x32, 0x64, 0xa2,
	0x0e, 0xfe, 0xb9, 0x7e, 0xf3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x53, 0x55, 0x9e, 0xe0,
	0x0a, 0x00, 0x00,
}
