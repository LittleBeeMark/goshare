// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goshare/goshare.proto

package goshare

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReqSSEStockOptionList struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSSEStockOptionList) Reset()         { *m = ReqSSEStockOptionList{} }
func (m *ReqSSEStockOptionList) String() string { return proto.CompactTextString(m) }
func (*ReqSSEStockOptionList) ProtoMessage()    {}
func (*ReqSSEStockOptionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_17cff58e90895fbd, []int{0}
}

func (m *ReqSSEStockOptionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSSEStockOptionList.Unmarshal(m, b)
}
func (m *ReqSSEStockOptionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSSEStockOptionList.Marshal(b, m, deterministic)
}
func (m *ReqSSEStockOptionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSSEStockOptionList.Merge(m, src)
}
func (m *ReqSSEStockOptionList) XXX_Size() int {
	return xxx_messageInfo_ReqSSEStockOptionList.Size(m)
}
func (m *ReqSSEStockOptionList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSSEStockOptionList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSSEStockOptionList proto.InternalMessageInfo

type RspSSEStockOptionList struct {
	List                 []*SSEStockOption `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RspSSEStockOptionList) Reset()         { *m = RspSSEStockOptionList{} }
func (m *RspSSEStockOptionList) String() string { return proto.CompactTextString(m) }
func (*RspSSEStockOptionList) ProtoMessage()    {}
func (*RspSSEStockOptionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_17cff58e90895fbd, []int{1}
}

func (m *RspSSEStockOptionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspSSEStockOptionList.Unmarshal(m, b)
}
func (m *RspSSEStockOptionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspSSEStockOptionList.Marshal(b, m, deterministic)
}
func (m *RspSSEStockOptionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspSSEStockOptionList.Merge(m, src)
}
func (m *RspSSEStockOptionList) XXX_Size() int {
	return xxx_messageInfo_RspSSEStockOptionList.Size(m)
}
func (m *RspSSEStockOptionList) XXX_DiscardUnknown() {
	xxx_messageInfo_RspSSEStockOptionList.DiscardUnknown(m)
}

var xxx_messageInfo_RspSSEStockOptionList proto.InternalMessageInfo

func (m *RspSSEStockOptionList) GetList() []*SSEStockOption {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqSSEStockOptionList)(nil), "goshare.ReqSSEStockOptionList")
	proto.RegisterType((*RspSSEStockOptionList)(nil), "goshare.RspSSEStockOptionList")
}

func init() { proto.RegisterFile("goshare/goshare.proto", fileDescriptor_17cff58e90895fbd) }

var fileDescriptor_17cff58e90895fbd = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x4b, 0xe3, 0x40,
	0x14, 0x87, 0x53, 0xb6, 0x6c, 0x97, 0x29, 0x74, 0xd9, 0xd9, 0x4d, 0xbb, 0x3b, 0x0b, 0xbb, 0x92,
	0x93, 0xa0, 0x24, 0x52, 0x8f, 0xe2, 0xa1, 0xda, 0xda, 0x8b, 0xa2, 0x24, 0xa2, 0xe0, 0x45, 0x26,
	0xf1, 0x91, 0x84, 0x34, 0x99, 0xe9, 0xcc, 0xcb, 0xa1, 0x77, 0xff, 0x70, 0x31, 0x4d, 0xd2, 0xd4,
	0xd4, 0x9e, 0xc2, 0xbc, 0xef, 0x9b, 0x5f, 0xde, 0x1b, 0x1e, 0x31, 0x43, 0xa1, 0x23, 0xae, 0xc0,
	0x29, 0xbf, 0xb6, 0x54, 0x02, 0x05, 0xed, 0x95, 0x47, 0xf6, 0xab, 0xe2, 0x81, 0x48, 0x53, 0x91,
	0xad, 0x31, 0xfb, 0x53, 0x55, 0x53, 0xae, 0x12, 0xc0, 0xe7, 0x17, 0x8e, 0xbc, 0x44, 0xc3, 0x0a,
	0x69, 0x54, 0x1c, 0x21, 0x5c, 0xad, 0xeb, 0xd6, 0x88, 0x98, 0x2e, 0x2c, 0x3d, 0x6f, 0xe6, 0xa1,
	0x08, 0x92, 0x5b, 0x89, 0xb1, 0xc8, 0xae, 0x63, 0x8d, 0xd6, 0x94, 0x98, 0xae, 0x96, 0x6d, 0x40,
	0x8f, 0x48, 0x77, 0x11, 0x6b, 0xfc, 0xdd, 0x39, 0xf8, 0x72, 0xd8, 0x1f, 0x8f, 0xec, 0xaa, 0xc3,
	0x6d, 0xd5, 0x2d, 0xa4, 0xf1, 0x6b, 0x97, 0xf4, 0xe6, 0xc2, 0x7b, 0x17, 0xe8, 0x03, 0xa1, 0x3b,
	0xe2, 0xfe, 0xd5, 0x01, 0x3b, 0xfb, 0x60, 0x0d, 0xbe, 0xab, 0x1d, 0xcb, 0xa0, 0x8f, 0xe4, 0xa7,
	0x97, 0xfb, 0x3a, 0x50, 0xb1, 0x0f, 0x37, 0xc5, 0xe0, 0x53, 0x8e, 0x9c, 0xfe, 0xdf, 0x0a, 0x6e,
	0x0b, 0xec, 0x6f, 0x2d, 0x6c, 0x8a, 0x5e, 0xc6, 0xa5, 0x8e, 0x04, 0x5a, 0xc6, 0x49, 0x87, 0x4e,
	0xc8, 0xb7, 0xbb, 0x5c, 0x47, 0xf7, 0x71, 0x90, 0xd0, 0x7d, 0x32, 0x1b, 0xd6, 0x70, 0x96, 0x4a,
	0x5c, 0xb9, 0xa0, 0xa5, 0xc8, 0x34, 0x58, 0x06, 0x9d, 0x90, 0xef, 0x73, 0x40, 0xaf, 0x7c, 0xf3,
	0x62, 0x60, 0xf3, 0xa3, 0xbc, 0xcc, 0x41, 0x23, 0xdb, 0x94, 0x9b, 0xb6, 0x65, 0xd0, 0x33, 0xd2,
	0x6f, 0x44, 0xd0, 0x51, 0x73, 0xac, 0x06, 0x60, 0x3f, 0x5a, 0x01, 0x96, 0x41, 0xcf, 0xc9, 0xe0,
	0x52, 0x01, 0x47, 0xa8, 0xef, 0xb7, 0xb5, 0x3d, 0xed, 0x5f, 0x91, 0xc1, 0x14, 0x16, 0xd0, 0xb8,
	0xce, 0x9a, 0xbf, 0xdf, 0x66, 0x9f, 0xe7, 0x5c, 0xd8, 0x4f, 0xc7, 0x61, 0x8c, 0x51, 0xee, 0xdb,
	0x81, 0x48, 0x9d, 0x34, 0xce, 0x40, 0xf1, 0x85, 0x02, 0x5d, 0xad, 0xb7, 0x23, 0x93, 0xd0, 0x91,
	0x7e, 0x75, 0xf4, 0xbf, 0x16, 0xcb, 0x79, 0xfa, 0x16, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xb2, 0x5a,
	0xb8, 0x07, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GoShareClient is the client API for GoShare service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoShareClient interface {
	// SSEStockOptionList 上证所期权列表
	SSEStockOptionList(ctx context.Context, in *ReqSSEStockOptionList, opts ...grpc.CallOption) (*RspSSEStockOptionList, error)
	// SubscribeMarketData 订阅行情
	SubscribeMarketData(ctx context.Context, in *ReqSubscribeMarketData, opts ...grpc.CallOption) (GoShare_SubscribeMarketDataClient, error)
	// PushTick 推送tick更新
	PushTick(ctx context.Context, in *MarketDataSnapshot, opts ...grpc.CallOption) (*EmptyResponse, error)
	// 策略列表
	GetStrategyList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StrategyList, error)
	// 查询策略
	GetStrategy(ctx context.Context, in *ReqGetStrategy, opts ...grpc.CallOption) (*Strategy, error)
	// 创建策略
	CreateStrategy(ctx context.Context, in *Strategy, opts ...grpc.CallOption) (*EmptyResponse, error)
	// 删除策略
	DeleteStrategy(ctx context.Context, in *ReqDeleteStrategy, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type goShareClient struct {
	cc *grpc.ClientConn
}

func NewGoShareClient(cc *grpc.ClientConn) GoShareClient {
	return &goShareClient{cc}
}

func (c *goShareClient) SSEStockOptionList(ctx context.Context, in *ReqSSEStockOptionList, opts ...grpc.CallOption) (*RspSSEStockOptionList, error) {
	out := new(RspSSEStockOptionList)
	err := c.cc.Invoke(ctx, "/goshare.GoShare/SSEStockOptionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) SubscribeMarketData(ctx context.Context, in *ReqSubscribeMarketData, opts ...grpc.CallOption) (GoShare_SubscribeMarketDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GoShare_serviceDesc.Streams[0], "/goshare.GoShare/SubscribeMarketData", opts...)
	if err != nil {
		return nil, err
	}
	x := &goShareSubscribeMarketDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoShare_SubscribeMarketDataClient interface {
	Recv() (*MarketDataSnapshot, error)
	grpc.ClientStream
}

type goShareSubscribeMarketDataClient struct {
	grpc.ClientStream
}

func (x *goShareSubscribeMarketDataClient) Recv() (*MarketDataSnapshot, error) {
	m := new(MarketDataSnapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goShareClient) PushTick(ctx context.Context, in *MarketDataSnapshot, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/goshare.GoShare/PushTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) GetStrategyList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StrategyList, error) {
	out := new(StrategyList)
	err := c.cc.Invoke(ctx, "/goshare.GoShare/GetStrategyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) GetStrategy(ctx context.Context, in *ReqGetStrategy, opts ...grpc.CallOption) (*Strategy, error) {
	out := new(Strategy)
	err := c.cc.Invoke(ctx, "/goshare.GoShare/GetStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) CreateStrategy(ctx context.Context, in *Strategy, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/goshare.GoShare/CreateStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShareClient) DeleteStrategy(ctx context.Context, in *ReqDeleteStrategy, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/goshare.GoShare/DeleteStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoShareServer is the server API for GoShare service.
type GoShareServer interface {
	// SSEStockOptionList 上证所期权列表
	SSEStockOptionList(context.Context, *ReqSSEStockOptionList) (*RspSSEStockOptionList, error)
	// SubscribeMarketData 订阅行情
	SubscribeMarketData(*ReqSubscribeMarketData, GoShare_SubscribeMarketDataServer) error
	// PushTick 推送tick更新
	PushTick(context.Context, *MarketDataSnapshot) (*EmptyResponse, error)
	// 策略列表
	GetStrategyList(context.Context, *EmptyRequest) (*StrategyList, error)
	// 查询策略
	GetStrategy(context.Context, *ReqGetStrategy) (*Strategy, error)
	// 创建策略
	CreateStrategy(context.Context, *Strategy) (*EmptyResponse, error)
	// 删除策略
	DeleteStrategy(context.Context, *ReqDeleteStrategy) (*EmptyResponse, error)
}

// UnimplementedGoShareServer can be embedded to have forward compatible implementations.
type UnimplementedGoShareServer struct {
}

func (*UnimplementedGoShareServer) SSEStockOptionList(ctx context.Context, req *ReqSSEStockOptionList) (*RspSSEStockOptionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSEStockOptionList not implemented")
}
func (*UnimplementedGoShareServer) SubscribeMarketData(req *ReqSubscribeMarketData, srv GoShare_SubscribeMarketDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMarketData not implemented")
}
func (*UnimplementedGoShareServer) PushTick(ctx context.Context, req *MarketDataSnapshot) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTick not implemented")
}
func (*UnimplementedGoShareServer) GetStrategyList(ctx context.Context, req *EmptyRequest) (*StrategyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategyList not implemented")
}
func (*UnimplementedGoShareServer) GetStrategy(ctx context.Context, req *ReqGetStrategy) (*Strategy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategy not implemented")
}
func (*UnimplementedGoShareServer) CreateStrategy(ctx context.Context, req *Strategy) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStrategy not implemented")
}
func (*UnimplementedGoShareServer) DeleteStrategy(ctx context.Context, req *ReqDeleteStrategy) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrategy not implemented")
}

func RegisterGoShareServer(s *grpc.Server, srv GoShareServer) {
	s.RegisterService(&_GoShare_serviceDesc, srv)
}

func _GoShare_SSEStockOptionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSSEStockOptionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).SSEStockOptionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshare.GoShare/SSEStockOptionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).SSEStockOptionList(ctx, req.(*ReqSSEStockOptionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_SubscribeMarketData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqSubscribeMarketData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoShareServer).SubscribeMarketData(m, &goShareSubscribeMarketDataServer{stream})
}

type GoShare_SubscribeMarketDataServer interface {
	Send(*MarketDataSnapshot) error
	grpc.ServerStream
}

type goShareSubscribeMarketDataServer struct {
	grpc.ServerStream
}

func (x *goShareSubscribeMarketDataServer) Send(m *MarketDataSnapshot) error {
	return x.ServerStream.SendMsg(m)
}

func _GoShare_PushTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketDataSnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).PushTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshare.GoShare/PushTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).PushTick(ctx, req.(*MarketDataSnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_GetStrategyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).GetStrategyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshare.GoShare/GetStrategyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).GetStrategyList(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_GetStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetStrategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).GetStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshare.GoShare/GetStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).GetStrategy(ctx, req.(*ReqGetStrategy))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_CreateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Strategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).CreateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshare.GoShare/CreateStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).CreateStrategy(ctx, req.(*Strategy))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShare_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteStrategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShareServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshare.GoShare/DeleteStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShareServer).DeleteStrategy(ctx, req.(*ReqDeleteStrategy))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoShare_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goshare.GoShare",
	HandlerType: (*GoShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SSEStockOptionList",
			Handler:    _GoShare_SSEStockOptionList_Handler,
		},
		{
			MethodName: "PushTick",
			Handler:    _GoShare_PushTick_Handler,
		},
		{
			MethodName: "GetStrategyList",
			Handler:    _GoShare_GetStrategyList_Handler,
		},
		{
			MethodName: "GetStrategy",
			Handler:    _GoShare_GetStrategy_Handler,
		},
		{
			MethodName: "CreateStrategy",
			Handler:    _GoShare_CreateStrategy_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _GoShare_DeleteStrategy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMarketData",
			Handler:       _GoShare_SubscribeMarketData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "goshare/goshare.proto",
}
