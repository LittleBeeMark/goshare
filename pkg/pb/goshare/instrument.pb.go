// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goshare/instrument.proto

package goshare

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 品种类型
type ProductType int32

const (
	ProductType_UNKOWN         ProductType = 0
	ProductType_FUTURE         ProductType = 1
	ProductType_STOCK          ProductType = 2
	ProductType_BOND           ProductType = 3
	ProductType_COMBINATION    ProductType = 4
	ProductType_OPTION         ProductType = 5
	ProductType_FUTURE_OPTION  ProductType = 6
	ProductType_STOCK_OPTION   ProductType = 7
	ProductType_SSE_ETF_OPTION ProductType = 8
)

var ProductType_name = map[int32]string{
	0: "UNKOWN",
	1: "FUTURE",
	2: "STOCK",
	3: "BOND",
	4: "COMBINATION",
	5: "OPTION",
	6: "FUTURE_OPTION",
	7: "STOCK_OPTION",
	8: "SSE_ETF_OPTION",
}

var ProductType_value = map[string]int32{
	"UNKOWN":         0,
	"FUTURE":         1,
	"STOCK":          2,
	"BOND":           3,
	"COMBINATION":    4,
	"OPTION":         5,
	"FUTURE_OPTION":  6,
	"STOCK_OPTION":   7,
	"SSE_ETF_OPTION": 8,
}

func (x ProductType) String() string {
	return proto.EnumName(ProductType_name, int32(x))
}

func (ProductType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{0}
}

// 市场状态
type MarketStatus struct {
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	Send                 bool     `protobuf:"varint,2,opt,name=send,proto3" json:"send"`
	Cancel               bool     `protobuf:"varint,3,opt,name=cancel,proto3" json:"cancel"`
	Matching             bool     `protobuf:"varint,4,opt,name=matching,proto3" json:"matching"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketStatus) Reset()         { *m = MarketStatus{} }
func (m *MarketStatus) String() string { return proto.CompactTextString(m) }
func (*MarketStatus) ProtoMessage()    {}
func (*MarketStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{0}
}

func (m *MarketStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketStatus.Unmarshal(m, b)
}
func (m *MarketStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketStatus.Marshal(b, m, deterministic)
}
func (m *MarketStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketStatus.Merge(m, src)
}
func (m *MarketStatus) XXX_Size() int {
	return xxx_messageInfo_MarketStatus.Size(m)
}
func (m *MarketStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MarketStatus proto.InternalMessageInfo

func (m *MarketStatus) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MarketStatus) GetSend() bool {
	if m != nil {
		return m.Send
	}
	return false
}

func (m *MarketStatus) GetCancel() bool {
	if m != nil {
		return m.Cancel
	}
	return false
}

func (m *MarketStatus) GetMatching() bool {
	if m != nil {
		return m.Matching
	}
	return false
}

// 合约属性
type Instrument struct {
	Exchange                    string          `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	Symbol                      string          `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol"`
	Product                     string          `protobuf:"bytes,3,opt,name=product,proto3" json:"product"`
	Multiple                    int32           `protobuf:"varint,4,opt,name=multiple,proto3" json:"multiple"`
	PriceTick                   float64         `protobuf:"fixed64,5,opt,name=price_tick,json=priceTick,proto3" json:"priceTick"`
	Name                        string          `protobuf:"bytes,6,opt,name=name,proto3" json:"name"`
	PositionRank                int32           `protobuf:"varint,7,opt,name=position_rank,json=positionRank,proto3" json:"positionRank"`
	UpdateTime                  int64           `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"updateTime"`
	TradingDay                  int32           `protobuf:"varint,9,opt,name=trading_day,json=tradingDay,proto3" json:"tradingDay"`
	UpperLimit                  float64         `protobuf:"fixed64,10,opt,name=upper_limit,json=upperLimit,proto3" json:"upperLimit"`
	LowerLimit                  float64         `protobuf:"fixed64,11,opt,name=lower_limit,json=lowerLimit,proto3" json:"lowerLimit"`
	PreClose                    float64         `protobuf:"fixed64,12,opt,name=pre_close,json=preClose,proto3" json:"preClose"`
	PreSettlement               float64         `protobuf:"fixed64,13,opt,name=pre_settlement,json=preSettlement,proto3" json:"preSettlement"`
	PreVolume                   int32           `protobuf:"varint,14,opt,name=pre_volume,json=preVolume,proto3" json:"preVolume"`
	PrePosition                 int32           `protobuf:"varint,15,opt,name=pre_position,json=prePosition,proto3" json:"prePosition"`
	SettlementPrice             float64         `protobuf:"fixed64,16,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlementPrice"`
	CreateDate                  int32           `protobuf:"varint,17,opt,name=create_date,json=createDate,proto3" json:"createDate"`
	OpenDate                    int32           `protobuf:"varint,18,opt,name=open_date,json=openDate,proto3" json:"openDate"`
	ExpireDate                  int32           `protobuf:"varint,19,opt,name=expire_date,json=expireDate,proto3" json:"expireDate"`
	StartDeliverDate            int32           `protobuf:"varint,20,opt,name=start_deliver_date,json=startDeliverDate,proto3" json:"startDeliverDate"`
	EndDeliverDate              int32           `protobuf:"varint,21,opt,name=end_deliver_date,json=endDeliverDate,proto3" json:"endDeliverDate"`
	IsCloseTodayAllowed         bool            `protobuf:"varint,22,opt,name=is_close_today_allowed,json=isCloseTodayAllowed,proto3" json:"isCloseTodayAllowed"`
	MaxMarketOrderVolume        int32           `protobuf:"varint,23,opt,name=max_market_order_volume,json=maxMarketOrderVolume,proto3" json:"maxMarketOrderVolume"`
	MinMarketOrderVolume        int32           `protobuf:"varint,24,opt,name=min_market_order_volume,json=minMarketOrderVolume,proto3" json:"minMarketOrderVolume"`
	MaxLimitOrderVolume         int32           `protobuf:"varint,25,opt,name=max_limit_order_volume,json=maxLimitOrderVolume,proto3" json:"maxLimitOrderVolume"`
	MinLimitOrderVolume         int32           `protobuf:"varint,26,opt,name=min_limit_order_volume,json=minLimitOrderVolume,proto3" json:"minLimitOrderVolume"`
	UnderlyingSymbol            string          `protobuf:"bytes,27,opt,name=underlying_symbol,json=underlyingSymbol,proto3" json:"underlyingSymbol"`
	StrikePrice                 float64         `protobuf:"fixed64,28,opt,name=strike_price,json=strikePrice,proto3" json:"strikePrice"`
	CallOrPut                   string          `protobuf:"bytes,29,opt,name=call_or_put,json=callOrPut,proto3" json:"callOrPut"`
	UnderlyingMultiple          float64         `protobuf:"fixed64,30,opt,name=underlying_multiple,json=underlyingMultiple,proto3" json:"underlyingMultiple"`
	MinBuyVolume                int32           `protobuf:"varint,31,opt,name=min_buy_volume,json=minBuyVolume,proto3" json:"minBuyVolume"`
	MinSellVolume               int32           `protobuf:"varint,32,opt,name=min_sell_volume,json=minSellVolume,proto3" json:"minSellVolume"`
	IsTrading                   bool            `protobuf:"varint,33,opt,name=is_trading,json=isTrading,proto3" json:"isTrading"`
	ExerciseDateType            string          `protobuf:"bytes,34,opt,name=exercise_date_type,json=exerciseDateType,proto3" json:"exerciseDateType"`
	ProductName                 string          `protobuf:"bytes,35,opt,name=product_name,json=productName,proto3" json:"productName"`
	ProductType                 int32           `protobuf:"varint,36,opt,name=product_type,json=productType,proto3" json:"productType"`
	ProductClass                string          `protobuf:"bytes,37,opt,name=product_class,json=productClass,proto3" json:"productClass"`
	DistinguishPositionTimeType bool            `protobuf:"varint,38,opt,name=distinguish_position_time_type,json=distinguishPositionTimeType,proto3" json:"distinguishPositionTimeType"`
	TimeRule                    []*MarketStatus `protobuf:"bytes,39,rep,name=time_rule,json=timeRule,proto3" json:"timeRule"`
	XXX_NoUnkeyedLiteral        struct{}        `json:"-"`
	XXX_unrecognized            []byte          `json:"-"`
	XXX_sizecache               int32           `json:"-"`
}

func (m *Instrument) Reset()         { *m = Instrument{} }
func (m *Instrument) String() string { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()    {}
func (*Instrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{1}
}

func (m *Instrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instrument.Unmarshal(m, b)
}
func (m *Instrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instrument.Marshal(b, m, deterministic)
}
func (m *Instrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instrument.Merge(m, src)
}
func (m *Instrument) XXX_Size() int {
	return xxx_messageInfo_Instrument.Size(m)
}
func (m *Instrument) XXX_DiscardUnknown() {
	xxx_messageInfo_Instrument.DiscardUnknown(m)
}

var xxx_messageInfo_Instrument proto.InternalMessageInfo

func (m *Instrument) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Instrument) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Instrument) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Instrument) GetMultiple() int32 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

func (m *Instrument) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *Instrument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Instrument) GetPositionRank() int32 {
	if m != nil {
		return m.PositionRank
	}
	return 0
}

func (m *Instrument) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Instrument) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *Instrument) GetUpperLimit() float64 {
	if m != nil {
		return m.UpperLimit
	}
	return 0
}

func (m *Instrument) GetLowerLimit() float64 {
	if m != nil {
		return m.LowerLimit
	}
	return 0
}

func (m *Instrument) GetPreClose() float64 {
	if m != nil {
		return m.PreClose
	}
	return 0
}

func (m *Instrument) GetPreSettlement() float64 {
	if m != nil {
		return m.PreSettlement
	}
	return 0
}

func (m *Instrument) GetPreVolume() int32 {
	if m != nil {
		return m.PreVolume
	}
	return 0
}

func (m *Instrument) GetPrePosition() int32 {
	if m != nil {
		return m.PrePosition
	}
	return 0
}

func (m *Instrument) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *Instrument) GetCreateDate() int32 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

func (m *Instrument) GetOpenDate() int32 {
	if m != nil {
		return m.OpenDate
	}
	return 0
}

func (m *Instrument) GetExpireDate() int32 {
	if m != nil {
		return m.ExpireDate
	}
	return 0
}

func (m *Instrument) GetStartDeliverDate() int32 {
	if m != nil {
		return m.StartDeliverDate
	}
	return 0
}

func (m *Instrument) GetEndDeliverDate() int32 {
	if m != nil {
		return m.EndDeliverDate
	}
	return 0
}

func (m *Instrument) GetIsCloseTodayAllowed() bool {
	if m != nil {
		return m.IsCloseTodayAllowed
	}
	return false
}

func (m *Instrument) GetMaxMarketOrderVolume() int32 {
	if m != nil {
		return m.MaxMarketOrderVolume
	}
	return 0
}

func (m *Instrument) GetMinMarketOrderVolume() int32 {
	if m != nil {
		return m.MinMarketOrderVolume
	}
	return 0
}

func (m *Instrument) GetMaxLimitOrderVolume() int32 {
	if m != nil {
		return m.MaxLimitOrderVolume
	}
	return 0
}

func (m *Instrument) GetMinLimitOrderVolume() int32 {
	if m != nil {
		return m.MinLimitOrderVolume
	}
	return 0
}

func (m *Instrument) GetUnderlyingSymbol() string {
	if m != nil {
		return m.UnderlyingSymbol
	}
	return ""
}

func (m *Instrument) GetStrikePrice() float64 {
	if m != nil {
		return m.StrikePrice
	}
	return 0
}

func (m *Instrument) GetCallOrPut() string {
	if m != nil {
		return m.CallOrPut
	}
	return ""
}

func (m *Instrument) GetUnderlyingMultiple() float64 {
	if m != nil {
		return m.UnderlyingMultiple
	}
	return 0
}

func (m *Instrument) GetMinBuyVolume() int32 {
	if m != nil {
		return m.MinBuyVolume
	}
	return 0
}

func (m *Instrument) GetMinSellVolume() int32 {
	if m != nil {
		return m.MinSellVolume
	}
	return 0
}

func (m *Instrument) GetIsTrading() bool {
	if m != nil {
		return m.IsTrading
	}
	return false
}

func (m *Instrument) GetExerciseDateType() string {
	if m != nil {
		return m.ExerciseDateType
	}
	return ""
}

func (m *Instrument) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Instrument) GetProductType() int32 {
	if m != nil {
		return m.ProductType
	}
	return 0
}

func (m *Instrument) GetProductClass() string {
	if m != nil {
		return m.ProductClass
	}
	return ""
}

func (m *Instrument) GetDistinguishPositionTimeType() bool {
	if m != nil {
		return m.DistinguishPositionTimeType
	}
	return false
}

func (m *Instrument) GetTimeRule() []*MarketStatus {
	if m != nil {
		return m.TimeRule
	}
	return nil
}

type InstrumentList struct {
	List                 []*Instrument `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InstrumentList) Reset()         { *m = InstrumentList{} }
func (m *InstrumentList) String() string { return proto.CompactTextString(m) }
func (*InstrumentList) ProtoMessage()    {}
func (*InstrumentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{2}
}

func (m *InstrumentList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentList.Unmarshal(m, b)
}
func (m *InstrumentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentList.Marshal(b, m, deterministic)
}
func (m *InstrumentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentList.Merge(m, src)
}
func (m *InstrumentList) XXX_Size() int {
	return xxx_messageInfo_InstrumentList.Size(m)
}
func (m *InstrumentList) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentList.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentList proto.InternalMessageInfo

func (m *InstrumentList) GetList() []*Instrument {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterEnum("goshare.goshare.ProductType", ProductType_name, ProductType_value)
	proto.RegisterType((*MarketStatus)(nil), "goshare.goshare.MarketStatus")
	proto.RegisterType((*Instrument)(nil), "goshare.goshare.Instrument")
	proto.RegisterType((*InstrumentList)(nil), "goshare.goshare.InstrumentList")
}

func init() { proto.RegisterFile("goshare/instrument.proto", fileDescriptor_faf3e5650851e9a9) }

var fileDescriptor_faf3e5650851e9a9 = []byte{
	// 990 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0xdb, 0x6e, 0xe3, 0x36,
	0x13, 0xfe, 0xbd, 0x39, 0x59, 0x23, 0xc7, 0x51, 0x98, 0xfd, 0xb3, 0xec, 0xa6, 0x39, 0xee, 0xa1,
	0x69, 0xbb, 0x70, 0x80, 0x06, 0xbd, 0xe9, 0x5d, 0x4e, 0x0b, 0x04, 0xbb, 0xb1, 0x03, 0xd9, 0x69,
	0x81, 0xde, 0x08, 0x8c, 0x44, 0x38, 0xac, 0x29, 0x4a, 0x20, 0xa9, 0xad, 0xfd, 0x16, 0x7d, 0xd3,
	0xbe, 0x42, 0xc1, 0xa1, 0x64, 0x27, 0x9b, 0xbd, 0x32, 0xe7, 0x9b, 0x6f, 0xbe, 0xf1, 0x8c, 0x66,
	0x48, 0xa0, 0xe3, 0xc2, 0x3c, 0x30, 0xcd, 0x4f, 0x84, 0x32, 0x56, 0x57, 0x39, 0x57, 0xb6, 0x57,
	0xea, 0xc2, 0x16, 0x64, 0xa3, 0xf6, 0xf4, 0xea, 0xdf, 0xa3, 0xbf, 0xa0, 0x73, 0xc3, 0xf4, 0x84,
	0xdb, 0xa1, 0x65, 0xb6, 0x32, 0x84, 0xc0, 0xb2, 0x15, 0x39, 0xa7, 0xad, 0x83, 0xd6, 0xf1, 0x52,
	0x8c, 0x67, 0x87, 0x19, 0xae, 0x32, 0xfa, 0xe2, 0xa0, 0x75, 0xdc, 0x8e, 0xf1, 0x4c, 0xb6, 0x61,
	0x35, 0x65, 0x2a, 0xe5, 0x92, 0x2e, 0x21, 0x5a, 0x5b, 0xe4, 0x35, 0xb4, 0x73, 0x66, 0xd3, 0x07,
	0xa1, 0xc6, 0x74, 0x19, 0x3d, 0x73, 0xfb, 0xe8, 0xdf, 0x10, 0xe0, 0x7a, 0xfe, 0x8f, 0x1c, 0x95,
	0x4f, 0xd3, 0x07, 0xa6, 0xc6, 0x3e, 0x5d, 0x10, 0xcf, 0x6d, 0x27, 0x6f, 0x66, 0xf9, 0x7d, 0x21,
	0x31, 0x69, 0x10, 0xd7, 0x16, 0xa1, 0xb0, 0x56, 0xea, 0x22, 0xab, 0x52, 0x8b, 0x79, 0x83, 0xb8,
	0x31, 0x31, 0x71, 0x25, 0xad, 0x28, 0x25, 0xc7, 0xc4, 0x2b, 0xf1, 0xdc, 0x26, 0xbb, 0x00, 0xa5,
	0x16, 0x29, 0x4f, 0xac, 0x48, 0x27, 0x74, 0xe5, 0xa0, 0x75, 0xdc, 0x8a, 0x03, 0x44, 0x46, 0x22,
	0x9d, 0xb8, 0xfa, 0x14, 0xcb, 0x39, 0x5d, 0x45, 0x45, 0x3c, 0x93, 0x37, 0xb0, 0x5e, 0x16, 0x46,
	0x58, 0x51, 0xa8, 0x44, 0x33, 0x35, 0xa1, 0x6b, 0xa8, 0xd9, 0x69, 0xc0, 0x98, 0xa9, 0x09, 0xd9,
	0x87, 0xb0, 0x2a, 0x33, 0x66, 0x9d, 0x70, 0xce, 0x69, 0x1b, 0x7b, 0x06, 0x1e, 0x1a, 0xb9, 0xce,
	0xed, 0x43, 0x68, 0x35, 0xcb, 0x84, 0x1a, 0x27, 0x19, 0x9b, 0xd1, 0x00, 0x35, 0xa0, 0x86, 0x2e,
	0xd9, 0xcc, 0x2b, 0x94, 0x5c, 0x27, 0x52, 0xe4, 0xc2, 0x52, 0xc0, 0xbf, 0x06, 0x08, 0x7d, 0x76,
	0x88, 0x23, 0xc8, 0xe2, 0xef, 0x39, 0x21, 0xf4, 0x04, 0x84, 0x3c, 0x61, 0x07, 0x82, 0x52, 0xf3,
	0x24, 0x95, 0x85, 0xe1, 0xb4, 0x83, 0xee, 0x76, 0xa9, 0xf9, 0x85, 0xb3, 0xc9, 0x3b, 0xe8, 0x3a,
	0xa7, 0xe1, 0xd6, 0x4a, 0xee, 0x9a, 0x4e, 0xd7, 0x91, 0xb1, 0x5e, 0x6a, 0x3e, 0x9c, 0x83, 0xbe,
	0x3f, 0x3c, 0xf9, 0x52, 0xc8, 0x2a, 0xe7, 0xb4, 0x8b, 0xff, 0xd2, 0xa9, 0xfe, 0x8e, 0x00, 0x39,
	0x84, 0x8e, 0x73, 0x37, 0xa5, 0xd3, 0x0d, 0x24, 0x84, 0xa5, 0xe6, 0xb7, 0x35, 0x44, 0x7e, 0x84,
	0x68, 0x91, 0x24, 0xc1, 0xd6, 0xd2, 0x08, 0x53, 0x6d, 0x2c, 0xf0, 0x5b, 0x07, 0xbb, 0x8a, 0x52,
	0xcd, 0x5d, 0xd3, 0x5c, 0x9b, 0xe8, 0xa6, 0xef, 0x89, 0x87, 0x2e, 0x99, 0xe5, 0xae, 0xa2, 0xa2,
	0xe4, 0xca, 0xbb, 0x89, 0xff, 0x94, 0x0e, 0x40, 0xe7, 0x3e, 0x84, 0x7c, 0x5a, 0x0a, 0x5d, 0x47,
	0x6f, 0xf9, 0x68, 0x0f, 0x21, 0xe1, 0x03, 0x10, 0x63, 0x99, 0xb6, 0x49, 0xc6, 0xa5, 0xf8, 0xc2,
	0xb5, 0xe7, 0xbd, 0x44, 0x5e, 0x84, 0x9e, 0x4b, 0xef, 0x40, 0xf6, 0x31, 0x44, 0x5c, 0x65, 0x4f,
	0xb9, 0xff, 0x47, 0x6e, 0x97, 0xab, 0xec, 0x31, 0xf3, 0x14, 0xb6, 0x85, 0xf1, 0x6d, 0x4e, 0x6c,
	0x91, 0xb1, 0x59, 0xc2, 0xa4, 0xfb, 0x0c, 0x19, 0xdd, 0xc6, 0x31, 0xdf, 0x12, 0x06, 0x7b, 0x3e,
	0x72, 0xbe, 0x33, 0xef, 0x22, 0xbf, 0xc2, 0xab, 0x9c, 0x4d, 0x93, 0x1c, 0x37, 0x2c, 0x29, 0x74,
	0xc6, 0x75, 0xd3, 0xe5, 0x57, 0x98, 0xe5, 0x65, 0xce, 0xa6, 0x7e, 0xff, 0x06, 0xce, 0x59, 0x37,
	0xdc, 0x85, 0x09, 0xf5, 0xcd, 0x30, 0x5a, 0x87, 0x09, 0xf5, 0x3c, 0xec, 0x14, 0xb6, 0x5d, 0x36,
	0x9c, 0x94, 0xa7, 0x51, 0xdf, 0x61, 0xd4, 0x56, 0xce, 0xa6, 0x38, 0x34, 0x5f, 0x07, 0x09, 0xf5,
	0xad, 0xa0, 0xd7, 0x75, 0x90, 0x50, 0xcf, 0x82, 0x7e, 0x86, 0xcd, 0x4a, 0x65, 0x5c, 0xcb, 0x99,
	0x1b, 0xed, 0x7a, 0x53, 0x77, 0x70, 0x7d, 0xa2, 0x85, 0x63, 0xe8, 0x77, 0xf6, 0x10, 0x3a, 0xc6,
	0x6a, 0x31, 0xe1, 0xf5, 0x5c, 0x7c, 0x8f, 0x73, 0x11, 0x7a, 0xcc, 0xcf, 0xc4, 0x1e, 0x84, 0x29,
	0x93, 0x32, 0x29, 0x74, 0x52, 0x56, 0x96, 0xee, 0xa2, 0x52, 0xe0, 0xa0, 0x81, 0xbe, 0xad, 0x2c,
	0x39, 0x81, 0xad, 0x47, 0xf9, 0xe6, 0x7b, 0xbe, 0x87, 0x4a, 0x64, 0xe1, 0xba, 0x69, 0x36, 0xfe,
	0x2d, 0x74, 0x5d, 0x55, 0xf7, 0xd5, 0xac, 0xa9, 0x66, 0xdf, 0xef, 0x6f, 0x2e, 0xd4, 0x79, 0x35,
	0xab, 0xcb, 0x78, 0x0f, 0x1b, 0x8e, 0x65, 0xb8, 0x94, 0x0d, 0xed, 0x00, 0x69, 0xeb, 0xb9, 0x50,
	0x43, 0x2e, 0x65, 0xcd, 0xdb, 0x05, 0x10, 0x26, 0xa9, 0xd7, 0x96, 0x1e, 0xe2, 0xf7, 0x0e, 0x84,
	0x19, 0x79, 0xc0, 0x8d, 0x1c, 0x9f, 0x72, 0x9d, 0x0a, 0xe3, 0xa7, 0x32, 0xb1, 0xb3, 0x92, 0xd3,
	0x23, 0xdf, 0x8e, 0xc6, 0xe3, 0x86, 0x68, 0x34, 0x2b, 0xeb, 0x6d, 0xc2, 0x3b, 0x2b, 0xc1, 0x5b,
	0xe7, 0x0d, 0xf2, 0xc2, 0x1a, 0xeb, 0xb3, 0xfc, 0x09, 0x05, 0xa5, 0xde, 0x36, 0x0b, 0x87, 0x18,
	0xaa, 0xb8, 0xfb, 0xa9, 0xa6, 0xa4, 0x92, 0x19, 0x43, 0xdf, 0xa1, 0x4c, 0x13, 0x77, 0xe1, 0x30,
	0x72, 0x01, 0x7b, 0x99, 0x30, 0x56, 0xa8, 0x71, 0x25, 0xcc, 0xc3, 0x7c, 0x81, 0xf1, 0xb6, 0xf2,
	0xca, 0xef, 0xb1, 0x96, 0x9d, 0x47, 0xac, 0x66, 0xa5, 0xdd, 0xfd, 0x85, 0x99, 0x7e, 0x83, 0x00,
	0xf9, 0xba, 0x92, 0x9c, 0xfe, 0x70, 0xb0, 0x74, 0x1c, 0xfe, 0xb2, 0xdb, 0xfb, 0xea, 0x19, 0xe9,
	0x3d, 0x7e, 0x43, 0xe2, 0xb6, 0xe3, 0xc7, 0x95, 0xe4, 0x47, 0x67, 0xd0, 0x5d, 0x5c, 0xf8, 0x9f,
	0x85, 0x71, 0x5f, 0x72, 0x59, 0x0a, 0x63, 0x69, 0x0b, 0x85, 0x76, 0x9e, 0x09, 0x2d, 0xe8, 0x31,
	0x12, 0x7f, 0xfa, 0xa7, 0x05, 0xe1, 0xed, 0xa3, 0xc2, 0x01, 0x56, 0xef, 0xfa, 0x9f, 0x06, 0x7f,
	0xf4, 0xa3, 0xff, 0xb9, 0xf3, 0xc7, 0xbb, 0xd1, 0x5d, 0x7c, 0x15, 0xb5, 0x48, 0x00, 0x2b, 0xc3,
	0xd1, 0xe0, 0xe2, 0x53, 0xf4, 0x82, 0xb4, 0x61, 0xf9, 0x7c, 0xd0, 0xbf, 0x8c, 0x96, 0xc8, 0x06,
	0x84, 0x17, 0x83, 0x9b, 0xf3, 0xeb, 0xfe, 0xd9, 0xe8, 0x7a, 0xd0, 0x8f, 0x96, 0x5d, 0xc4, 0xe0,
	0x16, 0xcf, 0x2b, 0x64, 0x13, 0xd6, 0x7d, 0x74, 0x52, 0x43, 0xab, 0x24, 0x82, 0x0e, 0x8a, 0x34,
	0xc8, 0x1a, 0x21, 0xd0, 0x1d, 0x0e, 0xaf, 0x92, 0xab, 0xd1, 0xc7, 0x06, 0x6b, 0x9f, 0xf7, 0xfe,
	0xfc, 0x30, 0x16, 0xf6, 0xa1, 0xba, 0xef, 0xa5, 0x45, 0x7e, 0x92, 0x0b, 0xc5, 0x35, 0x93, 0x9a,
	0x9b, 0x93, 0xe6, 0xd9, 0x2d, 0x27, 0xe3, 0x93, 0xf2, 0xbe, 0x31, 0xef, 0x57, 0xf1, 0xed, 0x3d,
	0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xc2, 0x02, 0xf6, 0x97, 0x07, 0x00, 0x00,
}
