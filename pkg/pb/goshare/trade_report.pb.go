// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trade_report.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 投机套保标志
type OrderHedgeType int32

const (
	// 投机
	OrderHedgeType_OHT_SPECULATION OrderHedgeType = 0
	// 套利
	OrderHedgeType_OHT_ARBITRAGE OrderHedgeType = 1
	// 套保
	OrderHedgeType_OHT_HEDGE OrderHedgeType = 2
	// 投机2(特别标志)
	OrderHedgeType_OHT_SPECULATION2 OrderHedgeType = 3
)

var OrderHedgeType_name = map[int32]string{
	0: "OHT_SPECULATION",
	1: "OHT_ARBITRAGE",
	2: "OHT_HEDGE",
	3: "OHT_SPECULATION2",
}

var OrderHedgeType_value = map[string]int32{
	"OHT_SPECULATION":  0,
	"OHT_ARBITRAGE":    1,
	"OHT_HEDGE":        2,
	"OHT_SPECULATION2": 3,
}

func (x OrderHedgeType) String() string {
	return proto.EnumName(OrderHedgeType_name, int32(x))
}

func (OrderHedgeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f0cb5629da877ad2, []int{0}
}

// 成交类型
type TradeType int32

const (
	// 普通成交
	TradeType_TT_NORMAL TradeType = 0
	// 期权执行
	TradeType_TT_OPTIONS_EXECUTION TradeType = 1
	// OTC成交
	TradeType_TT_OTC TradeType = 2
	// 期转现衍生成交
	TradeType_TT_EFP_DERIVED TradeType = 3
	// 组合衍生成交
	TradeType_TT_COMBINATION_DERIVED TradeType = 4
	// 交割平仓
	TradeType_TT_DELIVERY_CLOSE TradeType = 5
	// 结算衍生
	TradeType_TT_SETTLEMENT_DERIVED TradeType = 6
	// 分红股票
	TradeType_TT_PLACEMENT_DERIVED TradeType = 7
	// 回购
	TradeType_TT_REPURCHASE TradeType = 8
)

var TradeType_name = map[int32]string{
	0: "TT_NORMAL",
	1: "TT_OPTIONS_EXECUTION",
	2: "TT_OTC",
	3: "TT_EFP_DERIVED",
	4: "TT_COMBINATION_DERIVED",
	5: "TT_DELIVERY_CLOSE",
	6: "TT_SETTLEMENT_DERIVED",
	7: "TT_PLACEMENT_DERIVED",
	8: "TT_REPURCHASE",
}

var TradeType_value = map[string]int32{
	"TT_NORMAL":              0,
	"TT_OPTIONS_EXECUTION":   1,
	"TT_OTC":                 2,
	"TT_EFP_DERIVED":         3,
	"TT_COMBINATION_DERIVED": 4,
	"TT_DELIVERY_CLOSE":      5,
	"TT_SETTLEMENT_DERIVED":  6,
	"TT_PLACEMENT_DERIVED":   7,
	"TT_REPURCHASE":          8,
}

func (x TradeType) String() string {
	return proto.EnumName(TradeType_name, int32(x))
}

func (TradeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f0cb5629da877ad2, []int{1}
}

// 成交
type TradeReport struct {
	// 账号
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	// 成交编号
	TradeId string `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"tradeId"`
	// 合约
	Symbol *Symbol `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol"`
	// 买卖
	Direction OrderDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=pb.OrderDirection" json:"direction"`
	// 价格
	Price float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price"`
	// 数量
	Volume int32 `protobuf:"varint,6,opt,name=volume,proto3" json:"volume"`
	// 时间
	TradedTime int64 `protobuf:"varint,7,opt,name=traded_time,json=tradedTime,proto3" json:"tradedTime"`
	// 交易日
	TradedTradingDay int32 `protobuf:"varint,8,opt,name=traded_trading_day,json=tradedTradingDay,proto3" json:"tradedTradingDay"`
	// 报单编号
	OrderId *OrderID `protobuf:"bytes,9,opt,name=order_id,json=orderId,proto3" json:"orderId"`
	// 类型
	OrderPriceType OrderPriceType `protobuf:"varint,10,opt,name=order_price_type,json=orderPriceType,proto3,enum=pb.OrderPriceType" json:"orderPriceType"`
	// 投机套保
	OrderHedgeType OrderHedgeType `protobuf:"varint,11,opt,name=order_hedge_type,json=orderHedgeType,proto3,enum=pb.OrderHedgeType" json:"orderHedgeType"`
	// 成交类型
	TradeType TradeType `protobuf:"varint,12,opt,name=trade_type,json=tradeType,proto3,enum=pb.TradeType" json:"tradeType"`
	// 币种
	CurrencyType int32 `protobuf:"varint,13,opt,name=currency_type,json=currencyType,proto3" json:"currencyType"`
	// 交易所ID
	ExchangeOrderId string `protobuf:"bytes,14,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchangeOrderId"`
	// 本地编号类型
	LocalTypeId int32 `protobuf:"varint,15,opt,name=local_type_id,json=localTypeId,proto3" json:"localTypeId"`
	// 手续费
	Commission float64 `protobuf:"fixed64,16,opt,name=commission,proto3" json:"commission"`
	// 成交金额
	Tax float64 `protobuf:"fixed64,17,opt,name=tax,proto3" json:"tax"`
	// 其他费用
	TotalOtherFee float64 `protobuf:"fixed64,18,opt,name=total_other_fee,json=totalOtherFee,proto3" json:"totalOtherFee"`
	// 原成交价（结算衍生时)
	InitialTradedPrice float64 `protobuf:"fixed64,19,opt,name=initial_traded_price,json=initialTradedPrice,proto3" json:"initialTradedPrice"`
	// 保留附加金额(已经有用了的)
	Reserve float64 `protobuf:"fixed64,20,opt,name=reserve,proto3" json:"reserve"`
	// 开平标志
	OffsetFlag OffsetFlag `protobuf:"varint,21,opt,name=offset_flag,json=offsetFlag,proto3,enum=pb.OffsetFlag" json:"offsetFlag"`
	// 下单帐户
	RouteAccount string `protobuf:"bytes,22,opt,name=route_account,json=routeAccount,proto3" json:"routeAccount"`
	// 用户
	User string `protobuf:"bytes,23,opt,name=user,proto3" json:"user"`
	// 结算组
	SettlementGroup int32 `protobuf:"varint,24,opt,name=settlement_group,json=settlementGroup,proto3" json:"settlementGroup"`
	// 名称
	SymbolName string `protobuf:"bytes,25,opt,name=symbol_name,json=symbolName,proto3" json:"symbolName"`
	// ChildOrderId
	ChildOrderId *OrderID `protobuf:"bytes,26,opt,name=child_order_id,json=childOrderId,proto3" json:"childOrderId"`
	// 变动点
	PriceTick float64 `protobuf:"fixed64,27,opt,name=price_tick,json=priceTick,proto3" json:"priceTick"`
	// 所属
	AccountName string `protobuf:"bytes,28,opt,name=account_name,json=accountName,proto3" json:"accountName"`
	// 倍数
	VolumeMultiple int32 `protobuf:"varint,29,opt,name=volume_multiple,json=volumeMultiple,proto3" json:"volumeMultiple"`
	// 用户名
	UserName string `protobuf:"bytes,30,opt,name=user_name,json=userName,proto3" json:"userName"`
	// 报单来源
	OrderSourceType OrderSourceType `protobuf:"varint,31,opt,name=order_source_type,json=orderSourceType,proto3,enum=pb.OrderSourceType" json:"orderSourceType"`
	// 品种
	ProductId *ProductID `protobuf:"bytes,32,opt,name=product_id,json=productId,proto3" json:"productId"`
	// 部门
	Branch string `protobuf:"bytes,33,opt,name=branch,proto3" json:"branch"`
	// 部门名称
	BranchName string `protobuf:"bytes,34,opt,name=branch_name,json=branchName,proto3" json:"branchName"`
	// 本地报单编号
	LocalOrderId string `protobuf:"bytes,35,opt,name=local_order_id,json=localOrderId,proto3" json:"localOrderId"`
	// 本地序号
	BrokerOrderSeq int32 `protobuf:"varint,36,opt,name=broker_order_seq,json=brokerOrderSeq,proto3" json:"brokerOrderSeq"`
	// 本地报单
	LinkLocalOrderId     *OrderID `protobuf:"bytes,37,opt,name=link_local_order_id,json=linkLocalOrderId,proto3" json:"linkLocalOrderId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeReport) Reset()         { *m = TradeReport{} }
func (m *TradeReport) String() string { return proto.CompactTextString(m) }
func (*TradeReport) ProtoMessage()    {}
func (*TradeReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0cb5629da877ad2, []int{0}
}

func (m *TradeReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeReport.Unmarshal(m, b)
}
func (m *TradeReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeReport.Marshal(b, m, deterministic)
}
func (m *TradeReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeReport.Merge(m, src)
}
func (m *TradeReport) XXX_Size() int {
	return xxx_messageInfo_TradeReport.Size(m)
}
func (m *TradeReport) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeReport.DiscardUnknown(m)
}

var xxx_messageInfo_TradeReport proto.InternalMessageInfo

func (m *TradeReport) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *TradeReport) GetTradeId() string {
	if m != nil {
		return m.TradeId
	}
	return ""
}

func (m *TradeReport) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *TradeReport) GetDirection() OrderDirection {
	if m != nil {
		return m.Direction
	}
	return OrderDirection_OD_LONG
}

func (m *TradeReport) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TradeReport) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *TradeReport) GetTradedTime() int64 {
	if m != nil {
		return m.TradedTime
	}
	return 0
}

func (m *TradeReport) GetTradedTradingDay() int32 {
	if m != nil {
		return m.TradedTradingDay
	}
	return 0
}

func (m *TradeReport) GetOrderId() *OrderID {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *TradeReport) GetOrderPriceType() OrderPriceType {
	if m != nil {
		return m.OrderPriceType
	}
	return OrderPriceType_OPT_LIMIT_PRICE
}

func (m *TradeReport) GetOrderHedgeType() OrderHedgeType {
	if m != nil {
		return m.OrderHedgeType
	}
	return OrderHedgeType_OHT_SPECULATION
}

func (m *TradeReport) GetTradeType() TradeType {
	if m != nil {
		return m.TradeType
	}
	return TradeType_TT_NORMAL
}

func (m *TradeReport) GetCurrencyType() int32 {
	if m != nil {
		return m.CurrencyType
	}
	return 0
}

func (m *TradeReport) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

func (m *TradeReport) GetLocalTypeId() int32 {
	if m != nil {
		return m.LocalTypeId
	}
	return 0
}

func (m *TradeReport) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *TradeReport) GetTax() float64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *TradeReport) GetTotalOtherFee() float64 {
	if m != nil {
		return m.TotalOtherFee
	}
	return 0
}

func (m *TradeReport) GetInitialTradedPrice() float64 {
	if m != nil {
		return m.InitialTradedPrice
	}
	return 0
}

func (m *TradeReport) GetReserve() float64 {
	if m != nil {
		return m.Reserve
	}
	return 0
}

func (m *TradeReport) GetOffsetFlag() OffsetFlag {
	if m != nil {
		return m.OffsetFlag
	}
	return OffsetFlag_OF_NONE
}

func (m *TradeReport) GetRouteAccount() string {
	if m != nil {
		return m.RouteAccount
	}
	return ""
}

func (m *TradeReport) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *TradeReport) GetSettlementGroup() int32 {
	if m != nil {
		return m.SettlementGroup
	}
	return 0
}

func (m *TradeReport) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *TradeReport) GetChildOrderId() *OrderID {
	if m != nil {
		return m.ChildOrderId
	}
	return nil
}

func (m *TradeReport) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *TradeReport) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *TradeReport) GetVolumeMultiple() int32 {
	if m != nil {
		return m.VolumeMultiple
	}
	return 0
}

func (m *TradeReport) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *TradeReport) GetOrderSourceType() OrderSourceType {
	if m != nil {
		return m.OrderSourceType
	}
	return OrderSourceType_OST_CLIENT
}

func (m *TradeReport) GetProductId() *ProductID {
	if m != nil {
		return m.ProductId
	}
	return nil
}

func (m *TradeReport) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *TradeReport) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *TradeReport) GetLocalOrderId() string {
	if m != nil {
		return m.LocalOrderId
	}
	return ""
}

func (m *TradeReport) GetBrokerOrderSeq() int32 {
	if m != nil {
		return m.BrokerOrderSeq
	}
	return 0
}

func (m *TradeReport) GetLinkLocalOrderId() *OrderID {
	if m != nil {
		return m.LinkLocalOrderId
	}
	return nil
}

type TradeReportList struct {
	List                 []*TradeReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TradeReportList) Reset()         { *m = TradeReportList{} }
func (m *TradeReportList) String() string { return proto.CompactTextString(m) }
func (*TradeReportList) ProtoMessage()    {}
func (*TradeReportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0cb5629da877ad2, []int{1}
}

func (m *TradeReportList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeReportList.Unmarshal(m, b)
}
func (m *TradeReportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeReportList.Marshal(b, m, deterministic)
}
func (m *TradeReportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeReportList.Merge(m, src)
}
func (m *TradeReportList) XXX_Size() int {
	return xxx_messageInfo_TradeReportList.Size(m)
}
func (m *TradeReportList) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeReportList.DiscardUnknown(m)
}

var xxx_messageInfo_TradeReportList proto.InternalMessageInfo

func (m *TradeReportList) GetList() []*TradeReport {
	if m != nil {
		return m.List
	}
	return nil
}

type TradeReportSession struct {
	Trade                *TradeReport `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TradeReportSession) Reset()         { *m = TradeReportSession{} }
func (m *TradeReportSession) String() string { return proto.CompactTextString(m) }
func (*TradeReportSession) ProtoMessage()    {}
func (*TradeReportSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0cb5629da877ad2, []int{2}
}

func (m *TradeReportSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeReportSession.Unmarshal(m, b)
}
func (m *TradeReportSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeReportSession.Marshal(b, m, deterministic)
}
func (m *TradeReportSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeReportSession.Merge(m, src)
}
func (m *TradeReportSession) XXX_Size() int {
	return xxx_messageInfo_TradeReportSession.Size(m)
}
func (m *TradeReportSession) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeReportSession.DiscardUnknown(m)
}

var xxx_messageInfo_TradeReportSession proto.InternalMessageInfo

func (m *TradeReportSession) GetTrade() *TradeReport {
	if m != nil {
		return m.Trade
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.OrderHedgeType", OrderHedgeType_name, OrderHedgeType_value)
	proto.RegisterEnum("pb.TradeType", TradeType_name, TradeType_value)
	proto.RegisterType((*TradeReport)(nil), "pb.TradeReport")
	proto.RegisterType((*TradeReportList)(nil), "pb.trade_report_list")
	proto.RegisterType((*TradeReportSession)(nil), "pb.TradeReportSession")
}

func init() { proto.RegisterFile("trade_report.proto", fileDescriptor_f0cb5629da877ad2) }

var fileDescriptor_f0cb5629da877ad2 = []byte{
	// 1022 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0x6d, 0x6f, 0xdb, 0xb6,
	0x13, 0xaf, 0xe2, 0xc4, 0x89, 0x4f, 0x7e, 0x90, 0x99, 0xb4, 0x7f, 0x26, 0xfd, 0xb7, 0x75, 0x9d,
	0xb6, 0xf3, 0x82, 0x22, 0xeb, 0xb2, 0x37, 0xc3, 0x36, 0x60, 0x70, 0x6d, 0x25, 0x31, 0xe0, 0xc4,
	0x86, 0xcc, 0x14, 0xdb, 0x8b, 0x81, 0x90, 0x25, 0xc6, 0x11, 0x22, 0x8b, 0x2e, 0x4d, 0x17, 0xf5,
	0x27, 0xda, 0xc7, 0xd9, 0x57, 0x1a, 0x78, 0x94, 0x9d, 0x87, 0xee, 0x95, 0x78, 0xbf, 0xdf, 0xdd,
	0xf1, 0x1e, 0x29, 0x20, 0x5a, 0x85, 0xb1, 0xe0, 0x4a, 0xcc, 0xa4, 0xd2, 0xc7, 0x33, 0x25, 0xb5,
	0x24, 0x1b, 0xb3, 0xf1, 0x41, 0x39, 0x92, 0xd3, 0xa9, 0xcc, 0x2c, 0x72, 0xe0, 0x4a, 0x15, 0x0b,
	0x65, 0x85, 0xe6, 0xdf, 0x2e, 0xb8, 0xcc, 0x58, 0x05, 0x68, 0x44, 0x28, 0x6c, 0x87, 0x51, 0x24,
	0x17, 0x99, 0xa6, 0x4e, 0xc3, 0x69, 0x95, 0x82, 0x95, 0x48, 0xf6, 0x61, 0xc7, 0xba, 0x4f, 0x62,
	0xba, 0x61, 0x29, 0x94, 0x7b, 0x31, 0x69, 0x42, 0x71, 0xbe, 0x9c, 0x8e, 0x65, 0x4a, 0x0b, 0x0d,
	0xa7, 0xe5, 0x9e, 0xc0, 0xf1, 0x6c, 0x7c, 0x3c, 0x42, 0x24, 0xc8, 0x19, 0xf2, 0x01, 0x4a, 0x71,
	0xa2, 0x44, 0xa4, 0x13, 0x99, 0xd1, 0xcd, 0x86, 0xd3, 0xaa, 0x9e, 0x10, 0xa3, 0x36, 0x30, 0xc1,
	0x74, 0x57, 0x4c, 0x70, 0xa7, 0x44, 0xf6, 0x60, 0x6b, 0xa6, 0x92, 0x48, 0xd0, 0xad, 0x86, 0xd3,
	0x72, 0x02, 0x2b, 0x90, 0x67, 0x50, 0xfc, 0x22, 0xd3, 0xc5, 0x54, 0xd0, 0x62, 0xc3, 0x69, 0x6d,
	0x05, 0xb9, 0x44, 0x5e, 0x81, 0x8b, 0xe1, 0xc4, 0x5c, 0x27, 0x53, 0x41, 0xb7, 0x1b, 0x4e, 0xab,
	0x10, 0x80, 0x85, 0x58, 0x32, 0x15, 0xe4, 0x7d, 0x5e, 0x9e, 0x98, 0x9b, 0x4f, 0x92, 0x4d, 0x78,
	0x1c, 0x2e, 0xe9, 0x0e, 0x3a, 0xf1, 0x72, 0x3d, 0x4b, 0x74, 0xc3, 0x25, 0x79, 0x07, 0x3b, 0x58,
	0x26, 0x93, 0x6d, 0x09, 0x93, 0x72, 0xd7, 0xd1, 0xf6, 0xba, 0xc1, 0x36, 0x92, 0xbd, 0x98, 0xfc,
	0x06, 0x9e, 0xd5, 0xc3, 0xe8, 0xb8, 0x5e, 0xce, 0x04, 0x85, 0x47, 0xd9, 0x0d, 0x0d, 0xc5, 0x96,
	0x33, 0x11, 0x54, 0xe5, 0x03, 0xf9, 0xce, 0xfa, 0x46, 0xc4, 0x93, 0xdc, 0xda, 0x7d, 0x64, 0x7d,
	0x6e, 0xa8, 0x7b, 0xd6, 0x6b, 0x99, 0xbc, 0x07, 0x9b, 0x9f, 0xb5, 0x2b, 0xa3, 0x5d, 0xc5, 0xd8,
	0x61, 0x43, 0xd1, 0xa4, 0xa4, 0x57, 0x47, 0x72, 0x08, 0x95, 0x68, 0xa1, 0x94, 0xc8, 0xa2, 0xa5,
	0x35, 0xa8, 0x60, 0xea, 0xe5, 0x15, 0x88, 0x4a, 0x47, 0x50, 0x17, 0x5f, 0xa3, 0x9b, 0x30, 0x9b,
	0x08, 0xbe, 0xce, 0xbf, 0x8a, 0xdd, 0xae, 0xad, 0x88, 0x41, 0x9e, 0x7a, 0x13, 0x2a, 0xa9, 0x8c,
	0xc2, 0x14, 0xbd, 0x19, 0xbd, 0x1a, 0x3a, 0x74, 0x11, 0x34, 0xde, 0x7a, 0x31, 0x79, 0x09, 0x60,
	0x66, 0x2f, 0x99, 0xcf, 0x4d, 0xdb, 0x3d, 0x6c, 0xe4, 0x3d, 0x84, 0x78, 0x50, 0xd0, 0xe1, 0x57,
	0x5a, 0x47, 0xc2, 0x1c, 0xc9, 0x3b, 0xa8, 0x69, 0xa9, 0xc3, 0x94, 0x4b, 0x7d, 0x23, 0x14, 0xbf,
	0x16, 0x82, 0x12, 0x64, 0x2b, 0x08, 0x0f, 0x0c, 0x7a, 0x2a, 0x04, 0xf9, 0x00, 0x7b, 0x49, 0x96,
	0xe8, 0xc4, 0xdc, 0x6f, 0xdb, 0x6a, 0x87, 0x65, 0x17, 0x95, 0x49, 0xce, 0x61, 0x25, 0x62, 0x2c,
	0xb8, 0x19, 0x6d, 0x25, 0xe6, 0x42, 0x7d, 0x11, 0x74, 0x0f, 0x95, 0x56, 0x22, 0xf9, 0x01, 0x5c,
	0x79, 0x7d, 0x3d, 0x17, 0x9a, 0x5f, 0xa7, 0xe1, 0x84, 0x3e, 0xc5, 0x4a, 0x56, 0xb1, 0x03, 0x08,
	0x9f, 0xa6, 0xe1, 0x24, 0x00, 0xb9, 0x3e, 0x9b, 0x5a, 0x2a, 0xb9, 0xd0, 0x82, 0xaf, 0x76, 0xe5,
	0x19, 0x96, 0xa8, 0x8c, 0x60, 0x3b, 0x5f, 0x18, 0x02, 0x9b, 0x8b, 0xb9, 0x50, 0xf4, 0x7f, 0xc8,
	0xe1, 0x99, 0x7c, 0x0f, 0xde, 0x5c, 0x68, 0x9d, 0x8a, 0xa9, 0xc8, 0x34, 0x9f, 0x28, 0xb9, 0x98,
	0x51, 0x8a, 0x65, 0xab, 0xdd, 0xe1, 0x67, 0x06, 0x36, 0x03, 0x6d, 0x57, 0x87, 0x67, 0xe1, 0x54,
	0xd0, 0x7d, 0xf4, 0x02, 0x16, 0xba, 0x0c, 0xa7, 0x82, 0xfc, 0x08, 0xd5, 0xe8, 0x26, 0x49, 0xe3,
	0xbb, 0x46, 0x1d, 0x7c, 0x3b, 0xa8, 0x65, 0x54, 0x59, 0xb5, 0xec, 0x05, 0x40, 0x3e, 0xa7, 0x49,
	0x74, 0x4b, 0x9f, 0x63, 0x15, 0x4a, 0x88, 0xb0, 0x24, 0xba, 0x25, 0xaf, 0xa1, 0x9c, 0x27, 0x64,
	0xef, 0xfc, 0x3f, 0xde, 0xe9, 0xe6, 0x18, 0x5e, 0xfa, 0x1d, 0xd4, 0xec, 0xc2, 0xf1, 0xe9, 0x22,
	0xd5, 0xc9, 0x2c, 0x15, 0xf4, 0x05, 0xc6, 0x5f, 0xb5, 0xf0, 0x45, 0x8e, 0x92, 0xe7, 0x50, 0x32,
	0x19, 0x5b, 0x47, 0x2f, 0xd1, 0xd1, 0x8e, 0x01, 0xd0, 0xcb, 0xef, 0x50, 0xb7, 0x41, 0xcf, 0xe5,
	0x42, 0xad, 0xd6, 0xe6, 0x15, 0x96, 0x7d, 0x77, 0x1d, 0xfd, 0x08, 0x39, 0x1c, 0xe3, 0x9a, 0x7c,
	0x08, 0x98, 0xd1, 0x9f, 0x29, 0x19, 0x2f, 0x22, 0x6d, 0xf2, 0x6e, 0x60, 0xde, 0x38, 0xfa, 0x43,
	0x8b, 0xf6, 0xba, 0x26, 0x2f, 0x7b, 0x8c, 0xcd, 0x9b, 0x31, 0x56, 0x61, 0x16, 0xdd, 0xd0, 0xd7,
	0x18, 0x48, 0x2e, 0x99, 0x12, 0xdb, 0x93, 0x8d, 0xb2, 0x69, 0x4b, 0x6c, 0x21, 0x8c, 0xf3, 0x0d,
	0x54, 0xed, 0x88, 0xaf, 0x4b, 0x7c, 0x68, 0x1b, 0x8d, 0xe8, 0xaa, 0xaa, 0x2d, 0xf0, 0xc6, 0x4a,
	0xde, 0x0a, 0x95, 0xab, 0xcd, 0xc5, 0x67, 0xfa, 0xc6, 0x16, 0xc5, 0xe2, 0x36, 0x1d, 0xf1, 0x99,
	0xfc, 0x02, 0xbb, 0x69, 0x92, 0xdd, 0xf2, 0x47, 0x4e, 0xdf, 0x7e, 0xdb, 0x37, 0xcf, 0xe8, 0xf5,
	0xef, 0xdd, 0xd2, 0xfc, 0x19, 0xea, 0xf7, 0x9f, 0x77, 0x9e, 0x26, 0x73, 0x4d, 0x0e, 0x61, 0xd3,
	0x7c, 0xa9, 0xd3, 0x28, 0xb4, 0xdc, 0x93, 0xda, 0x7a, 0xf9, 0xed, 0x6b, 0x1e, 0x20, 0xd9, 0xfc,
	0x15, 0xc8, 0x3d, 0x70, 0x24, 0xec, 0xea, 0xbd, 0x85, 0x2d, 0xf4, 0x87, 0xef, 0xfc, 0x7f, 0xd8,
	0x5a, 0xf6, 0xe8, 0x2f, 0xa8, 0x3e, 0x7c, 0x86, 0xc8, 0x2e, 0xd4, 0x06, 0xe7, 0x8c, 0x8f, 0x86,
	0x7e, 0xe7, 0xaa, 0xdf, 0x66, 0xbd, 0xc1, 0xa5, 0xf7, 0x84, 0xd4, 0xa1, 0x62, 0xc0, 0x76, 0xf0,
	0xb1, 0xc7, 0x82, 0xf6, 0x99, 0xef, 0x39, 0xa4, 0x02, 0x25, 0x03, 0x9d, 0xfb, 0xdd, 0x33, 0xdf,
	0xdb, 0x20, 0x7b, 0xe0, 0x3d, 0x32, 0x3b, 0xf1, 0x0a, 0x47, 0xff, 0x38, 0x50, 0x5a, 0x3f, 0x57,
	0xc6, 0x84, 0x31, 0x7e, 0x39, 0x08, 0x2e, 0xda, 0x7d, 0xef, 0x09, 0xa1, 0xb0, 0xc7, 0x18, 0x1f,
	0x0c, 0x8d, 0xf2, 0x88, 0xfb, 0x7f, 0xf8, 0x9d, 0x2b, 0xbc, 0xce, 0x21, 0x00, 0x45, 0xc3, 0xb0,
	0x8e, 0xb7, 0x41, 0x08, 0x54, 0x19, 0xe3, 0xfe, 0xe9, 0x90, 0x77, 0xfd, 0xa0, 0xf7, 0xc9, 0xef,
	0x7a, 0x05, 0x72, 0x00, 0xcf, 0x18, 0xe3, 0x9d, 0xc1, 0xc5, 0xc7, 0xde, 0x25, 0xde, 0xb5, 0xe6,
	0x36, 0xc9, 0x53, 0xa8, 0x33, 0xc6, 0xbb, 0x7e, 0xbf, 0xf7, 0xc9, 0x0f, 0xfe, 0xe4, 0x9d, 0xfe,
	0x60, 0xe4, 0x7b, 0x5b, 0x64, 0x1f, 0x9e, 0x32, 0xc6, 0x47, 0x3e, 0x63, 0x7d, 0xff, 0xc2, 0xbf,
	0x64, 0x6b, 0x8b, 0x62, 0x1e, 0xc7, 0xb0, 0xdf, 0xee, 0x3c, 0x64, 0xb6, 0x4d, 0xda, 0x8c, 0xf1,
	0xc0, 0x1f, 0x5e, 0x05, 0x9d, 0xf3, 0xf6, 0xc8, 0xf7, 0x76, 0xc6, 0x45, 0xfc, 0xb1, 0xfe, 0xf4,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0x36, 0x58, 0x6d, 0x8d, 0x07, 0x00, 0x00,
}
