// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goshare/dcenter.proto

package goshare

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReqGetTradingInstrumentList struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetTradingInstrumentList) Reset()         { *m = ReqGetTradingInstrumentList{} }
func (m *ReqGetTradingInstrumentList) String() string { return proto.CompactTextString(m) }
func (*ReqGetTradingInstrumentList) ProtoMessage()    {}
func (*ReqGetTradingInstrumentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{0}
}

func (m *ReqGetTradingInstrumentList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqGetTradingInstrumentList.Unmarshal(m, b)
}
func (m *ReqGetTradingInstrumentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqGetTradingInstrumentList.Marshal(b, m, deterministic)
}
func (m *ReqGetTradingInstrumentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetTradingInstrumentList.Merge(m, src)
}
func (m *ReqGetTradingInstrumentList) XXX_Size() int {
	return xxx_messageInfo_ReqGetTradingInstrumentList.Size(m)
}
func (m *ReqGetTradingInstrumentList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetTradingInstrumentList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetTradingInstrumentList proto.InternalMessageInfo

func (m *ReqGetTradingInstrumentList) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

type RspGetTradingInstrumentList struct {
	List                 []*Instrument `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RspGetTradingInstrumentList) Reset()         { *m = RspGetTradingInstrumentList{} }
func (m *RspGetTradingInstrumentList) String() string { return proto.CompactTextString(m) }
func (*RspGetTradingInstrumentList) ProtoMessage()    {}
func (*RspGetTradingInstrumentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{1}
}

func (m *RspGetTradingInstrumentList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspGetTradingInstrumentList.Unmarshal(m, b)
}
func (m *RspGetTradingInstrumentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspGetTradingInstrumentList.Marshal(b, m, deterministic)
}
func (m *RspGetTradingInstrumentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspGetTradingInstrumentList.Merge(m, src)
}
func (m *RspGetTradingInstrumentList) XXX_Size() int {
	return xxx_messageInfo_RspGetTradingInstrumentList.Size(m)
}
func (m *RspGetTradingInstrumentList) XXX_DiscardUnknown() {
	xxx_messageInfo_RspGetTradingInstrumentList.DiscardUnknown(m)
}

var xxx_messageInfo_RspGetTradingInstrumentList proto.InternalMessageInfo

func (m *RspGetTradingInstrumentList) GetList() []*Instrument {
	if m != nil {
		return m.List
	}
	return nil
}

type ReqGetTradingInstrument struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	Symbol               string   `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetTradingInstrument) Reset()         { *m = ReqGetTradingInstrument{} }
func (m *ReqGetTradingInstrument) String() string { return proto.CompactTextString(m) }
func (*ReqGetTradingInstrument) ProtoMessage()    {}
func (*ReqGetTradingInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{2}
}

func (m *ReqGetTradingInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqGetTradingInstrument.Unmarshal(m, b)
}
func (m *ReqGetTradingInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqGetTradingInstrument.Marshal(b, m, deterministic)
}
func (m *ReqGetTradingInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetTradingInstrument.Merge(m, src)
}
func (m *ReqGetTradingInstrument) XXX_Size() int {
	return xxx_messageInfo_ReqGetTradingInstrument.Size(m)
}
func (m *ReqGetTradingInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetTradingInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetTradingInstrument proto.InternalMessageInfo

func (m *ReqGetTradingInstrument) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ReqGetTradingInstrument) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type RspGetTradingInstrument struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspGetTradingInstrument) Reset()         { *m = RspGetTradingInstrument{} }
func (m *RspGetTradingInstrument) String() string { return proto.CompactTextString(m) }
func (*RspGetTradingInstrument) ProtoMessage()    {}
func (*RspGetTradingInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{3}
}

func (m *RspGetTradingInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspGetTradingInstrument.Unmarshal(m, b)
}
func (m *RspGetTradingInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspGetTradingInstrument.Marshal(b, m, deterministic)
}
func (m *RspGetTradingInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspGetTradingInstrument.Merge(m, src)
}
func (m *RspGetTradingInstrument) XXX_Size() int {
	return xxx_messageInfo_RspGetTradingInstrument.Size(m)
}
func (m *RspGetTradingInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_RspGetTradingInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_RspGetTradingInstrument proto.InternalMessageInfo

type ReqSetTradingInstrument struct {
	List                 []*Instrument `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReqSetTradingInstrument) Reset()         { *m = ReqSetTradingInstrument{} }
func (m *ReqSetTradingInstrument) String() string { return proto.CompactTextString(m) }
func (*ReqSetTradingInstrument) ProtoMessage()    {}
func (*ReqSetTradingInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{4}
}

func (m *ReqSetTradingInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSetTradingInstrument.Unmarshal(m, b)
}
func (m *ReqSetTradingInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSetTradingInstrument.Marshal(b, m, deterministic)
}
func (m *ReqSetTradingInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSetTradingInstrument.Merge(m, src)
}
func (m *ReqSetTradingInstrument) XXX_Size() int {
	return xxx_messageInfo_ReqSetTradingInstrument.Size(m)
}
func (m *ReqSetTradingInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSetTradingInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSetTradingInstrument proto.InternalMessageInfo

func (m *ReqSetTradingInstrument) GetList() []*Instrument {
	if m != nil {
		return m.List
	}
	return nil
}

type RspSetTradingInstrument struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspSetTradingInstrument) Reset()         { *m = RspSetTradingInstrument{} }
func (m *RspSetTradingInstrument) String() string { return proto.CompactTextString(m) }
func (*RspSetTradingInstrument) ProtoMessage()    {}
func (*RspSetTradingInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{5}
}

func (m *RspSetTradingInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspSetTradingInstrument.Unmarshal(m, b)
}
func (m *RspSetTradingInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspSetTradingInstrument.Marshal(b, m, deterministic)
}
func (m *RspSetTradingInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspSetTradingInstrument.Merge(m, src)
}
func (m *RspSetTradingInstrument) XXX_Size() int {
	return xxx_messageInfo_RspSetTradingInstrument.Size(m)
}
func (m *RspSetTradingInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_RspSetTradingInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_RspSetTradingInstrument proto.InternalMessageInfo

type ReqSubscribe struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	List                 []string `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	BinaryData           bool     `protobuf:"varint,3,opt,name=binary_data,json=binaryData,proto3" json:"binaryData"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSubscribe) Reset()         { *m = ReqSubscribe{} }
func (m *ReqSubscribe) String() string { return proto.CompactTextString(m) }
func (*ReqSubscribe) ProtoMessage()    {}
func (*ReqSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{6}
}

func (m *ReqSubscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSubscribe.Unmarshal(m, b)
}
func (m *ReqSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSubscribe.Marshal(b, m, deterministic)
}
func (m *ReqSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSubscribe.Merge(m, src)
}
func (m *ReqSubscribe) XXX_Size() int {
	return xxx_messageInfo_ReqSubscribe.Size(m)
}
func (m *ReqSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSubscribe proto.InternalMessageInfo

func (m *ReqSubscribe) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ReqSubscribe) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ReqSubscribe) GetBinaryData() bool {
	if m != nil {
		return m.BinaryData
	}
	return false
}

type RspSubscribe struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspSubscribe) Reset()         { *m = RspSubscribe{} }
func (m *RspSubscribe) String() string { return proto.CompactTextString(m) }
func (*RspSubscribe) ProtoMessage()    {}
func (*RspSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{7}
}

func (m *RspSubscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspSubscribe.Unmarshal(m, b)
}
func (m *RspSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspSubscribe.Marshal(b, m, deterministic)
}
func (m *RspSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspSubscribe.Merge(m, src)
}
func (m *RspSubscribe) XXX_Size() int {
	return xxx_messageInfo_RspSubscribe.Size(m)
}
func (m *RspSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_RspSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_RspSubscribe proto.InternalMessageInfo

type ReqUnSubscribe struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	List                 []string `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUnSubscribe) Reset()         { *m = ReqUnSubscribe{} }
func (m *ReqUnSubscribe) String() string { return proto.CompactTextString(m) }
func (*ReqUnSubscribe) ProtoMessage()    {}
func (*ReqUnSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{8}
}

func (m *ReqUnSubscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqUnSubscribe.Unmarshal(m, b)
}
func (m *ReqUnSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqUnSubscribe.Marshal(b, m, deterministic)
}
func (m *ReqUnSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUnSubscribe.Merge(m, src)
}
func (m *ReqUnSubscribe) XXX_Size() int {
	return xxx_messageInfo_ReqUnSubscribe.Size(m)
}
func (m *ReqUnSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUnSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUnSubscribe proto.InternalMessageInfo

func (m *ReqUnSubscribe) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ReqUnSubscribe) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type RspUnSubscribe struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspUnSubscribe) Reset()         { *m = RspUnSubscribe{} }
func (m *RspUnSubscribe) String() string { return proto.CompactTextString(m) }
func (*RspUnSubscribe) ProtoMessage()    {}
func (*RspUnSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{9}
}

func (m *RspUnSubscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspUnSubscribe.Unmarshal(m, b)
}
func (m *RspUnSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspUnSubscribe.Marshal(b, m, deterministic)
}
func (m *RspUnSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspUnSubscribe.Merge(m, src)
}
func (m *RspUnSubscribe) XXX_Size() int {
	return xxx_messageInfo_RspUnSubscribe.Size(m)
}
func (m *RspUnSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_RspUnSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_RspUnSubscribe proto.InternalMessageInfo

type ReqSaveKline struct {
	Series               *KlineSeries `protobuf:"bytes,1,opt,name=series,proto3" json:"series"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqSaveKline) Reset()         { *m = ReqSaveKline{} }
func (m *ReqSaveKline) String() string { return proto.CompactTextString(m) }
func (*ReqSaveKline) ProtoMessage()    {}
func (*ReqSaveKline) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{10}
}

func (m *ReqSaveKline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSaveKline.Unmarshal(m, b)
}
func (m *ReqSaveKline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSaveKline.Marshal(b, m, deterministic)
}
func (m *ReqSaveKline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSaveKline.Merge(m, src)
}
func (m *ReqSaveKline) XXX_Size() int {
	return xxx_messageInfo_ReqSaveKline.Size(m)
}
func (m *ReqSaveKline) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSaveKline.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSaveKline proto.InternalMessageInfo

func (m *ReqSaveKline) GetSeries() *KlineSeries {
	if m != nil {
		return m.Series
	}
	return nil
}

type RspSaveKline struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspSaveKline) Reset()         { *m = RspSaveKline{} }
func (m *RspSaveKline) String() string { return proto.CompactTextString(m) }
func (*RspSaveKline) ProtoMessage()    {}
func (*RspSaveKline) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{11}
}

func (m *RspSaveKline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspSaveKline.Unmarshal(m, b)
}
func (m *RspSaveKline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspSaveKline.Marshal(b, m, deterministic)
}
func (m *RspSaveKline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspSaveKline.Merge(m, src)
}
func (m *RspSaveKline) XXX_Size() int {
	return xxx_messageInfo_RspSaveKline.Size(m)
}
func (m *RspSaveKline) XXX_DiscardUnknown() {
	xxx_messageInfo_RspSaveKline.DiscardUnknown(m)
}

var xxx_messageInfo_RspSaveKline proto.InternalMessageInfo

type ReqCombineSubscribe struct {
	Exchange             string       `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	Symbol               string       `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol"`
	PeriodList           []PeriodType `protobuf:"varint,3,rep,packed,name=period_list,json=periodList,proto3,enum=goshare.PeriodType" json:"periodList"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqCombineSubscribe) Reset()         { *m = ReqCombineSubscribe{} }
func (m *ReqCombineSubscribe) String() string { return proto.CompactTextString(m) }
func (*ReqCombineSubscribe) ProtoMessage()    {}
func (*ReqCombineSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{12}
}

func (m *ReqCombineSubscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCombineSubscribe.Unmarshal(m, b)
}
func (m *ReqCombineSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCombineSubscribe.Marshal(b, m, deterministic)
}
func (m *ReqCombineSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCombineSubscribe.Merge(m, src)
}
func (m *ReqCombineSubscribe) XXX_Size() int {
	return xxx_messageInfo_ReqCombineSubscribe.Size(m)
}
func (m *ReqCombineSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCombineSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCombineSubscribe proto.InternalMessageInfo

func (m *ReqCombineSubscribe) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ReqCombineSubscribe) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ReqCombineSubscribe) GetPeriodList() []PeriodType {
	if m != nil {
		return m.PeriodList
	}
	return nil
}

type RspCombineSubscribe struct {
	Exchange string `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	// 合约
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol"`
	// 历史
	History []*KlineSeries `protobuf:"bytes,3,rep,name=history,proto3" json:"history"`
	// 最新行情
	Tick *MarketDataSnapshot `protobuf:"bytes,4,opt,name=tick,proto3" json:"tick"`
	// 最新K线,按请求时的周期顺序依次返回
	Klines               []*Kline `protobuf:"bytes,5,rep,name=klines,proto3" json:"klines"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspCombineSubscribe) Reset()         { *m = RspCombineSubscribe{} }
func (m *RspCombineSubscribe) String() string { return proto.CompactTextString(m) }
func (*RspCombineSubscribe) ProtoMessage()    {}
func (*RspCombineSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{13}
}

func (m *RspCombineSubscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspCombineSubscribe.Unmarshal(m, b)
}
func (m *RspCombineSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspCombineSubscribe.Marshal(b, m, deterministic)
}
func (m *RspCombineSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspCombineSubscribe.Merge(m, src)
}
func (m *RspCombineSubscribe) XXX_Size() int {
	return xxx_messageInfo_RspCombineSubscribe.Size(m)
}
func (m *RspCombineSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_RspCombineSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_RspCombineSubscribe proto.InternalMessageInfo

func (m *RspCombineSubscribe) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *RspCombineSubscribe) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *RspCombineSubscribe) GetHistory() []*KlineSeries {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *RspCombineSubscribe) GetTick() *MarketDataSnapshot {
	if m != nil {
		return m.Tick
	}
	return nil
}

func (m *RspCombineSubscribe) GetKlines() []*Kline {
	if m != nil {
		return m.Klines
	}
	return nil
}

type SymbolCacheSummary struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	Symbol               string   `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol"`
	KlineLen             int32    `protobuf:"varint,3,opt,name=kline_len,json=klineLen,proto3" json:"klineLen"`
	TickLen              int32    `protobuf:"varint,4,opt,name=tick_len,json=tickLen,proto3" json:"tickLen"`
	SubscriberCount      int32    `protobuf:"varint,5,opt,name=subscriber_count,json=subscriberCount,proto3" json:"subscriberCount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SymbolCacheSummary) Reset()         { *m = SymbolCacheSummary{} }
func (m *SymbolCacheSummary) String() string { return proto.CompactTextString(m) }
func (*SymbolCacheSummary) ProtoMessage()    {}
func (*SymbolCacheSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{14}
}

func (m *SymbolCacheSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SymbolCacheSummary.Unmarshal(m, b)
}
func (m *SymbolCacheSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SymbolCacheSummary.Marshal(b, m, deterministic)
}
func (m *SymbolCacheSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SymbolCacheSummary.Merge(m, src)
}
func (m *SymbolCacheSummary) XXX_Size() int {
	return xxx_messageInfo_SymbolCacheSummary.Size(m)
}
func (m *SymbolCacheSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_SymbolCacheSummary.DiscardUnknown(m)
}

var xxx_messageInfo_SymbolCacheSummary proto.InternalMessageInfo

func (m *SymbolCacheSummary) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *SymbolCacheSummary) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *SymbolCacheSummary) GetKlineLen() int32 {
	if m != nil {
		return m.KlineLen
	}
	return 0
}

func (m *SymbolCacheSummary) GetTickLen() int32 {
	if m != nil {
		return m.TickLen
	}
	return 0
}

func (m *SymbolCacheSummary) GetSubscriberCount() int32 {
	if m != nil {
		return m.SubscriberCount
	}
	return 0
}

type CacheSummary struct {
	KsMapSize            int32                 `protobuf:"varint,1,opt,name=ks_map_size,json=ksMapSize,proto3" json:"ksMapSize"`
	TotalKlineLen        int32                 `protobuf:"varint,2,opt,name=total_kline_len,json=totalKlineLen,proto3" json:"totalKlineLen"`
	TotalTickLen         int32                 `protobuf:"varint,3,opt,name=total_tick_len,json=totalTickLen,proto3" json:"totalTickLen"`
	TotalSubscriberCount int32                 `protobuf:"varint,4,opt,name=total_subscriber_count,json=totalSubscriberCount,proto3" json:"totalSubscriberCount"`
	SymbolList           []*SymbolCacheSummary `protobuf:"bytes,5,rep,name=symbol_list,json=symbolList,proto3" json:"symbolList"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CacheSummary) Reset()         { *m = CacheSummary{} }
func (m *CacheSummary) String() string { return proto.CompactTextString(m) }
func (*CacheSummary) ProtoMessage()    {}
func (*CacheSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{15}
}

func (m *CacheSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheSummary.Unmarshal(m, b)
}
func (m *CacheSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheSummary.Marshal(b, m, deterministic)
}
func (m *CacheSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheSummary.Merge(m, src)
}
func (m *CacheSummary) XXX_Size() int {
	return xxx_messageInfo_CacheSummary.Size(m)
}
func (m *CacheSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheSummary.DiscardUnknown(m)
}

var xxx_messageInfo_CacheSummary proto.InternalMessageInfo

func (m *CacheSummary) GetKsMapSize() int32 {
	if m != nil {
		return m.KsMapSize
	}
	return 0
}

func (m *CacheSummary) GetTotalKlineLen() int32 {
	if m != nil {
		return m.TotalKlineLen
	}
	return 0
}

func (m *CacheSummary) GetTotalTickLen() int32 {
	if m != nil {
		return m.TotalTickLen
	}
	return 0
}

func (m *CacheSummary) GetTotalSubscriberCount() int32 {
	if m != nil {
		return m.TotalSubscriberCount
	}
	return 0
}

func (m *CacheSummary) GetSymbolList() []*SymbolCacheSummary {
	if m != nil {
		return m.SymbolList
	}
	return nil
}

type ReqGetDCenterInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetDCenterInfo) Reset()         { *m = ReqGetDCenterInfo{} }
func (m *ReqGetDCenterInfo) String() string { return proto.CompactTextString(m) }
func (*ReqGetDCenterInfo) ProtoMessage()    {}
func (*ReqGetDCenterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{16}
}

func (m *ReqGetDCenterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqGetDCenterInfo.Unmarshal(m, b)
}
func (m *ReqGetDCenterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqGetDCenterInfo.Marshal(b, m, deterministic)
}
func (m *ReqGetDCenterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetDCenterInfo.Merge(m, src)
}
func (m *ReqGetDCenterInfo) XXX_Size() int {
	return xxx_messageInfo_ReqGetDCenterInfo.Size(m)
}
func (m *ReqGetDCenterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetDCenterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetDCenterInfo proto.InternalMessageInfo

type RspGetDCenterInfo struct {
	CacheSummary         *CacheSummary `protobuf:"bytes,1,opt,name=cache_summary,json=cacheSummary,proto3" json:"cacheSummary"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RspGetDCenterInfo) Reset()         { *m = RspGetDCenterInfo{} }
func (m *RspGetDCenterInfo) String() string { return proto.CompactTextString(m) }
func (*RspGetDCenterInfo) ProtoMessage()    {}
func (*RspGetDCenterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{17}
}

func (m *RspGetDCenterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspGetDCenterInfo.Unmarshal(m, b)
}
func (m *RspGetDCenterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspGetDCenterInfo.Marshal(b, m, deterministic)
}
func (m *RspGetDCenterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspGetDCenterInfo.Merge(m, src)
}
func (m *RspGetDCenterInfo) XXX_Size() int {
	return xxx_messageInfo_RspGetDCenterInfo.Size(m)
}
func (m *RspGetDCenterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RspGetDCenterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RspGetDCenterInfo proto.InternalMessageInfo

func (m *RspGetDCenterInfo) GetCacheSummary() *CacheSummary {
	if m != nil {
		return m.CacheSummary
	}
	return nil
}

type ReqGetTickSeries struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	Symbol               string   `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol"`
	Start                int32    `protobuf:"varint,3,opt,name=start,proto3" json:"start"`
	End                  int32    `protobuf:"varint,4,opt,name=end,proto3" json:"end"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqGetTickSeries) Reset()         { *m = ReqGetTickSeries{} }
func (m *ReqGetTickSeries) String() string { return proto.CompactTextString(m) }
func (*ReqGetTickSeries) ProtoMessage()    {}
func (*ReqGetTickSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{18}
}

func (m *ReqGetTickSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqGetTickSeries.Unmarshal(m, b)
}
func (m *ReqGetTickSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqGetTickSeries.Marshal(b, m, deterministic)
}
func (m *ReqGetTickSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetTickSeries.Merge(m, src)
}
func (m *ReqGetTickSeries) XXX_Size() int {
	return xxx_messageInfo_ReqGetTickSeries.Size(m)
}
func (m *ReqGetTickSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetTickSeries.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetTickSeries proto.InternalMessageInfo

func (m *ReqGetTickSeries) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ReqGetTickSeries) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ReqGetTickSeries) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqGetTickSeries) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

type RspGetTickSeries struct {
	Exchange             string                `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	Symbol               string                `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol"`
	Start                int32                 `protobuf:"varint,3,opt,name=start,proto3" json:"start"`
	End                  int32                 `protobuf:"varint,4,opt,name=end,proto3" json:"end"`
	List                 []*MarketDataSnapshot `protobuf:"bytes,5,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RspGetTickSeries) Reset()         { *m = RspGetTickSeries{} }
func (m *RspGetTickSeries) String() string { return proto.CompactTextString(m) }
func (*RspGetTickSeries) ProtoMessage()    {}
func (*RspGetTickSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{19}
}

func (m *RspGetTickSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspGetTickSeries.Unmarshal(m, b)
}
func (m *RspGetTickSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspGetTickSeries.Marshal(b, m, deterministic)
}
func (m *RspGetTickSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspGetTickSeries.Merge(m, src)
}
func (m *RspGetTickSeries) XXX_Size() int {
	return xxx_messageInfo_RspGetTickSeries.Size(m)
}
func (m *RspGetTickSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_RspGetTickSeries.DiscardUnknown(m)
}

var xxx_messageInfo_RspGetTickSeries proto.InternalMessageInfo

func (m *RspGetTickSeries) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *RspGetTickSeries) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *RspGetTickSeries) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *RspGetTickSeries) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *RspGetTickSeries) GetList() []*MarketDataSnapshot {
	if m != nil {
		return m.List
	}
	return nil
}

type ReqGetKlineSeries struct {
	Exchange             string     `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	Symbol               string     `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol"`
	Period               PeriodType `protobuf:"varint,3,opt,name=period,proto3,enum=goshare.PeriodType" json:"period"`
	Start                int64      `protobuf:"varint,4,opt,name=start,proto3" json:"start"`
	End                  int64      `protobuf:"varint,5,opt,name=end,proto3" json:"end"`
	LenLimit             int64      `protobuf:"varint,6,opt,name=lenLimit,proto3" json:"lenLimit"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReqGetKlineSeries) Reset()         { *m = ReqGetKlineSeries{} }
func (m *ReqGetKlineSeries) String() string { return proto.CompactTextString(m) }
func (*ReqGetKlineSeries) ProtoMessage()    {}
func (*ReqGetKlineSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{20}
}

func (m *ReqGetKlineSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqGetKlineSeries.Unmarshal(m, b)
}
func (m *ReqGetKlineSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqGetKlineSeries.Marshal(b, m, deterministic)
}
func (m *ReqGetKlineSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGetKlineSeries.Merge(m, src)
}
func (m *ReqGetKlineSeries) XXX_Size() int {
	return xxx_messageInfo_ReqGetKlineSeries.Size(m)
}
func (m *ReqGetKlineSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGetKlineSeries.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGetKlineSeries proto.InternalMessageInfo

func (m *ReqGetKlineSeries) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ReqGetKlineSeries) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ReqGetKlineSeries) GetPeriod() PeriodType {
	if m != nil {
		return m.Period
	}
	return PeriodType_TICK
}

func (m *ReqGetKlineSeries) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqGetKlineSeries) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ReqGetKlineSeries) GetLenLimit() int64 {
	if m != nil {
		return m.LenLimit
	}
	return 0
}

type RspGetKlineSeries struct {
	Exchange             string     `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange"`
	Symbol               string     `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol"`
	Period               PeriodType `protobuf:"varint,3,opt,name=period,proto3,enum=goshare.PeriodType" json:"period"`
	Start                int64      `protobuf:"varint,4,opt,name=start,proto3" json:"start"`
	End                  int64      `protobuf:"varint,5,opt,name=end,proto3" json:"end"`
	LenLimit             int64      `protobuf:"varint,6,opt,name=lenLimit,proto3" json:"lenLimit"`
	List                 []*Kline   `protobuf:"bytes,7,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RspGetKlineSeries) Reset()         { *m = RspGetKlineSeries{} }
func (m *RspGetKlineSeries) String() string { return proto.CompactTextString(m) }
func (*RspGetKlineSeries) ProtoMessage()    {}
func (*RspGetKlineSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a2ef920654c466, []int{21}
}

func (m *RspGetKlineSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspGetKlineSeries.Unmarshal(m, b)
}
func (m *RspGetKlineSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspGetKlineSeries.Marshal(b, m, deterministic)
}
func (m *RspGetKlineSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspGetKlineSeries.Merge(m, src)
}
func (m *RspGetKlineSeries) XXX_Size() int {
	return xxx_messageInfo_RspGetKlineSeries.Size(m)
}
func (m *RspGetKlineSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_RspGetKlineSeries.DiscardUnknown(m)
}

var xxx_messageInfo_RspGetKlineSeries proto.InternalMessageInfo

func (m *RspGetKlineSeries) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *RspGetKlineSeries) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *RspGetKlineSeries) GetPeriod() PeriodType {
	if m != nil {
		return m.Period
	}
	return PeriodType_TICK
}

func (m *RspGetKlineSeries) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *RspGetKlineSeries) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *RspGetKlineSeries) GetLenLimit() int64 {
	if m != nil {
		return m.LenLimit
	}
	return 0
}

func (m *RspGetKlineSeries) GetList() []*Kline {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqGetTradingInstrumentList)(nil), "goshare.goshare.ReqGetTradingInstrumentList")
	proto.RegisterType((*RspGetTradingInstrumentList)(nil), "goshare.goshare.RspGetTradingInstrumentList")
	proto.RegisterType((*ReqGetTradingInstrument)(nil), "goshare.goshare.ReqGetTradingInstrument")
	proto.RegisterType((*RspGetTradingInstrument)(nil), "goshare.goshare.RspGetTradingInstrument")
	proto.RegisterType((*ReqSetTradingInstrument)(nil), "goshare.goshare.ReqSetTradingInstrument")
	proto.RegisterType((*RspSetTradingInstrument)(nil), "goshare.goshare.RspSetTradingInstrument")
	proto.RegisterType((*ReqSubscribe)(nil), "goshare.goshare.ReqSubscribe")
	proto.RegisterType((*RspSubscribe)(nil), "goshare.goshare.RspSubscribe")
	proto.RegisterType((*ReqUnSubscribe)(nil), "goshare.goshare.ReqUnSubscribe")
	proto.RegisterType((*RspUnSubscribe)(nil), "goshare.goshare.RspUnSubscribe")
	proto.RegisterType((*ReqSaveKline)(nil), "goshare.goshare.ReqSaveKline")
	proto.RegisterType((*RspSaveKline)(nil), "goshare.goshare.RspSaveKline")
	proto.RegisterType((*ReqCombineSubscribe)(nil), "goshare.goshare.ReqCombineSubscribe")
	proto.RegisterType((*RspCombineSubscribe)(nil), "goshare.goshare.RspCombineSubscribe")
	proto.RegisterType((*SymbolCacheSummary)(nil), "goshare.goshare.SymbolCacheSummary")
	proto.RegisterType((*CacheSummary)(nil), "goshare.goshare.CacheSummary")
	proto.RegisterType((*ReqGetDCenterInfo)(nil), "goshare.goshare.ReqGetDCenterInfo")
	proto.RegisterType((*RspGetDCenterInfo)(nil), "goshare.goshare.RspGetDCenterInfo")
	proto.RegisterType((*ReqGetTickSeries)(nil), "goshare.goshare.ReqGetTickSeries")
	proto.RegisterType((*RspGetTickSeries)(nil), "goshare.goshare.RspGetTickSeries")
	proto.RegisterType((*ReqGetKlineSeries)(nil), "goshare.goshare.ReqGetKlineSeries")
	proto.RegisterType((*RspGetKlineSeries)(nil), "goshare.goshare.RspGetKlineSeries")
}

func init() { proto.RegisterFile("goshare/dcenter.proto", fileDescriptor_a6a2ef920654c466) }

var fileDescriptor_a6a2ef920654c466 = []byte{
	// 906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0x9b, 0x26, 0x4d, 0x4e, 0xb2, 0x69, 0x76, 0x1a, 0x76, 0xdd, 0x54, 0x40, 0x34, 0xac,
	0x56, 0x41, 0x54, 0xc9, 0xaa, 0xec, 0x0d, 0x12, 0x17, 0x68, 0x5b, 0x09, 0x95, 0x6d, 0x11, 0x72,
	0x8a, 0x40, 0xdc, 0x98, 0x89, 0x33, 0x24, 0x43, 0xe2, 0xb1, 0xeb, 0x99, 0xac, 0xc8, 0xde, 0xf0,
	0x28, 0x3c, 0x00, 0x2f, 0xc0, 0x73, 0x70, 0xcd, 0x63, 0x70, 0xc1, 0x25, 0xf2, 0x19, 0x3b, 0x7f,
	0xb6, 0xab, 0x52, 0x21, 0x24, 0xae, 0xda, 0x39, 0xe7, 0xf3, 0xf7, 0x7d, 0x67, 0xe6, 0xcc, 0xc9,
	0xc0, 0x3b, 0x93, 0x40, 0x4d, 0x59, 0xc4, 0x07, 0x63, 0x8f, 0x4b, 0xcd, 0xa3, 0x7e, 0x18, 0x05,
	0x3a, 0x20, 0x87, 0x49, 0xb8, 0x9f, 0xfc, 0xed, 0xb4, 0x53, 0x9c, 0x17, 0xf8, 0x7e, 0x20, 0x0d,
	0xac, 0x73, 0x9c, 0x46, 0x7d, 0x16, 0xcd, 0xb8, 0x76, 0xc7, 0x4c, 0xb3, 0x24, 0x65, 0xa7, 0x29,
	0x21, 0x95, 0x8e, 0x16, 0x3e, 0x97, 0xda, 0x64, 0xe8, 0x27, 0x70, 0xe2, 0xf0, 0xdb, 0xcf, 0xb9,
	0xbe, 0x89, 0xd8, 0x58, 0xc8, 0xc9, 0xe5, 0x0a, 0x70, 0x25, 0x94, 0x26, 0x1d, 0xa8, 0xf2, 0x9f,
	0xbc, 0x29, 0x93, 0x13, 0x6e, 0x5b, 0x5d, 0xab, 0x57, 0x73, 0x56, 0x6b, 0xfa, 0x25, 0x9c, 0x38,
	0x2a, 0x2c, 0xfc, 0x74, 0x00, 0xfb, 0x73, 0xa1, 0xb4, 0x6d, 0x75, 0x4b, 0xbd, 0xfa, 0xd9, 0x49,
	0x7f, 0xa7, 0x88, 0xfe, 0x1a, 0xee, 0x20, 0x90, 0x5e, 0xc3, 0xd3, 0x02, 0x2b, 0x77, 0xd9, 0x20,
	0x4f, 0xa0, 0xa2, 0x96, 0xfe, 0x28, 0x98, 0xdb, 0x7b, 0x98, 0x49, 0x56, 0xf4, 0x18, 0x9e, 0x16,
	0xd8, 0xa3, 0x5f, 0xa0, 0xd2, 0x30, 0x4f, 0xe9, 0x1f, 0xbb, 0x36, 0x32, 0x79, 0x5c, 0xd4, 0x85,
	0x46, 0x2c, 0xb3, 0x18, 0x29, 0x2f, 0x12, 0x23, 0x7e, 0x67, 0x15, 0x24, 0xd1, 0xdd, 0xeb, 0x96,
	0x7a, 0x35, 0x43, 0x4d, 0xde, 0x87, 0xfa, 0x48, 0x48, 0x16, 0x2d, 0xf1, 0x28, 0xed, 0x52, 0xd7,
	0xea, 0x55, 0x1d, 0x30, 0xa1, 0x0b, 0xa6, 0x19, 0x6d, 0x42, 0x23, 0xd6, 0x4e, 0x05, 0xe8, 0x67,
	0xd0, 0x74, 0xf8, 0xed, 0xd7, 0xf2, 0xc1, 0x92, 0xb4, 0x05, 0x4d, 0x47, 0x85, 0x1b, 0x0c, 0xf4,
	0x53, 0x53, 0x04, 0x7b, 0xc3, 0x5f, 0xcf, 0x85, 0xe4, 0xe4, 0x14, 0x2a, 0x8a, 0x47, 0x82, 0x2b,
	0xe4, 0xab, 0x9f, 0xb5, 0x57, 0x5b, 0x83, 0xf9, 0x21, 0xe6, 0x9c, 0x04, 0x93, 0x3a, 0x4c, 0xbf,
	0xa6, 0x3f, 0xc3, 0x91, 0xc3, 0x6f, 0xcf, 0x03, 0x7f, 0x14, 0x63, 0xef, 0x65, 0xb3, 0xe0, 0x7c,
	0xc9, 0x4b, 0xa8, 0x87, 0x3c, 0x12, 0xc1, 0xd8, 0xc5, 0x2a, 0x4a, 0xdd, 0x52, 0xaf, 0x79, 0x76,
	0xb4, 0x72, 0xf3, 0x15, 0xe6, 0x6e, 0x96, 0x21, 0x77, 0xc0, 0xe0, 0xe2, 0xae, 0xa4, 0xbf, 0x5b,
	0x70, 0xe4, 0xa8, 0xf0, 0x5f, 0x71, 0xd0, 0x87, 0x83, 0xa9, 0x50, 0x3a, 0x88, 0x96, 0xa8, 0x5e,
	0xb4, 0x17, 0x29, 0x28, 0xee, 0x2d, 0x2d, 0xbc, 0x99, 0xbd, 0x8f, 0x1b, 0xb7, 0xee, 0xad, 0x6b,
	0xbc, 0xaf, 0xf1, 0x89, 0x0e, 0x25, 0x0b, 0xd5, 0x34, 0xd0, 0x0e, 0x02, 0xc9, 0x73, 0xa8, 0xcc,
	0x62, 0x22, 0x65, 0x97, 0x91, 0xbf, 0xb9, 0xcd, 0xef, 0x24, 0x59, 0xfa, 0xab, 0x05, 0x64, 0x88,
	0x9e, 0xce, 0x99, 0x37, 0xe5, 0xc3, 0x85, 0xef, 0xb3, 0x68, 0xf9, 0xa0, 0x9a, 0x4e, 0xa0, 0x86,
	0xa4, 0xee, 0x9c, 0x4b, 0xec, 0xb8, 0xb2, 0x53, 0xc5, 0xc0, 0x15, 0x97, 0xe4, 0x18, 0xaa, 0xb1,
	0x2f, 0xcc, 0xed, 0x63, 0xee, 0x20, 0x5e, 0xc7, 0xa9, 0x0f, 0xa1, 0xa5, 0xd2, 0xcd, 0x8c, 0x5c,
	0x2f, 0x58, 0x48, 0x6d, 0x97, 0x11, 0x72, 0xb8, 0x8e, 0x9f, 0xc7, 0x61, 0xfa, 0x97, 0x05, 0x8d,
	0x2d, 0x9f, 0xef, 0x41, 0x7d, 0xa6, 0x5c, 0x9f, 0x85, 0xae, 0x12, 0x6f, 0x8d, 0xd5, 0xb2, 0x53,
	0x9b, 0xa9, 0x6b, 0x16, 0x0e, 0xc5, 0x5b, 0x4e, 0x9e, 0xc3, 0xa1, 0x0e, 0x34, 0x9b, 0xbb, 0x6b,
	0x67, 0x7b, 0x88, 0x79, 0x84, 0xe1, 0xd7, 0xa9, 0xbd, 0x67, 0xd0, 0x34, 0xb8, 0x95, 0x49, 0x53,
	0x40, 0x03, 0xa3, 0x37, 0x89, 0xd3, 0x97, 0xf0, 0xc4, 0xa0, 0x32, 0x7e, 0x4d, 0x49, 0x6d, 0xcc,
	0x0e, 0xb7, 0x4d, 0x93, 0x0b, 0xa8, 0x9b, 0x1d, 0x32, 0xdd, 0x66, 0xce, 0xe3, 0x83, 0xcc, 0x78,
	0xc8, 0x9e, 0x82, 0x03, 0xe6, 0x3b, 0xec, 0xbe, 0x23, 0x78, 0x6c, 0x46, 0xdc, 0xc5, 0x39, 0x0e,
	0xf8, 0x4b, 0xf9, 0x43, 0x40, 0xbf, 0x81, 0xc7, 0x66, 0x50, 0x6d, 0x04, 0xc9, 0x2b, 0x78, 0xe4,
	0xc5, 0x2c, 0xae, 0x32, 0x34, 0xc9, 0x6d, 0x7b, 0x37, 0xa3, 0xb8, 0xa5, 0xd5, 0xf0, 0x36, 0x56,
	0x54, 0x42, 0x2b, 0x19, 0xa8, 0xc2, 0x9b, 0x99, 0x66, 0x7c, 0x50, 0x4f, 0xb4, 0xa1, 0xac, 0x34,
	0x8b, 0x74, 0xb2, 0x9d, 0x66, 0x41, 0x5a, 0x50, 0xe2, 0x72, 0x9c, 0x6c, 0x5a, 0xfc, 0x2f, 0xfd,
	0xc5, 0x82, 0x56, 0x32, 0x72, 0xff, 0x13, 0xc1, 0xd5, 0xb0, 0x2e, 0xef, 0x0c, 0xeb, 0xbc, 0x0b,
	0x85, 0xe3, 0xed, 0x37, 0x2b, 0x3d, 0x80, 0x8d, 0x0b, 0xfa, 0x20, 0x8b, 0x1f, 0x41, 0xc5, 0x4c,
	0x15, 0xf4, 0x58, 0x30, 0x78, 0x12, 0xc8, 0xba, 0x9e, 0xd8, 0x7b, 0x69, 0xa7, 0x9e, 0x32, 0xc6,
	0xb0, 0x9e, 0x0e, 0x54, 0xe7, 0x5c, 0x5e, 0x09, 0x5f, 0x68, 0xbb, 0x82, 0xe1, 0xd5, 0x9a, 0xfe,
	0x61, 0xa5, 0x6d, 0xf2, 0x7f, 0xb3, 0x4e, 0x68, 0x72, 0x4c, 0x07, 0xb9, 0x43, 0x0c, 0x73, 0x67,
	0x7f, 0x96, 0xe0, 0x20, 0xe9, 0x7f, 0x72, 0x09, 0xb5, 0xf5, 0x60, 0xce, 0x76, 0xfc, 0xe6, 0x6f,
	0x6a, 0xe7, 0xae, 0x43, 0x7f, 0x61, 0x91, 0xef, 0xa1, 0x95, 0x19, 0xf5, 0xcf, 0xf2, 0x18, 0x77,
	0x51, 0x9d, 0x1c, 0x54, 0xf6, 0x67, 0xe3, 0x85, 0x45, 0xbe, 0x85, 0xe6, 0xce, 0xd5, 0xa5, 0x79,
	0xfc, 0xdb, 0x98, 0x0e, 0xcd, 0x63, 0xdf, 0xe1, 0xf9, 0x11, 0xda, 0xb9, 0x8f, 0xa1, 0x5e, 0x01,
	0x7f, 0x06, 0xd9, 0xe9, 0x15, 0xa8, 0x64, 0x39, 0xdf, 0x80, 0x5d, 0xf8, 0x90, 0x3b, 0xbd, 0xaf,
	0x5e, 0x8c, 0xee, 0x9c, 0xde, 0x57, 0x33, 0x46, 0xbf, 0xea, 0x7f, 0x77, 0x3a, 0x11, 0x7a, 0xba,
	0x18, 0xf5, 0xbd, 0xc0, 0x1f, 0xf8, 0x42, 0xf2, 0x88, 0xcd, 0x23, 0xae, 0x06, 0xe9, 0x83, 0x35,
	0x9c, 0x4d, 0x06, 0xe1, 0x28, 0x5d, 0x8e, 0x2a, 0xf8, 0x6a, 0xfd, 0xf8, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xee, 0x24, 0xb2, 0x5a, 0x2a, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DCenterClient is the client API for DCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DCenterClient interface {
	// 保存K线数据
	// rpc SaveKline(ReqSaveKline) returns (RspSaveKline);
	// 订阅行情
	Subscribe(ctx context.Context, in *ReqSubscribe, opts ...grpc.CallOption) (DCenter_SubscribeClient, error)
	// 推送tick行情
	// rpc UpdateTick(MarketDataSnapshot) returns (EmptyResponse);
	// 复杂订阅.同时返回K线
	CombineSubscribe(ctx context.Context, in *ReqCombineSubscribe, opts ...grpc.CallOption) (DCenter_CombineSubscribeClient, error)
	// 数据库情况
	GetDCenterInfo(ctx context.Context, in *ReqGetDCenterInfo, opts ...grpc.CallOption) (*RspGetDCenterInfo, error)
	// 合约
	// rpc SetTradingInstrument(ReqSetTradingInstrument)
	//     returns (RspSetTradingInstrument);
	// 读取合约
	GetTradingInstrument(ctx context.Context, in *ReqGetTradingInstrument, opts ...grpc.CallOption) (*RspGetTradingInstrument, error)
	// 全部合约
	GetTradingInstrumentList(ctx context.Context, in *ReqGetTradingInstrumentList, opts ...grpc.CallOption) (*RspGetTradingInstrumentList, error)
}

type dCenterClient struct {
	cc *grpc.ClientConn
}

func NewDCenterClient(cc *grpc.ClientConn) DCenterClient {
	return &dCenterClient{cc}
}

func (c *dCenterClient) Subscribe(ctx context.Context, in *ReqSubscribe, opts ...grpc.CallOption) (DCenter_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DCenter_serviceDesc.Streams[0], "/goshare.goshare.DCenter/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dCenterSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DCenter_SubscribeClient interface {
	Recv() (*MarketDataSnapshot, error)
	grpc.ClientStream
}

type dCenterSubscribeClient struct {
	grpc.ClientStream
}

func (x *dCenterSubscribeClient) Recv() (*MarketDataSnapshot, error) {
	m := new(MarketDataSnapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dCenterClient) CombineSubscribe(ctx context.Context, in *ReqCombineSubscribe, opts ...grpc.CallOption) (DCenter_CombineSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DCenter_serviceDesc.Streams[1], "/goshare.goshare.DCenter/CombineSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dCenterCombineSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DCenter_CombineSubscribeClient interface {
	Recv() (*RspCombineSubscribe, error)
	grpc.ClientStream
}

type dCenterCombineSubscribeClient struct {
	grpc.ClientStream
}

func (x *dCenterCombineSubscribeClient) Recv() (*RspCombineSubscribe, error) {
	m := new(RspCombineSubscribe)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dCenterClient) GetDCenterInfo(ctx context.Context, in *ReqGetDCenterInfo, opts ...grpc.CallOption) (*RspGetDCenterInfo, error) {
	out := new(RspGetDCenterInfo)
	err := c.cc.Invoke(ctx, "/goshare.goshare.DCenter/GetDCenterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dCenterClient) GetTradingInstrument(ctx context.Context, in *ReqGetTradingInstrument, opts ...grpc.CallOption) (*RspGetTradingInstrument, error) {
	out := new(RspGetTradingInstrument)
	err := c.cc.Invoke(ctx, "/goshare.goshare.DCenter/GetTradingInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dCenterClient) GetTradingInstrumentList(ctx context.Context, in *ReqGetTradingInstrumentList, opts ...grpc.CallOption) (*RspGetTradingInstrumentList, error) {
	out := new(RspGetTradingInstrumentList)
	err := c.cc.Invoke(ctx, "/goshare.goshare.DCenter/GetTradingInstrumentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DCenterServer is the server API for DCenter service.
type DCenterServer interface {
	// 保存K线数据
	// rpc SaveKline(ReqSaveKline) returns (RspSaveKline);
	// 订阅行情
	Subscribe(*ReqSubscribe, DCenter_SubscribeServer) error
	// 推送tick行情
	// rpc UpdateTick(MarketDataSnapshot) returns (EmptyResponse);
	// 复杂订阅.同时返回K线
	CombineSubscribe(*ReqCombineSubscribe, DCenter_CombineSubscribeServer) error
	// 数据库情况
	GetDCenterInfo(context.Context, *ReqGetDCenterInfo) (*RspGetDCenterInfo, error)
	// 合约
	// rpc SetTradingInstrument(ReqSetTradingInstrument)
	//     returns (RspSetTradingInstrument);
	// 读取合约
	GetTradingInstrument(context.Context, *ReqGetTradingInstrument) (*RspGetTradingInstrument, error)
	// 全部合约
	GetTradingInstrumentList(context.Context, *ReqGetTradingInstrumentList) (*RspGetTradingInstrumentList, error)
}

// UnimplementedDCenterServer can be embedded to have forward compatible implementations.
type UnimplementedDCenterServer struct {
}

func (*UnimplementedDCenterServer) Subscribe(req *ReqSubscribe, srv DCenter_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedDCenterServer) CombineSubscribe(req *ReqCombineSubscribe, srv DCenter_CombineSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method CombineSubscribe not implemented")
}
func (*UnimplementedDCenterServer) GetDCenterInfo(ctx context.Context, req *ReqGetDCenterInfo) (*RspGetDCenterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDCenterInfo not implemented")
}
func (*UnimplementedDCenterServer) GetTradingInstrument(ctx context.Context, req *ReqGetTradingInstrument) (*RspGetTradingInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradingInstrument not implemented")
}
func (*UnimplementedDCenterServer) GetTradingInstrumentList(ctx context.Context, req *ReqGetTradingInstrumentList) (*RspGetTradingInstrumentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradingInstrumentList not implemented")
}

func RegisterDCenterServer(s *grpc.Server, srv DCenterServer) {
	s.RegisterService(&_DCenter_serviceDesc, srv)
}

func _DCenter_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqSubscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DCenterServer).Subscribe(m, &dCenterSubscribeServer{stream})
}

type DCenter_SubscribeServer interface {
	Send(*MarketDataSnapshot) error
	grpc.ServerStream
}

type dCenterSubscribeServer struct {
	grpc.ServerStream
}

func (x *dCenterSubscribeServer) Send(m *MarketDataSnapshot) error {
	return x.ServerStream.SendMsg(m)
}

func _DCenter_CombineSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqCombineSubscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DCenterServer).CombineSubscribe(m, &dCenterCombineSubscribeServer{stream})
}

type DCenter_CombineSubscribeServer interface {
	Send(*RspCombineSubscribe) error
	grpc.ServerStream
}

type dCenterCombineSubscribeServer struct {
	grpc.ServerStream
}

func (x *dCenterCombineSubscribeServer) Send(m *RspCombineSubscribe) error {
	return x.ServerStream.SendMsg(m)
}

func _DCenter_GetDCenterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetDCenterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DCenterServer).GetDCenterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshare.goshare.DCenter/GetDCenterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DCenterServer).GetDCenterInfo(ctx, req.(*ReqGetDCenterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DCenter_GetTradingInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetTradingInstrument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DCenterServer).GetTradingInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshare.goshare.DCenter/GetTradingInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DCenterServer).GetTradingInstrument(ctx, req.(*ReqGetTradingInstrument))
	}
	return interceptor(ctx, in, info, handler)
}

func _DCenter_GetTradingInstrumentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetTradingInstrumentList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DCenterServer).GetTradingInstrumentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshare.goshare.DCenter/GetTradingInstrumentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DCenterServer).GetTradingInstrumentList(ctx, req.(*ReqGetTradingInstrumentList))
	}
	return interceptor(ctx, in, info, handler)
}

var _DCenter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goshare.goshare.DCenter",
	HandlerType: (*DCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDCenterInfo",
			Handler:    _DCenter_GetDCenterInfo_Handler,
		},
		{
			MethodName: "GetTradingInstrument",
			Handler:    _DCenter_GetTradingInstrument_Handler,
		},
		{
			MethodName: "GetTradingInstrumentList",
			Handler:    _DCenter_GetTradingInstrumentList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _DCenter_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CombineSubscribe",
			Handler:       _DCenter_CombineSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "goshare/dcenter.proto",
}
