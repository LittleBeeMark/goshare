// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// enum 用户类型
type UserType int32

const (
	UserType_UT_NORMAL       UserType = 0
	UserType_UT_BRANCH_ADMIN UserType = 1
	UserType_UT_SYSTEM_ADMIN UserType = 2
)

var UserType_name = map[int32]string{
	0: "UT_NORMAL",
	1: "UT_BRANCH_ADMIN",
	2: "UT_SYSTEM_ADMIN",
}
var UserType_value = map[string]int32{
	"UT_NORMAL":       0,
	"UT_BRANCH_ADMIN": 1,
	"UT_SYSTEM_ADMIN": 2,
}

func (x UserType) String() string {
	return proto.EnumName(UserType_name, int32(x))
}
func (UserType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

// UserStatus 状态
type UserStatus int32

const (
	UserStatus_US_NORMAL  UserStatus = 0
	UserStatus_US_FROZEN  UserStatus = 1
	UserStatus_US_DELETED UserStatus = 2
)

var UserStatus_name = map[int32]string{
	0: "US_NORMAL",
	1: "US_FROZEN",
	2: "US_DELETED",
}
var UserStatus_value = map[string]int32{
	"US_NORMAL":  0,
	"US_FROZEN":  1,
	"US_DELETED": 2,
}

func (x UserStatus) String() string {
	return proto.EnumName(UserStatus_name, int32(x))
}
func (UserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

// 用户
type User struct {
	Id     string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name   string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type   UserType   `protobuf:"varint,3,opt,name=type,enum=pb.UserType" json:"type,omitempty"`
	Status UserStatus `protobuf:"varint,4,opt,name=status,enum=pb.UserStatus" json:"status,omitempty"`
	Roles  []int64    `protobuf:"varint,5,rep,packed,name=roles" json:"roles,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetType() UserType {
	if m != nil {
		return m.Type
	}
	return UserType_UT_NORMAL
}

func (m *User) GetStatus() UserStatus {
	if m != nil {
		return m.Status
	}
	return UserStatus_US_NORMAL
}

func (m *User) GetRoles() []int64 {
	if m != nil {
		return m.Roles
	}
	return nil
}

// Permission 权限
type Permission struct {
	Id    int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Menus []string `protobuf:"bytes,3,rep,name=menus" json:"menus,omitempty"`
	Apis  []string `protobuf:"bytes,4,rep,name=apis" json:"apis,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *Permission) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Permission) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Permission) GetMenus() []string {
	if m != nil {
		return m.Menus
	}
	return nil
}

func (m *Permission) GetApis() []string {
	if m != nil {
		return m.Apis
	}
	return nil
}

// PermissionTreeNode 权限树节点
type PermissionTreeNode struct {
	Permission *Permission           `protobuf:"bytes,1,opt,name=permission" json:"permission,omitempty"`
	Selected   bool                  `protobuf:"varint,2,opt,name=selected" json:"selected,omitempty"`
	Children   []*PermissionTreeNode `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
}

func (m *PermissionTreeNode) Reset()                    { *m = PermissionTreeNode{} }
func (m *PermissionTreeNode) String() string            { return proto.CompactTextString(m) }
func (*PermissionTreeNode) ProtoMessage()               {}
func (*PermissionTreeNode) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *PermissionTreeNode) GetPermission() *Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

func (m *PermissionTreeNode) GetSelected() bool {
	if m != nil {
		return m.Selected
	}
	return false
}

func (m *PermissionTreeNode) GetChildren() []*PermissionTreeNode {
	if m != nil {
		return m.Children
	}
	return nil
}

// PermissionList 权限列表
type PermissionList struct {
	List []*Permission `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *PermissionList) Reset()                    { *m = PermissionList{} }
func (m *PermissionList) String() string            { return proto.CompactTextString(m) }
func (*PermissionList) ProtoMessage()               {}
func (*PermissionList) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *PermissionList) GetList() []*Permission {
	if m != nil {
		return m.List
	}
	return nil
}

// 角色
type UserRole struct {
	Id          int64         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Discription string        `protobuf:"bytes,3,opt,name=discription" json:"discription,omitempty"`
	Permissions []*Permission `protobuf:"bytes,4,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *UserRole) Reset()                    { *m = UserRole{} }
func (m *UserRole) String() string            { return proto.CompactTextString(m) }
func (*UserRole) ProtoMessage()               {}
func (*UserRole) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *UserRole) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserRole) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserRole) GetDiscription() string {
	if m != nil {
		return m.Discription
	}
	return ""
}

func (m *UserRole) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// 用户会话
type UserSession struct {
	Id       string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Token    string     `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Type     UserType   `protobuf:"varint,3,opt,name=type,enum=pb.UserType" json:"type,omitempty"`
	Status   UserStatus `protobuf:"varint,4,opt,name=status,enum=pb.UserStatus" json:"status,omitempty"`
	Roles    []int64    `protobuf:"varint,5,rep,packed,name=roles" json:"roles,omitempty"`
	Deadline int64      `protobuf:"varint,6,opt,name=deadline" json:"deadline,omitempty"`
}

func (m *UserSession) Reset()                    { *m = UserSession{} }
func (m *UserSession) String() string            { return proto.CompactTextString(m) }
func (*UserSession) ProtoMessage()               {}
func (*UserSession) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *UserSession) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserSession) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserSession) GetType() UserType {
	if m != nil {
		return m.Type
	}
	return UserType_UT_NORMAL
}

func (m *UserSession) GetStatus() UserStatus {
	if m != nil {
		return m.Status
	}
	return UserStatus_US_NORMAL
}

func (m *UserSession) GetRoles() []int64 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *UserSession) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func init() {
	proto.RegisterType((*User)(nil), "pb.User")
	proto.RegisterType((*Permission)(nil), "pb.Permission")
	proto.RegisterType((*PermissionTreeNode)(nil), "pb.PermissionTreeNode")
	proto.RegisterType((*PermissionList)(nil), "pb.PermissionList")
	proto.RegisterType((*UserRole)(nil), "pb.UserRole")
	proto.RegisterType((*UserSession)(nil), "pb.UserSession")
	proto.RegisterEnum("pb.UserType", UserType_name, UserType_value)
	proto.RegisterEnum("pb.UserStatus", UserStatus_name, UserStatus_value)
}

func init() { proto.RegisterFile("user.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0x65, 0x6d, 0x27, 0x4a, 0xc6, 0x60, 0xa2, 0x25, 0x42, 0x16, 0x95, 0xe5, 0x02, 0x45, 0x57,
	0x44, 0x28, 0x50, 0xd1, 0x85, 0x8b, 0x11, 0x48, 0x49, 0x0e, 0xad, 0x9d, 0x82, 0x6b, 0xa2, 0x24,
	0x1e, 0x89, 0x15, 0x8e, 0x6d, 0x79, 0x37, 0xc5, 0xb5, 0x94, 0xd4, 0xfc, 0x07, 0xbf, 0x88, 0x76,
	0x36, 0x17, 0x9b, 0x43, 0x48, 0x34, 0x74, 0xfb, 0xde, 0x3c, 0xbf, 0x79, 0x3b, 0xb3, 0x06, 0x38,
	0x29, 0x6c, 0xa6, 0x75, 0x53, 0xe9, 0x8a, 0x3b, 0xf5, 0x3e, 0xfe, 0xce, 0xc0, 0xdb, 0x28, 0x6c,
	0x78, 0x00, 0x8e, 0xcc, 0x43, 0x16, 0xb1, 0xc9, 0x50, 0x38, 0x32, 0xe7, 0x1c, 0xbc, 0x72, 0x77,
	0xc4, 0xd0, 0x21, 0x86, 0xce, 0x3c, 0x02, 0x4f, 0xdf, 0xd5, 0x18, 0xba, 0x11, 0x9b, 0x04, 0xb3,
	0xc7, 0xd3, 0x7a, 0x3f, 0x35, 0xdf, 0x66, 0x77, 0x35, 0x0a, 0xaa, 0xf0, 0x97, 0xd0, 0x57, 0x7a,
	0xa7, 0x4f, 0x2a, 0xf4, 0x48, 0x13, 0xdc, 0x6b, 0x52, 0x62, 0xc5, 0xb9, 0xca, 0xc7, 0xd0, 0x6b,
	0xaa, 0x02, 0x55, 0xd8, 0x8b, 0xdc, 0x89, 0x2b, 0x2c, 0x88, 0x6f, 0x01, 0x3e, 0x61, 0x73, 0x94,
	0x4a, 0xc9, 0xaa, 0xec, 0x24, 0x72, 0xff, 0x9a, 0x68, 0x0c, 0xbd, 0x23, 0x96, 0x27, 0x15, 0xba,
	0x91, 0x3b, 0x19, 0x0a, 0x0b, 0x8c, 0x72, 0x57, 0x4b, 0x93, 0xc1, 0x90, 0x74, 0x8e, 0x7f, 0x30,
	0xe0, 0xad, 0x79, 0xd6, 0x20, 0xae, 0xab, 0x1c, 0xf9, 0x14, 0xa0, 0xbe, 0xb0, 0xd4, 0xcc, 0xb7,
	0xa1, 0x5b, 0xad, 0xe8, 0x28, 0xf8, 0x0b, 0x18, 0x28, 0x2c, 0xf0, 0xa0, 0x31, 0xa7, 0x20, 0x03,
	0x71, 0xc1, 0x7c, 0x06, 0x83, 0xc3, 0x17, 0x59, 0xe4, 0x0d, 0x96, 0x94, 0xc7, 0x9f, 0x3d, 0xff,
	0xdd, 0xe9, 0xbe, 0xab, 0xb8, 0xe8, 0xe2, 0x37, 0x10, 0xb4, 0xf5, 0xa5, 0x54, 0x9a, 0xc7, 0xe0,
	0x15, 0x52, 0xe9, 0x90, 0x91, 0xc3, 0xc3, 0x2c, 0x54, 0x8b, 0xbf, 0x31, 0x18, 0x98, 0xa9, 0x8a,
	0xaa, 0xc0, 0x7f, 0x9a, 0x53, 0x04, 0x7e, 0x2e, 0xd5, 0xa1, 0x91, 0xb5, 0x36, 0xf7, 0x74, 0xa9,
	0xd4, 0xa5, 0xf8, 0x2b, 0xf0, 0xdb, 0x6b, 0xda, 0xd1, 0xfd, 0xd9, 0xbd, 0x2b, 0x89, 0x7f, 0x32,
	0xf0, 0x69, 0xb5, 0xf8, 0x70, 0x5f, 0xf6, 0x05, 0x8d, 0xa1, 0xa7, 0xab, 0xaf, 0x58, 0x9e, 0x83,
	0x58, 0xf0, 0xbf, 0xdf, 0x90, 0x59, 0x50, 0x8e, 0xbb, 0xbc, 0x90, 0x25, 0x86, 0x7d, 0x9a, 0xc9,
	0x05, 0x5f, 0x5d, 0xdb, 0xa9, 0x99, 0x5e, 0xfc, 0x09, 0x0c, 0x37, 0xd9, 0x76, 0x7d, 0x23, 0x56,
	0xf3, 0xe5, 0xe8, 0x11, 0x7f, 0x06, 0x4f, 0x37, 0xd9, 0xf6, 0x9d, 0x98, 0xaf, 0xaf, 0x3f, 0x6c,
	0xe7, 0x8b, 0xd5, 0xc7, 0xf5, 0x88, 0x9d, 0xc9, 0xf4, 0x73, 0x9a, 0x25, 0xab, 0x33, 0xe9, 0x5c,
	0xbd, 0x05, 0x68, 0xc3, 0x90, 0x4d, 0xda, 0xda, 0x58, 0xf8, 0x5e, 0xdc, 0xdc, 0x26, 0xc6, 0x20,
	0x00, 0xd8, 0xa4, 0xdb, 0x45, 0xb2, 0x4c, 0xb2, 0x64, 0x31, 0x72, 0xf6, 0x7d, 0xfa, 0xf1, 0x5e,
	0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x40, 0x33, 0x25, 0xb6, 0x86, 0x03, 0x00, 0x00,
}
