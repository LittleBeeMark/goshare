// Code generated by protoc-gen-go. DO NOT EDIT.
// source: others.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NetInAmountDetail struct {
	Amount     float64 `protobuf:"fixed64,1,opt,name=amount" json:"amount,omitempty"`
	Percentage float64 `protobuf:"fixed64,2,opt,name=percentage" json:"percentage,omitempty"`
}

func (m *NetInAmountDetail) Reset()                    { *m = NetInAmountDetail{} }
func (m *NetInAmountDetail) String() string            { return proto.CompactTextString(m) }
func (*NetInAmountDetail) ProtoMessage()               {}
func (*NetInAmountDetail) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *NetInAmountDetail) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *NetInAmountDetail) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

type RealtimeMoneyTrendItem struct {
	Symbol           *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Price            float64 `protobuf:"fixed64,3,opt,name=price" json:"price,omitempty"`
	UpdownPercentage float64 `protobuf:"fixed64,4,opt,name=updown_percentage,json=updownPercentage" json:"updown_percentage,omitempty"`
	Time             int64   `protobuf:"varint,6,opt,name=time" json:"time,omitempty"`
	// 主力净流入
	SuperSuperBigOrder *NetInAmountDetail `protobuf:"bytes,7,opt,name=super_super_big_order,json=superSuperBigOrder" json:"super_super_big_order,omitempty"`
	// 超大单净流入
	SuperBigOrder *NetInAmountDetail `protobuf:"bytes,8,opt,name=super_big_order,json=superBigOrder" json:"super_big_order,omitempty"`
	// 大单净流入
	BigOrder *NetInAmountDetail `protobuf:"bytes,9,opt,name=big_order,json=bigOrder" json:"big_order,omitempty"`
	// 中单净流入
	MiddleOrder *NetInAmountDetail `protobuf:"bytes,10,opt,name=middle_order,json=middleOrder" json:"middle_order,omitempty"`
	// 小单净流入
	SmallOrder *NetInAmountDetail `protobuf:"bytes,11,opt,name=small_order,json=smallOrder" json:"small_order,omitempty"`
}

func (m *RealtimeMoneyTrendItem) Reset()                    { *m = RealtimeMoneyTrendItem{} }
func (m *RealtimeMoneyTrendItem) String() string            { return proto.CompactTextString(m) }
func (*RealtimeMoneyTrendItem) ProtoMessage()               {}
func (*RealtimeMoneyTrendItem) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *RealtimeMoneyTrendItem) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *RealtimeMoneyTrendItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RealtimeMoneyTrendItem) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *RealtimeMoneyTrendItem) GetUpdownPercentage() float64 {
	if m != nil {
		return m.UpdownPercentage
	}
	return 0
}

func (m *RealtimeMoneyTrendItem) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RealtimeMoneyTrendItem) GetSuperSuperBigOrder() *NetInAmountDetail {
	if m != nil {
		return m.SuperSuperBigOrder
	}
	return nil
}

func (m *RealtimeMoneyTrendItem) GetSuperBigOrder() *NetInAmountDetail {
	if m != nil {
		return m.SuperBigOrder
	}
	return nil
}

func (m *RealtimeMoneyTrendItem) GetBigOrder() *NetInAmountDetail {
	if m != nil {
		return m.BigOrder
	}
	return nil
}

func (m *RealtimeMoneyTrendItem) GetMiddleOrder() *NetInAmountDetail {
	if m != nil {
		return m.MiddleOrder
	}
	return nil
}

func (m *RealtimeMoneyTrendItem) GetSmallOrder() *NetInAmountDetail {
	if m != nil {
		return m.SmallOrder
	}
	return nil
}

type RealtimeMoneyTrendItemList struct {
	List []*RealtimeMoneyTrendItem `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *RealtimeMoneyTrendItemList) Reset()                    { *m = RealtimeMoneyTrendItemList{} }
func (m *RealtimeMoneyTrendItemList) String() string            { return proto.CompactTextString(m) }
func (*RealtimeMoneyTrendItemList) ProtoMessage()               {}
func (*RealtimeMoneyTrendItemList) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *RealtimeMoneyTrendItemList) GetList() []*RealtimeMoneyTrendItem {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*NetInAmountDetail)(nil), "pb.NetInAmountDetail")
	proto.RegisterType((*RealtimeMoneyTrendItem)(nil), "pb.RealtimeMoneyTrendItem")
	proto.RegisterType((*RealtimeMoneyTrendItemList)(nil), "pb.RealtimeMoneyTrendItemList")
}

func init() { proto.RegisterFile("others.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x49, 0x53, 0x63, 0x3b, 0xa9, 0x68, 0x17, 0x5b, 0x42, 0x0f, 0x52, 0x72, 0x2a, 0x08,
	0x39, 0x54, 0x10, 0x2f, 0x1e, 0x14, 0x0f, 0x16, 0xeb, 0x1f, 0x52, 0xef, 0x25, 0x69, 0x86, 0xba,
	0x90, 0xdd, 0x0d, 0x9b, 0x2d, 0xd2, 0x2f, 0xea, 0xe7, 0x91, 0xcc, 0x46, 0xad, 0x5a, 0x72, 0x59,
	0x76, 0x66, 0xde, 0xef, 0xe5, 0x91, 0x1d, 0xe8, 0x29, 0xf3, 0x86, 0xba, 0x8c, 0x0a, 0xad, 0x8c,
	0x62, 0xad, 0x22, 0x1d, 0xf5, 0x56, 0x4a, 0x08, 0x25, 0x6d, 0x27, 0x7c, 0x80, 0xfe, 0x13, 0x9a,
	0x99, 0xbc, 0x11, 0x6a, 0x23, 0xcd, 0x1d, 0x9a, 0x84, 0xe7, 0x6c, 0x08, 0x5e, 0x42, 0x75, 0xe0,
	0x8c, 0x9d, 0x89, 0x13, 0xd7, 0x15, 0x3b, 0x03, 0x28, 0x50, 0xaf, 0x50, 0x9a, 0x64, 0x8d, 0x41,
	0x8b, 0x66, 0x3b, 0x9d, 0xf0, 0xc3, 0x85, 0x61, 0x8c, 0x49, 0x6e, 0xb8, 0xc0, 0x47, 0x25, 0x71,
	0xfb, 0xaa, 0x51, 0x66, 0x33, 0x83, 0x82, 0x85, 0xe0, 0x95, 0x5b, 0x91, 0xaa, 0x9c, 0x2c, 0xfd,
	0x29, 0x44, 0x45, 0x1a, 0x2d, 0xa8, 0x13, 0xd7, 0x13, 0xc6, 0xa0, 0x2d, 0x13, 0x61, 0x8d, 0xbb,
	0x31, 0xdd, 0xd9, 0x29, 0x1c, 0x14, 0x9a, 0xaf, 0x30, 0x70, 0xe9, 0x6b, 0xb6, 0x60, 0xe7, 0xd0,
	0xdf, 0x14, 0x99, 0x7a, 0x97, 0xcb, 0x9d, 0x3c, 0x6d, 0x52, 0x9c, 0xd8, 0xc1, 0xcb, 0x77, 0xbf,
	0xb2, 0xad, 0x02, 0x05, 0xde, 0xd8, 0x99, 0xb8, 0x31, 0xdd, 0xd9, 0x3d, 0x0c, 0xca, 0x4d, 0x81,
	0x7a, 0x69, 0xcf, 0x94, 0xaf, 0x97, 0x4a, 0x67, 0xa8, 0x83, 0x43, 0x4a, 0x37, 0xa8, 0xd2, 0xfd,
	0xfb, 0x2f, 0x31, 0x23, 0xf5, 0xa2, 0x3a, 0x6e, 0xf9, 0xfa, 0xb9, 0x02, 0xd8, 0x35, 0x1c, 0xff,
	0xf5, 0xe8, 0x34, 0x79, 0x1c, 0x95, 0xbf, 0xf0, 0x29, 0x74, 0x7f, 0xc0, 0x6e, 0x13, 0xd8, 0x49,
	0xbf, 0x98, 0x2b, 0xe8, 0x09, 0x9e, 0x65, 0x39, 0xd6, 0x18, 0x34, 0x61, 0xbe, 0x95, 0x5a, 0xf2,
	0x12, 0xfc, 0x52, 0x24, 0x79, 0x5e, 0x83, 0x7e, 0x13, 0x08, 0xa4, 0x24, 0x2e, 0x9c, 0xc3, 0x68,
	0xff, 0xbb, 0xce, 0x79, 0x69, 0x58, 0x04, 0xed, 0x9c, 0x97, 0xd5, 0xb2, 0xb8, 0x13, 0x7f, 0x3a,
	0xaa, 0xec, 0xf6, 0xab, 0x63, 0xd2, 0xa5, 0x1e, 0xad, 0xde, 0xc5, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x08, 0xd9, 0x5e, 0xa1, 0x9c, 0x02, 0x00, 0x00,
}
