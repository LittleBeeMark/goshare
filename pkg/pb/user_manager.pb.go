// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user_manager.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReqCheckAPIPermission struct {
	Type UserType `protobuf:"varint,1,opt,name=type,enum=pb.UserType" json:"type,omitempty"`
	Api  string   `protobuf:"bytes,2,opt,name=api" json:"api,omitempty"`
}

func (m *ReqCheckAPIPermission) Reset()                    { *m = ReqCheckAPIPermission{} }
func (m *ReqCheckAPIPermission) String() string            { return proto.CompactTextString(m) }
func (*ReqCheckAPIPermission) ProtoMessage()               {}
func (*ReqCheckAPIPermission) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *ReqCheckAPIPermission) GetType() UserType {
	if m != nil {
		return m.Type
	}
	return UserType_UT_NORMAL
}

func (m *ReqCheckAPIPermission) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

type RspCheckAPIPermission struct {
	Passed bool `protobuf:"varint,1,opt,name=passed" json:"passed,omitempty"`
}

func (m *RspCheckAPIPermission) Reset()                    { *m = RspCheckAPIPermission{} }
func (m *RspCheckAPIPermission) String() string            { return proto.CompactTextString(m) }
func (*RspCheckAPIPermission) ProtoMessage()               {}
func (*RspCheckAPIPermission) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *RspCheckAPIPermission) GetPassed() bool {
	if m != nil {
		return m.Passed
	}
	return false
}

type ReqCheckResourcePermission struct {
	Type     UserType `protobuf:"varint,1,opt,name=type,enum=pb.UserType" json:"type,omitempty"`
	Resource int64    `protobuf:"varint,2,opt,name=resource" json:"resource,omitempty"`
}

func (m *ReqCheckResourcePermission) Reset()                    { *m = ReqCheckResourcePermission{} }
func (m *ReqCheckResourcePermission) String() string            { return proto.CompactTextString(m) }
func (*ReqCheckResourcePermission) ProtoMessage()               {}
func (*ReqCheckResourcePermission) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *ReqCheckResourcePermission) GetType() UserType {
	if m != nil {
		return m.Type
	}
	return UserType_UT_NORMAL
}

func (m *ReqCheckResourcePermission) GetResource() int64 {
	if m != nil {
		return m.Resource
	}
	return 0
}

type RspCheckResourcePermission struct {
	Passed bool `protobuf:"varint,1,opt,name=passed" json:"passed,omitempty"`
}

func (m *RspCheckResourcePermission) Reset()                    { *m = RspCheckResourcePermission{} }
func (m *RspCheckResourcePermission) String() string            { return proto.CompactTextString(m) }
func (*RspCheckResourcePermission) ProtoMessage()               {}
func (*RspCheckResourcePermission) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *RspCheckResourcePermission) GetPassed() bool {
	if m != nil {
		return m.Passed
	}
	return false
}

type ReqUserLogin struct {
	User     string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *ReqUserLogin) Reset()                    { *m = ReqUserLogin{} }
func (m *ReqUserLogin) String() string            { return proto.CompactTextString(m) }
func (*ReqUserLogin) ProtoMessage()               {}
func (*ReqUserLogin) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

func (m *ReqUserLogin) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ReqUserLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ReqUserLogin) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type RspUserLogin struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *RspUserLogin) Reset()                    { *m = RspUserLogin{} }
func (m *RspUserLogin) String() string            { return proto.CompactTextString(m) }
func (*RspUserLogin) ProtoMessage()               {}
func (*RspUserLogin) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *RspUserLogin) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RspUserLogin) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type I18Item struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *I18Item) Reset()                    { *m = I18Item{} }
func (m *I18Item) String() string            { return proto.CompactTextString(m) }
func (*I18Item) ProtoMessage()               {}
func (*I18Item) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *I18Item) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RouteItem struct {
	Icon               string   `protobuf:"bytes,1,opt,name=icon" json:"icon,omitempty"`
	Id                 string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name               string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	En                 *I18Item `protobuf:"bytes,4,opt,name=en" json:"en,omitempty"`
	Zh                 *I18Item `protobuf:"bytes,5,opt,name=zh" json:"zh,omitempty"`
	Route              string   `protobuf:"bytes,6,opt,name=route" json:"route,omitempty"`
	BreadcrumbParentId string   `protobuf:"bytes,7,opt,name=breadcrumb_parent_id,json=breadcrumbParentId" json:"breadcrumb_parent_id,omitempty"`
	MenuParentId       string   `protobuf:"bytes,8,opt,name=menu_parent_id,json=menuParentId" json:"menu_parent_id,omitempty"`
}

func (m *RouteItem) Reset()                    { *m = RouteItem{} }
func (m *RouteItem) String() string            { return proto.CompactTextString(m) }
func (*RouteItem) ProtoMessage()               {}
func (*RouteItem) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{7} }

func (m *RouteItem) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *RouteItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RouteItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteItem) GetEn() *I18Item {
	if m != nil {
		return m.En
	}
	return nil
}

func (m *RouteItem) GetZh() *I18Item {
	if m != nil {
		return m.Zh
	}
	return nil
}

func (m *RouteItem) GetRoute() string {
	if m != nil {
		return m.Route
	}
	return ""
}

func (m *RouteItem) GetBreadcrumbParentId() string {
	if m != nil {
		return m.BreadcrumbParentId
	}
	return ""
}

func (m *RouteItem) GetMenuParentId() string {
	if m != nil {
		return m.MenuParentId
	}
	return ""
}

type RspGetRoutes struct {
	List []*RouteItem `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *RspGetRoutes) Reset()                    { *m = RspGetRoutes{} }
func (m *RspGetRoutes) String() string            { return proto.CompactTextString(m) }
func (*RspGetRoutes) ProtoMessage()               {}
func (*RspGetRoutes) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{8} }

func (m *RspGetRoutes) GetList() []*RouteItem {
	if m != nil {
		return m.List
	}
	return nil
}

type XUser struct {
	Avatar      string       `protobuf:"bytes,1,opt,name=avatar" json:"avatar,omitempty"`
	Id          int32        `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Username    string       `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Permissions *XPermission `protobuf:"bytes,4,opt,name=permissions" json:"permissions,omitempty"`
}

func (m *XUser) Reset()                    { *m = XUser{} }
func (m *XUser) String() string            { return proto.CompactTextString(m) }
func (*XUser) ProtoMessage()               {}
func (*XUser) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{9} }

func (m *XUser) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *XUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *XUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *XUser) GetPermissions() *XPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type RspCurrentUser struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	User    *XUser `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *RspCurrentUser) Reset()                    { *m = RspCurrentUser{} }
func (m *RspCurrentUser) String() string            { return proto.CompactTextString(m) }
func (*RspCurrentUser) ProtoMessage()               {}
func (*RspCurrentUser) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{10} }

func (m *RspCurrentUser) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RspCurrentUser) GetUser() *XUser {
	if m != nil {
		return m.User
	}
	return nil
}

type XPermission struct {
	Role  string   `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	Visit []string `protobuf:"bytes,2,rep,name=visit" json:"visit,omitempty"`
}

func (m *XPermission) Reset()                    { *m = XPermission{} }
func (m *XPermission) String() string            { return proto.CompactTextString(m) }
func (*XPermission) ProtoMessage()               {}
func (*XPermission) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{11} }

func (m *XPermission) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *XPermission) GetVisit() []string {
	if m != nil {
		return m.Visit
	}
	return nil
}

type XUsersItem struct {
	Address    string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Age        int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	Avatar     string `protobuf:"bytes,3,opt,name=avatar" json:"avatar,omitempty"`
	CreateTime string `protobuf:"bytes,4,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	Email      string `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	Id         string `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
	IsMale     bool   `protobuf:"varint,7,opt,name=is_male,json=isMale" json:"is_male,omitempty"`
	Name       string `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	NickName   string `protobuf:"bytes,9,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Phone      string `protobuf:"bytes,10,opt,name=phone" json:"phone,omitempty"`
}

func (m *XUsersItem) Reset()                    { *m = XUsersItem{} }
func (m *XUsersItem) String() string            { return proto.CompactTextString(m) }
func (*XUsersItem) ProtoMessage()               {}
func (*XUsersItem) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{12} }

func (m *XUsersItem) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *XUsersItem) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *XUsersItem) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *XUsersItem) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *XUsersItem) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *XUsersItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *XUsersItem) GetIsMale() bool {
	if m != nil {
		return m.IsMale
	}
	return false
}

func (m *XUsersItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *XUsersItem) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *XUsersItem) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type XUsersItemList struct {
	List []*XUsersItem `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *XUsersItemList) Reset()                    { *m = XUsersItemList{} }
func (m *XUsersItemList) String() string            { return proto.CompactTextString(m) }
func (*XUsersItemList) ProtoMessage()               {}
func (*XUsersItemList) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{13} }

func (m *XUsersItemList) GetList() []*XUsersItem {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqCheckAPIPermission)(nil), "pb.ReqCheckAPIPermission")
	proto.RegisterType((*RspCheckAPIPermission)(nil), "pb.RspCheckAPIPermission")
	proto.RegisterType((*ReqCheckResourcePermission)(nil), "pb.ReqCheckResourcePermission")
	proto.RegisterType((*RspCheckResourcePermission)(nil), "pb.RspCheckResourcePermission")
	proto.RegisterType((*ReqUserLogin)(nil), "pb.ReqUserLogin")
	proto.RegisterType((*RspUserLogin)(nil), "pb.RspUserLogin")
	proto.RegisterType((*I18Item)(nil), "pb.I18Item")
	proto.RegisterType((*RouteItem)(nil), "pb.RouteItem")
	proto.RegisterType((*RspGetRoutes)(nil), "pb.RspGetRoutes")
	proto.RegisterType((*XUser)(nil), "pb.XUser")
	proto.RegisterType((*RspCurrentUser)(nil), "pb.RspCurrentUser")
	proto.RegisterType((*XPermission)(nil), "pb.XPermission")
	proto.RegisterType((*XUsersItem)(nil), "pb.XUsersItem")
	proto.RegisterType((*XUsersItemList)(nil), "pb.XUsersItemList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserManager service

type UserManagerClient interface {
	// UserLogin 登陆
	UserLogin(ctx context.Context, in *ReqUserLogin, opts ...grpc.CallOption) (*RspUserLogin, error)
	// UserLogout 登出
	UserLogout(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Routes 路由列表
	Routes(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RspGetRoutes, error)
	// 返回当前用户信息
	CurrentUser(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RspCurrentUser, error)
	// 用户列表
	Users(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*XUsersItemList, error)
	// 检查权限
	CheckAPIPermission(ctx context.Context, in *ReqCheckAPIPermission, opts ...grpc.CallOption) (*RspCheckAPIPermission, error)
	// 检查资源权限
	CheckResourcePermission(ctx context.Context, in *ReqCheckResourcePermission, opts ...grpc.CallOption) (*RspCheckResourcePermission, error)
}

type userManagerClient struct {
	cc *grpc.ClientConn
}

func NewUserManagerClient(cc *grpc.ClientConn) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) UserLogin(ctx context.Context, in *ReqUserLogin, opts ...grpc.CallOption) (*RspUserLogin, error) {
	out := new(RspUserLogin)
	err := grpc.Invoke(ctx, "/pb.UserManager/UserLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) UserLogout(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/pb.UserManager/UserLogout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) Routes(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RspGetRoutes, error) {
	out := new(RspGetRoutes)
	err := grpc.Invoke(ctx, "/pb.UserManager/Routes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) CurrentUser(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RspCurrentUser, error) {
	out := new(RspCurrentUser)
	err := grpc.Invoke(ctx, "/pb.UserManager/CurrentUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) Users(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*XUsersItemList, error) {
	out := new(XUsersItemList)
	err := grpc.Invoke(ctx, "/pb.UserManager/Users", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) CheckAPIPermission(ctx context.Context, in *ReqCheckAPIPermission, opts ...grpc.CallOption) (*RspCheckAPIPermission, error) {
	out := new(RspCheckAPIPermission)
	err := grpc.Invoke(ctx, "/pb.UserManager/CheckAPIPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) CheckResourcePermission(ctx context.Context, in *ReqCheckResourcePermission, opts ...grpc.CallOption) (*RspCheckResourcePermission, error) {
	out := new(RspCheckResourcePermission)
	err := grpc.Invoke(ctx, "/pb.UserManager/CheckResourcePermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserManager service

type UserManagerServer interface {
	// UserLogin 登陆
	UserLogin(context.Context, *ReqUserLogin) (*RspUserLogin, error)
	// UserLogout 登出
	UserLogout(context.Context, *EmptyRequest) (*EmptyResponse, error)
	// Routes 路由列表
	Routes(context.Context, *EmptyRequest) (*RspGetRoutes, error)
	// 返回当前用户信息
	CurrentUser(context.Context, *EmptyRequest) (*RspCurrentUser, error)
	// 用户列表
	Users(context.Context, *EmptyRequest) (*XUsersItemList, error)
	// 检查权限
	CheckAPIPermission(context.Context, *ReqCheckAPIPermission) (*RspCheckAPIPermission, error)
	// 检查资源权限
	CheckResourcePermission(context.Context, *ReqCheckResourcePermission) (*RspCheckResourcePermission, error)
}

func RegisterUserManagerServer(s *grpc.Server, srv UserManagerServer) {
	s.RegisterService(&_UserManager_serviceDesc, srv)
}

func _UserManager_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserManager/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).UserLogin(ctx, req.(*ReqUserLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserManager/UserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).UserLogout(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_Routes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Routes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserManager/Routes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Routes(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserManager/CurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).CurrentUser(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_Users_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Users(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserManager/Users",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Users(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_CheckAPIPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckAPIPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).CheckAPIPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserManager/CheckAPIPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).CheckAPIPermission(ctx, req.(*ReqCheckAPIPermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_CheckResourcePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckResourcePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).CheckResourcePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserManager/CheckResourcePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).CheckResourcePermission(ctx, req.(*ReqCheckResourcePermission))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _UserManager_UserLogin_Handler,
		},
		{
			MethodName: "UserLogout",
			Handler:    _UserManager_UserLogout_Handler,
		},
		{
			MethodName: "Routes",
			Handler:    _UserManager_Routes_Handler,
		},
		{
			MethodName: "CurrentUser",
			Handler:    _UserManager_CurrentUser_Handler,
		},
		{
			MethodName: "Users",
			Handler:    _UserManager_Users_Handler,
		},
		{
			MethodName: "CheckAPIPermission",
			Handler:    _UserManager_CheckAPIPermission_Handler,
		},
		{
			MethodName: "CheckResourcePermission",
			Handler:    _UserManager_CheckResourcePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_manager.proto",
}

func init() { proto.RegisterFile("user_manager.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x6e, 0xe4, 0xc4,
	0x13, 0x5e, 0x7b, 0xfe, 0xba, 0x66, 0x76, 0x76, 0x7f, 0xfd, 0x4b, 0x88, 0xd7, 0x4b, 0x96, 0xa1,
	0xc5, 0x21, 0xe2, 0x90, 0x21, 0x61, 0x25, 0x10, 0x37, 0xfe, 0x09, 0x8d, 0xc8, 0x46, 0x51, 0x6b,
	0x91, 0x56, 0x70, 0x18, 0xf5, 0x78, 0x4a, 0x93, 0xd6, 0x8e, 0xdd, 0x8e, 0xbb, 0x1d, 0x94, 0x3d,
	0x70, 0xe0, 0x15, 0x78, 0x15, 0xde, 0x84, 0x57, 0xe0, 0xc6, 0x03, 0x70, 0x45, 0x5d, 0xfe, 0x33,
	0x1e, 0x26, 0x39, 0x70, 0xab, 0xea, 0xfa, 0xfc, 0x55, 0xf9, 0xab, 0xaf, 0x6d, 0x60, 0x85, 0xc1,
	0x7c, 0x91, 0xc8, 0x54, 0xae, 0x31, 0x3f, 0xcd, 0x72, 0x6d, 0x35, 0xf3, 0xb3, 0x65, 0x34, 0x8e,
	0x75, 0x92, 0xe8, 0xb4, 0x3c, 0x89, 0xc0, 0xa1, 0xaa, 0xf8, 0xfd, 0xb5, 0xd6, 0xeb, 0x0d, 0xce,
	0x64, 0xa6, 0x66, 0x32, 0x4d, 0xb5, 0x95, 0x56, 0xe9, 0xd4, 0x94, 0x55, 0xfe, 0x3d, 0x1c, 0x0a,
	0xbc, 0xf9, 0xfa, 0x1a, 0xe3, 0xb7, 0x5f, 0x5e, 0xcd, 0xaf, 0x30, 0x4f, 0x94, 0x31, 0x4a, 0xa7,
	0x6c, 0x0a, 0x5d, 0x7b, 0x97, 0x61, 0xe8, 0x4d, 0xbd, 0x93, 0xc9, 0xf9, 0xf8, 0x34, 0x5b, 0x9e,
	0xfe, 0x60, 0x30, 0x7f, 0x7d, 0x97, 0xa1, 0xa0, 0x0a, 0x7b, 0x0a, 0x1d, 0x99, 0xa9, 0xd0, 0x9f,
	0x7a, 0x27, 0x81, 0x70, 0x21, 0x9f, 0xc1, 0xa1, 0x30, 0xd9, 0x3d, 0x64, 0xef, 0x41, 0x3f, 0x93,
	0xc6, 0xe0, 0x8a, 0xe8, 0x86, 0xa2, 0xca, 0xf8, 0x8f, 0x10, 0xd5, 0xdd, 0x05, 0x1a, 0x5d, 0xe4,
	0x31, 0xfe, 0xa7, 0x11, 0x22, 0x18, 0xe6, 0xd5, 0x73, 0x34, 0x47, 0x47, 0x34, 0x39, 0x7f, 0x09,
	0x51, 0x3d, 0xcc, 0x3d, 0xdc, 0x0f, 0x4d, 0x24, 0x60, 0x2c, 0xf0, 0xc6, 0xb5, 0xb9, 0xd0, 0x6b,
	0x95, 0x32, 0x06, 0x5d, 0xa7, 0x25, 0xa1, 0x02, 0x41, 0xb1, 0xeb, 0xea, 0xd0, 0x3f, 0xeb, 0x7c,
	0x55, 0xbd, 0x7d, 0x93, 0x3b, 0x3c, 0xcd, 0xdc, 0x29, 0xf1, 0x2e, 0xe6, 0x5f, 0xc1, 0x58, 0x98,
	0x6c, 0xcb, 0x19, 0xc2, 0x20, 0x41, 0x63, 0xe4, 0x1a, 0x2b, 0xda, 0x3a, 0x75, 0x15, 0x53, 0xc4,
	0x31, 0x1a, 0x43, 0xc4, 0x43, 0x51, 0xa7, 0xfc, 0x18, 0x06, 0xf3, 0xb3, 0xcf, 0xe7, 0x16, 0x13,
	0xd7, 0x22, 0x95, 0x49, 0xfd, 0x2c, 0xc5, 0xfc, 0x2f, 0x0f, 0x02, 0xa1, 0x0b, 0x8b, 0x35, 0x42,
	0xc5, 0x3a, 0xad, 0x11, 0x2e, 0x66, 0x13, 0xf0, 0x55, 0x3d, 0xae, 0xaf, 0x56, 0x0d, 0x4b, 0x67,
	0xcb, 0xc2, 0x9e, 0x83, 0x8f, 0x69, 0xd8, 0x9d, 0x7a, 0x27, 0xa3, 0xf3, 0x91, 0x93, 0xbb, 0x6a,
	0x29, 0x7c, 0x4c, 0x5d, 0xf1, 0xdd, 0x75, 0xd8, 0xbb, 0xa7, 0xf8, 0xee, 0x9a, 0x1d, 0x40, 0x2f,
	0x77, 0xed, 0xc3, 0x3e, 0xd1, 0x95, 0x09, 0xfb, 0x04, 0x0e, 0x96, 0x39, 0xca, 0x55, 0x9c, 0x17,
	0xc9, 0x72, 0x91, 0xc9, 0x1c, 0x53, 0xbb, 0x50, 0xab, 0x70, 0x40, 0x20, 0xb6, 0xad, 0x5d, 0x51,
	0x69, 0xbe, 0x62, 0x1f, 0xc1, 0x24, 0xc1, 0xb4, 0x68, 0x61, 0x87, 0x84, 0x1d, 0xbb, 0xd3, 0x1a,
	0xc5, 0xcf, 0x48, 0xd0, 0xef, 0xd0, 0xd2, 0x2b, 0x1b, 0xf6, 0x21, 0x74, 0x37, 0xca, 0xd8, 0xd0,
	0x9b, 0x76, 0x4e, 0x46, 0xe7, 0x8f, 0xdd, 0x70, 0x8d, 0x18, 0x82, 0x4a, 0xfc, 0x17, 0xe8, 0xbd,
	0x71, 0x1b, 0x70, 0x8b, 0x97, 0xb7, 0xd2, 0xca, 0x7a, 0xa5, 0x55, 0xd6, 0xd2, 0xa7, 0x47, 0xfa,
	0x44, 0x30, 0x74, 0xcb, 0x6e, 0x69, 0xd4, 0xe4, 0xec, 0x0c, 0x46, 0x59, 0x63, 0x25, 0x53, 0x09,
	0xf6, 0xc4, 0xb5, 0x7d, 0xb3, 0xb5, 0x98, 0x68, 0x63, 0xf8, 0x1c, 0x26, 0xce, 0x8d, 0x45, 0xee,
	0x5e, 0x81, 0x06, 0x69, 0xed, 0xda, 0xdb, 0xd9, 0x35, 0x3b, 0xae, 0x3c, 0xe7, 0x13, 0x6f, 0x40,
	0xbc, 0xee, 0x91, 0xd2, 0x7e, 0xfc, 0x33, 0x18, 0xb5, 0xda, 0xb8, 0x45, 0xe6, 0x7a, 0xd3, 0xd8,
	0xc1, 0xc5, 0x6e, 0x1d, 0xb7, 0xca, 0x28, 0x1b, 0xfa, 0xd3, 0x8e, 0x5b, 0x07, 0x25, 0xfc, 0x6f,
	0x0f, 0x80, 0x88, 0x0c, 0xb9, 0x24, 0x84, 0x81, 0x5c, 0xad, 0xf2, 0x7a, 0x80, 0x40, 0xd4, 0x29,
	0xdd, 0xec, 0x35, 0x56, 0x62, 0xb8, 0xb0, 0xa5, 0x5a, 0x67, 0x47, 0xb5, 0x0f, 0x60, 0x14, 0xe7,
	0x28, 0x2d, 0x2e, 0xac, 0x4a, 0x90, 0x94, 0x08, 0x04, 0x94, 0x47, 0xaf, 0x55, 0x42, 0x93, 0x60,
	0x22, 0xd5, 0x86, 0x8c, 0x13, 0x88, 0x32, 0xa9, 0xc4, 0xee, 0x37, 0x66, 0x3c, 0x82, 0x81, 0x32,
	0x8b, 0x44, 0x6e, 0x90, 0xbc, 0x31, 0x14, 0x7d, 0x65, 0x5e, 0xc9, 0x0d, 0x36, 0x2e, 0x1d, 0xee,
	0xb8, 0x34, 0x48, 0x55, 0xfc, 0x76, 0x41, 0x85, 0xa0, 0x5c, 0x8d, 0x3b, 0xb8, 0x94, 0x65, 0xbf,
	0xec, 0x5a, 0xa7, 0x18, 0x42, 0xd9, 0x8f, 0x12, 0xfe, 0x12, 0x26, 0xdb, 0x17, 0xbf, 0x50, 0xc6,
	0x32, 0xbe, 0x63, 0x99, 0x49, 0xa3, 0xb1, 0xd9, 0x7a, 0xe6, 0xfc, 0xf7, 0x2e, 0x8c, 0xdc, 0xd9,
	0xab, 0xf2, 0x6b, 0xcb, 0x2e, 0x21, 0xd8, 0x5e, 0xe2, 0xa7, 0xe4, 0xb2, 0xd6, 0xa7, 0x22, 0x2a,
	0x4f, 0x5a, 0x17, 0x9d, 0x1f, 0xff, 0xfa, 0xc7, 0x9f, 0xbf, 0xf9, 0x47, 0x9c, 0xd1, 0xc7, 0xf7,
	0xf6, 0x6c, 0xe6, 0xf6, 0x37, 0xdb, 0xb8, 0xda, 0x17, 0xde, 0xc7, 0xec, 0x12, 0xa0, 0xc2, 0xea,
	0xc2, 0x96, 0x84, 0xdf, 0x26, 0x99, 0xbd, 0x13, 0x78, 0x53, 0xa0, 0xb1, 0xd1, 0xff, 0x5a, 0x27,
	0x26, 0xd3, 0xa9, 0x41, 0xfe, 0x9c, 0x18, 0x0f, 0xd9, 0xff, 0xff, 0xcd, 0xe8, 0x18, 0xe6, 0xd0,
	0xaf, 0x2e, 0xc4, 0x3e, 0x57, 0x3d, 0x5c, 0x73, 0x69, 0x1e, 0xa0, 0xca, 0x4b, 0x82, 0x39, 0x8c,
	0xda, 0x5e, 0xdd, 0xe7, 0x63, 0x15, 0x5f, 0x0b, 0xc5, 0x0f, 0x88, 0x71, 0xc2, 0xc6, 0x6d, 0x46,
	0xf6, 0x0d, 0xf4, 0x48, 0xd8, 0x87, 0x48, 0x76, 0x17, 0xc3, 0x0f, 0x89, 0xe4, 0x09, 0x7b, 0xdc,
	0x26, 0x31, 0xec, 0x02, 0xd8, 0x3d, 0xff, 0x95, 0x67, 0xd5, 0x12, 0xf6, 0x4b, 0xd1, 0xb3, 0x7a,
	0xc0, 0xbd, 0x12, 0x7f, 0xc4, 0x7e, 0x82, 0xa3, 0x87, 0x7e, 0x0c, 0x2f, 0xda, 0x94, 0xfb, 0xf5,
	0xe8, 0x45, 0x9b, 0x77, 0xbf, 0xce, 0x1f, 0x2d, 0xfb, 0xf4, 0x67, 0xfd, 0xf4, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x76, 0xe8, 0x6b, 0xa1, 0xab, 0x07, 0x00, 0x00,
}
