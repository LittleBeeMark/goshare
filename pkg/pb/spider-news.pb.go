// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spider-news.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NewsItemPage struct {
	Param    map[string]string `protobuf:"bytes,1,rep,name=param" json:"param" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PageSize int32             `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
	Count    int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count"`
	Start    int32             `protobuf:"varint,4,opt,name=start,proto3" json:"start"`
	Max      int32             `protobuf:"varint,5,opt,name=max,proto3" json:"max"`
	Result   []NewsItem        `protobuf:"bytes,6,rep,name=result" json:"result"`
}

func (m *NewsItemPage) Reset()                    { *m = NewsItemPage{} }
func (m *NewsItemPage) String() string            { return proto.CompactTextString(m) }
func (*NewsItemPage) ProtoMessage()               {}
func (*NewsItemPage) Descriptor() ([]byte, []int) { return fileDescriptorSpiderNews, []int{0} }

func (m *NewsItemPage) GetParam() map[string]string {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *NewsItemPage) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *NewsItemPage) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *NewsItemPage) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *NewsItemPage) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *NewsItemPage) GetResult() []NewsItem {
	if m != nil {
		return m.Result
	}
	return nil
}

type Arthur struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Pic  string `protobuf:"bytes,2,opt,name=pic,proto3" json:"pic"`
}

func (m *Arthur) Reset()                    { *m = Arthur{} }
func (m *Arthur) String() string            { return proto.CompactTextString(m) }
func (*Arthur) ProtoMessage()               {}
func (*Arthur) Descriptor() ([]byte, []int) { return fileDescriptorSpiderNews, []int{1} }

func (m *Arthur) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Arthur) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

type NewsItem struct {
	Category  string `protobuf:"bytes,1,opt,name=category,proto3" json:"category"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
	Time      int32  `protobuf:"varint,4,opt,name=time,proto3" json:"time"`
	DetailUrl string `protobuf:"bytes,5,opt,name=detailUrl,proto3" json:"detailUrl"`
	Arthur    Arthur `protobuf:"bytes,6,opt,name=arthur" json:"arthur"`
	Picture   string `protobuf:"bytes,7,opt,name=picture,proto3" json:"picture"`
}

func (m *NewsItem) Reset()                    { *m = NewsItem{} }
func (m *NewsItem) String() string            { return proto.CompactTextString(m) }
func (*NewsItem) ProtoMessage()               {}
func (*NewsItem) Descriptor() ([]byte, []int) { return fileDescriptorSpiderNews, []int{2} }

func (m *NewsItem) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *NewsItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NewsItem) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NewsItem) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *NewsItem) GetDetailUrl() string {
	if m != nil {
		return m.DetailUrl
	}
	return ""
}

func (m *NewsItem) GetArthur() Arthur {
	if m != nil {
		return m.Arthur
	}
	return Arthur{}
}

func (m *NewsItem) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

type NewsDetail struct {
	Url     string `protobuf:"bytes,1,opt,name=url,proto3" json:"url"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
	Html    string `protobuf:"bytes,4,opt,name=html,proto3" json:"html"`
}

func (m *NewsDetail) Reset()                    { *m = NewsDetail{} }
func (m *NewsDetail) String() string            { return proto.CompactTextString(m) }
func (*NewsDetail) ProtoMessage()               {}
func (*NewsDetail) Descriptor() ([]byte, []int) { return fileDescriptorSpiderNews, []int{3} }

func (m *NewsDetail) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NewsDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NewsDetail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NewsDetail) GetHtml() string {
	if m != nil {
		return m.Html
	}
	return ""
}

func init() {
	proto.RegisterType((*NewsItemPage)(nil), "pb.NewsItemPage")
	proto.RegisterType((*Arthur)(nil), "pb.Arthur")
	proto.RegisterType((*NewsItem)(nil), "pb.NewsItem")
	proto.RegisterType((*NewsDetail)(nil), "pb.NewsDetail")
}
func (m *NewsItemPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsItemPage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Param) > 0 {
		for k, _ := range m.Param {
			dAtA[i] = 0xa
			i++
			v := m.Param[k]
			mapSize := 1 + len(k) + sovSpiderNews(uint64(len(k))) + 1 + len(v) + sovSpiderNews(uint64(len(v)))
			i = encodeVarintSpiderNews(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpiderNews(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpiderNews(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(m.PageSize))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(m.Count))
	}
	if m.Start != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(m.Start))
	}
	if m.Max != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(m.Max))
	}
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSpiderNews(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Arthur) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arthur) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	return i, nil
}

func (m *NewsItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Category) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Time != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(m.Time))
	}
	if len(m.DetailUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.DetailUrl)))
		i += copy(dAtA[i:], m.DetailUrl)
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintSpiderNews(dAtA, i, uint64(m.Arthur.Size()))
	n1, err := m.Arthur.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Picture) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.Picture)))
		i += copy(dAtA[i:], m.Picture)
	}
	return i, nil
}

func (m *NewsDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Html) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpiderNews(dAtA, i, uint64(len(m.Html)))
		i += copy(dAtA[i:], m.Html)
	}
	return i, nil
}

func encodeFixed64SpiderNews(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SpiderNews(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSpiderNews(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NewsItemPage) Size() (n int) {
	var l int
	_ = l
	if len(m.Param) > 0 {
		for k, v := range m.Param {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpiderNews(uint64(len(k))) + 1 + len(v) + sovSpiderNews(uint64(len(v)))
			n += mapEntrySize + 1 + sovSpiderNews(uint64(mapEntrySize))
		}
	}
	if m.PageSize != 0 {
		n += 1 + sovSpiderNews(uint64(m.PageSize))
	}
	if m.Count != 0 {
		n += 1 + sovSpiderNews(uint64(m.Count))
	}
	if m.Start != 0 {
		n += 1 + sovSpiderNews(uint64(m.Start))
	}
	if m.Max != 0 {
		n += 1 + sovSpiderNews(uint64(m.Max))
	}
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovSpiderNews(uint64(l))
		}
	}
	return n
}

func (m *Arthur) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	return n
}

func (m *NewsItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovSpiderNews(uint64(m.Time))
	}
	l = len(m.DetailUrl)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	l = m.Arthur.Size()
	n += 1 + l + sovSpiderNews(uint64(l))
	l = len(m.Picture)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	return n
}

func (m *NewsDetail) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	l = len(m.Html)
	if l > 0 {
		n += 1 + l + sovSpiderNews(uint64(l))
	}
	return n
}

func sovSpiderNews(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpiderNews(x uint64) (n int) {
	return sovSpiderNews(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewsItemPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpiderNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsItemPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsItemPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Param == nil {
				m.Param = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpiderNews
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpiderNews
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSpiderNews
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Param[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Param[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, NewsItem{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpiderNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpiderNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arthur) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpiderNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arthur: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arthur: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpiderNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpiderNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewsItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpiderNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arthur", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Arthur.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Picture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Picture = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpiderNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpiderNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewsDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpiderNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Html", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpiderNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Html = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpiderNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpiderNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpiderNews(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpiderNews
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpiderNews
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpiderNews
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpiderNews
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpiderNews(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpiderNews = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpiderNews   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("spider-news.proto", fileDescriptorSpiderNews) }

var fileDescriptorSpiderNews = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xb1, 0xae, 0xd3, 0x30,
	0x14, 0xc5, 0x6d, 0x93, 0x36, 0xb7, 0x1d, 0x8a, 0xc5, 0x60, 0x15, 0x14, 0x45, 0x11, 0x43, 0x16,
	0x22, 0x51, 0x96, 0x8a, 0x0d, 0x04, 0x03, 0x0b, 0xaa, 0x8c, 0xf8, 0x00, 0x27, 0xb5, 0xda, 0x08,
	0x27, 0xb1, 0x9c, 0x1b, 0x4a, 0xf9, 0x0a, 0xbe, 0x0a, 0x31, 0xf2, 0x09, 0x4f, 0x7d, 0x9f, 0xf1,
	0x96, 0x27, 0x3b, 0x49, 0xdb, 0xf9, 0x6d, 0xe7, 0xdc, 0xeb, 0x7b, 0xcf, 0xb9, 0x47, 0x86, 0xe7,
	0x8d, 0x2e, 0x76, 0xd2, 0xbc, 0xa9, 0xe4, 0xb1, 0x49, 0xb5, 0xa9, 0xb1, 0xa6, 0x23, 0x9d, 0xc5,
	0x0f, 0x04, 0x16, 0x5f, 0xe5, 0xb1, 0xf9, 0x82, 0xb2, 0xdc, 0x8a, 0xbd, 0xa4, 0x6f, 0xc1, 0xd3,
	0xc2, 0x88, 0x92, 0x91, 0x68, 0x9c, 0xcc, 0xd7, 0x2f, 0x53, 0x9d, 0xa5, 0xb7, 0x0f, 0xd2, 0xad,
	0xed, 0x7e, 0xae, 0xd0, 0x9c, 0x78, 0xf7, 0x92, 0xae, 0x60, 0xa6, 0xc5, 0x5e, 0x7e, 0x2b, 0x7e,
	0x4b, 0x36, 0x8a, 0x48, 0xe2, 0xf1, 0x0b, 0xa7, 0x2f, 0xc0, 0xcb, 0xeb, 0xb6, 0x42, 0x36, 0x76,
	0x8d, 0x8e, 0xd8, 0x6a, 0x83, 0xc2, 0x20, 0x9b, 0x74, 0x55, 0x47, 0xe8, 0x12, 0xc6, 0xa5, 0xf8,
	0xc5, 0x3c, 0x57, 0xb3, 0x90, 0xbe, 0x06, 0xdf, 0xc8, 0xa6, 0x55, 0xc8, 0x7c, 0xe7, 0x66, 0x71,
	0xeb, 0x86, 0xf7, 0xbd, 0xd5, 0x06, 0xe0, 0x6a, 0xca, 0x6e, 0xf9, 0x21, 0x4f, 0x8c, 0x44, 0x24,
	0x09, 0xb8, 0x85, 0x56, 0xed, 0xa7, 0x50, 0x6d, 0x67, 0x2e, 0xe0, 0x1d, 0x79, 0x3f, 0xda, 0x90,
	0x38, 0x05, 0xff, 0x83, 0xc1, 0x43, 0x6b, 0x28, 0x85, 0x49, 0x25, 0x4a, 0xd9, 0x8f, 0x39, 0x6c,
	0x37, 0xe9, 0x22, 0xef, 0xa7, 0x2c, 0x8c, 0xff, 0x12, 0x98, 0x0d, 0xf2, 0xf6, 0xec, 0x5c, 0xa0,
	0xdc, 0xd7, 0x66, 0x50, 0xbb, 0x70, 0x2b, 0x89, 0x05, 0xaa, 0x8b, 0xa4, 0x23, 0x94, 0xc1, 0x34,
	0xaf, 0x2b, 0x94, 0x7d, 0x1c, 0x01, 0x1f, 0xa8, 0x95, 0xc7, 0xa2, 0x94, 0x7d, 0x1e, 0x0e, 0xd3,
	0x57, 0x10, 0xec, 0x24, 0x8a, 0x42, 0x7d, 0x37, 0xca, 0x85, 0x12, 0xf0, 0x6b, 0x81, 0xc6, 0xe0,
	0x0b, 0x67, 0x9d, 0xf9, 0x11, 0x49, 0xe6, 0x6b, 0xb0, 0xd1, 0x74, 0xc7, 0xf0, 0xbe, 0x63, 0xf5,
	0x74, 0x91, 0x63, 0x6b, 0x24, 0x9b, 0x76, 0x7a, 0x3d, 0x8d, 0x33, 0x00, 0x7b, 0xc7, 0x27, 0xb7,
	0xce, 0x1e, 0xda, 0x1a, 0x35, 0x44, 0xd6, 0x1a, 0xf5, 0x14, 0xff, 0x07, 0x2c, 0x95, 0xf3, 0x1f,
	0x70, 0x87, 0x3f, 0x2e, 0xff, 0x9d, 0x43, 0xf2, 0xff, 0x1c, 0x92, 0xbb, 0x73, 0x48, 0xfe, 0xdc,
	0x87, 0xcf, 0x32, 0xdf, 0xfd, 0xbb, 0x77, 0x8f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x62, 0xa1, 0x3c,
	0x6c, 0x8c, 0x02, 0x00, 0x00,
}
