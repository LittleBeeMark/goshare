// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: others.proto

package aproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NetInAmountDetail struct {
	Amount     float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount"`
	Percentage float64 `protobuf:"fixed64,2,opt,name=percentage,proto3" json:"percentage"`
}

func (m *NetInAmountDetail) Reset()                    { *m = NetInAmountDetail{} }
func (m *NetInAmountDetail) String() string            { return proto.CompactTextString(m) }
func (*NetInAmountDetail) ProtoMessage()               {}
func (*NetInAmountDetail) Descriptor() ([]byte, []int) { return fileDescriptorOthers, []int{0} }

func (m *NetInAmountDetail) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *NetInAmountDetail) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

type RealtimeMoneyTrendItem struct {
	Symbol           Symbol  `protobuf:"bytes,1,opt,name=symbol" json:"symbol"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Price            float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price"`
	UpdownPercentage float64 `protobuf:"fixed64,4,opt,name=updown_percentage,json=updownPercentage,proto3" json:"updownPercentage"`
	Time             int64   `protobuf:"varint,6,opt,name=time,proto3" json:"time"`
	// 主力净流入
	SuperSuperBigOrder NetInAmountDetail `protobuf:"bytes,7,opt,name=super_super_big_order,json=superSuperBigOrder" json:"superSuperBigOrder"`
	// 超大单净流入
	SuperBigOrder NetInAmountDetail `protobuf:"bytes,8,opt,name=super_big_order,json=superBigOrder" json:"superBigOrder"`
	// 大单净流入
	BigOrder NetInAmountDetail `protobuf:"bytes,9,opt,name=big_order,json=bigOrder" json:"bigOrder"`
	// 中单净流入
	MiddleOrder NetInAmountDetail `protobuf:"bytes,10,opt,name=middle_order,json=middleOrder" json:"middleOrder"`
	// 小单净流入
	SmallOrder NetInAmountDetail `protobuf:"bytes,11,opt,name=small_order,json=smallOrder" json:"smallOrder"`
}

func (m *RealtimeMoneyTrendItem) Reset()                    { *m = RealtimeMoneyTrendItem{} }
func (m *RealtimeMoneyTrendItem) String() string            { return proto.CompactTextString(m) }
func (*RealtimeMoneyTrendItem) ProtoMessage()               {}
func (*RealtimeMoneyTrendItem) Descriptor() ([]byte, []int) { return fileDescriptorOthers, []int{1} }

func (m *RealtimeMoneyTrendItem) GetSymbol() Symbol {
	if m != nil {
		return m.Symbol
	}
	return Symbol{}
}

func (m *RealtimeMoneyTrendItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RealtimeMoneyTrendItem) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *RealtimeMoneyTrendItem) GetUpdownPercentage() float64 {
	if m != nil {
		return m.UpdownPercentage
	}
	return 0
}

func (m *RealtimeMoneyTrendItem) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RealtimeMoneyTrendItem) GetSuperSuperBigOrder() NetInAmountDetail {
	if m != nil {
		return m.SuperSuperBigOrder
	}
	return NetInAmountDetail{}
}

func (m *RealtimeMoneyTrendItem) GetSuperBigOrder() NetInAmountDetail {
	if m != nil {
		return m.SuperBigOrder
	}
	return NetInAmountDetail{}
}

func (m *RealtimeMoneyTrendItem) GetBigOrder() NetInAmountDetail {
	if m != nil {
		return m.BigOrder
	}
	return NetInAmountDetail{}
}

func (m *RealtimeMoneyTrendItem) GetMiddleOrder() NetInAmountDetail {
	if m != nil {
		return m.MiddleOrder
	}
	return NetInAmountDetail{}
}

func (m *RealtimeMoneyTrendItem) GetSmallOrder() NetInAmountDetail {
	if m != nil {
		return m.SmallOrder
	}
	return NetInAmountDetail{}
}

type RealtimeMoneyTrendItemList struct {
	List []RealtimeMoneyTrendItem `protobuf:"bytes,1,rep,name=list" json:"list"`
}

func (m *RealtimeMoneyTrendItemList) Reset()                    { *m = RealtimeMoneyTrendItemList{} }
func (m *RealtimeMoneyTrendItemList) String() string            { return proto.CompactTextString(m) }
func (*RealtimeMoneyTrendItemList) ProtoMessage()               {}
func (*RealtimeMoneyTrendItemList) Descriptor() ([]byte, []int) { return fileDescriptorOthers, []int{2} }

func (m *RealtimeMoneyTrendItemList) GetList() []RealtimeMoneyTrendItem {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*NetInAmountDetail)(nil), "aproto.NetInAmountDetail")
	proto.RegisterType((*RealtimeMoneyTrendItem)(nil), "aproto.RealtimeMoneyTrendItem")
	proto.RegisterType((*RealtimeMoneyTrendItemList)(nil), "aproto.RealtimeMoneyTrendItemList")
}
func (m *NetInAmountDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetInAmountDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Others(dAtA, i, uint64(math.Float64bits(float64(m.Amount))))
	}
	if m.Percentage != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Others(dAtA, i, uint64(math.Float64bits(float64(m.Percentage))))
	}
	return i, nil
}

func (m *RealtimeMoneyTrendItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealtimeMoneyTrendItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintOthers(dAtA, i, uint64(m.Symbol.Size()))
	n1, err := m.Symbol.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOthers(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Price != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Others(dAtA, i, uint64(math.Float64bits(float64(m.Price))))
	}
	if m.UpdownPercentage != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64Others(dAtA, i, uint64(math.Float64bits(float64(m.UpdownPercentage))))
	}
	if m.Time != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintOthers(dAtA, i, uint64(m.Time))
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintOthers(dAtA, i, uint64(m.SuperSuperBigOrder.Size()))
	n2, err := m.SuperSuperBigOrder.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x42
	i++
	i = encodeVarintOthers(dAtA, i, uint64(m.SuperBigOrder.Size()))
	n3, err := m.SuperBigOrder.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x4a
	i++
	i = encodeVarintOthers(dAtA, i, uint64(m.BigOrder.Size()))
	n4, err := m.BigOrder.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x52
	i++
	i = encodeVarintOthers(dAtA, i, uint64(m.MiddleOrder.Size()))
	n5, err := m.MiddleOrder.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x5a
	i++
	i = encodeVarintOthers(dAtA, i, uint64(m.SmallOrder.Size()))
	n6, err := m.SmallOrder.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *RealtimeMoneyTrendItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealtimeMoneyTrendItemList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOthers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Others(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Others(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOthers(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NetInAmountDetail) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 9
	}
	if m.Percentage != 0 {
		n += 9
	}
	return n
}

func (m *RealtimeMoneyTrendItem) Size() (n int) {
	var l int
	_ = l
	l = m.Symbol.Size()
	n += 1 + l + sovOthers(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOthers(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	if m.UpdownPercentage != 0 {
		n += 9
	}
	if m.Time != 0 {
		n += 1 + sovOthers(uint64(m.Time))
	}
	l = m.SuperSuperBigOrder.Size()
	n += 1 + l + sovOthers(uint64(l))
	l = m.SuperBigOrder.Size()
	n += 1 + l + sovOthers(uint64(l))
	l = m.BigOrder.Size()
	n += 1 + l + sovOthers(uint64(l))
	l = m.MiddleOrder.Size()
	n += 1 + l + sovOthers(uint64(l))
	l = m.SmallOrder.Size()
	n += 1 + l + sovOthers(uint64(l))
	return n
}

func (m *RealtimeMoneyTrendItemList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovOthers(uint64(l))
		}
	}
	return n
}

func sovOthers(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOthers(x uint64) (n int) {
	return sovOthers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetInAmountDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOthers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetInAmountDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetInAmountDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Amount = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Percentage = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOthers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOthers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealtimeMoneyTrendItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOthers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealtimeMoneyTrendItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealtimeMoneyTrendItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOthers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Symbol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOthers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Price = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdownPercentage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.UpdownPercentage = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperSuperBigOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOthers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SuperSuperBigOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperBigOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOthers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SuperBigOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOthers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BigOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddleOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOthers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MiddleOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOthers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SmallOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOthers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOthers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealtimeMoneyTrendItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOthers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealtimeMoneyTrendItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealtimeMoneyTrendItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOthers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, RealtimeMoneyTrendItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOthers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOthers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOthers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOthers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOthers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOthers
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOthers
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOthers(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOthers = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOthers   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("others.proto", fileDescriptorOthers) }

var fileDescriptorOthers = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4f, 0xe2, 0x40,
	0x18, 0xc6, 0xb7, 0x5b, 0xb6, 0x0b, 0x6f, 0xd9, 0x5d, 0x98, 0xac, 0xa4, 0x72, 0x68, 0x08, 0x07,
	0x43, 0x62, 0xc2, 0x01, 0x13, 0x0f, 0xc6, 0x0b, 0xc4, 0x0b, 0x11, 0x95, 0x14, 0xef, 0x64, 0x4a,
	0xdf, 0xe0, 0x24, 0x6d, 0xa7, 0x99, 0x19, 0x62, 0xf8, 0x16, 0x7e, 0x2c, 0x8f, 0x7e, 0x04, 0x83,
	0x77, 0x3f, 0x83, 0xe9, 0x4c, 0x51, 0x54, 0x92, 0x5e, 0xa6, 0xef, 0x9f, 0xe7, 0xf7, 0xf4, 0x49,
	0x3b, 0x50, 0xe7, 0xea, 0x0e, 0x85, 0xec, 0x67, 0x82, 0x2b, 0x4e, 0x1c, 0xaa, 0x9f, 0x6d, 0x08,
	0xa9, 0x44, 0x33, 0xeb, 0x5e, 0x42, 0xf3, 0x1a, 0xd5, 0x38, 0x1d, 0x26, 0x7c, 0x95, 0xaa, 0x0b,
	0x54, 0x94, 0xc5, 0xa4, 0x05, 0x0e, 0xd5, 0xbd, 0x67, 0x75, 0xac, 0x9e, 0x15, 0x14, 0x1d, 0xf1,
	0x01, 0x32, 0x14, 0x0b, 0x4c, 0x15, 0x5d, 0xa2, 0xf7, 0x53, 0xef, 0x76, 0x26, 0xdd, 0x57, 0x1b,
	0x5a, 0x01, 0xd2, 0x58, 0xb1, 0x04, 0xaf, 0x78, 0x8a, 0xeb, 0x5b, 0x81, 0x69, 0x34, 0x56, 0x98,
	0x90, 0x23, 0x70, 0xe4, 0x3a, 0x09, 0x79, 0xac, 0x2d, 0xdd, 0xc1, 0xdf, 0xbe, 0x09, 0xd3, 0x9f,
	0xe9, 0x69, 0x50, 0x6c, 0x09, 0x81, 0x4a, 0x4a, 0x13, 0x63, 0x5e, 0x0b, 0x74, 0x4d, 0xfe, 0xc3,
	0xaf, 0x4c, 0xb0, 0x05, 0x7a, 0xb6, 0x7e, 0xa3, 0x69, 0xc8, 0x31, 0x34, 0x57, 0x59, 0xc4, 0xef,
	0xd3, 0xf9, 0x4e, 0xa6, 0x8a, 0x56, 0x34, 0xcc, 0x62, 0xfa, 0x3e, 0xcf, 0x6d, 0xf3, 0x50, 0x9e,
	0xd3, 0xb1, 0x7a, 0x76, 0xa0, 0x6b, 0x32, 0x81, 0x03, 0xb9, 0xca, 0x50, 0xcc, 0xcd, 0x19, 0xb2,
	0xe5, 0x9c, 0x8b, 0x08, 0x85, 0xf7, 0x5b, 0x27, 0x3c, 0xdc, 0x26, 0xfc, 0xf6, 0x7d, 0x02, 0xa2,
	0x89, 0x59, 0x7e, 0x8c, 0xd8, 0xf2, 0x26, 0x87, 0xc8, 0x10, 0xfe, 0x7d, 0xf5, 0xa9, 0x96, 0xf9,
	0xfc, 0x91, 0x9f, 0x2c, 0x4e, 0xa1, 0xf6, 0x01, 0xd7, 0xca, 0xe0, 0x6a, 0xb8, 0xe5, 0xce, 0xa1,
	0x9e, 0xb0, 0x28, 0x8a, 0xb1, 0x40, 0xa1, 0x0c, 0x75, 0x8d, 0xdc, 0xd0, 0x67, 0xe0, 0xca, 0x84,
	0xc6, 0x71, 0x01, 0xbb, 0x65, 0x30, 0x68, 0xb5, 0x66, 0xbb, 0x53, 0x68, 0xef, 0xff, 0xdf, 0x13,
	0x26, 0x15, 0x19, 0x40, 0x25, 0x66, 0x32, 0xbf, 0x44, 0x76, 0xcf, 0x1d, 0xf8, 0x5b, 0xcb, 0xfd,
	0x44, 0xa0, 0xb5, 0xa3, 0xc6, 0xe3, 0xc6, 0xb7, 0x9e, 0x36, 0xbe, 0xf5, 0xbc, 0xf1, 0xad, 0x87,
	0x17, 0xff, 0x47, 0xe8, 0x68, 0xea, 0xe4, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x68, 0xc4, 0xf2, 0x3a,
	0xcc, 0x02, 0x00, 0x00,
}
